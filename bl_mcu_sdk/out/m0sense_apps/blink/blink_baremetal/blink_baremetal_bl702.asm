
D:/Documentos/REPOS/Github/M0Sense-BL702-Autocontenido/bl_mcu_sdk/out/m0sense_apps/blink/blink_baremetal/blink_baremetal_bl702.elf:     file format elf32-littleriscv


Disassembly of section .text:

23000000 <__text_code_start__>:
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
23000000:	1f017197          	auipc	gp,0x1f017
23000004:	80018193          	addi	gp,gp,-2048 # 42016800 <__global_pointer$>
.option pop

    /* Disable global interrupt */
    /*clear_csr(mstatus, MSTATUS_MIE);*/
    csrci mstatus,8
23000008:	30047073          	csrci	mstatus,8

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, Trap_Handler_Stub
2300000c:	00005297          	auipc	t0,0x5
23000010:	53428293          	addi	t0,t0,1332 # 23005540 <Trap_Handler_Stub>
    /* enable CLIC Vectored mode */
    ori	t0,t0,3
23000014:	0032e293          	ori	t0,t0,3
    csrw mtvec, t0
23000018:	30529073          	csrw	mtvec,t0
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
2300001c:	00000293          	li	t0,0
    beqz t0, 1f
23000020:	00028463          	beqz	t0,23000028 <__text_code_start__+0x28>
    csrwi 0x7C1, 0
23000024:	7c105073          	csrwi	0x7c1,0
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __StackTop
    la sp, __StackTop
23000028:	1f016117          	auipc	sp,0x1f016
2300002c:	fd810113          	addi	sp,sp,-40 # 42016000 <uartx_device>

    /* Intial the mtvt, MUST BE 64 bytes aligned*/
    .weak __Vectors
    la t0, __Vectors
23000030:	00000297          	auipc	t0,0x0
23000034:	05028293          	addi	t0,t0,80 # 23000080 <__Vectors>
    // From drivers/bl702_driver/risc-v/Core/Include/riscv_encoding.h
    csrw CSR_MTVT, t0
23000038:	30729073          	csrw	mtvt,t0

#ifdef __riscv_float_abi_single
    /* deal with FP */
    /* Is F extension present? */
    csrr t0, misa
2300003c:	301022f3          	csrr	t0,misa
    andi t0, t0, (1 << ('F' - 'A'))
23000040:	0202f293          	andi	t0,t0,32
    beqz t0, 1f
23000044:	00028763          	beqz	t0,23000052 <__text_code_start__+0x52>
    /* If so, enable it */
    li t0, MSTATUS_FS
23000048:	6299                	lui	t0,0x6
    csrs mstatus, t0
2300004a:	3002a073          	csrs	mstatus,t0
    fssr x0
2300004e:	00301073          	fscsr	zero
     * just skip over the call entirely.   Note that __metal_initialize isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    call SystemInit
23000052:	5e2050ef          	jal	ra,23005634 <SystemInit>

    /* start load code to itcm like. */
    call start_load
23000056:	18c050ef          	jal	ra,230051e2 <start_load>

    jal System_Post_Init
2300005a:	6a8050ef          	jal	ra,23005702 <System_Post_Init>
    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2300005e:	f1402573          	csrr	a0,mhartid
    li a1, 0
23000062:	4581                	li	a1,0
    li a2, 0
23000064:	4601                	li	a2,0
    call main
23000066:	6d9020ef          	jal	ra,23002f3e <main>

    csrci mstatus, (1 << 3)
2300006a:	30047073          	csrci	mstatus,8

2300006e <__exit>:

__exit:
    j __exit
2300006e:	a001                	j	2300006e <__exit>
	...

23000080 <__Vectors>:
	...
2300008c:	5486 2300 0000 0000 0000 0000 0000 0000     .T.#............
2300009c:	5486 2300 0001 0000 0000 0000 0102 0000     .T.#............
230000ac:	5486 2300 5486 2300 0000 0000 0000 0000     .T.#.T.#........
230000bc:	0000 0000 5486 2300 5486 2300 5486 2300     .....T.#.T.#.T.#
230000cc:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
230000dc:	0000 0000 5486 2300 5486 2300 5486 2300     .....T.#.T.#.T.#
230000ec:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
230000fc:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
2300010c:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
2300011c:	5486 2300 0000 0000 5486 2300 5486 2300     .T.#.....T.#.T.#
2300012c:	5486 2300 0000 0000 5486 2300 5486 2300     .T.#.....T.#.T.#
2300013c:	0000 0000 5486 2300 0000 0000 5486 2300     .....T.#.....T.#
2300014c:	0000 0000 5486 2300 5486 2300 5486 2300     .....T.#.T.#.T.#
2300015c:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
2300016c:	0000 0000 5486 2300 5486 2300 0000 0000     .....T.#.T.#....
2300017c:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
2300018c:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
2300019c:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
230001ac:	5486 2300 5486 2300 5486 2300 5486 2300     .T.#.T.#.T.#.T.#
230001bc:	5486 2300 0000 0000                         .T.#....

230001c4 <__fsym___cmd_memtrace>:
230001c4:	d2b4 2300 b5ac 2300                         ...#...#

230001cc <__fsym___cmd_help>:
230001cc:	d2a8 2300 b45e 2300                         ...#^..#

230001d4 <cdc_descriptor>:
230001d4:	0112 0200 0202 4001 ffff ffff 0100 0201     .......@........
230001e4:	0103 0209 004b 0102 8000 0832 000b 0202     ....K.....2.....
230001f4:	0102 0900 0004 0100 0202 0201 2405 1000     .............$..
23000204:	0501 0124 0100 2404 0202 2405 0006 0701     ..$....$...$....
23000214:	8305 4003 0000 0409 0001 0a02 0000 0700     ...@............
23000224:	0105 4002 0000 0507 0282 0040 0400 0903     ...@......@.....
23000234:	1204 4203 6f00 7500 6600 6600 6100 6c00     ...B.o.u.f.f.a.l
23000244:	6f00 2400 4203 6f00 7500 6600 6600 6100     .o.$.B.o.u.f.f.a
23000254:	6c00 6f00 2000 4300 4400 4300 2000 4400     .l.o. .C.D.C. .D
23000264:	4500 4d00 4f00 1600 3203 3000 3200 3100     .E.M.O...2.0.2.1
23000274:	3000 3300 3100 3000 3000 3000 0000 0000     .0.3.1.0.0.0....

23000284 <memset>:
23000284:	433d                	li	t1,15
23000286:	872a                	mv	a4,a0
23000288:	02c37363          	bgeu	t1,a2,230002ae <memset+0x2a>
2300028c:	00f77793          	andi	a5,a4,15
23000290:	efbd                	bnez	a5,2300030e <memset+0x8a>
23000292:	e5ad                	bnez	a1,230002fc <memset+0x78>
23000294:	ff067693          	andi	a3,a2,-16
23000298:	8a3d                	andi	a2,a2,15
2300029a:	96ba                	add	a3,a3,a4
2300029c:	c30c                	sw	a1,0(a4)
2300029e:	c34c                	sw	a1,4(a4)
230002a0:	c70c                	sw	a1,8(a4)
230002a2:	c74c                	sw	a1,12(a4)
230002a4:	0741                	addi	a4,a4,16
230002a6:	fed76be3          	bltu	a4,a3,2300029c <memset+0x18>
230002aa:	e211                	bnez	a2,230002ae <memset+0x2a>
230002ac:	8082                	ret
230002ae:	40c306b3          	sub	a3,t1,a2
230002b2:	068a                	slli	a3,a3,0x2
230002b4:	00000297          	auipc	t0,0x0
230002b8:	9696                	add	a3,a3,t0
230002ba:	00a68067          	jr	10(a3)
230002be:	00b70723          	sb	a1,14(a4)
230002c2:	00b706a3          	sb	a1,13(a4)
230002c6:	00b70623          	sb	a1,12(a4)
230002ca:	00b705a3          	sb	a1,11(a4)
230002ce:	00b70523          	sb	a1,10(a4)
230002d2:	00b704a3          	sb	a1,9(a4)
230002d6:	00b70423          	sb	a1,8(a4)
230002da:	00b703a3          	sb	a1,7(a4)
230002de:	00b70323          	sb	a1,6(a4)
230002e2:	00b702a3          	sb	a1,5(a4)
230002e6:	00b70223          	sb	a1,4(a4)
230002ea:	00b701a3          	sb	a1,3(a4)
230002ee:	00b70123          	sb	a1,2(a4)
230002f2:	00b700a3          	sb	a1,1(a4)
230002f6:	00b70023          	sb	a1,0(a4)
230002fa:	8082                	ret
230002fc:	0ff5f593          	zext.b	a1,a1
23000300:	00859693          	slli	a3,a1,0x8
23000304:	8dd5                	or	a1,a1,a3
23000306:	01059693          	slli	a3,a1,0x10
2300030a:	8dd5                	or	a1,a1,a3
2300030c:	b761                	j	23000294 <memset+0x10>
2300030e:	00279693          	slli	a3,a5,0x2
23000312:	00000297          	auipc	t0,0x0
23000316:	9696                	add	a3,a3,t0
23000318:	8286                	mv	t0,ra
2300031a:	fa8680e7          	jalr	-88(a3)
2300031e:	8096                	mv	ra,t0
23000320:	17c1                	addi	a5,a5,-16
23000322:	8f1d                	sub	a4,a4,a5
23000324:	963e                	add	a2,a2,a5
23000326:	f8c374e3          	bgeu	t1,a2,230002ae <memset+0x2a>
2300032a:	b7a5                	j	23000292 <memset+0xe>

2300032c <__ctzsi2>:
2300032c:	40a007b3          	neg	a5,a0
23000330:	8d7d                	and	a0,a0,a5
23000332:	67c1                	lui	a5,0x10
23000334:	02f57363          	bgeu	a0,a5,2300035a <__ctzsi2+0x2e>
23000338:	0ff00793          	li	a5,255
2300033c:	00a7b7b3          	sltu	a5,a5,a0
23000340:	078e                	slli	a5,a5,0x3
23000342:	00f55533          	srl	a0,a0,a5
23000346:	0000d717          	auipc	a4,0xd
2300034a:	f7e70713          	addi	a4,a4,-130 # 2300d2c4 <__clz_tab>
2300034e:	953a                	add	a0,a0,a4
23000350:	00054503          	lbu	a0,0(a0)
23000354:	17fd                	addi	a5,a5,-1
23000356:	953e                	add	a0,a0,a5
23000358:	8082                	ret
2300035a:	01000737          	lui	a4,0x1000
2300035e:	47c1                	li	a5,16
23000360:	fee561e3          	bltu	a0,a4,23000342 <__ctzsi2+0x16>
23000364:	47e1                	li	a5,24
23000366:	bff1                	j	23000342 <__ctzsi2+0x16>

23000368 <__udivdi3>:
23000368:	88aa                	mv	a7,a0
2300036a:	87ae                	mv	a5,a1
2300036c:	8832                	mv	a6,a2
2300036e:	8536                	mv	a0,a3
23000370:	8346                	mv	t1,a7
23000372:	20069663          	bnez	a3,2300057e <__udivdi3+0x216>
23000376:	0000d697          	auipc	a3,0xd
2300037a:	f4e68693          	addi	a3,a3,-178 # 2300d2c4 <__clz_tab>
2300037e:	0ac5ff63          	bgeu	a1,a2,2300043c <__udivdi3+0xd4>
23000382:	6741                	lui	a4,0x10
23000384:	0ae67563          	bgeu	a2,a4,2300042e <__udivdi3+0xc6>
23000388:	0ff00713          	li	a4,255
2300038c:	00c73733          	sltu	a4,a4,a2
23000390:	070e                	slli	a4,a4,0x3
23000392:	00e65533          	srl	a0,a2,a4
23000396:	96aa                	add	a3,a3,a0
23000398:	0006c683          	lbu	a3,0(a3)
2300039c:	02000513          	li	a0,32
230003a0:	9736                	add	a4,a4,a3
230003a2:	40e506b3          	sub	a3,a0,a4
230003a6:	00e50b63          	beq	a0,a4,230003bc <__udivdi3+0x54>
230003aa:	00d795b3          	sll	a1,a5,a3
230003ae:	00e8d733          	srl	a4,a7,a4
230003b2:	00d61833          	sll	a6,a2,a3
230003b6:	8dd9                	or	a1,a1,a4
230003b8:	00d89333          	sll	t1,a7,a3
230003bc:	01085893          	srli	a7,a6,0x10
230003c0:	0315d6b3          	divu	a3,a1,a7
230003c4:	01081613          	slli	a2,a6,0x10
230003c8:	8241                	srli	a2,a2,0x10
230003ca:	01035793          	srli	a5,t1,0x10
230003ce:	0315f733          	remu	a4,a1,a7
230003d2:	8536                	mv	a0,a3
230003d4:	02d605b3          	mul	a1,a2,a3
230003d8:	0742                	slli	a4,a4,0x10
230003da:	8fd9                	or	a5,a5,a4
230003dc:	00b7fc63          	bgeu	a5,a1,230003f4 <__udivdi3+0x8c>
230003e0:	97c2                	add	a5,a5,a6
230003e2:	fff68513          	addi	a0,a3,-1
230003e6:	0107e763          	bltu	a5,a6,230003f4 <__udivdi3+0x8c>
230003ea:	00b7f563          	bgeu	a5,a1,230003f4 <__udivdi3+0x8c>
230003ee:	ffe68513          	addi	a0,a3,-2
230003f2:	97c2                	add	a5,a5,a6
230003f4:	8f8d                	sub	a5,a5,a1
230003f6:	0317f733          	remu	a4,a5,a7
230003fa:	0342                	slli	t1,t1,0x10
230003fc:	01035313          	srli	t1,t1,0x10
23000400:	0317d7b3          	divu	a5,a5,a7
23000404:	0742                	slli	a4,a4,0x10
23000406:	00676333          	or	t1,a4,t1
2300040a:	02f606b3          	mul	a3,a2,a5
2300040e:	863e                	mv	a2,a5
23000410:	00d37b63          	bgeu	t1,a3,23000426 <__udivdi3+0xbe>
23000414:	9342                	add	t1,t1,a6
23000416:	fff78613          	addi	a2,a5,-1 # ffff <StackSize+0xefff>
2300041a:	01036663          	bltu	t1,a6,23000426 <__udivdi3+0xbe>
2300041e:	00d37463          	bgeu	t1,a3,23000426 <__udivdi3+0xbe>
23000422:	ffe78613          	addi	a2,a5,-2
23000426:	0542                	slli	a0,a0,0x10
23000428:	8d51                	or	a0,a0,a2
2300042a:	4581                	li	a1,0
2300042c:	a85d                	j	230004e2 <__udivdi3+0x17a>
2300042e:	01000537          	lui	a0,0x1000
23000432:	4741                	li	a4,16
23000434:	f4a66fe3          	bltu	a2,a0,23000392 <__udivdi3+0x2a>
23000438:	4761                	li	a4,24
2300043a:	bfa1                	j	23000392 <__udivdi3+0x2a>
2300043c:	e601                	bnez	a2,23000444 <__udivdi3+0xdc>
2300043e:	4705                	li	a4,1
23000440:	02c75833          	divu	a6,a4,a2
23000444:	6741                	lui	a4,0x10
23000446:	08e87f63          	bgeu	a6,a4,230004e4 <__udivdi3+0x17c>
2300044a:	0ff00713          	li	a4,255
2300044e:	01077363          	bgeu	a4,a6,23000454 <__udivdi3+0xec>
23000452:	4521                	li	a0,8
23000454:	00a85733          	srl	a4,a6,a0
23000458:	96ba                	add	a3,a3,a4
2300045a:	0006c703          	lbu	a4,0(a3)
2300045e:	02000613          	li	a2,32
23000462:	972a                	add	a4,a4,a0
23000464:	40e606b3          	sub	a3,a2,a4
23000468:	08e61563          	bne	a2,a4,230004f2 <__udivdi3+0x18a>
2300046c:	410787b3          	sub	a5,a5,a6
23000470:	4585                	li	a1,1
23000472:	01085893          	srli	a7,a6,0x10
23000476:	01081613          	slli	a2,a6,0x10
2300047a:	8241                	srli	a2,a2,0x10
2300047c:	01035713          	srli	a4,t1,0x10
23000480:	0317f6b3          	remu	a3,a5,a7
23000484:	0317d7b3          	divu	a5,a5,a7
23000488:	06c2                	slli	a3,a3,0x10
2300048a:	8f55                	or	a4,a4,a3
2300048c:	02f60e33          	mul	t3,a2,a5
23000490:	853e                	mv	a0,a5
23000492:	01c77c63          	bgeu	a4,t3,230004aa <__udivdi3+0x142>
23000496:	9742                	add	a4,a4,a6
23000498:	fff78513          	addi	a0,a5,-1
2300049c:	01076763          	bltu	a4,a6,230004aa <__udivdi3+0x142>
230004a0:	01c77563          	bgeu	a4,t3,230004aa <__udivdi3+0x142>
230004a4:	ffe78513          	addi	a0,a5,-2
230004a8:	9742                	add	a4,a4,a6
230004aa:	41c70733          	sub	a4,a4,t3
230004ae:	031777b3          	remu	a5,a4,a7
230004b2:	0342                	slli	t1,t1,0x10
230004b4:	01035313          	srli	t1,t1,0x10
230004b8:	03175733          	divu	a4,a4,a7
230004bc:	07c2                	slli	a5,a5,0x10
230004be:	0067e333          	or	t1,a5,t1
230004c2:	02e606b3          	mul	a3,a2,a4
230004c6:	863a                	mv	a2,a4
230004c8:	00d37b63          	bgeu	t1,a3,230004de <__udivdi3+0x176>
230004cc:	9342                	add	t1,t1,a6
230004ce:	fff70613          	addi	a2,a4,-1 # ffff <StackSize+0xefff>
230004d2:	01036663          	bltu	t1,a6,230004de <__udivdi3+0x176>
230004d6:	00d37463          	bgeu	t1,a3,230004de <__udivdi3+0x176>
230004da:	ffe70613          	addi	a2,a4,-2
230004de:	0542                	slli	a0,a0,0x10
230004e0:	8d51                	or	a0,a0,a2
230004e2:	8082                	ret
230004e4:	01000737          	lui	a4,0x1000
230004e8:	4541                	li	a0,16
230004ea:	f6e865e3          	bltu	a6,a4,23000454 <__udivdi3+0xec>
230004ee:	4561                	li	a0,24
230004f0:	b795                	j	23000454 <__udivdi3+0xec>
230004f2:	00d81833          	sll	a6,a6,a3
230004f6:	00e7d533          	srl	a0,a5,a4
230004fa:	00d89333          	sll	t1,a7,a3
230004fe:	00d797b3          	sll	a5,a5,a3
23000502:	00e8d733          	srl	a4,a7,a4
23000506:	01085893          	srli	a7,a6,0x10
2300050a:	00f76633          	or	a2,a4,a5
2300050e:	03157733          	remu	a4,a0,a7
23000512:	01081793          	slli	a5,a6,0x10
23000516:	83c1                	srli	a5,a5,0x10
23000518:	01065593          	srli	a1,a2,0x10
2300051c:	03155533          	divu	a0,a0,a7
23000520:	0742                	slli	a4,a4,0x10
23000522:	8f4d                	or	a4,a4,a1
23000524:	02a786b3          	mul	a3,a5,a0
23000528:	85aa                	mv	a1,a0
2300052a:	00d77c63          	bgeu	a4,a3,23000542 <__udivdi3+0x1da>
2300052e:	9742                	add	a4,a4,a6
23000530:	fff50593          	addi	a1,a0,-1 # ffffff <StackSize+0xffefff>
23000534:	01076763          	bltu	a4,a6,23000542 <__udivdi3+0x1da>
23000538:	00d77563          	bgeu	a4,a3,23000542 <__udivdi3+0x1da>
2300053c:	ffe50593          	addi	a1,a0,-2
23000540:	9742                	add	a4,a4,a6
23000542:	40d706b3          	sub	a3,a4,a3
23000546:	0316f733          	remu	a4,a3,a7
2300054a:	0642                	slli	a2,a2,0x10
2300054c:	8241                	srli	a2,a2,0x10
2300054e:	0316d6b3          	divu	a3,a3,a7
23000552:	0742                	slli	a4,a4,0x10
23000554:	02d78533          	mul	a0,a5,a3
23000558:	00c767b3          	or	a5,a4,a2
2300055c:	8736                	mv	a4,a3
2300055e:	00a7fc63          	bgeu	a5,a0,23000576 <__udivdi3+0x20e>
23000562:	97c2                	add	a5,a5,a6
23000564:	fff68713          	addi	a4,a3,-1
23000568:	0107e763          	bltu	a5,a6,23000576 <__udivdi3+0x20e>
2300056c:	00a7f563          	bgeu	a5,a0,23000576 <__udivdi3+0x20e>
23000570:	ffe68713          	addi	a4,a3,-2
23000574:	97c2                	add	a5,a5,a6
23000576:	05c2                	slli	a1,a1,0x10
23000578:	8f89                	sub	a5,a5,a0
2300057a:	8dd9                	or	a1,a1,a4
2300057c:	bddd                	j	23000472 <__udivdi3+0x10a>
2300057e:	14d5e263          	bltu	a1,a3,230006c2 <__udivdi3+0x35a>
23000582:	6741                	lui	a4,0x10
23000584:	02e6ff63          	bgeu	a3,a4,230005c2 <__udivdi3+0x25a>
23000588:	0ff00713          	li	a4,255
2300058c:	00d735b3          	sltu	a1,a4,a3
23000590:	058e                	slli	a1,a1,0x3
23000592:	00b6d533          	srl	a0,a3,a1
23000596:	0000d717          	auipc	a4,0xd
2300059a:	d2e70713          	addi	a4,a4,-722 # 2300d2c4 <__clz_tab>
2300059e:	972a                	add	a4,a4,a0
230005a0:	00074703          	lbu	a4,0(a4)
230005a4:	02000513          	li	a0,32
230005a8:	972e                	add	a4,a4,a1
230005aa:	40e505b3          	sub	a1,a0,a4
230005ae:	02e51163          	bne	a0,a4,230005d0 <__udivdi3+0x268>
230005b2:	4505                	li	a0,1
230005b4:	f2f6e7e3          	bltu	a3,a5,230004e2 <__udivdi3+0x17a>
230005b8:	00c8b533          	sltu	a0,a7,a2
230005bc:	00154513          	xori	a0,a0,1
230005c0:	b70d                	j	230004e2 <__udivdi3+0x17a>
230005c2:	01000737          	lui	a4,0x1000
230005c6:	45c1                	li	a1,16
230005c8:	fce6e5e3          	bltu	a3,a4,23000592 <__udivdi3+0x22a>
230005cc:	45e1                	li	a1,24
230005ce:	b7d1                	j	23000592 <__udivdi3+0x22a>
230005d0:	00e65833          	srl	a6,a2,a4
230005d4:	00b696b3          	sll	a3,a3,a1
230005d8:	00d86833          	or	a6,a6,a3
230005dc:	00e7d333          	srl	t1,a5,a4
230005e0:	01085e93          	srli	t4,a6,0x10
230005e4:	03d376b3          	remu	a3,t1,t4
230005e8:	00b797b3          	sll	a5,a5,a1
230005ec:	00e8d733          	srl	a4,a7,a4
230005f0:	00b61e33          	sll	t3,a2,a1
230005f4:	00f76633          	or	a2,a4,a5
230005f8:	01081793          	slli	a5,a6,0x10
230005fc:	83c1                	srli	a5,a5,0x10
230005fe:	01065713          	srli	a4,a2,0x10
23000602:	03d35333          	divu	t1,t1,t4
23000606:	06c2                	slli	a3,a3,0x10
23000608:	8f55                	or	a4,a4,a3
2300060a:	02678f33          	mul	t5,a5,t1
2300060e:	851a                	mv	a0,t1
23000610:	01e77c63          	bgeu	a4,t5,23000628 <__udivdi3+0x2c0>
23000614:	9742                	add	a4,a4,a6
23000616:	fff30513          	addi	a0,t1,-1
2300061a:	01076763          	bltu	a4,a6,23000628 <__udivdi3+0x2c0>
2300061e:	01e77563          	bgeu	a4,t5,23000628 <__udivdi3+0x2c0>
23000622:	ffe30513          	addi	a0,t1,-2
23000626:	9742                	add	a4,a4,a6
23000628:	41e70733          	sub	a4,a4,t5
2300062c:	03d776b3          	remu	a3,a4,t4
23000630:	03d75733          	divu	a4,a4,t4
23000634:	06c2                	slli	a3,a3,0x10
23000636:	02e78333          	mul	t1,a5,a4
2300063a:	01061793          	slli	a5,a2,0x10
2300063e:	83c1                	srli	a5,a5,0x10
23000640:	8fd5                	or	a5,a5,a3
23000642:	863a                	mv	a2,a4
23000644:	0067fc63          	bgeu	a5,t1,2300065c <__udivdi3+0x2f4>
23000648:	97c2                	add	a5,a5,a6
2300064a:	fff70613          	addi	a2,a4,-1 # ffffff <StackSize+0xffefff>
2300064e:	0107e763          	bltu	a5,a6,2300065c <__udivdi3+0x2f4>
23000652:	0067f563          	bgeu	a5,t1,2300065c <__udivdi3+0x2f4>
23000656:	ffe70613          	addi	a2,a4,-2
2300065a:	97c2                	add	a5,a5,a6
2300065c:	0542                	slli	a0,a0,0x10
2300065e:	6ec1                	lui	t4,0x10
23000660:	8d51                	or	a0,a0,a2
23000662:	fffe8693          	addi	a3,t4,-1 # ffff <StackSize+0xefff>
23000666:	010e5613          	srli	a2,t3,0x10
2300066a:	01055813          	srli	a6,a0,0x10
2300066e:	406787b3          	sub	a5,a5,t1
23000672:	00d57333          	and	t1,a0,a3
23000676:	00de76b3          	and	a3,t3,a3
2300067a:	02d30e33          	mul	t3,t1,a3
2300067e:	02d806b3          	mul	a3,a6,a3
23000682:	010e5713          	srli	a4,t3,0x10
23000686:	02c30333          	mul	t1,t1,a2
2300068a:	9336                	add	t1,t1,a3
2300068c:	971a                	add	a4,a4,t1
2300068e:	02c80833          	mul	a6,a6,a2
23000692:	00d77363          	bgeu	a4,a3,23000698 <__udivdi3+0x330>
23000696:	9876                	add	a6,a6,t4
23000698:	01075693          	srli	a3,a4,0x10
2300069c:	9836                	add	a6,a6,a3
2300069e:	0307e063          	bltu	a5,a6,230006be <__udivdi3+0x356>
230006a2:	d90794e3          	bne	a5,a6,2300042a <__udivdi3+0xc2>
230006a6:	67c1                	lui	a5,0x10
230006a8:	17fd                	addi	a5,a5,-1
230006aa:	8f7d                	and	a4,a4,a5
230006ac:	0742                	slli	a4,a4,0x10
230006ae:	00fe7e33          	and	t3,t3,a5
230006b2:	00b898b3          	sll	a7,a7,a1
230006b6:	9772                	add	a4,a4,t3
230006b8:	4581                	li	a1,0
230006ba:	e2e8f4e3          	bgeu	a7,a4,230004e2 <__udivdi3+0x17a>
230006be:	157d                	addi	a0,a0,-1
230006c0:	b3ad                	j	2300042a <__udivdi3+0xc2>
230006c2:	4581                	li	a1,0
230006c4:	4501                	li	a0,0
230006c6:	bd31                	j	230004e2 <__udivdi3+0x17a>

230006c8 <__adddf3>:
230006c8:	1101                	addi	sp,sp,-32
230006ca:	ce06                	sw	ra,28(sp)
230006cc:	cc22                	sw	s0,24(sp)
230006ce:	ca26                	sw	s1,20(sp)
230006d0:	c84a                	sw	s2,16(sp)
230006d2:	c64e                	sw	s3,12(sp)
230006d4:	c452                	sw	s4,8(sp)
230006d6:	002029f3          	frrm	s3
230006da:	001008b7          	lui	a7,0x100
230006de:	18fd                	addi	a7,a7,-1
230006e0:	00b8f733          	and	a4,a7,a1
230006e4:	0145d413          	srli	s0,a1,0x14
230006e8:	01f5d493          	srli	s1,a1,0x1f
230006ec:	0146d593          	srli	a1,a3,0x14
230006f0:	00371793          	slli	a5,a4,0x3
230006f4:	00d8f8b3          	and	a7,a7,a3
230006f8:	01d55713          	srli	a4,a0,0x1d
230006fc:	7ff47413          	andi	s0,s0,2047
23000700:	7ff5f593          	andi	a1,a1,2047
23000704:	8f5d                	or	a4,a4,a5
23000706:	01f6d313          	srli	t1,a3,0x1f
2300070a:	00351793          	slli	a5,a0,0x3
2300070e:	01d65693          	srli	a3,a2,0x1d
23000712:	088e                	slli	a7,a7,0x3
23000714:	40b40533          	sub	a0,s0,a1
23000718:	00361813          	slli	a6,a2,0x3
2300071c:	0116e6b3          	or	a3,a3,a7
23000720:	862a                	mv	a2,a0
23000722:	34649163          	bne	s1,t1,23000a64 <__adddf3+0x39c>
23000726:	10a05963          	blez	a0,23000838 <__adddf3+0x170>
2300072a:	e1b9                	bnez	a1,23000770 <__adddf3+0xa8>
2300072c:	0106e533          	or	a0,a3,a6
23000730:	e511                	bnez	a0,2300073c <__adddf3+0x74>
23000732:	7ff00693          	li	a3,2047
23000736:	2ad61c63          	bne	a2,a3,230009ee <__adddf3+0x326>
2300073a:	a839                	j	23000758 <__adddf3+0x90>
2300073c:	fff60513          	addi	a0,a2,-1
23000740:	e901                	bnez	a0,23000750 <__adddf3+0x88>
23000742:	983e                	add	a6,a6,a5
23000744:	96ba                	add	a3,a3,a4
23000746:	00f837b3          	sltu	a5,a6,a5
2300074a:	96be                	add	a3,a3,a5
2300074c:	4605                	li	a2,1
2300074e:	a059                	j	230007d4 <__adddf3+0x10c>
23000750:	7ff00893          	li	a7,2047
23000754:	05161163          	bne	a2,a7,23000796 <__adddf3+0xce>
23000758:	00f766b3          	or	a3,a4,a5
2300075c:	6e068c63          	beqz	a3,23000e54 <__adddf3+0x78c>
23000760:	004006b7          	lui	a3,0x400
23000764:	8ef9                	and	a3,a3,a4
23000766:	4401                	li	s0,0
23000768:	20069263          	bnez	a3,2300096c <__adddf3+0x2a4>
2300076c:	45c1                	li	a1,16
2300076e:	aafd                	j	2300096c <__adddf3+0x2a4>
23000770:	7ff00613          	li	a2,2047
23000774:	00c41e63          	bne	s0,a2,23000790 <__adddf3+0xc8>
23000778:	00f766b3          	or	a3,a4,a5
2300077c:	6c068f63          	beqz	a3,23000e5a <__adddf3+0x792>
23000780:	004006b7          	lui	a3,0x400
23000784:	8ef9                	and	a3,a3,a4
23000786:	12068563          	beqz	a3,230008b0 <__adddf3+0x1e8>
2300078a:	7ff00613          	li	a2,2047
2300078e:	a485                	j	230009ee <__adddf3+0x326>
23000790:	00800637          	lui	a2,0x800
23000794:	8ed1                	or	a3,a3,a2
23000796:	03800613          	li	a2,56
2300079a:	08a64a63          	blt	a2,a0,2300082e <__adddf3+0x166>
2300079e:	467d                	li	a2,31
230007a0:	06a64063          	blt	a2,a0,23000800 <__adddf3+0x138>
230007a4:	02000613          	li	a2,32
230007a8:	8e09                	sub	a2,a2,a0
230007aa:	00a858b3          	srl	a7,a6,a0
230007ae:	00c695b3          	sll	a1,a3,a2
230007b2:	00c81833          	sll	a6,a6,a2
230007b6:	0115e5b3          	or	a1,a1,a7
230007ba:	01003833          	snez	a6,a6
230007be:	0105e833          	or	a6,a1,a6
230007c2:	00a6d533          	srl	a0,a3,a0
230007c6:	983e                	add	a6,a6,a5
230007c8:	953a                	add	a0,a0,a4
230007ca:	00f837b3          	sltu	a5,a6,a5
230007ce:	00f506b3          	add	a3,a0,a5
230007d2:	8622                	mv	a2,s0
230007d4:	008007b7          	lui	a5,0x800
230007d8:	8ff5                	and	a5,a5,a3
230007da:	cbb5                	beqz	a5,2300084e <__adddf3+0x186>
230007dc:	0605                	addi	a2,a2,1
230007de:	7ff00793          	li	a5,2047
230007e2:	26f60163          	beq	a2,a5,23000a44 <__adddf3+0x37c>
230007e6:	ff800737          	lui	a4,0xff800
230007ea:	177d                	addi	a4,a4,-1
230007ec:	00185793          	srli	a5,a6,0x1
230007f0:	8f75                	and	a4,a4,a3
230007f2:	00187813          	andi	a6,a6,1
230007f6:	0107e833          	or	a6,a5,a6
230007fa:	01f71793          	slli	a5,a4,0x1f
230007fe:	a2ed                	j	230009e8 <__adddf3+0x320>
23000800:	fe050593          	addi	a1,a0,-32
23000804:	02000893          	li	a7,32
23000808:	00b6d5b3          	srl	a1,a3,a1
2300080c:	4601                	li	a2,0
2300080e:	01150863          	beq	a0,a7,2300081e <__adddf3+0x156>
23000812:	04000613          	li	a2,64
23000816:	40a60533          	sub	a0,a2,a0
2300081a:	00a69633          	sll	a2,a3,a0
2300081e:	01066833          	or	a6,a2,a6
23000822:	01003833          	snez	a6,a6
23000826:	0105e833          	or	a6,a1,a6
2300082a:	4501                	li	a0,0
2300082c:	bf69                	j	230007c6 <__adddf3+0xfe>
2300082e:	0106e833          	or	a6,a3,a6
23000832:	01003833          	snez	a6,a6
23000836:	bfd5                	j	2300082a <__adddf3+0x162>
23000838:	c97d                	beqz	a0,2300092e <__adddf3+0x266>
2300083a:	40858633          	sub	a2,a1,s0
2300083e:	e821                	bnez	s0,2300088e <__adddf3+0x1c6>
23000840:	00f76533          	or	a0,a4,a5
23000844:	e911                	bnez	a0,23000858 <__adddf3+0x190>
23000846:	7ff00793          	li	a5,2047
2300084a:	02f60663          	beq	a2,a5,23000876 <__adddf3+0x1ae>
2300084e:	8736                	mv	a4,a3
23000850:	87c2                	mv	a5,a6
23000852:	40060163          	beqz	a2,23000c54 <__adddf3+0x58c>
23000856:	aa61                	j	230009ee <__adddf3+0x326>
23000858:	fff60893          	addi	a7,a2,-1 # 7fffff <StackSize+0x7fefff>
2300085c:	00089963          	bnez	a7,2300086e <__adddf3+0x1a6>
23000860:	97c2                	add	a5,a5,a6
23000862:	0107b833          	sltu	a6,a5,a6
23000866:	96ba                	add	a3,a3,a4
23000868:	96c2                	add	a3,a3,a6
2300086a:	883e                	mv	a6,a5
2300086c:	b5c5                	j	2300074c <__adddf3+0x84>
2300086e:	7ff00513          	li	a0,2047
23000872:	04a61563          	bne	a2,a0,230008bc <__adddf3+0x1f4>
23000876:	0106e7b3          	or	a5,a3,a6
2300087a:	5e078363          	beqz	a5,23000e60 <__adddf3+0x798>
2300087e:	004007b7          	lui	a5,0x400
23000882:	8ff5                	and	a5,a5,a3
23000884:	8736                	mv	a4,a3
23000886:	5c079f63          	bnez	a5,23000e64 <__adddf3+0x79c>
2300088a:	87c2                	mv	a5,a6
2300088c:	b5c5                	j	2300076c <__adddf3+0xa4>
2300088e:	7ff00513          	li	a0,2047
23000892:	02a59163          	bne	a1,a0,230008b4 <__adddf3+0x1ec>
23000896:	0106e7b3          	or	a5,a3,a6
2300089a:	5a078063          	beqz	a5,23000e3a <__adddf3+0x772>
2300089e:	004007b7          	lui	a5,0x400
230008a2:	8ff5                	and	a5,a5,a3
230008a4:	8736                	mv	a4,a3
230008a6:	58079f63          	bnez	a5,23000e44 <__adddf3+0x77c>
230008aa:	87c2                	mv	a5,a6
230008ac:	7ff00613          	li	a2,2047
230008b0:	4401                	li	s0,0
230008b2:	bd6d                	j	2300076c <__adddf3+0xa4>
230008b4:	00800537          	lui	a0,0x800
230008b8:	8f49                	or	a4,a4,a0
230008ba:	88b2                	mv	a7,a2
230008bc:	03800613          	li	a2,56
230008c0:	07164363          	blt	a2,a7,23000926 <__adddf3+0x25e>
230008c4:	467d                	li	a2,31
230008c6:	03164b63          	blt	a2,a7,230008fc <__adddf3+0x234>
230008ca:	02000513          	li	a0,32
230008ce:	41150533          	sub	a0,a0,a7
230008d2:	00a71633          	sll	a2,a4,a0
230008d6:	0117d333          	srl	t1,a5,a7
230008da:	00a797b3          	sll	a5,a5,a0
230008de:	00666633          	or	a2,a2,t1
230008e2:	00f037b3          	snez	a5,a5
230008e6:	8fd1                	or	a5,a5,a2
230008e8:	01175733          	srl	a4,a4,a7
230008ec:	97c2                	add	a5,a5,a6
230008ee:	9736                	add	a4,a4,a3
230008f0:	0107b6b3          	sltu	a3,a5,a6
230008f4:	96ba                	add	a3,a3,a4
230008f6:	883e                	mv	a6,a5
230008f8:	862e                	mv	a2,a1
230008fa:	bde9                	j	230007d4 <__adddf3+0x10c>
230008fc:	fe088613          	addi	a2,a7,-32 # fffe0 <StackSize+0xfefe0>
23000900:	02000313          	li	t1,32
23000904:	00c75633          	srl	a2,a4,a2
23000908:	4501                	li	a0,0
2300090a:	00688863          	beq	a7,t1,2300091a <__adddf3+0x252>
2300090e:	04000513          	li	a0,64
23000912:	41150533          	sub	a0,a0,a7
23000916:	00a71533          	sll	a0,a4,a0
2300091a:	8fc9                	or	a5,a5,a0
2300091c:	00f037b3          	snez	a5,a5
23000920:	8fd1                	or	a5,a5,a2
23000922:	4701                	li	a4,0
23000924:	b7e1                	j	230008ec <__adddf3+0x224>
23000926:	8fd9                	or	a5,a5,a4
23000928:	00f037b3          	snez	a5,a5
2300092c:	bfdd                	j	23000922 <__adddf3+0x25a>
2300092e:	00140613          	addi	a2,s0,1
23000932:	7fe67513          	andi	a0,a2,2046
23000936:	ed41                	bnez	a0,230009ce <__adddf3+0x306>
23000938:	00f76533          	or	a0,a4,a5
2300093c:	e421                	bnez	s0,23000984 <__adddf3+0x2bc>
2300093e:	4c050163          	beqz	a0,23000e00 <__adddf3+0x738>
23000942:	0106e633          	or	a2,a3,a6
23000946:	30060763          	beqz	a2,23000c54 <__adddf3+0x58c>
2300094a:	983e                	add	a6,a6,a5
2300094c:	00f837b3          	sltu	a5,a6,a5
23000950:	9736                	add	a4,a4,a3
23000952:	973e                	add	a4,a4,a5
23000954:	008007b7          	lui	a5,0x800
23000958:	8ff9                	and	a5,a5,a4
2300095a:	4a078463          	beqz	a5,23000e02 <__adddf3+0x73a>
2300095e:	ff8007b7          	lui	a5,0xff800
23000962:	17fd                	addi	a5,a5,-1
23000964:	8f7d                	and	a4,a4,a5
23000966:	4581                	li	a1,0
23000968:	87c2                	mv	a5,a6
2300096a:	4605                	li	a2,1
2300096c:	0077f693          	andi	a3,a5,7
23000970:	e6c5                	bnez	a3,23000a18 <__adddf3+0x350>
23000972:	56040d63          	beqz	s0,23000eec <__adddf3+0x824>
23000976:	0015f693          	andi	a3,a1,1
2300097a:	56068963          	beqz	a3,23000eec <__adddf3+0x824>
2300097e:	0025e593          	ori	a1,a1,2
23000982:	a3ad                	j	23000eec <__adddf3+0x824>
23000984:	7ff00613          	li	a2,2047
23000988:	02c41d63          	bne	s0,a2,230009c2 <__adddf3+0x2fa>
2300098c:	5c050f63          	beqz	a0,23000f6a <__adddf3+0x8a2>
23000990:	00400637          	lui	a2,0x400
23000994:	8e79                	and	a2,a2,a4
23000996:	00163613          	seqz	a2,a2
2300099a:	0612                	slli	a2,a2,0x4
2300099c:	52859d63          	bne	a1,s0,23000ed6 <__adddf3+0x80e>
230009a0:	85b2                	mv	a1,a2
230009a2:	0106e633          	or	a2,a3,a6
230009a6:	c611                	beqz	a2,230009b2 <__adddf3+0x2ea>
230009a8:	00400637          	lui	a2,0x400
230009ac:	8e75                	and	a2,a2,a3
230009ae:	e211                	bnez	a2,230009b2 <__adddf3+0x2ea>
230009b0:	45c1                	li	a1,16
230009b2:	52051363          	bnez	a0,23000ed8 <__adddf3+0x810>
230009b6:	8736                	mv	a4,a3
230009b8:	87c2                	mv	a5,a6
230009ba:	4401                	li	s0,0
230009bc:	7ff00613          	li	a2,2047
230009c0:	b775                	j	2300096c <__adddf3+0x2a4>
230009c2:	00c59463          	bne	a1,a2,230009ca <__adddf3+0x302>
230009c6:	4581                	li	a1,0
230009c8:	bfe9                	j	230009a2 <__adddf3+0x2da>
230009ca:	4581                	li	a1,0
230009cc:	b7dd                	j	230009b2 <__adddf3+0x2ea>
230009ce:	7ff00593          	li	a1,2047
230009d2:	02b60063          	beq	a2,a1,230009f2 <__adddf3+0x32a>
230009d6:	983e                	add	a6,a6,a5
230009d8:	00f837b3          	sltu	a5,a6,a5
230009dc:	9736                	add	a4,a4,a3
230009de:	973e                	add	a4,a4,a5
230009e0:	01f71793          	slli	a5,a4,0x1f
230009e4:	00185813          	srli	a6,a6,0x1
230009e8:	0107e7b3          	or	a5,a5,a6
230009ec:	8305                	srli	a4,a4,0x1
230009ee:	4401                	li	s0,0
230009f0:	a99d                	j	23000e66 <__adddf3+0x79e>
230009f2:	00098663          	beqz	s3,230009fe <__adddf3+0x336>
230009f6:	478d                	li	a5,3
230009f8:	00f99663          	bne	s3,a5,23000a04 <__adddf3+0x33c>
230009fc:	e881                	bnez	s1,23000a0c <__adddf3+0x344>
230009fe:	7ff00613          	li	a2,2047
23000a02:	a881                	j	23000a52 <__adddf3+0x38a>
23000a04:	4789                	li	a5,2
23000a06:	00f99363          	bne	s3,a5,23000a0c <__adddf3+0x344>
23000a0a:	f8f5                	bnez	s1,230009fe <__adddf3+0x336>
23000a0c:	4401                	li	s0,0
23000a0e:	577d                	li	a4,-1
23000a10:	57fd                	li	a5,-1
23000a12:	7fe00613          	li	a2,2046
23000a16:	4595                	li	a1,5
23000a18:	4689                	li	a3,2
23000a1a:	0015e593          	ori	a1,a1,1
23000a1e:	48d98563          	beq	s3,a3,23000ea8 <__adddf3+0x7e0>
23000a22:	468d                	li	a3,3
23000a24:	46d98e63          	beq	s3,a3,23000ea0 <__adddf3+0x7d8>
23000a28:	48099163          	bnez	s3,23000eaa <__adddf3+0x7e2>
23000a2c:	00f7f693          	andi	a3,a5,15
23000a30:	4511                	li	a0,4
23000a32:	46a68c63          	beq	a3,a0,23000eaa <__adddf3+0x7e2>
23000a36:	00478693          	addi	a3,a5,4 # ff800004 <__HeapLimit+0xbd7d0004>
23000a3a:	00f6b7b3          	sltu	a5,a3,a5
23000a3e:	973e                	add	a4,a4,a5
23000a40:	87b6                	mv	a5,a3
23000a42:	a1a5                	j	23000eaa <__adddf3+0x7e2>
23000a44:	00098763          	beqz	s3,23000a52 <__adddf3+0x38a>
23000a48:	478d                	li	a5,3
23000a4a:	00f99863          	bne	s3,a5,23000a5a <__adddf3+0x392>
23000a4e:	3e049d63          	bnez	s1,23000e48 <__adddf3+0x780>
23000a52:	4701                	li	a4,0
23000a54:	4781                	li	a5,0
23000a56:	4595                	li	a1,5
23000a58:	a951                	j	23000eec <__adddf3+0x824>
23000a5a:	4789                	li	a5,2
23000a5c:	3ef99663          	bne	s3,a5,23000e48 <__adddf3+0x780>
23000a60:	f8ed                	bnez	s1,23000a52 <__adddf3+0x38a>
23000a62:	b76d                	j	23000a0c <__adddf3+0x344>
23000a64:	0ca05663          	blez	a0,23000b30 <__adddf3+0x468>
23000a68:	e1c9                	bnez	a1,23000aea <__adddf3+0x422>
23000a6a:	0106e533          	or	a0,a3,a6
23000a6e:	cc0502e3          	beqz	a0,23000732 <__adddf3+0x6a>
23000a72:	fff60513          	addi	a0,a2,-1 # 3fffff <StackSize+0x3fefff>
23000a76:	e911                	bnez	a0,23000a8a <__adddf3+0x3c2>
23000a78:	41078833          	sub	a6,a5,a6
23000a7c:	40d706b3          	sub	a3,a4,a3
23000a80:	0107b7b3          	sltu	a5,a5,a6
23000a84:	8e9d                	sub	a3,a3,a5
23000a86:	4605                	li	a2,1
23000a88:	a0a9                	j	23000ad2 <__adddf3+0x40a>
23000a8a:	7ff00893          	li	a7,2047
23000a8e:	cd1605e3          	beq	a2,a7,23000758 <__adddf3+0x90>
23000a92:	03800613          	li	a2,56
23000a96:	08a64863          	blt	a2,a0,23000b26 <__adddf3+0x45e>
23000a9a:	467d                	li	a2,31
23000a9c:	04a64f63          	blt	a2,a0,23000afa <__adddf3+0x432>
23000aa0:	02000613          	li	a2,32
23000aa4:	8e09                	sub	a2,a2,a0
23000aa6:	00c695b3          	sll	a1,a3,a2
23000aaa:	00a858b3          	srl	a7,a6,a0
23000aae:	00c81833          	sll	a6,a6,a2
23000ab2:	0115e5b3          	or	a1,a1,a7
23000ab6:	01003833          	snez	a6,a6
23000aba:	0105e833          	or	a6,a1,a6
23000abe:	00a6d6b3          	srl	a3,a3,a0
23000ac2:	41078833          	sub	a6,a5,a6
23000ac6:	40d706b3          	sub	a3,a4,a3
23000aca:	0107b7b3          	sltu	a5,a5,a6
23000ace:	8e9d                	sub	a3,a3,a5
23000ad0:	8622                	mv	a2,s0
23000ad2:	00800937          	lui	s2,0x800
23000ad6:	0126f7b3          	and	a5,a3,s2
23000ada:	d6078ae3          	beqz	a5,2300084e <__adddf3+0x186>
23000ade:	197d                	addi	s2,s2,-1
23000ae0:	0126f933          	and	s2,a3,s2
23000ae4:	8a42                	mv	s4,a6
23000ae6:	8432                	mv	s0,a2
23000ae8:	a4b5                	j	23000d54 <__adddf3+0x68c>
23000aea:	7ff00613          	li	a2,2047
23000aee:	c8c405e3          	beq	s0,a2,23000778 <__adddf3+0xb0>
23000af2:	00800637          	lui	a2,0x800
23000af6:	8ed1                	or	a3,a3,a2
23000af8:	bf69                	j	23000a92 <__adddf3+0x3ca>
23000afa:	fe050593          	addi	a1,a0,-32 # 7fffe0 <StackSize+0x7fefe0>
23000afe:	02000893          	li	a7,32
23000b02:	00b6d5b3          	srl	a1,a3,a1
23000b06:	4601                	li	a2,0
23000b08:	01150763          	beq	a0,a7,23000b16 <__adddf3+0x44e>
23000b0c:	04000613          	li	a2,64
23000b10:	8e09                	sub	a2,a2,a0
23000b12:	00c69633          	sll	a2,a3,a2
23000b16:	01066833          	or	a6,a2,a6
23000b1a:	01003833          	snez	a6,a6
23000b1e:	0105e833          	or	a6,a1,a6
23000b22:	4681                	li	a3,0
23000b24:	bf79                	j	23000ac2 <__adddf3+0x3fa>
23000b26:	0106e833          	or	a6,a3,a6
23000b2a:	01003833          	snez	a6,a6
23000b2e:	bfd5                	j	23000b22 <__adddf3+0x45a>
23000b30:	cd75                	beqz	a0,23000c2c <__adddf3+0x564>
23000b32:	40858633          	sub	a2,a1,s0
23000b36:	e439                	bnez	s0,23000b84 <__adddf3+0x4bc>
23000b38:	00f76533          	or	a0,a4,a5
23000b3c:	e509                	bnez	a0,23000b46 <__adddf3+0x47e>
23000b3e:	7ff00793          	li	a5,2047
23000b42:	849a                	mv	s1,t1
23000b44:	b319                	j	2300084a <__adddf3+0x182>
23000b46:	fff60893          	addi	a7,a2,-1 # 7fffff <StackSize+0x7fefff>
23000b4a:	00089c63          	bnez	a7,23000b62 <__adddf3+0x49a>
23000b4e:	40f807b3          	sub	a5,a6,a5
23000b52:	00f83833          	sltu	a6,a6,a5
23000b56:	8e99                	sub	a3,a3,a4
23000b58:	410686b3          	sub	a3,a3,a6
23000b5c:	849a                	mv	s1,t1
23000b5e:	883e                	mv	a6,a5
23000b60:	b71d                	j	23000a86 <__adddf3+0x3be>
23000b62:	7ff00513          	li	a0,2047
23000b66:	04a61663          	bne	a2,a0,23000bb2 <__adddf3+0x4ea>
23000b6a:	0106e7b3          	or	a5,a3,a6
23000b6e:	2e078e63          	beqz	a5,23000e6a <__adddf3+0x7a2>
23000b72:	004007b7          	lui	a5,0x400
23000b76:	8ff5                	and	a5,a5,a3
23000b78:	8736                	mv	a4,a3
23000b7a:	2e079b63          	bnez	a5,23000e70 <__adddf3+0x7a8>
23000b7e:	87c2                	mv	a5,a6
23000b80:	849a                	mv	s1,t1
23000b82:	b6ed                	j	2300076c <__adddf3+0xa4>
23000b84:	7ff00513          	li	a0,2047
23000b88:	02a59163          	bne	a1,a0,23000baa <__adddf3+0x4e2>
23000b8c:	0106e7b3          	or	a5,a3,a6
23000b90:	2e078363          	beqz	a5,23000e76 <__adddf3+0x7ae>
23000b94:	004007b7          	lui	a5,0x400
23000b98:	8ff5                	and	a5,a5,a3
23000b9a:	8736                	mv	a4,a3
23000b9c:	2e079163          	bnez	a5,23000e7e <__adddf3+0x7b6>
23000ba0:	87c2                	mv	a5,a6
23000ba2:	7ff00613          	li	a2,2047
23000ba6:	849a                	mv	s1,t1
23000ba8:	b321                	j	230008b0 <__adddf3+0x1e8>
23000baa:	00800537          	lui	a0,0x800
23000bae:	8f49                	or	a4,a4,a0
23000bb0:	88b2                	mv	a7,a2
23000bb2:	03800613          	li	a2,56
23000bb6:	07164763          	blt	a2,a7,23000c24 <__adddf3+0x55c>
23000bba:	467d                	li	a2,31
23000bbc:	03164f63          	blt	a2,a7,23000bfa <__adddf3+0x532>
23000bc0:	02000513          	li	a0,32
23000bc4:	41150533          	sub	a0,a0,a7
23000bc8:	00a71633          	sll	a2,a4,a0
23000bcc:	0117de33          	srl	t3,a5,a7
23000bd0:	00a797b3          	sll	a5,a5,a0
23000bd4:	01c66633          	or	a2,a2,t3
23000bd8:	00f037b3          	snez	a5,a5
23000bdc:	8fd1                	or	a5,a5,a2
23000bde:	01175733          	srl	a4,a4,a7
23000be2:	40f807b3          	sub	a5,a6,a5
23000be6:	40e68733          	sub	a4,a3,a4
23000bea:	00f836b3          	sltu	a3,a6,a5
23000bee:	40d706b3          	sub	a3,a4,a3
23000bf2:	883e                	mv	a6,a5
23000bf4:	862e                	mv	a2,a1
23000bf6:	849a                	mv	s1,t1
23000bf8:	bde9                	j	23000ad2 <__adddf3+0x40a>
23000bfa:	fe088613          	addi	a2,a7,-32
23000bfe:	02000e13          	li	t3,32
23000c02:	00c75633          	srl	a2,a4,a2
23000c06:	4501                	li	a0,0
23000c08:	01c88863          	beq	a7,t3,23000c18 <__adddf3+0x550>
23000c0c:	04000513          	li	a0,64
23000c10:	41150533          	sub	a0,a0,a7
23000c14:	00a71533          	sll	a0,a4,a0
23000c18:	8fc9                	or	a5,a5,a0
23000c1a:	00f037b3          	snez	a5,a5
23000c1e:	8fd1                	or	a5,a5,a2
23000c20:	4701                	li	a4,0
23000c22:	b7c1                	j	23000be2 <__adddf3+0x51a>
23000c24:	8fd9                	or	a5,a5,a4
23000c26:	00f037b3          	snez	a5,a5
23000c2a:	bfdd                	j	23000c20 <__adddf3+0x558>
23000c2c:	00140613          	addi	a2,s0,1
23000c30:	7fe67613          	andi	a2,a2,2046
23000c34:	ea7d                	bnez	a2,23000d2a <__adddf3+0x662>
23000c36:	00f768b3          	or	a7,a4,a5
23000c3a:	0106e533          	or	a0,a3,a6
23000c3e:	e05d                	bnez	s0,23000ce4 <__adddf3+0x61c>
23000c40:	06089263          	bnez	a7,23000ca4 <__adddf3+0x5dc>
23000c44:	1c051163          	bnez	a0,23000e06 <__adddf3+0x73e>
23000c48:	ffe98493          	addi	s1,s3,-2
23000c4c:	0014b493          	seqz	s1,s1
23000c50:	4701                	li	a4,0
23000c52:	4781                	li	a5,0
23000c54:	00e7e6b3          	or	a3,a5,a4
23000c58:	24068063          	beqz	a3,23000e98 <__adddf3+0x7d0>
23000c5c:	01f7d693          	srli	a3,a5,0x1f
23000c60:	00171413          	slli	s0,a4,0x1
23000c64:	9436                	add	s0,s0,a3
23000c66:	00179693          	slli	a3,a5,0x1
23000c6a:	0076f613          	andi	a2,a3,7
23000c6e:	4581                	li	a1,0
23000c70:	c605                	beqz	a2,23000c98 <__adddf3+0x5d0>
23000c72:	4609                	li	a2,2
23000c74:	1ac98963          	beq	s3,a2,23000e26 <__adddf3+0x75e>
23000c78:	460d                	li	a2,3
23000c7a:	18c98c63          	beq	s3,a2,23000e12 <__adddf3+0x74a>
23000c7e:	4585                	li	a1,1
23000c80:	00099c63          	bnez	s3,23000c98 <__adddf3+0x5d0>
23000c84:	00f6f613          	andi	a2,a3,15
23000c88:	4511                	li	a0,4
23000c8a:	00a60763          	beq	a2,a0,23000c98 <__adddf3+0x5d0>
23000c8e:	ffc6b693          	sltiu	a3,a3,-4
23000c92:	0016c693          	xori	a3,a3,1
23000c96:	9436                	add	s0,s0,a3
23000c98:	8061                	srli	s0,s0,0x18
23000c9a:	00144413          	xori	s0,s0,1
23000c9e:	8805                	andi	s0,s0,1
23000ca0:	4601                	li	a2,0
23000ca2:	b1e9                	j	2300096c <__adddf3+0x2a4>
23000ca4:	d945                	beqz	a0,23000c54 <__adddf3+0x58c>
23000ca6:	410785b3          	sub	a1,a5,a6
23000caa:	00b7b533          	sltu	a0,a5,a1
23000cae:	40d70633          	sub	a2,a4,a3
23000cb2:	8e09                	sub	a2,a2,a0
23000cb4:	00800537          	lui	a0,0x800
23000cb8:	8d71                	and	a0,a0,a2
23000cba:	c919                	beqz	a0,23000cd0 <__adddf3+0x608>
23000cbc:	40f807b3          	sub	a5,a6,a5
23000cc0:	40e68733          	sub	a4,a3,a4
23000cc4:	00f83833          	sltu	a6,a6,a5
23000cc8:	41070733          	sub	a4,a4,a6
23000ccc:	849a                	mv	s1,t1
23000cce:	b759                	j	23000c54 <__adddf3+0x58c>
23000cd0:	00c5e7b3          	or	a5,a1,a2
23000cd4:	12079c63          	bnez	a5,23000e0c <__adddf3+0x744>
23000cd8:	ffe98493          	addi	s1,s3,-2
23000cdc:	0014b493          	seqz	s1,s1
23000ce0:	4701                	li	a4,0
23000ce2:	bf8d                	j	23000c54 <__adddf3+0x58c>
23000ce4:	7ff00613          	li	a2,2047
23000ce8:	00c41e63          	bne	s0,a2,23000d04 <__adddf3+0x63c>
23000cec:	26088763          	beqz	a7,23000f5a <__adddf3+0x892>
23000cf0:	00400637          	lui	a2,0x400
23000cf4:	8e79                	and	a2,a2,a4
23000cf6:	00163613          	seqz	a2,a2
23000cfa:	0612                	slli	a2,a2,0x4
23000cfc:	26859363          	bne	a1,s0,23000f62 <__adddf3+0x89a>
23000d00:	85b2                	mv	a1,a2
23000d02:	a021                	j	23000d0a <__adddf3+0x642>
23000d04:	02c59163          	bne	a1,a2,23000d26 <__adddf3+0x65e>
23000d08:	4581                	li	a1,0
23000d0a:	c511                	beqz	a0,23000d16 <__adddf3+0x64e>
23000d0c:	00400637          	lui	a2,0x400
23000d10:	8e75                	and	a2,a2,a3
23000d12:	e211                	bnez	a2,23000d16 <__adddf3+0x64e>
23000d14:	45c1                	li	a1,16
23000d16:	24089763          	bnez	a7,23000f64 <__adddf3+0x89c>
23000d1a:	16050763          	beqz	a0,23000e88 <__adddf3+0x7c0>
23000d1e:	8736                	mv	a4,a3
23000d20:	87c2                	mv	a5,a6
23000d22:	849a                	mv	s1,t1
23000d24:	b959                	j	230009ba <__adddf3+0x2f2>
23000d26:	4581                	li	a1,0
23000d28:	b7fd                	j	23000d16 <__adddf3+0x64e>
23000d2a:	41078a33          	sub	s4,a5,a6
23000d2e:	0147b633          	sltu	a2,a5,s4
23000d32:	40d70933          	sub	s2,a4,a3
23000d36:	40c90933          	sub	s2,s2,a2
23000d3a:	00800637          	lui	a2,0x800
23000d3e:	00c97633          	and	a2,s2,a2
23000d42:	c62d                	beqz	a2,23000dac <__adddf3+0x6e4>
23000d44:	40f80a33          	sub	s4,a6,a5
23000d48:	8e99                	sub	a3,a3,a4
23000d4a:	01483833          	sltu	a6,a6,s4
23000d4e:	41068933          	sub	s2,a3,a6
23000d52:	849a                	mv	s1,t1
23000d54:	06090063          	beqz	s2,23000db4 <__adddf3+0x6ec>
23000d58:	854a                	mv	a0,s2
23000d5a:	669010ef          	jal	ra,23002bc2 <__clzsi2>
23000d5e:	ff850613          	addi	a2,a0,-8 # 7ffff8 <StackSize+0x7feff8>
23000d62:	47fd                	li	a5,31
23000d64:	04c7ce63          	blt	a5,a2,23000dc0 <__adddf3+0x6f8>
23000d68:	02000693          	li	a3,32
23000d6c:	8e91                	sub	a3,a3,a2
23000d6e:	00c91733          	sll	a4,s2,a2
23000d72:	00da56b3          	srl	a3,s4,a3
23000d76:	8ed9                	or	a3,a3,a4
23000d78:	00ca1833          	sll	a6,s4,a2
23000d7c:	06864b63          	blt	a2,s0,23000df2 <__adddf3+0x72a>
23000d80:	8e01                	sub	a2,a2,s0
23000d82:	00160713          	addi	a4,a2,1 # 800001 <StackSize+0x7ff001>
23000d86:	47fd                	li	a5,31
23000d88:	04e7c263          	blt	a5,a4,23000dcc <__adddf3+0x704>
23000d8c:	02000613          	li	a2,32
23000d90:	8e19                	sub	a2,a2,a4
23000d92:	00c697b3          	sll	a5,a3,a2
23000d96:	00e85533          	srl	a0,a6,a4
23000d9a:	00c81633          	sll	a2,a6,a2
23000d9e:	8fc9                	or	a5,a5,a0
23000da0:	00c03633          	snez	a2,a2
23000da4:	8fd1                	or	a5,a5,a2
23000da6:	00e6d733          	srl	a4,a3,a4
23000daa:	b56d                	j	23000c54 <__adddf3+0x58c>
23000dac:	012a67b3          	or	a5,s4,s2
23000db0:	f3d5                	bnez	a5,23000d54 <__adddf3+0x68c>
23000db2:	b71d                	j	23000cd8 <__adddf3+0x610>
23000db4:	8552                	mv	a0,s4
23000db6:	60d010ef          	jal	ra,23002bc2 <__clzsi2>
23000dba:	02050513          	addi	a0,a0,32
23000dbe:	b745                	j	23000d5e <__adddf3+0x696>
23000dc0:	fd850693          	addi	a3,a0,-40
23000dc4:	00da16b3          	sll	a3,s4,a3
23000dc8:	4801                	li	a6,0
23000dca:	bf4d                	j	23000d7c <__adddf3+0x6b4>
23000dcc:	1605                	addi	a2,a2,-31
23000dce:	02000593          	li	a1,32
23000dd2:	00c6d633          	srl	a2,a3,a2
23000dd6:	4781                	li	a5,0
23000dd8:	00b70763          	beq	a4,a1,23000de6 <__adddf3+0x71e>
23000ddc:	04000793          	li	a5,64
23000de0:	8f99                	sub	a5,a5,a4
23000de2:	00f697b3          	sll	a5,a3,a5
23000de6:	00f867b3          	or	a5,a6,a5
23000dea:	00f037b3          	snez	a5,a5
23000dee:	8fd1                	or	a5,a5,a2
23000df0:	bdc5                	j	23000ce0 <__adddf3+0x618>
23000df2:	ff8007b7          	lui	a5,0xff800
23000df6:	17fd                	addi	a5,a5,-1
23000df8:	40c40633          	sub	a2,s0,a2
23000dfc:	8efd                	and	a3,a3,a5
23000dfe:	bc81                	j	2300084e <__adddf3+0x186>
23000e00:	8736                	mv	a4,a3
23000e02:	87c2                	mv	a5,a6
23000e04:	bd81                	j	23000c54 <__adddf3+0x58c>
23000e06:	8736                	mv	a4,a3
23000e08:	87c2                	mv	a5,a6
23000e0a:	b5c9                	j	23000ccc <__adddf3+0x604>
23000e0c:	8732                	mv	a4,a2
23000e0e:	87ae                	mv	a5,a1
23000e10:	b591                	j	23000c54 <__adddf3+0x58c>
23000e12:	85a6                	mv	a1,s1
23000e14:	e80492e3          	bnez	s1,23000c98 <__adddf3+0x5d0>
23000e18:	ff86b693          	sltiu	a3,a3,-8
23000e1c:	0016c693          	xori	a3,a3,1
23000e20:	9436                	add	s0,s0,a3
23000e22:	4585                	li	a1,1
23000e24:	bd95                	j	23000c98 <__adddf3+0x5d0>
23000e26:	4585                	li	a1,1
23000e28:	e60488e3          	beqz	s1,23000c98 <__adddf3+0x5d0>
23000e2c:	ff86b693          	sltiu	a3,a3,-8
23000e30:	0016c693          	xori	a3,a3,1
23000e34:	9436                	add	s0,s0,a3
23000e36:	85a6                	mv	a1,s1
23000e38:	b585                	j	23000c98 <__adddf3+0x5d0>
23000e3a:	4701                	li	a4,0
23000e3c:	7ff00613          	li	a2,2047
23000e40:	4581                	li	a1,0
23000e42:	a06d                	j	23000eec <__adddf3+0x824>
23000e44:	87c2                	mv	a5,a6
23000e46:	b291                	j	2300078a <__adddf3+0xc2>
23000e48:	577d                	li	a4,-1
23000e4a:	57fd                	li	a5,-1
23000e4c:	7fe00613          	li	a2,2046
23000e50:	4401                	li	s0,0
23000e52:	b6d1                	j	23000a16 <__adddf3+0x34e>
23000e54:	4701                	li	a4,0
23000e56:	4781                	li	a5,0
23000e58:	a851                	j	23000eec <__adddf3+0x824>
23000e5a:	4701                	li	a4,0
23000e5c:	4781                	li	a5,0
23000e5e:	bff9                	j	23000e3c <__adddf3+0x774>
23000e60:	4701                	li	a4,0
23000e62:	bff9                	j	23000e40 <__adddf3+0x778>
23000e64:	87c2                	mv	a5,a6
23000e66:	4581                	li	a1,0
23000e68:	b611                	j	2300096c <__adddf3+0x2a4>
23000e6a:	4701                	li	a4,0
23000e6c:	849a                	mv	s1,t1
23000e6e:	bfc9                	j	23000e40 <__adddf3+0x778>
23000e70:	87c2                	mv	a5,a6
23000e72:	849a                	mv	s1,t1
23000e74:	bfcd                	j	23000e66 <__adddf3+0x79e>
23000e76:	4701                	li	a4,0
23000e78:	7ff00613          	li	a2,2047
23000e7c:	bfc5                	j	23000e6c <__adddf3+0x7a4>
23000e7e:	87c2                	mv	a5,a6
23000e80:	7ff00613          	li	a2,2047
23000e84:	849a                	mv	s1,t1
23000e86:	b6a5                	j	230009ee <__adddf3+0x326>
23000e88:	4781                	li	a5,0
23000e8a:	4481                	li	s1,0
23000e8c:	00400737          	lui	a4,0x400
23000e90:	7ff00613          	li	a2,2047
23000e94:	45c1                	li	a1,16
23000e96:	a899                	j	23000eec <__adddf3+0x824>
23000e98:	4701                	li	a4,0
23000e9a:	4781                	li	a5,0
23000e9c:	4601                	li	a2,0
23000e9e:	b74d                	j	23000e40 <__adddf3+0x778>
23000ea0:	e489                	bnez	s1,23000eaa <__adddf3+0x7e2>
23000ea2:	00878693          	addi	a3,a5,8 # ff800008 <__HeapLimit+0xbd7d0008>
23000ea6:	be51                	j	23000a3a <__adddf3+0x372>
23000ea8:	fced                	bnez	s1,23000ea2 <__adddf3+0x7da>
23000eaa:	ac041ae3          	bnez	s0,2300097e <__adddf3+0x2b6>
23000eae:	a83d                	j	23000eec <__adddf3+0x824>
23000eb0:	4781                	li	a5,0
23000eb2:	00098e63          	beqz	s3,23000ece <__adddf3+0x806>
23000eb6:	470d                	li	a4,3
23000eb8:	00e99763          	bne	s3,a4,23000ec6 <__adddf3+0x7fe>
23000ebc:	c889                	beqz	s1,23000ece <__adddf3+0x806>
23000ebe:	57fd                	li	a5,-1
23000ec0:	7fe00613          	li	a2,2046
23000ec4:	a029                	j	23000ece <__adddf3+0x806>
23000ec6:	4709                	li	a4,2
23000ec8:	fee99be3          	bne	s3,a4,23000ebe <__adddf3+0x7f6>
23000ecc:	d8ed                	beqz	s1,23000ebe <__adddf3+0x7f6>
23000ece:	0055e593          	ori	a1,a1,5
23000ed2:	873e                	mv	a4,a5
23000ed4:	a80d                	j	23000f06 <__adddf3+0x83e>
23000ed6:	85b2                	mv	a1,a2
23000ed8:	0106e6b3          	or	a3,a3,a6
23000edc:	ac068fe3          	beqz	a3,230009ba <__adddf3+0x2f2>
23000ee0:	4481                	li	s1,0
23000ee2:	00400737          	lui	a4,0x400
23000ee6:	4781                	li	a5,0
23000ee8:	7ff00613          	li	a2,2047
23000eec:	008006b7          	lui	a3,0x800
23000ef0:	8ef9                	and	a3,a3,a4
23000ef2:	ca91                	beqz	a3,23000f06 <__adddf3+0x83e>
23000ef4:	0605                	addi	a2,a2,1
23000ef6:	7ff00693          	li	a3,2047
23000efa:	fad60be3          	beq	a2,a3,23000eb0 <__adddf3+0x7e8>
23000efe:	ff8006b7          	lui	a3,0xff800
23000f02:	16fd                	addi	a3,a3,-1
23000f04:	8f75                	and	a4,a4,a3
23000f06:	0037d513          	srli	a0,a5,0x3
23000f0a:	7ff00693          	li	a3,2047
23000f0e:	01d71793          	slli	a5,a4,0x1d
23000f12:	8fc9                	or	a5,a5,a0
23000f14:	830d                	srli	a4,a4,0x3
23000f16:	00d61963          	bne	a2,a3,23000f28 <__adddf3+0x860>
23000f1a:	8fd9                	or	a5,a5,a4
23000f1c:	4701                	li	a4,0
23000f1e:	c789                	beqz	a5,23000f28 <__adddf3+0x860>
23000f20:	00080737          	lui	a4,0x80
23000f24:	4781                	li	a5,0
23000f26:	4481                	li	s1,0
23000f28:	7ff006b7          	lui	a3,0x7ff00
23000f2c:	0652                	slli	a2,a2,0x14
23000f2e:	0732                	slli	a4,a4,0xc
23000f30:	8e75                	and	a2,a2,a3
23000f32:	8331                	srli	a4,a4,0xc
23000f34:	8f51                	or	a4,a4,a2
23000f36:	04fe                	slli	s1,s1,0x1f
23000f38:	009766b3          	or	a3,a4,s1
23000f3c:	873e                	mv	a4,a5
23000f3e:	87b6                	mv	a5,a3
23000f40:	c199                	beqz	a1,23000f46 <__adddf3+0x87e>
23000f42:	0015a073          	csrs	fflags,a1
23000f46:	40f2                	lw	ra,28(sp)
23000f48:	4462                	lw	s0,24(sp)
23000f4a:	44d2                	lw	s1,20(sp)
23000f4c:	4942                	lw	s2,16(sp)
23000f4e:	49b2                	lw	s3,12(sp)
23000f50:	4a22                	lw	s4,8(sp)
23000f52:	853a                	mv	a0,a4
23000f54:	85be                	mv	a1,a5
23000f56:	6105                	addi	sp,sp,32
23000f58:	8082                	ret
23000f5a:	da8587e3          	beq	a1,s0,23000d08 <__adddf3+0x640>
23000f5e:	4581                	li	a1,0
23000f60:	bb6d                	j	23000d1a <__adddf3+0x652>
23000f62:	85b2                	mv	a1,a2
23000f64:	a4050be3          	beqz	a0,230009ba <__adddf3+0x2f2>
23000f68:	bfa5                	j	23000ee0 <__adddf3+0x818>
23000f6a:	a4858ee3          	beq	a1,s0,230009c6 <__adddf3+0x2fe>
23000f6e:	4581                	li	a1,0
23000f70:	b499                	j	230009b6 <__adddf3+0x2ee>

23000f72 <__divdf3>:
23000f72:	7179                	addi	sp,sp,-48
23000f74:	d422                	sw	s0,40(sp)
23000f76:	ca56                	sw	s5,20(sp)
23000f78:	c266                	sw	s9,4(sp)
23000f7a:	d606                	sw	ra,44(sp)
23000f7c:	d226                	sw	s1,36(sp)
23000f7e:	d04a                	sw	s2,32(sp)
23000f80:	ce4e                	sw	s3,28(sp)
23000f82:	cc52                	sw	s4,24(sp)
23000f84:	c85a                	sw	s6,16(sp)
23000f86:	c65e                	sw	s7,12(sp)
23000f88:	c462                	sw	s8,8(sp)
23000f8a:	842a                	mv	s0,a0
23000f8c:	8cb2                	mv	s9,a2
23000f8e:	8ab6                	mv	s5,a3
23000f90:	00202973          	frrm	s2
23000f94:	0145db13          	srli	s6,a1,0x14
23000f98:	00c59b93          	slli	s7,a1,0xc
23000f9c:	7ffb7b13          	andi	s6,s6,2047
23000fa0:	00cbdb93          	srli	s7,s7,0xc
23000fa4:	01f5da13          	srli	s4,a1,0x1f
23000fa8:	020b0663          	beqz	s6,23000fd4 <__divdf3+0x62>
23000fac:	7ff00793          	li	a5,2047
23000fb0:	06fb0b63          	beq	s6,a5,23001026 <__divdf3+0xb4>
23000fb4:	01d55713          	srli	a4,a0,0x1d
23000fb8:	0b8e                	slli	s7,s7,0x3
23000fba:	01776bb3          	or	s7,a4,s7
23000fbe:	008007b7          	lui	a5,0x800
23000fc2:	00fbebb3          	or	s7,s7,a5
23000fc6:	00351993          	slli	s3,a0,0x3
23000fca:	c01b0b13          	addi	s6,s6,-1023
23000fce:	4c01                	li	s8,0
23000fd0:	4481                	li	s1,0
23000fd2:	a0bd                	j	23001040 <__divdf3+0xce>
23000fd4:	00abe7b3          	or	a5,s7,a0
23000fd8:	c7e9                	beqz	a5,230010a2 <__divdf3+0x130>
23000fda:	020b8b63          	beqz	s7,23001010 <__divdf3+0x9e>
23000fde:	855e                	mv	a0,s7
23000fe0:	3e3010ef          	jal	ra,23002bc2 <__clzsi2>
23000fe4:	ff550713          	addi	a4,a0,-11
23000fe8:	47f1                	li	a5,28
23000fea:	02e7c863          	blt	a5,a4,2300101a <__divdf3+0xa8>
23000fee:	46f5                	li	a3,29
23000ff0:	ff850993          	addi	s3,a0,-8
23000ff4:	8e99                	sub	a3,a3,a4
23000ff6:	013b9bb3          	sll	s7,s7,s3
23000ffa:	00d456b3          	srl	a3,s0,a3
23000ffe:	0176ebb3          	or	s7,a3,s7
23001002:	013419b3          	sll	s3,s0,s3
23001006:	c0d00593          	li	a1,-1011
2300100a:	40a58b33          	sub	s6,a1,a0
2300100e:	b7c1                	j	23000fce <__divdf3+0x5c>
23001010:	3b3010ef          	jal	ra,23002bc2 <__clzsi2>
23001014:	02050513          	addi	a0,a0,32
23001018:	b7f1                	j	23000fe4 <__divdf3+0x72>
2300101a:	fd850b93          	addi	s7,a0,-40
2300101e:	01741bb3          	sll	s7,s0,s7
23001022:	4981                	li	s3,0
23001024:	b7cd                	j	23001006 <__divdf3+0x94>
23001026:	00abe433          	or	s0,s7,a0
2300102a:	c049                	beqz	s0,230010ac <__divdf3+0x13a>
2300102c:	000807b7          	lui	a5,0x80
23001030:	00fbf7b3          	and	a5,s7,a5
23001034:	89aa                	mv	s3,a0
23001036:	7ff00b13          	li	s6,2047
2300103a:	4c0d                	li	s8,3
2300103c:	44c1                	li	s1,16
2300103e:	fbc9                	bnez	a5,23000fd0 <__divdf3+0x5e>
23001040:	00ca9513          	slli	a0,s5,0xc
23001044:	00c55413          	srli	s0,a0,0xc
23001048:	014ad513          	srli	a0,s5,0x14
2300104c:	7ff57593          	andi	a1,a0,2047
23001050:	87e6                	mv	a5,s9
23001052:	01fada93          	srli	s5,s5,0x1f
23001056:	c1ad                	beqz	a1,230010b8 <__divdf3+0x146>
23001058:	7ff00713          	li	a4,2047
2300105c:	0ae58863          	beq	a1,a4,2300110c <__divdf3+0x19a>
23001060:	01dcd793          	srli	a5,s9,0x1d
23001064:	00341513          	slli	a0,s0,0x3
23001068:	8d5d                	or	a0,a0,a5
2300106a:	00800437          	lui	s0,0x800
2300106e:	8c49                	or	s0,s0,a0
23001070:	003c9793          	slli	a5,s9,0x3
23001074:	c0158513          	addi	a0,a1,-1023
23001078:	4701                	li	a4,0
2300107a:	002c1693          	slli	a3,s8,0x2
2300107e:	8ed9                	or	a3,a3,a4
23001080:	40ab05b3          	sub	a1,s6,a0
23001084:	16fd                	addi	a3,a3,-1
23001086:	4539                	li	a0,14
23001088:	015a4633          	xor	a2,s4,s5
2300108c:	0ad56963          	bltu	a0,a3,2300113e <__divdf3+0x1cc>
23001090:	0000c517          	auipc	a0,0xc
23001094:	33450513          	addi	a0,a0,820 # 2300d3c4 <__clz_tab+0x100>
23001098:	068a                	slli	a3,a3,0x2
2300109a:	96aa                	add	a3,a3,a0
2300109c:	4294                	lw	a3,0(a3)
2300109e:	96aa                	add	a3,a3,a0
230010a0:	8682                	jr	a3
230010a2:	4b81                	li	s7,0
230010a4:	4981                	li	s3,0
230010a6:	4b01                	li	s6,0
230010a8:	4c05                	li	s8,1
230010aa:	b71d                	j	23000fd0 <__divdf3+0x5e>
230010ac:	4b81                	li	s7,0
230010ae:	4981                	li	s3,0
230010b0:	7ff00b13          	li	s6,2047
230010b4:	4c09                	li	s8,2
230010b6:	bf29                	j	23000fd0 <__divdf3+0x5e>
230010b8:	019467b3          	or	a5,s0,s9
230010bc:	c7a5                	beqz	a5,23001124 <__divdf3+0x1b2>
230010be:	c81d                	beqz	s0,230010f4 <__divdf3+0x182>
230010c0:	8522                	mv	a0,s0
230010c2:	301010ef          	jal	ra,23002bc2 <__clzsi2>
230010c6:	85aa                	mv	a1,a0
230010c8:	ff558693          	addi	a3,a1,-11
230010cc:	47f1                	li	a5,28
230010ce:	02d7c963          	blt	a5,a3,23001100 <__divdf3+0x18e>
230010d2:	4775                	li	a4,29
230010d4:	ff858793          	addi	a5,a1,-8
230010d8:	8f15                	sub	a4,a4,a3
230010da:	00f41533          	sll	a0,s0,a5
230010de:	00ecd733          	srl	a4,s9,a4
230010e2:	00a76433          	or	s0,a4,a0
230010e6:	00fc97b3          	sll	a5,s9,a5
230010ea:	c0d00713          	li	a4,-1011
230010ee:	40b70533          	sub	a0,a4,a1
230010f2:	b759                	j	23001078 <__divdf3+0x106>
230010f4:	8566                	mv	a0,s9
230010f6:	2cd010ef          	jal	ra,23002bc2 <__clzsi2>
230010fa:	02050593          	addi	a1,a0,32
230010fe:	b7e9                	j	230010c8 <__divdf3+0x156>
23001100:	fd858513          	addi	a0,a1,-40
23001104:	00ac9433          	sll	s0,s9,a0
23001108:	4781                	li	a5,0
2300110a:	b7c5                	j	230010ea <__divdf3+0x178>
2300110c:	01946633          	or	a2,s0,s9
23001110:	ce19                	beqz	a2,2300112e <__divdf3+0x1bc>
23001112:	00080737          	lui	a4,0x80
23001116:	8f61                	and	a4,a4,s0
23001118:	7ff00513          	li	a0,2047
2300111c:	ef19                	bnez	a4,2300113a <__divdf3+0x1c8>
2300111e:	470d                	li	a4,3
23001120:	44c1                	li	s1,16
23001122:	bfa1                	j	2300107a <__divdf3+0x108>
23001124:	4401                	li	s0,0
23001126:	4781                	li	a5,0
23001128:	4501                	li	a0,0
2300112a:	4705                	li	a4,1
2300112c:	b7b9                	j	2300107a <__divdf3+0x108>
2300112e:	4401                	li	s0,0
23001130:	4781                	li	a5,0
23001132:	7ff00513          	li	a0,2047
23001136:	4709                	li	a4,2
23001138:	b789                	j	2300107a <__divdf3+0x108>
2300113a:	470d                	li	a4,3
2300113c:	bf3d                	j	2300107a <__divdf3+0x108>
2300113e:	01746663          	bltu	s0,s7,2300114a <__divdf3+0x1d8>
23001142:	268b9463          	bne	s7,s0,230013aa <__divdf3+0x438>
23001146:	26f9e263          	bltu	s3,a5,230013aa <__divdf3+0x438>
2300114a:	01fb9513          	slli	a0,s7,0x1f
2300114e:	0019d713          	srli	a4,s3,0x1
23001152:	01f99693          	slli	a3,s3,0x1f
23001156:	001bdb93          	srli	s7,s7,0x1
2300115a:	00e569b3          	or	s3,a0,a4
2300115e:	00841513          	slli	a0,s0,0x8
23001162:	0187d813          	srli	a6,a5,0x18
23001166:	00a86833          	or	a6,a6,a0
2300116a:	8141                	srli	a0,a0,0x10
2300116c:	02abde33          	divu	t3,s7,a0
23001170:	01081f13          	slli	t5,a6,0x10
23001174:	010f5f13          	srli	t5,t5,0x10
23001178:	00879893          	slli	a7,a5,0x8
2300117c:	0109d793          	srli	a5,s3,0x10
23001180:	02abfbb3          	remu	s7,s7,a0
23001184:	8372                	mv	t1,t3
23001186:	03cf0733          	mul	a4,t5,t3
2300118a:	0bc2                	slli	s7,s7,0x10
2300118c:	0177e7b3          	or	a5,a5,s7
23001190:	00e7fc63          	bgeu	a5,a4,230011a8 <__divdf3+0x236>
23001194:	97c2                	add	a5,a5,a6
23001196:	fffe0313          	addi	t1,t3,-1
2300119a:	0107e763          	bltu	a5,a6,230011a8 <__divdf3+0x236>
2300119e:	00e7f563          	bgeu	a5,a4,230011a8 <__divdf3+0x236>
230011a2:	ffee0313          	addi	t1,t3,-2
230011a6:	97c2                	add	a5,a5,a6
230011a8:	8f99                	sub	a5,a5,a4
230011aa:	02a7deb3          	divu	t4,a5,a0
230011ae:	01099713          	slli	a4,s3,0x10
230011b2:	8341                	srli	a4,a4,0x10
230011b4:	02a7f7b3          	remu	a5,a5,a0
230011b8:	89f6                	mv	s3,t4
230011ba:	03df0e33          	mul	t3,t5,t4
230011be:	07c2                	slli	a5,a5,0x10
230011c0:	8f5d                	or	a4,a4,a5
230011c2:	01c77c63          	bgeu	a4,t3,230011da <__divdf3+0x268>
230011c6:	9742                	add	a4,a4,a6
230011c8:	fffe8993          	addi	s3,t4,-1
230011cc:	01076763          	bltu	a4,a6,230011da <__divdf3+0x268>
230011d0:	01c77563          	bgeu	a4,t3,230011da <__divdf3+0x268>
230011d4:	ffee8993          	addi	s3,t4,-2
230011d8:	9742                	add	a4,a4,a6
230011da:	0342                	slli	t1,t1,0x10
230011dc:	013369b3          	or	s3,t1,s3
230011e0:	6341                	lui	t1,0x10
230011e2:	fff30e93          	addi	t4,t1,-1 # ffff <StackSize+0xefff>
230011e6:	0109d293          	srli	t0,s3,0x10
230011ea:	0108df93          	srli	t6,a7,0x10
230011ee:	41c70733          	sub	a4,a4,t3
230011f2:	01d9fe33          	and	t3,s3,t4
230011f6:	01d8feb3          	and	t4,a7,t4
230011fa:	03de07b3          	mul	a5,t3,t4
230011fe:	03d28433          	mul	s0,t0,t4
23001202:	03cf8e33          	mul	t3,t6,t3
23001206:	008e03b3          	add	t2,t3,s0
2300120a:	0107de13          	srli	t3,a5,0x10
2300120e:	9e1e                	add	t3,t3,t2
23001210:	03f282b3          	mul	t0,t0,t6
23001214:	008e7363          	bgeu	t3,s0,2300121a <__divdf3+0x2a8>
23001218:	929a                	add	t0,t0,t1
2300121a:	63c1                	lui	t2,0x10
2300121c:	010e5313          	srli	t1,t3,0x10
23001220:	13fd                	addi	t2,t2,-1
23001222:	929a                	add	t0,t0,t1
23001224:	007e7333          	and	t1,t3,t2
23001228:	0342                	slli	t1,t1,0x10
2300122a:	0077f7b3          	and	a5,a5,t2
2300122e:	933e                	add	t1,t1,a5
23001230:	00576763          	bltu	a4,t0,2300123e <__divdf3+0x2cc>
23001234:	844e                	mv	s0,s3
23001236:	02571e63          	bne	a4,t0,23001272 <__divdf3+0x300>
2300123a:	0266fc63          	bgeu	a3,t1,23001272 <__divdf3+0x300>
2300123e:	96c6                	add	a3,a3,a7
23001240:	0116b7b3          	sltu	a5,a3,a7
23001244:	97c2                	add	a5,a5,a6
23001246:	973e                	add	a4,a4,a5
23001248:	fff98413          	addi	s0,s3,-1
2300124c:	00e86663          	bltu	a6,a4,23001258 <__divdf3+0x2e6>
23001250:	02e81163          	bne	a6,a4,23001272 <__divdf3+0x300>
23001254:	0116ef63          	bltu	a3,a7,23001272 <__divdf3+0x300>
23001258:	00576663          	bltu	a4,t0,23001264 <__divdf3+0x2f2>
2300125c:	00e29b63          	bne	t0,a4,23001272 <__divdf3+0x300>
23001260:	0066f963          	bgeu	a3,t1,23001272 <__divdf3+0x300>
23001264:	96c6                	add	a3,a3,a7
23001266:	0116b7b3          	sltu	a5,a3,a7
2300126a:	97c2                	add	a5,a5,a6
2300126c:	ffe98413          	addi	s0,s3,-2
23001270:	973e                	add	a4,a4,a5
23001272:	40668333          	sub	t1,a3,t1
23001276:	40570733          	sub	a4,a4,t0
2300127a:	0066b6b3          	sltu	a3,a3,t1
2300127e:	8f15                	sub	a4,a4,a3
23001280:	57fd                	li	a5,-1
23001282:	0ee80763          	beq	a6,a4,23001370 <__divdf3+0x3fe>
23001286:	02a752b3          	divu	t0,a4,a0
2300128a:	01035793          	srli	a5,t1,0x10
2300128e:	02a77733          	remu	a4,a4,a0
23001292:	8696                	mv	a3,t0
23001294:	025f0e33          	mul	t3,t5,t0
23001298:	0742                	slli	a4,a4,0x10
2300129a:	8f5d                	or	a4,a4,a5
2300129c:	01c77c63          	bgeu	a4,t3,230012b4 <__divdf3+0x342>
230012a0:	9742                	add	a4,a4,a6
230012a2:	fff28693          	addi	a3,t0,-1 # 23000311 <memset+0x8d>
230012a6:	01076763          	bltu	a4,a6,230012b4 <__divdf3+0x342>
230012aa:	01c77563          	bgeu	a4,t3,230012b4 <__divdf3+0x342>
230012ae:	ffe28693          	addi	a3,t0,-2
230012b2:	9742                	add	a4,a4,a6
230012b4:	41c70733          	sub	a4,a4,t3
230012b8:	02a75e33          	divu	t3,a4,a0
230012bc:	01031793          	slli	a5,t1,0x10
230012c0:	83c1                	srli	a5,a5,0x10
230012c2:	02a77733          	remu	a4,a4,a0
230012c6:	03cf0f33          	mul	t5,t5,t3
230012ca:	0742                	slli	a4,a4,0x10
230012cc:	8f5d                	or	a4,a4,a5
230012ce:	87f2                	mv	a5,t3
230012d0:	01e77c63          	bgeu	a4,t5,230012e8 <__divdf3+0x376>
230012d4:	9742                	add	a4,a4,a6
230012d6:	fffe0793          	addi	a5,t3,-1
230012da:	01076763          	bltu	a4,a6,230012e8 <__divdf3+0x376>
230012de:	01e77563          	bgeu	a4,t5,230012e8 <__divdf3+0x376>
230012e2:	ffee0793          	addi	a5,t3,-2
230012e6:	9742                	add	a4,a4,a6
230012e8:	06c2                	slli	a3,a3,0x10
230012ea:	8edd                	or	a3,a3,a5
230012ec:	01069793          	slli	a5,a3,0x10
230012f0:	83c1                	srli	a5,a5,0x10
230012f2:	0106d313          	srli	t1,a3,0x10
230012f6:	026f8e33          	mul	t3,t6,t1
230012fa:	41e70733          	sub	a4,a4,t5
230012fe:	02ff8fb3          	mul	t6,t6,a5
23001302:	02fe8f33          	mul	t5,t4,a5
23001306:	03d30eb3          	mul	t4,t1,t4
2300130a:	010f5793          	srli	a5,t5,0x10
2300130e:	9ff6                	add	t6,t6,t4
23001310:	97fe                	add	a5,a5,t6
23001312:	01d7f463          	bgeu	a5,t4,2300131a <__divdf3+0x3a8>
23001316:	6541                	lui	a0,0x10
23001318:	9e2a                	add	t3,t3,a0
2300131a:	0107d313          	srli	t1,a5,0x10
2300131e:	9372                	add	t1,t1,t3
23001320:	6e41                	lui	t3,0x10
23001322:	1e7d                	addi	t3,t3,-1
23001324:	01c7f533          	and	a0,a5,t3
23001328:	0542                	slli	a0,a0,0x10
2300132a:	01cf7f33          	and	t5,t5,t3
2300132e:	957a                	add	a0,a0,t5
23001330:	00676663          	bltu	a4,t1,2300133c <__divdf3+0x3ca>
23001334:	2c671263          	bne	a4,t1,230015f8 <__divdf3+0x686>
23001338:	87b6                	mv	a5,a3
2300133a:	c91d                	beqz	a0,23001370 <__divdf3+0x3fe>
2300133c:	9742                	add	a4,a4,a6
2300133e:	fff68793          	addi	a5,a3,-1 # 7fefffff <__HeapLimit+0x3decffff>
23001342:	03076163          	bltu	a4,a6,23001364 <__divdf3+0x3f2>
23001346:	00676663          	bltu	a4,t1,23001352 <__divdf3+0x3e0>
2300134a:	2a671663          	bne	a4,t1,230015f6 <__divdf3+0x684>
2300134e:	00a8fd63          	bgeu	a7,a0,23001368 <__divdf3+0x3f6>
23001352:	ffe68793          	addi	a5,a3,-2
23001356:	00189693          	slli	a3,a7,0x1
2300135a:	0116b8b3          	sltu	a7,a3,a7
2300135e:	9846                	add	a6,a6,a7
23001360:	9742                	add	a4,a4,a6
23001362:	88b6                	mv	a7,a3
23001364:	00671463          	bne	a4,t1,2300136c <__divdf3+0x3fa>
23001368:	00a88463          	beq	a7,a0,23001370 <__divdf3+0x3fe>
2300136c:	0017e793          	ori	a5,a5,1
23001370:	3ff58813          	addi	a6,a1,1023
23001374:	11005863          	blez	a6,23001484 <__divdf3+0x512>
23001378:	0077f713          	andi	a4,a5,7
2300137c:	cf25                	beqz	a4,230013f4 <__divdf3+0x482>
2300137e:	4709                	li	a4,2
23001380:	0014e493          	ori	s1,s1,1
23001384:	06e90763          	beq	s2,a4,230013f2 <__divdf3+0x480>
23001388:	470d                	li	a4,3
2300138a:	06e90063          	beq	s2,a4,230013ea <__divdf3+0x478>
2300138e:	06091363          	bnez	s2,230013f4 <__divdf3+0x482>
23001392:	00f7f713          	andi	a4,a5,15
23001396:	4691                	li	a3,4
23001398:	04d70e63          	beq	a4,a3,230013f4 <__divdf3+0x482>
2300139c:	00478713          	addi	a4,a5,4 # 80004 <StackSize+0x7f004>
230013a0:	00f737b3          	sltu	a5,a4,a5
230013a4:	943e                	add	s0,s0,a5
230013a6:	87ba                	mv	a5,a4
230013a8:	a0b1                	j	230013f4 <__divdf3+0x482>
230013aa:	15fd                	addi	a1,a1,-1
230013ac:	4681                	li	a3,0
230013ae:	bb45                	j	2300115e <__divdf3+0x1ec>
230013b0:	8652                	mv	a2,s4
230013b2:	845e                	mv	s0,s7
230013b4:	87ce                	mv	a5,s3
230013b6:	8762                	mv	a4,s8
230013b8:	468d                	li	a3,3
230013ba:	22d70763          	beq	a4,a3,230015e8 <__divdf3+0x676>
230013be:	4685                	li	a3,1
230013c0:	22d70163          	beq	a4,a3,230015e2 <__divdf3+0x670>
230013c4:	4689                	li	a3,2
230013c6:	fad715e3          	bne	a4,a3,23001370 <__divdf3+0x3fe>
230013ca:	a029                	j	230013d4 <__divdf3+0x462>
230013cc:	8656                	mv	a2,s5
230013ce:	b7ed                	j	230013b8 <__divdf3+0x446>
230013d0:	0084e493          	ori	s1,s1,8
230013d4:	4501                	li	a0,0
230013d6:	4781                	li	a5,0
230013d8:	7ff00713          	li	a4,2047
230013dc:	a091                	j	23001420 <__divdf3+0x4ae>
230013de:	00080437          	lui	s0,0x80
230013e2:	4781                	li	a5,0
230013e4:	4601                	li	a2,0
230013e6:	470d                	li	a4,3
230013e8:	bfc1                	j	230013b8 <__divdf3+0x446>
230013ea:	e609                	bnez	a2,230013f4 <__divdf3+0x482>
230013ec:	00878713          	addi	a4,a5,8
230013f0:	bf45                	j	230013a0 <__divdf3+0x42e>
230013f2:	fe6d                	bnez	a2,230013ec <__divdf3+0x47a>
230013f4:	01000737          	lui	a4,0x1000
230013f8:	8f61                	and	a4,a4,s0
230013fa:	c719                	beqz	a4,23001408 <__divdf3+0x496>
230013fc:	ff000737          	lui	a4,0xff000
23001400:	177d                	addi	a4,a4,-1
23001402:	8c79                	and	s0,s0,a4
23001404:	40058813          	addi	a6,a1,1024
23001408:	7fe00713          	li	a4,2046
2300140c:	05074663          	blt	a4,a6,23001458 <__divdf3+0x4e6>
23001410:	0037d713          	srli	a4,a5,0x3
23001414:	01d41793          	slli	a5,s0,0x1d
23001418:	8fd9                	or	a5,a5,a4
2300141a:	00345513          	srli	a0,s0,0x3
2300141e:	8742                	mv	a4,a6
23001420:	0752                	slli	a4,a4,0x14
23001422:	7ff006b7          	lui	a3,0x7ff00
23001426:	0532                	slli	a0,a0,0xc
23001428:	8f75                	and	a4,a4,a3
2300142a:	8131                	srli	a0,a0,0xc
2300142c:	8d59                	or	a0,a0,a4
2300142e:	067e                	slli	a2,a2,0x1f
23001430:	00c56733          	or	a4,a0,a2
23001434:	85ba                	mv	a1,a4
23001436:	853e                	mv	a0,a5
23001438:	c099                	beqz	s1,2300143e <__divdf3+0x4cc>
2300143a:	0014a073          	csrs	fflags,s1
2300143e:	50b2                	lw	ra,44(sp)
23001440:	5422                	lw	s0,40(sp)
23001442:	5492                	lw	s1,36(sp)
23001444:	5902                	lw	s2,32(sp)
23001446:	49f2                	lw	s3,28(sp)
23001448:	4a62                	lw	s4,24(sp)
2300144a:	4ad2                	lw	s5,20(sp)
2300144c:	4b42                	lw	s6,16(sp)
2300144e:	4bb2                	lw	s7,12(sp)
23001450:	4c22                	lw	s8,8(sp)
23001452:	4c92                	lw	s9,4(sp)
23001454:	6145                	addi	sp,sp,48
23001456:	8082                	ret
23001458:	4789                	li	a5,2
2300145a:	02f90363          	beq	s2,a5,23001480 <__divdf3+0x50e>
2300145e:	478d                	li	a5,3
23001460:	00f90863          	beq	s2,a5,23001470 <__divdf3+0x4fe>
23001464:	00091763          	bnez	s2,23001472 <__divdf3+0x500>
23001468:	4781                	li	a5,0
2300146a:	7ff00713          	li	a4,2047
2300146e:	a029                	j	23001478 <__divdf3+0x506>
23001470:	de65                	beqz	a2,23001468 <__divdf3+0x4f6>
23001472:	57fd                	li	a5,-1
23001474:	7fe00713          	li	a4,2046
23001478:	0054e493          	ori	s1,s1,5
2300147c:	853e                	mv	a0,a5
2300147e:	b74d                	j	23001420 <__divdf3+0x4ae>
23001480:	f665                	bnez	a2,23001468 <__divdf3+0x4f6>
23001482:	bfc5                	j	23001472 <__divdf3+0x500>
23001484:	4705                	li	a4,1
23001486:	04081463          	bnez	a6,230014ce <__divdf3+0x55c>
2300148a:	0077f693          	andi	a3,a5,7
2300148e:	8722                	mv	a4,s0
23001490:	ca9d                	beqz	a3,230014c6 <__divdf3+0x554>
23001492:	4689                	li	a3,2
23001494:	0014e493          	ori	s1,s1,1
23001498:	02d90663          	beq	s2,a3,230014c4 <__divdf3+0x552>
2300149c:	468d                	li	a3,3
2300149e:	00d90f63          	beq	s2,a3,230014bc <__divdf3+0x54a>
230014a2:	02091263          	bnez	s2,230014c6 <__divdf3+0x554>
230014a6:	00f7f693          	andi	a3,a5,15
230014aa:	4511                	li	a0,4
230014ac:	00a68d63          	beq	a3,a0,230014c6 <__divdf3+0x554>
230014b0:	ffc7b713          	sltiu	a4,a5,-4
230014b4:	00174713          	xori	a4,a4,1
230014b8:	9722                	add	a4,a4,s0
230014ba:	a031                	j	230014c6 <__divdf3+0x554>
230014bc:	e609                	bnez	a2,230014c6 <__divdf3+0x554>
230014be:	ff87b713          	sltiu	a4,a5,-8
230014c2:	bfcd                	j	230014b4 <__divdf3+0x542>
230014c4:	fe6d                	bnez	a2,230014be <__divdf3+0x54c>
230014c6:	8361                	srli	a4,a4,0x18
230014c8:	00174713          	xori	a4,a4,1
230014cc:	8b05                	andi	a4,a4,1
230014ce:	4505                	li	a0,1
230014d0:	41050533          	sub	a0,a0,a6
230014d4:	03800693          	li	a3,56
230014d8:	0ca6c263          	blt	a3,a0,2300159c <__divdf3+0x62a>
230014dc:	46fd                	li	a3,31
230014de:	04a6ca63          	blt	a3,a0,23001532 <__divdf3+0x5c0>
230014e2:	41e58593          	addi	a1,a1,1054
230014e6:	00a7d833          	srl	a6,a5,a0
230014ea:	00b416b3          	sll	a3,s0,a1
230014ee:	00b797b3          	sll	a5,a5,a1
230014f2:	0106e6b3          	or	a3,a3,a6
230014f6:	00f037b3          	snez	a5,a5
230014fa:	8fd5                	or	a5,a5,a3
230014fc:	00a45533          	srl	a0,s0,a0
23001500:	0077f693          	andi	a3,a5,7
23001504:	c2ad                	beqz	a3,23001566 <__divdf3+0x5f4>
23001506:	4689                	li	a3,2
23001508:	0014e493          	ori	s1,s1,1
2300150c:	04d90c63          	beq	s2,a3,23001564 <__divdf3+0x5f2>
23001510:	468d                	li	a3,3
23001512:	04d90563          	beq	s2,a3,2300155c <__divdf3+0x5ea>
23001516:	04091863          	bnez	s2,23001566 <__divdf3+0x5f4>
2300151a:	00f7f693          	andi	a3,a5,15
2300151e:	4591                	li	a1,4
23001520:	04b68363          	beq	a3,a1,23001566 <__divdf3+0x5f4>
23001524:	00478693          	addi	a3,a5,4
23001528:	00f6b7b3          	sltu	a5,a3,a5
2300152c:	953e                	add	a0,a0,a5
2300152e:	87b6                	mv	a5,a3
23001530:	a81d                	j	23001566 <__divdf3+0x5f4>
23001532:	5685                	li	a3,-31
23001534:	410686b3          	sub	a3,a3,a6
23001538:	02000893          	li	a7,32
2300153c:	00d456b3          	srl	a3,s0,a3
23001540:	4801                	li	a6,0
23001542:	01150663          	beq	a0,a7,2300154e <__divdf3+0x5dc>
23001546:	43e58593          	addi	a1,a1,1086
2300154a:	00b41833          	sll	a6,s0,a1
2300154e:	00f867b3          	or	a5,a6,a5
23001552:	00f037b3          	snez	a5,a5
23001556:	8fd5                	or	a5,a5,a3
23001558:	4501                	li	a0,0
2300155a:	b75d                	j	23001500 <__divdf3+0x58e>
2300155c:	e609                	bnez	a2,23001566 <__divdf3+0x5f4>
2300155e:	00878693          	addi	a3,a5,8
23001562:	b7d9                	j	23001528 <__divdf3+0x5b6>
23001564:	fe6d                	bnez	a2,2300155e <__divdf3+0x5ec>
23001566:	008006b7          	lui	a3,0x800
2300156a:	8ee9                	and	a3,a3,a0
2300156c:	ca81                	beqz	a3,2300157c <__divdf3+0x60a>
2300156e:	0014e493          	ori	s1,s1,1
23001572:	4501                	li	a0,0
23001574:	4781                	li	a5,0
23001576:	e305                	bnez	a4,23001596 <__divdf3+0x624>
23001578:	4705                	li	a4,1
2300157a:	b55d                	j	23001420 <__divdf3+0x4ae>
2300157c:	0037d693          	srli	a3,a5,0x3
23001580:	01d51793          	slli	a5,a0,0x1d
23001584:	8fd5                	or	a5,a5,a3
23001586:	810d                	srli	a0,a0,0x3
23001588:	e8070ce3          	beqz	a4,23001420 <__divdf3+0x4ae>
2300158c:	0014f713          	andi	a4,s1,1
23001590:	e80708e3          	beqz	a4,23001420 <__divdf3+0x4ae>
23001594:	4701                	li	a4,0
23001596:	0024e493          	ori	s1,s1,2
2300159a:	b559                	j	23001420 <__divdf3+0x4ae>
2300159c:	8fc1                	or	a5,a5,s0
2300159e:	cf91                	beqz	a5,230015ba <__divdf3+0x648>
230015a0:	4789                	li	a5,2
230015a2:	0014e493          	ori	s1,s1,1
230015a6:	02f90363          	beq	s2,a5,230015cc <__divdf3+0x65a>
230015aa:	478d                	li	a5,3
230015ac:	00f90c63          	beq	s2,a5,230015c4 <__divdf3+0x652>
230015b0:	4785                	li	a5,1
230015b2:	00091363          	bnez	s2,230015b8 <__divdf3+0x646>
230015b6:	4795                	li	a5,5
230015b8:	838d                	srli	a5,a5,0x3
230015ba:	0024e493          	ori	s1,s1,2
230015be:	4501                	li	a0,0
230015c0:	4701                	li	a4,0
230015c2:	bdb9                	j	23001420 <__divdf3+0x4ae>
230015c4:	47a5                	li	a5,9
230015c6:	da6d                	beqz	a2,230015b8 <__divdf3+0x646>
230015c8:	4785                	li	a5,1
230015ca:	b7fd                	j	230015b8 <__divdf3+0x646>
230015cc:	47a5                	li	a5,9
230015ce:	f66d                	bnez	a2,230015b8 <__divdf3+0x646>
230015d0:	bfe5                	j	230015c8 <__divdf3+0x656>
230015d2:	00080537          	lui	a0,0x80
230015d6:	4781                	li	a5,0
230015d8:	7ff00713          	li	a4,2047
230015dc:	4601                	li	a2,0
230015de:	44c1                	li	s1,16
230015e0:	b581                	j	23001420 <__divdf3+0x4ae>
230015e2:	4501                	li	a0,0
230015e4:	4781                	li	a5,0
230015e6:	bfe9                	j	230015c0 <__divdf3+0x64e>
230015e8:	00080537          	lui	a0,0x80
230015ec:	4781                	li	a5,0
230015ee:	7ff00713          	li	a4,2047
230015f2:	4601                	li	a2,0
230015f4:	b535                	j	23001420 <__divdf3+0x4ae>
230015f6:	86be                	mv	a3,a5
230015f8:	87b6                	mv	a5,a3
230015fa:	bb8d                	j	2300136c <__divdf3+0x3fa>

230015fc <__eqdf2>:
230015fc:	882a                	mv	a6,a0
230015fe:	002027f3          	frrm	a5
23001602:	001007b7          	lui	a5,0x100
23001606:	0145d893          	srli	a7,a1,0x14
2300160a:	17fd                	addi	a5,a5,-1
2300160c:	0146d313          	srli	t1,a3,0x14
23001610:	8e2a                	mv	t3,a0
23001612:	7ff8f893          	andi	a7,a7,2047
23001616:	7ff00513          	li	a0,2047
2300161a:	00b7f733          	and	a4,a5,a1
2300161e:	8eb2                	mv	t4,a2
23001620:	8ff5                	and	a5,a5,a3
23001622:	81fd                	srli	a1,a1,0x1f
23001624:	7ff37313          	andi	t1,t1,2047
23001628:	82fd                	srli	a3,a3,0x1f
2300162a:	00a89863          	bne	a7,a0,2300163a <__eqdf2+0x3e>
2300162e:	01076533          	or	a0,a4,a6
23001632:	e531                	bnez	a0,2300167e <__eqdf2+0x82>
23001634:	07131463          	bne	t1,a7,2300169c <__eqdf2+0xa0>
23001638:	a019                	j	2300163e <__eqdf2+0x42>
2300163a:	00a31563          	bne	t1,a0,23001644 <__eqdf2+0x48>
2300163e:	00c7e533          	or	a0,a5,a2
23001642:	e515                	bnez	a0,2300166e <__eqdf2+0x72>
23001644:	4505                	li	a0,1
23001646:	04689c63          	bne	a7,t1,2300169e <__eqdf2+0xa2>
2300164a:	04f71a63          	bne	a4,a5,2300169e <__eqdf2+0xa2>
2300164e:	05de1863          	bne	t3,t4,2300169e <__eqdf2+0xa2>
23001652:	00d58c63          	beq	a1,a3,2300166a <__eqdf2+0x6e>
23001656:	04089463          	bnez	a7,2300169e <__eqdf2+0xa2>
2300165a:	01076733          	or	a4,a4,a6
2300165e:	00e03533          	snez	a0,a4
23001662:	8082                	ret
23001664:	00186073          	csrsi	fflags,16
23001668:	a815                	j	2300169c <__eqdf2+0xa0>
2300166a:	4501                	li	a0,0
2300166c:	8082                	ret
2300166e:	7ff00693          	li	a3,2047
23001672:	02d89163          	bne	a7,a3,23001694 <__eqdf2+0x98>
23001676:	01076833          	or	a6,a4,a6
2300167a:	00080d63          	beqz	a6,23001694 <__eqdf2+0x98>
2300167e:	000806b7          	lui	a3,0x80
23001682:	8f75                	and	a4,a4,a3
23001684:	d365                	beqz	a4,23001664 <__eqdf2+0x68>
23001686:	7ff00713          	li	a4,2047
2300168a:	4505                	li	a0,1
2300168c:	00e31963          	bne	t1,a4,2300169e <__eqdf2+0xa2>
23001690:	8e5d                	or	a2,a2,a5
23001692:	c611                	beqz	a2,2300169e <__eqdf2+0xa2>
23001694:	00080737          	lui	a4,0x80
23001698:	8ff9                	and	a5,a5,a4
2300169a:	d7e9                	beqz	a5,23001664 <__eqdf2+0x68>
2300169c:	4505                	li	a0,1
2300169e:	8082                	ret

230016a0 <__gedf2>:
230016a0:	87aa                	mv	a5,a0
230016a2:	00202773          	frrm	a4
230016a6:	00100737          	lui	a4,0x100
230016aa:	177d                	addi	a4,a4,-1
230016ac:	0145d813          	srli	a6,a1,0x14
230016b0:	00b778b3          	and	a7,a4,a1
230016b4:	832a                	mv	t1,a0
230016b6:	7ff87813          	andi	a6,a6,2047
230016ba:	01f5d513          	srli	a0,a1,0x1f
230016be:	7ff00e93          	li	t4,2047
230016c2:	0146d593          	srli	a1,a3,0x14
230016c6:	8f75                	and	a4,a4,a3
230016c8:	8e32                	mv	t3,a2
230016ca:	7ff5f593          	andi	a1,a1,2047
230016ce:	82fd                	srli	a3,a3,0x1f
230016d0:	01d81a63          	bne	a6,t4,230016e4 <__gedf2+0x44>
230016d4:	00f8eeb3          	or	t4,a7,a5
230016d8:	060e8663          	beqz	t4,23001744 <__gedf2+0xa4>
230016dc:	00186073          	csrsi	fflags,16
230016e0:	5579                	li	a0,-2
230016e2:	8082                	ret
230016e4:	01d59663          	bne	a1,t4,230016f0 <__gedf2+0x50>
230016e8:	00c76eb3          	or	t4,a4,a2
230016ec:	fe0e98e3          	bnez	t4,230016dc <__gedf2+0x3c>
230016f0:	04081c63          	bnez	a6,23001748 <__gedf2+0xa8>
230016f4:	00f8e7b3          	or	a5,a7,a5
230016f8:	0017b793          	seqz	a5,a5
230016fc:	e199                	bnez	a1,23001702 <__gedf2+0x62>
230016fe:	8e59                	or	a2,a2,a4
23001700:	ce0d                	beqz	a2,2300173a <__gedf2+0x9a>
23001702:	eb81                	bnez	a5,23001712 <__gedf2+0x72>
23001704:	00d51463          	bne	a0,a3,2300170c <__gedf2+0x6c>
23001708:	0105d963          	bge	a1,a6,2300171a <__gedf2+0x7a>
2300170c:	c50d                	beqz	a0,23001736 <__gedf2+0x96>
2300170e:	557d                	li	a0,-1
23001710:	8082                	ret
23001712:	557d                	li	a0,-1
23001714:	c691                	beqz	a3,23001720 <__gedf2+0x80>
23001716:	8536                	mv	a0,a3
23001718:	8082                	ret
2300171a:	00b85463          	bge	a6,a1,23001722 <__gedf2+0x82>
2300171e:	d965                	beqz	a0,2300170e <__gedf2+0x6e>
23001720:	8082                	ret
23001722:	ff1765e3          	bltu	a4,a7,2300170c <__gedf2+0x6c>
23001726:	00e89c63          	bne	a7,a4,2300173e <__gedf2+0x9e>
2300172a:	fe6e61e3          	bltu	t3,t1,2300170c <__gedf2+0x6c>
2300172e:	ffc368e3          	bltu	t1,t3,2300171e <__gedf2+0x7e>
23001732:	4501                	li	a0,0
23001734:	8082                	ret
23001736:	4505                	li	a0,1
23001738:	8082                	ret
2300173a:	ffe5                	bnez	a5,23001732 <__gedf2+0x92>
2300173c:	bfc1                	j	2300170c <__gedf2+0x6c>
2300173e:	fee8e0e3          	bltu	a7,a4,2300171e <__gedf2+0x7e>
23001742:	bfc5                	j	23001732 <__gedf2+0x92>
23001744:	fb0582e3          	beq	a1,a6,230016e8 <__gedf2+0x48>
23001748:	fdd5                	bnez	a1,23001704 <__gedf2+0x64>
2300174a:	4781                	li	a5,0
2300174c:	bf4d                	j	230016fe <__gedf2+0x5e>

2300174e <__ledf2>:
2300174e:	87aa                	mv	a5,a0
23001750:	00202773          	frrm	a4
23001754:	00100737          	lui	a4,0x100
23001758:	177d                	addi	a4,a4,-1
2300175a:	0145d813          	srli	a6,a1,0x14
2300175e:	00b778b3          	and	a7,a4,a1
23001762:	832a                	mv	t1,a0
23001764:	7ff87813          	andi	a6,a6,2047
23001768:	01f5d513          	srli	a0,a1,0x1f
2300176c:	7ff00e93          	li	t4,2047
23001770:	0146d593          	srli	a1,a3,0x14
23001774:	8f75                	and	a4,a4,a3
23001776:	8e32                	mv	t3,a2
23001778:	7ff5f593          	andi	a1,a1,2047
2300177c:	82fd                	srli	a3,a3,0x1f
2300177e:	01d81a63          	bne	a6,t4,23001792 <__ledf2+0x44>
23001782:	00f8eeb3          	or	t4,a7,a5
23001786:	060e8663          	beqz	t4,230017f2 <__ledf2+0xa4>
2300178a:	00186073          	csrsi	fflags,16
2300178e:	4509                	li	a0,2
23001790:	8082                	ret
23001792:	01d59663          	bne	a1,t4,2300179e <__ledf2+0x50>
23001796:	00c76eb3          	or	t4,a4,a2
2300179a:	fe0e98e3          	bnez	t4,2300178a <__ledf2+0x3c>
2300179e:	04081c63          	bnez	a6,230017f6 <__ledf2+0xa8>
230017a2:	00f8e7b3          	or	a5,a7,a5
230017a6:	0017b793          	seqz	a5,a5
230017aa:	e199                	bnez	a1,230017b0 <__ledf2+0x62>
230017ac:	8e59                	or	a2,a2,a4
230017ae:	ce0d                	beqz	a2,230017e8 <__ledf2+0x9a>
230017b0:	eb81                	bnez	a5,230017c0 <__ledf2+0x72>
230017b2:	00d51463          	bne	a0,a3,230017ba <__ledf2+0x6c>
230017b6:	0105d963          	bge	a1,a6,230017c8 <__ledf2+0x7a>
230017ba:	c50d                	beqz	a0,230017e4 <__ledf2+0x96>
230017bc:	557d                	li	a0,-1
230017be:	8082                	ret
230017c0:	557d                	li	a0,-1
230017c2:	c691                	beqz	a3,230017ce <__ledf2+0x80>
230017c4:	8536                	mv	a0,a3
230017c6:	8082                	ret
230017c8:	00b85463          	bge	a6,a1,230017d0 <__ledf2+0x82>
230017cc:	d965                	beqz	a0,230017bc <__ledf2+0x6e>
230017ce:	8082                	ret
230017d0:	ff1765e3          	bltu	a4,a7,230017ba <__ledf2+0x6c>
230017d4:	00e89c63          	bne	a7,a4,230017ec <__ledf2+0x9e>
230017d8:	fe6e61e3          	bltu	t3,t1,230017ba <__ledf2+0x6c>
230017dc:	ffc368e3          	bltu	t1,t3,230017cc <__ledf2+0x7e>
230017e0:	4501                	li	a0,0
230017e2:	8082                	ret
230017e4:	4505                	li	a0,1
230017e6:	8082                	ret
230017e8:	ffe5                	bnez	a5,230017e0 <__ledf2+0x92>
230017ea:	bfc1                	j	230017ba <__ledf2+0x6c>
230017ec:	fee8e0e3          	bltu	a7,a4,230017cc <__ledf2+0x7e>
230017f0:	bfc5                	j	230017e0 <__ledf2+0x92>
230017f2:	fb0582e3          	beq	a1,a6,23001796 <__ledf2+0x48>
230017f6:	fdd5                	bnez	a1,230017b2 <__ledf2+0x64>
230017f8:	4781                	li	a5,0
230017fa:	bf4d                	j	230017ac <__ledf2+0x5e>

230017fc <__muldf3>:
230017fc:	7179                	addi	sp,sp,-48
230017fe:	d422                	sw	s0,40(sp)
23001800:	ca56                	sw	s5,20(sp)
23001802:	c266                	sw	s9,4(sp)
23001804:	d606                	sw	ra,44(sp)
23001806:	d226                	sw	s1,36(sp)
23001808:	d04a                	sw	s2,32(sp)
2300180a:	ce4e                	sw	s3,28(sp)
2300180c:	cc52                	sw	s4,24(sp)
2300180e:	c85a                	sw	s6,16(sp)
23001810:	c65e                	sw	s7,12(sp)
23001812:	c462                	sw	s8,8(sp)
23001814:	842a                	mv	s0,a0
23001816:	8cb2                	mv	s9,a2
23001818:	8ab6                	mv	s5,a3
2300181a:	00202973          	frrm	s2
2300181e:	0145db93          	srli	s7,a1,0x14
23001822:	00c59993          	slli	s3,a1,0xc
23001826:	7ffbfb93          	andi	s7,s7,2047
2300182a:	00c9d993          	srli	s3,s3,0xc
2300182e:	01f5db13          	srli	s6,a1,0x1f
23001832:	020b8663          	beqz	s7,2300185e <__muldf3+0x62>
23001836:	7ff00793          	li	a5,2047
2300183a:	06fb8b63          	beq	s7,a5,230018b0 <__muldf3+0xb4>
2300183e:	01d55793          	srli	a5,a0,0x1d
23001842:	098e                	slli	s3,s3,0x3
23001844:	0137e9b3          	or	s3,a5,s3
23001848:	008007b7          	lui	a5,0x800
2300184c:	00f9e9b3          	or	s3,s3,a5
23001850:	00351a13          	slli	s4,a0,0x3
23001854:	c01b8b93          	addi	s7,s7,-1023
23001858:	4c01                	li	s8,0
2300185a:	4481                	li	s1,0
2300185c:	a0bd                	j	230018ca <__muldf3+0xce>
2300185e:	00a9e7b3          	or	a5,s3,a0
23001862:	c7e1                	beqz	a5,2300192a <__muldf3+0x12e>
23001864:	02098b63          	beqz	s3,2300189a <__muldf3+0x9e>
23001868:	854e                	mv	a0,s3
2300186a:	358010ef          	jal	ra,23002bc2 <__clzsi2>
2300186e:	ff550713          	addi	a4,a0,-11 # 7fff5 <StackSize+0x7eff5>
23001872:	47f1                	li	a5,28
23001874:	02e7c863          	blt	a5,a4,230018a4 <__muldf3+0xa8>
23001878:	47f5                	li	a5,29
2300187a:	ff850a13          	addi	s4,a0,-8
2300187e:	8f99                	sub	a5,a5,a4
23001880:	014999b3          	sll	s3,s3,s4
23001884:	00f457b3          	srl	a5,s0,a5
23001888:	0137e9b3          	or	s3,a5,s3
2300188c:	01441a33          	sll	s4,s0,s4
23001890:	c0d00b93          	li	s7,-1011
23001894:	40ab8bb3          	sub	s7,s7,a0
23001898:	b7c1                	j	23001858 <__muldf3+0x5c>
2300189a:	328010ef          	jal	ra,23002bc2 <__clzsi2>
2300189e:	02050513          	addi	a0,a0,32
230018a2:	b7f1                	j	2300186e <__muldf3+0x72>
230018a4:	fd850993          	addi	s3,a0,-40
230018a8:	013419b3          	sll	s3,s0,s3
230018ac:	4a01                	li	s4,0
230018ae:	b7cd                	j	23001890 <__muldf3+0x94>
230018b0:	00a9e433          	or	s0,s3,a0
230018b4:	c041                	beqz	s0,23001934 <__muldf3+0x138>
230018b6:	000807b7          	lui	a5,0x80
230018ba:	00f9f7b3          	and	a5,s3,a5
230018be:	8a2a                	mv	s4,a0
230018c0:	7ff00b93          	li	s7,2047
230018c4:	4c0d                	li	s8,3
230018c6:	44c1                	li	s1,16
230018c8:	fbc9                	bnez	a5,2300185a <__muldf3+0x5e>
230018ca:	014ad513          	srli	a0,s5,0x14
230018ce:	00ca9413          	slli	s0,s5,0xc
230018d2:	7ff57513          	andi	a0,a0,2047
230018d6:	87e6                	mv	a5,s9
230018d8:	8031                	srli	s0,s0,0xc
230018da:	01fada93          	srli	s5,s5,0x1f
230018de:	c12d                	beqz	a0,23001940 <__muldf3+0x144>
230018e0:	7ff00713          	li	a4,2047
230018e4:	0ae50663          	beq	a0,a4,23001990 <__muldf3+0x194>
230018e8:	01dcd793          	srli	a5,s9,0x1d
230018ec:	040e                	slli	s0,s0,0x3
230018ee:	8c5d                	or	s0,s0,a5
230018f0:	008007b7          	lui	a5,0x800
230018f4:	8c5d                	or	s0,s0,a5
230018f6:	c0150513          	addi	a0,a0,-1023
230018fa:	003c9793          	slli	a5,s9,0x3
230018fe:	4701                	li	a4,0
23001900:	002c1693          	slli	a3,s8,0x2
23001904:	8ed9                	or	a3,a3,a4
23001906:	9baa                	add	s7,s7,a0
23001908:	16fd                	addi	a3,a3,-1
2300190a:	4639                	li	a2,14
2300190c:	015b45b3          	xor	a1,s6,s5
23001910:	001b8513          	addi	a0,s7,1
23001914:	0ed66a63          	bltu	a2,a3,23001a08 <__muldf3+0x20c>
23001918:	0000c617          	auipc	a2,0xc
2300191c:	ae860613          	addi	a2,a2,-1304 # 2300d400 <__clz_tab+0x13c>
23001920:	068a                	slli	a3,a3,0x2
23001922:	96b2                	add	a3,a3,a2
23001924:	4294                	lw	a3,0(a3)
23001926:	96b2                	add	a3,a3,a2
23001928:	8682                	jr	a3
2300192a:	4981                	li	s3,0
2300192c:	4a01                	li	s4,0
2300192e:	4b81                	li	s7,0
23001930:	4c05                	li	s8,1
23001932:	b725                	j	2300185a <__muldf3+0x5e>
23001934:	4981                	li	s3,0
23001936:	4a01                	li	s4,0
23001938:	7ff00b93          	li	s7,2047
2300193c:	4c09                	li	s8,2
2300193e:	bf31                	j	2300185a <__muldf3+0x5e>
23001940:	019467b3          	or	a5,s0,s9
23001944:	c3b5                	beqz	a5,230019a8 <__muldf3+0x1ac>
23001946:	c80d                	beqz	s0,23001978 <__muldf3+0x17c>
23001948:	8522                	mv	a0,s0
2300194a:	278010ef          	jal	ra,23002bc2 <__clzsi2>
2300194e:	ff550693          	addi	a3,a0,-11
23001952:	47f1                	li	a5,28
23001954:	02d7c863          	blt	a5,a3,23001984 <__muldf3+0x188>
23001958:	4775                	li	a4,29
2300195a:	ff850793          	addi	a5,a0,-8
2300195e:	8f15                	sub	a4,a4,a3
23001960:	00f41433          	sll	s0,s0,a5
23001964:	00ecd733          	srl	a4,s9,a4
23001968:	8c59                	or	s0,s0,a4
2300196a:	00fc97b3          	sll	a5,s9,a5
2300196e:	c0d00713          	li	a4,-1011
23001972:	40a70533          	sub	a0,a4,a0
23001976:	b761                	j	230018fe <__muldf3+0x102>
23001978:	8566                	mv	a0,s9
2300197a:	248010ef          	jal	ra,23002bc2 <__clzsi2>
2300197e:	02050513          	addi	a0,a0,32
23001982:	b7f1                	j	2300194e <__muldf3+0x152>
23001984:	fd850413          	addi	s0,a0,-40
23001988:	008c9433          	sll	s0,s9,s0
2300198c:	4781                	li	a5,0
2300198e:	b7c5                	j	2300196e <__muldf3+0x172>
23001990:	01946633          	or	a2,s0,s9
23001994:	ce19                	beqz	a2,230019b2 <__muldf3+0x1b6>
23001996:	00080737          	lui	a4,0x80
2300199a:	8f61                	and	a4,a4,s0
2300199c:	7ff00513          	li	a0,2047
230019a0:	ef19                	bnez	a4,230019be <__muldf3+0x1c2>
230019a2:	470d                	li	a4,3
230019a4:	44c1                	li	s1,16
230019a6:	bfa9                	j	23001900 <__muldf3+0x104>
230019a8:	4401                	li	s0,0
230019aa:	4781                	li	a5,0
230019ac:	4501                	li	a0,0
230019ae:	4705                	li	a4,1
230019b0:	bf81                	j	23001900 <__muldf3+0x104>
230019b2:	4401                	li	s0,0
230019b4:	4781                	li	a5,0
230019b6:	7ff00513          	li	a0,2047
230019ba:	4709                	li	a4,2
230019bc:	b791                	j	23001900 <__muldf3+0x104>
230019be:	470d                	li	a4,3
230019c0:	b781                	j	23001900 <__muldf3+0x104>
230019c2:	00080437          	lui	s0,0x80
230019c6:	4781                	li	a5,0
230019c8:	7ff00713          	li	a4,2047
230019cc:	4581                	li	a1,0
230019ce:	44c1                	li	s1,16
230019d0:	0752                	slli	a4,a4,0x14
230019d2:	7ff006b7          	lui	a3,0x7ff00
230019d6:	0432                	slli	s0,s0,0xc
230019d8:	8f75                	and	a4,a4,a3
230019da:	8031                	srli	s0,s0,0xc
230019dc:	05fe                	slli	a1,a1,0x1f
230019de:	8c59                	or	s0,s0,a4
230019e0:	00b46733          	or	a4,s0,a1
230019e4:	853e                	mv	a0,a5
230019e6:	85ba                	mv	a1,a4
230019e8:	c099                	beqz	s1,230019ee <__muldf3+0x1f2>
230019ea:	0014a073          	csrs	fflags,s1
230019ee:	50b2                	lw	ra,44(sp)
230019f0:	5422                	lw	s0,40(sp)
230019f2:	5492                	lw	s1,36(sp)
230019f4:	5902                	lw	s2,32(sp)
230019f6:	49f2                	lw	s3,28(sp)
230019f8:	4a62                	lw	s4,24(sp)
230019fa:	4ad2                	lw	s5,20(sp)
230019fc:	4b42                	lw	s6,16(sp)
230019fe:	4bb2                	lw	s7,12(sp)
23001a00:	4c22                	lw	s8,8(sp)
23001a02:	4c92                	lw	s9,4(sp)
23001a04:	6145                	addi	sp,sp,48
23001a06:	8082                	ret
23001a08:	6ec1                	lui	t4,0x10
23001a0a:	fffe8e13          	addi	t3,t4,-1 # ffff <StackSize+0xefff>
23001a0e:	010a5713          	srli	a4,s4,0x10
23001a12:	0107d893          	srli	a7,a5,0x10
23001a16:	01ca7a33          	and	s4,s4,t3
23001a1a:	01c7f7b3          	and	a5,a5,t3
23001a1e:	03488833          	mul	a6,a7,s4
23001a22:	034786b3          	mul	a3,a5,s4
23001a26:	02f70f33          	mul	t5,a4,a5
23001a2a:	01e80333          	add	t1,a6,t5
23001a2e:	0106d813          	srli	a6,a3,0x10
23001a32:	981a                	add	a6,a6,t1
23001a34:	03170633          	mul	a2,a4,a7
23001a38:	01e87363          	bgeu	a6,t5,23001a3e <__muldf3+0x242>
23001a3c:	9676                	add	a2,a2,t4
23001a3e:	01085f93          	srli	t6,a6,0x10
23001a42:	01c87833          	and	a6,a6,t3
23001a46:	01c6f6b3          	and	a3,a3,t3
23001a4a:	01045e93          	srli	t4,s0,0x10
23001a4e:	01c47e33          	and	t3,s0,t3
23001a52:	0842                	slli	a6,a6,0x10
23001a54:	9836                	add	a6,a6,a3
23001a56:	03c70f33          	mul	t5,a4,t3
23001a5a:	03ca06b3          	mul	a3,s4,t3
23001a5e:	034e8a33          	mul	s4,t4,s4
23001a62:	01ea0333          	add	t1,s4,t5
23001a66:	0106da13          	srli	s4,a3,0x10
23001a6a:	9a1a                	add	s4,s4,t1
23001a6c:	03d70733          	mul	a4,a4,t4
23001a70:	01ea7463          	bgeu	s4,t5,23001a78 <__muldf3+0x27c>
23001a74:	6341                	lui	t1,0x10
23001a76:	971a                	add	a4,a4,t1
23001a78:	010a5313          	srli	t1,s4,0x10
23001a7c:	933a                	add	t1,t1,a4
23001a7e:	6741                	lui	a4,0x10
23001a80:	fff70f13          	addi	t5,a4,-1 # ffff <StackSize+0xefff>
23001a84:	01ea7a33          	and	s4,s4,t5
23001a88:	01e6f6b3          	and	a3,a3,t5
23001a8c:	0109d413          	srli	s0,s3,0x10
23001a90:	0a42                	slli	s4,s4,0x10
23001a92:	01e9f9b3          	and	s3,s3,t5
23001a96:	03378f33          	mul	t5,a5,s3
23001a9a:	9a36                	add	s4,s4,a3
23001a9c:	9fd2                	add	t6,t6,s4
23001a9e:	033886b3          	mul	a3,a7,s3
23001aa2:	02f407b3          	mul	a5,s0,a5
23001aa6:	028882b3          	mul	t0,a7,s0
23001aaa:	00f688b3          	add	a7,a3,a5
23001aae:	010f5693          	srli	a3,t5,0x10
23001ab2:	96c6                	add	a3,a3,a7
23001ab4:	00f6f363          	bgeu	a3,a5,23001aba <__muldf3+0x2be>
23001ab8:	92ba                	add	t0,t0,a4
23001aba:	6741                	lui	a4,0x10
23001abc:	fff70793          	addi	a5,a4,-1 # ffff <StackSize+0xefff>
23001ac0:	00ff7f33          	and	t5,t5,a5
23001ac4:	0106d893          	srli	a7,a3,0x10
23001ac8:	8efd                	and	a3,a3,a5
23001aca:	03c987b3          	mul	a5,s3,t3
23001ace:	06c2                	slli	a3,a3,0x10
23001ad0:	96fa                	add	a3,a3,t5
23001ad2:	9896                	add	a7,a7,t0
23001ad4:	03c40e33          	mul	t3,s0,t3
23001ad8:	033e89b3          	mul	s3,t4,s3
23001adc:	028e8f33          	mul	t5,t4,s0
23001ae0:	99f2                	add	s3,s3,t3
23001ae2:	0107d413          	srli	s0,a5,0x10
23001ae6:	99a2                	add	s3,s3,s0
23001ae8:	01c9f363          	bgeu	s3,t3,23001aee <__muldf3+0x2f2>
23001aec:	9f3a                	add	t5,t5,a4
23001aee:	6e41                	lui	t3,0x10
23001af0:	1e7d                	addi	t3,t3,-1
23001af2:	01c9f733          	and	a4,s3,t3
23001af6:	01c7f7b3          	and	a5,a5,t3
23001afa:	0742                	slli	a4,a4,0x10
23001afc:	967e                	add	a2,a2,t6
23001afe:	973e                	add	a4,a4,a5
23001b00:	01463a33          	sltu	s4,a2,s4
23001b04:	971a                	add	a4,a4,t1
23001b06:	01470433          	add	s0,a4,s4
23001b0a:	9636                	add	a2,a2,a3
23001b0c:	00d636b3          	sltu	a3,a2,a3
23001b10:	01140e33          	add	t3,s0,a7
23001b14:	00de0eb3          	add	t4,t3,a3
23001b18:	00673733          	sltu	a4,a4,t1
23001b1c:	01443433          	sltu	s0,s0,s4
23001b20:	8c59                	or	s0,s0,a4
23001b22:	00deb6b3          	sltu	a3,t4,a3
23001b26:	0109d993          	srli	s3,s3,0x10
23001b2a:	011e38b3          	sltu	a7,t3,a7
23001b2e:	944e                	add	s0,s0,s3
23001b30:	00d8e6b3          	or	a3,a7,a3
23001b34:	9436                	add	s0,s0,a3
23001b36:	947a                	add	s0,s0,t5
23001b38:	017ed793          	srli	a5,t4,0x17
23001b3c:	0426                	slli	s0,s0,0x9
23001b3e:	8c5d                	or	s0,s0,a5
23001b40:	00961793          	slli	a5,a2,0x9
23001b44:	0107e7b3          	or	a5,a5,a6
23001b48:	00f037b3          	snez	a5,a5
23001b4c:	825d                	srli	a2,a2,0x17
23001b4e:	01000737          	lui	a4,0x1000
23001b52:	8fd1                	or	a5,a5,a2
23001b54:	0ea6                	slli	t4,t4,0x9
23001b56:	8f61                	and	a4,a4,s0
23001b58:	01d7e7b3          	or	a5,a5,t4
23001b5c:	cb25                	beqz	a4,23001bcc <__muldf3+0x3d0>
23001b5e:	0017d713          	srli	a4,a5,0x1
23001b62:	8b85                	andi	a5,a5,1
23001b64:	8fd9                	or	a5,a5,a4
23001b66:	01f41713          	slli	a4,s0,0x1f
23001b6a:	8fd9                	or	a5,a5,a4
23001b6c:	8005                	srli	s0,s0,0x1
23001b6e:	3ff50813          	addi	a6,a0,1023
23001b72:	0d005063          	blez	a6,23001c32 <__muldf3+0x436>
23001b76:	0077f713          	andi	a4,a5,7
23001b7a:	c325                	beqz	a4,23001bda <__muldf3+0x3de>
23001b7c:	4709                	li	a4,2
23001b7e:	0014e493          	ori	s1,s1,1
23001b82:	04e90b63          	beq	s2,a4,23001bd8 <__muldf3+0x3dc>
23001b86:	470d                	li	a4,3
23001b88:	04e90463          	beq	s2,a4,23001bd0 <__muldf3+0x3d4>
23001b8c:	04091763          	bnez	s2,23001bda <__muldf3+0x3de>
23001b90:	00f7f713          	andi	a4,a5,15
23001b94:	4691                	li	a3,4
23001b96:	04d70263          	beq	a4,a3,23001bda <__muldf3+0x3de>
23001b9a:	00478713          	addi	a4,a5,4 # 800004 <StackSize+0x7ff004>
23001b9e:	00f737b3          	sltu	a5,a4,a5
23001ba2:	943e                	add	s0,s0,a5
23001ba4:	87ba                	mv	a5,a4
23001ba6:	a815                	j	23001bda <__muldf3+0x3de>
23001ba8:	85da                	mv	a1,s6
23001baa:	844e                	mv	s0,s3
23001bac:	87d2                	mv	a5,s4
23001bae:	8762                	mv	a4,s8
23001bb0:	4689                	li	a3,2
23001bb2:	1cd70763          	beq	a4,a3,23001d80 <__muldf3+0x584>
23001bb6:	468d                	li	a3,3
23001bb8:	1cd70963          	beq	a4,a3,23001d8a <__muldf3+0x58e>
23001bbc:	4685                	li	a3,1
23001bbe:	fad718e3          	bne	a4,a3,23001b6e <__muldf3+0x372>
23001bc2:	4401                	li	s0,0
23001bc4:	4781                	li	a5,0
23001bc6:	a265                	j	23001d6e <__muldf3+0x572>
23001bc8:	85d6                	mv	a1,s5
23001bca:	b7dd                	j	23001bb0 <__muldf3+0x3b4>
23001bcc:	855e                	mv	a0,s7
23001bce:	b745                	j	23001b6e <__muldf3+0x372>
23001bd0:	e589                	bnez	a1,23001bda <__muldf3+0x3de>
23001bd2:	00878713          	addi	a4,a5,8
23001bd6:	b7e1                	j	23001b9e <__muldf3+0x3a2>
23001bd8:	fded                	bnez	a1,23001bd2 <__muldf3+0x3d6>
23001bda:	01000737          	lui	a4,0x1000
23001bde:	8f61                	and	a4,a4,s0
23001be0:	c719                	beqz	a4,23001bee <__muldf3+0x3f2>
23001be2:	ff000737          	lui	a4,0xff000
23001be6:	177d                	addi	a4,a4,-1
23001be8:	8c79                	and	s0,s0,a4
23001bea:	40050813          	addi	a6,a0,1024
23001bee:	7fe00713          	li	a4,2046
23001bf2:	01074a63          	blt	a4,a6,23001c06 <__muldf3+0x40a>
23001bf6:	0037d713          	srli	a4,a5,0x3
23001bfa:	01d41793          	slli	a5,s0,0x1d
23001bfe:	8fd9                	or	a5,a5,a4
23001c00:	800d                	srli	s0,s0,0x3
23001c02:	8742                	mv	a4,a6
23001c04:	b3f1                	j	230019d0 <__muldf3+0x1d4>
23001c06:	4789                	li	a5,2
23001c08:	02f90363          	beq	s2,a5,23001c2e <__muldf3+0x432>
23001c0c:	478d                	li	a5,3
23001c0e:	00f90863          	beq	s2,a5,23001c1e <__muldf3+0x422>
23001c12:	00091763          	bnez	s2,23001c20 <__muldf3+0x424>
23001c16:	4781                	li	a5,0
23001c18:	7ff00713          	li	a4,2047
23001c1c:	a029                	j	23001c26 <__muldf3+0x42a>
23001c1e:	dde5                	beqz	a1,23001c16 <__muldf3+0x41a>
23001c20:	57fd                	li	a5,-1
23001c22:	7fe00713          	li	a4,2046
23001c26:	0054e493          	ori	s1,s1,5
23001c2a:	843e                	mv	s0,a5
23001c2c:	b355                	j	230019d0 <__muldf3+0x1d4>
23001c2e:	f5e5                	bnez	a1,23001c16 <__muldf3+0x41a>
23001c30:	bfc5                	j	23001c20 <__muldf3+0x424>
23001c32:	4705                	li	a4,1
23001c34:	04081463          	bnez	a6,23001c7c <__muldf3+0x480>
23001c38:	0077f693          	andi	a3,a5,7
23001c3c:	8722                	mv	a4,s0
23001c3e:	ca9d                	beqz	a3,23001c74 <__muldf3+0x478>
23001c40:	4689                	li	a3,2
23001c42:	0014e493          	ori	s1,s1,1
23001c46:	02d90663          	beq	s2,a3,23001c72 <__muldf3+0x476>
23001c4a:	468d                	li	a3,3
23001c4c:	00d90f63          	beq	s2,a3,23001c6a <__muldf3+0x46e>
23001c50:	02091263          	bnez	s2,23001c74 <__muldf3+0x478>
23001c54:	00f7f693          	andi	a3,a5,15
23001c58:	4611                	li	a2,4
23001c5a:	00c68d63          	beq	a3,a2,23001c74 <__muldf3+0x478>
23001c5e:	ffc7b713          	sltiu	a4,a5,-4
23001c62:	00174713          	xori	a4,a4,1
23001c66:	9722                	add	a4,a4,s0
23001c68:	a031                	j	23001c74 <__muldf3+0x478>
23001c6a:	e589                	bnez	a1,23001c74 <__muldf3+0x478>
23001c6c:	ff87b713          	sltiu	a4,a5,-8
23001c70:	bfcd                	j	23001c62 <__muldf3+0x466>
23001c72:	fded                	bnez	a1,23001c6c <__muldf3+0x470>
23001c74:	8361                	srli	a4,a4,0x18
23001c76:	00174713          	xori	a4,a4,1
23001c7a:	8b05                	andi	a4,a4,1
23001c7c:	4685                	li	a3,1
23001c7e:	410686b3          	sub	a3,a3,a6
23001c82:	03800613          	li	a2,56
23001c86:	0cd64263          	blt	a2,a3,23001d4a <__muldf3+0x54e>
23001c8a:	467d                	li	a2,31
23001c8c:	04d64a63          	blt	a2,a3,23001ce0 <__muldf3+0x4e4>
23001c90:	41e50513          	addi	a0,a0,1054
23001c94:	00a41633          	sll	a2,s0,a0
23001c98:	00d7d833          	srl	a6,a5,a3
23001c9c:	00a797b3          	sll	a5,a5,a0
23001ca0:	01066633          	or	a2,a2,a6
23001ca4:	00f037b3          	snez	a5,a5
23001ca8:	8fd1                	or	a5,a5,a2
23001caa:	00d45433          	srl	s0,s0,a3
23001cae:	0077f693          	andi	a3,a5,7
23001cb2:	c2ad                	beqz	a3,23001d14 <__muldf3+0x518>
23001cb4:	4689                	li	a3,2
23001cb6:	0014e493          	ori	s1,s1,1
23001cba:	04d90c63          	beq	s2,a3,23001d12 <__muldf3+0x516>
23001cbe:	468d                	li	a3,3
23001cc0:	04d90563          	beq	s2,a3,23001d0a <__muldf3+0x50e>
23001cc4:	04091863          	bnez	s2,23001d14 <__muldf3+0x518>
23001cc8:	00f7f693          	andi	a3,a5,15
23001ccc:	4611                	li	a2,4
23001cce:	04c68363          	beq	a3,a2,23001d14 <__muldf3+0x518>
23001cd2:	00478693          	addi	a3,a5,4
23001cd6:	00f6b7b3          	sltu	a5,a3,a5
23001cda:	943e                	add	s0,s0,a5
23001cdc:	87b6                	mv	a5,a3
23001cde:	a81d                	j	23001d14 <__muldf3+0x518>
23001ce0:	5605                	li	a2,-31
23001ce2:	41060633          	sub	a2,a2,a6
23001ce6:	02000893          	li	a7,32
23001cea:	00c45633          	srl	a2,s0,a2
23001cee:	4801                	li	a6,0
23001cf0:	01168663          	beq	a3,a7,23001cfc <__muldf3+0x500>
23001cf4:	43e50513          	addi	a0,a0,1086
23001cf8:	00a41833          	sll	a6,s0,a0
23001cfc:	00f867b3          	or	a5,a6,a5
23001d00:	00f037b3          	snez	a5,a5
23001d04:	8fd1                	or	a5,a5,a2
23001d06:	4401                	li	s0,0
23001d08:	b75d                	j	23001cae <__muldf3+0x4b2>
23001d0a:	e589                	bnez	a1,23001d14 <__muldf3+0x518>
23001d0c:	00878693          	addi	a3,a5,8
23001d10:	b7d9                	j	23001cd6 <__muldf3+0x4da>
23001d12:	fded                	bnez	a1,23001d0c <__muldf3+0x510>
23001d14:	008006b7          	lui	a3,0x800
23001d18:	8ee1                	and	a3,a3,s0
23001d1a:	ca81                	beqz	a3,23001d2a <__muldf3+0x52e>
23001d1c:	0014e493          	ori	s1,s1,1
23001d20:	4401                	li	s0,0
23001d22:	4781                	li	a5,0
23001d24:	e305                	bnez	a4,23001d44 <__muldf3+0x548>
23001d26:	4705                	li	a4,1
23001d28:	b165                	j	230019d0 <__muldf3+0x1d4>
23001d2a:	0037d693          	srli	a3,a5,0x3
23001d2e:	01d41793          	slli	a5,s0,0x1d
23001d32:	8fd5                	or	a5,a5,a3
23001d34:	800d                	srli	s0,s0,0x3
23001d36:	c8070de3          	beqz	a4,230019d0 <__muldf3+0x1d4>
23001d3a:	0014f713          	andi	a4,s1,1
23001d3e:	c80709e3          	beqz	a4,230019d0 <__muldf3+0x1d4>
23001d42:	4701                	li	a4,0
23001d44:	0024e493          	ori	s1,s1,2
23001d48:	b161                	j	230019d0 <__muldf3+0x1d4>
23001d4a:	8fc1                	or	a5,a5,s0
23001d4c:	cf91                	beqz	a5,23001d68 <__muldf3+0x56c>
23001d4e:	4789                	li	a5,2
23001d50:	0014e493          	ori	s1,s1,1
23001d54:	02f90363          	beq	s2,a5,23001d7a <__muldf3+0x57e>
23001d58:	478d                	li	a5,3
23001d5a:	00f90c63          	beq	s2,a5,23001d72 <__muldf3+0x576>
23001d5e:	4785                	li	a5,1
23001d60:	00091363          	bnez	s2,23001d66 <__muldf3+0x56a>
23001d64:	4795                	li	a5,5
23001d66:	838d                	srli	a5,a5,0x3
23001d68:	0024e493          	ori	s1,s1,2
23001d6c:	4401                	li	s0,0
23001d6e:	4701                	li	a4,0
23001d70:	b185                	j	230019d0 <__muldf3+0x1d4>
23001d72:	47a5                	li	a5,9
23001d74:	d9ed                	beqz	a1,23001d66 <__muldf3+0x56a>
23001d76:	4785                	li	a5,1
23001d78:	b7fd                	j	23001d66 <__muldf3+0x56a>
23001d7a:	47a5                	li	a5,9
23001d7c:	f5ed                	bnez	a1,23001d66 <__muldf3+0x56a>
23001d7e:	bfe5                	j	23001d76 <__muldf3+0x57a>
23001d80:	4401                	li	s0,0
23001d82:	4781                	li	a5,0
23001d84:	7ff00713          	li	a4,2047
23001d88:	b1a1                	j	230019d0 <__muldf3+0x1d4>
23001d8a:	00080437          	lui	s0,0x80
23001d8e:	4781                	li	a5,0
23001d90:	7ff00713          	li	a4,2047
23001d94:	4581                	li	a1,0
23001d96:	b92d                	j	230019d0 <__muldf3+0x1d4>

23001d98 <__subdf3>:
23001d98:	1101                	addi	sp,sp,-32
23001d9a:	ce06                	sw	ra,28(sp)
23001d9c:	cc22                	sw	s0,24(sp)
23001d9e:	ca26                	sw	s1,20(sp)
23001da0:	c84a                	sw	s2,16(sp)
23001da2:	c64e                	sw	s3,12(sp)
23001da4:	c452                	sw	s4,8(sp)
23001da6:	002029f3          	frrm	s3
23001daa:	001008b7          	lui	a7,0x100
23001dae:	18fd                	addi	a7,a7,-1
23001db0:	00b8f733          	and	a4,a7,a1
23001db4:	0145d413          	srli	s0,a1,0x14
23001db8:	00d8f8b3          	and	a7,a7,a3
23001dbc:	01f5d493          	srli	s1,a1,0x1f
23001dc0:	0146d593          	srli	a1,a3,0x14
23001dc4:	00371793          	slli	a5,a4,0x3
23001dc8:	01f6d313          	srli	t1,a3,0x1f
23001dcc:	01d55713          	srli	a4,a0,0x1d
23001dd0:	01d65693          	srli	a3,a2,0x1d
23001dd4:	088e                	slli	a7,a7,0x3
23001dd6:	00361813          	slli	a6,a2,0x3
23001dda:	7ff5f593          	andi	a1,a1,2047
23001dde:	7ff00613          	li	a2,2047
23001de2:	8f5d                	or	a4,a4,a5
23001de4:	7ff47413          	andi	s0,s0,2047
23001de8:	00351793          	slli	a5,a0,0x3
23001dec:	0116e6b3          	or	a3,a3,a7
23001df0:	00c59563          	bne	a1,a2,23001dfa <__subdf3+0x62>
23001df4:	0106e633          	or	a2,a3,a6
23001df8:	e219                	bnez	a2,23001dfe <__subdf3+0x66>
23001dfa:	00134313          	xori	t1,t1,1
23001dfe:	40b40633          	sub	a2,s0,a1
23001e02:	3c931663          	bne	t1,s1,230021ce <__subdf3+0x436>
23001e06:	12c05063          	blez	a2,23001f26 <__subdf3+0x18e>
23001e0a:	e9a9                	bnez	a1,23001e5c <__subdf3+0xc4>
23001e0c:	0106e533          	or	a0,a3,a6
23001e10:	e10d                	bnez	a0,23001e32 <__subdf3+0x9a>
23001e12:	7ff00693          	li	a3,2047
23001e16:	4401                	li	s0,0
23001e18:	24d61363          	bne	a2,a3,2300205e <__subdf3+0x2c6>
23001e1c:	00f766b3          	or	a3,a4,a5
23001e20:	78068e63          	beqz	a3,230025bc <__subdf3+0x824>
23001e24:	00400437          	lui	s0,0x400
23001e28:	8c79                	and	s0,s0,a4
23001e2a:	00143413          	seqz	s0,s0
23001e2e:	0412                	slli	s0,s0,0x4
23001e30:	a43d                	j	2300205e <__subdf3+0x2c6>
23001e32:	fff60513          	addi	a0,a2,-1
23001e36:	e901                	bnez	a0,23001e46 <__subdf3+0xae>
23001e38:	983e                	add	a6,a6,a5
23001e3a:	96ba                	add	a3,a3,a4
23001e3c:	00f837b3          	sltu	a5,a6,a5
23001e40:	96be                	add	a3,a3,a5
23001e42:	4605                	li	a2,1
23001e44:	a041                	j	23001ec4 <__subdf3+0x12c>
23001e46:	7ff00893          	li	a7,2047
23001e4a:	03161f63          	bne	a2,a7,23001e88 <__subdf3+0xf0>
23001e4e:	00f766b3          	or	a3,a4,a5
23001e52:	fae9                	bnez	a3,23001e24 <__subdf3+0x8c>
23001e54:	4701                	li	a4,0
23001e56:	4781                	li	a5,0
23001e58:	4401                	li	s0,0
23001e5a:	ac8d                	j	230020cc <__subdf3+0x334>
23001e5c:	7ff00593          	li	a1,2047
23001e60:	02b41063          	bne	s0,a1,23001e80 <__subdf3+0xe8>
23001e64:	00f766b3          	or	a3,a4,a5
23001e68:	74068d63          	beqz	a3,230025c2 <__subdf3+0x82a>
23001e6c:	004006b7          	lui	a3,0x400
23001e70:	8ef9                	and	a3,a3,a4
23001e72:	7ff00613          	li	a2,2047
23001e76:	4581                	li	a1,0
23001e78:	2e069063          	bnez	a3,23002158 <__subdf3+0x3c0>
23001e7c:	4441                	li	s0,16
23001e7e:	a2c5                	j	2300205e <__subdf3+0x2c6>
23001e80:	008005b7          	lui	a1,0x800
23001e84:	8ecd                	or	a3,a3,a1
23001e86:	8532                	mv	a0,a2
23001e88:	03800613          	li	a2,56
23001e8c:	08a64863          	blt	a2,a0,23001f1c <__subdf3+0x184>
23001e90:	467d                	li	a2,31
23001e92:	04a64f63          	blt	a2,a0,23001ef0 <__subdf3+0x158>
23001e96:	02000613          	li	a2,32
23001e9a:	8e09                	sub	a2,a2,a0
23001e9c:	00c695b3          	sll	a1,a3,a2
23001ea0:	00a858b3          	srl	a7,a6,a0
23001ea4:	00c81833          	sll	a6,a6,a2
23001ea8:	0115e5b3          	or	a1,a1,a7
23001eac:	01003833          	snez	a6,a6
23001eb0:	0105e833          	or	a6,a1,a6
23001eb4:	00a6d6b3          	srl	a3,a3,a0
23001eb8:	983e                	add	a6,a6,a5
23001eba:	96ba                	add	a3,a3,a4
23001ebc:	00f837b3          	sltu	a5,a6,a5
23001ec0:	96be                	add	a3,a3,a5
23001ec2:	8622                	mv	a2,s0
23001ec4:	008007b7          	lui	a5,0x800
23001ec8:	8ff5                	and	a5,a5,a3
23001eca:	cbad                	beqz	a5,23001f3c <__subdf3+0x1a4>
23001ecc:	0605                	addi	a2,a2,1
23001ece:	7ff00793          	li	a5,2047
23001ed2:	2cf60e63          	beq	a2,a5,230021ae <__subdf3+0x416>
23001ed6:	ff800737          	lui	a4,0xff800
23001eda:	177d                	addi	a4,a4,-1
23001edc:	00185793          	srli	a5,a6,0x1
23001ee0:	8f75                	and	a4,a4,a3
23001ee2:	00187813          	andi	a6,a6,1
23001ee6:	0107e833          	or	a6,a5,a6
23001eea:	01f71793          	slli	a5,a4,0x1f
23001eee:	a48d                	j	23002150 <__subdf3+0x3b8>
23001ef0:	fe050593          	addi	a1,a0,-32
23001ef4:	02000893          	li	a7,32
23001ef8:	00b6d5b3          	srl	a1,a3,a1
23001efc:	4601                	li	a2,0
23001efe:	01150763          	beq	a0,a7,23001f0c <__subdf3+0x174>
23001f02:	04000613          	li	a2,64
23001f06:	8e09                	sub	a2,a2,a0
23001f08:	00c69633          	sll	a2,a3,a2
23001f0c:	01066833          	or	a6,a2,a6
23001f10:	01003833          	snez	a6,a6
23001f14:	0105e833          	or	a6,a1,a6
23001f18:	4681                	li	a3,0
23001f1a:	bf79                	j	23001eb8 <__subdf3+0x120>
23001f1c:	0106e833          	or	a6,a3,a6
23001f20:	01003833          	snez	a6,a6
23001f24:	bfd5                	j	23001f18 <__subdf3+0x180>
23001f26:	ce65                	beqz	a2,2300201e <__subdf3+0x286>
23001f28:	40858633          	sub	a2,a1,s0
23001f2c:	e829                	bnez	s0,23001f7e <__subdf3+0x1e6>
23001f2e:	00f76533          	or	a0,a4,a5
23001f32:	e911                	bnez	a0,23001f46 <__subdf3+0x1ae>
23001f34:	7ff00793          	li	a5,2047
23001f38:	02f60663          	beq	a2,a5,23001f64 <__subdf3+0x1cc>
23001f3c:	8736                	mv	a4,a3
23001f3e:	87c2                	mv	a5,a6
23001f40:	46060e63          	beqz	a2,230023bc <__subdf3+0x624>
23001f44:	ac09                	j	23002156 <__subdf3+0x3be>
23001f46:	fff60893          	addi	a7,a2,-1
23001f4a:	00089963          	bnez	a7,23001f5c <__subdf3+0x1c4>
23001f4e:	97c2                	add	a5,a5,a6
23001f50:	0107b833          	sltu	a6,a5,a6
23001f54:	96ba                	add	a3,a3,a4
23001f56:	96c2                	add	a3,a3,a6
23001f58:	883e                	mv	a6,a5
23001f5a:	b5e5                	j	23001e42 <__subdf3+0xaa>
23001f5c:	7ff00513          	li	a0,2047
23001f60:	04a61663          	bne	a2,a0,23001fac <__subdf3+0x214>
23001f64:	0106e7b3          	or	a5,a3,a6
23001f68:	4701                	li	a4,0
23001f6a:	16078163          	beqz	a5,230020cc <__subdf3+0x334>
23001f6e:	004007b7          	lui	a5,0x400
23001f72:	8ff5                	and	a5,a5,a3
23001f74:	8736                	mv	a4,a3
23001f76:	64079963          	bnez	a5,230025c8 <__subdf3+0x830>
23001f7a:	87c2                	mv	a5,a6
23001f7c:	a015                	j	23001fa0 <__subdf3+0x208>
23001f7e:	7ff00513          	li	a0,2047
23001f82:	02a59163          	bne	a1,a0,23001fa4 <__subdf3+0x20c>
23001f86:	0106e7b3          	or	a5,a3,a6
23001f8a:	60078b63          	beqz	a5,230025a0 <__subdf3+0x808>
23001f8e:	004007b7          	lui	a5,0x400
23001f92:	8ff5                	and	a5,a5,a3
23001f94:	8736                	mv	a4,a3
23001f96:	60079963          	bnez	a5,230025a8 <__subdf3+0x810>
23001f9a:	87c2                	mv	a5,a6
23001f9c:	7ff00613          	li	a2,2047
23001fa0:	4581                	li	a1,0
23001fa2:	bde9                	j	23001e7c <__subdf3+0xe4>
23001fa4:	00800537          	lui	a0,0x800
23001fa8:	8f49                	or	a4,a4,a0
23001faa:	88b2                	mv	a7,a2
23001fac:	03800613          	li	a2,56
23001fb0:	07164363          	blt	a2,a7,23002016 <__subdf3+0x27e>
23001fb4:	467d                	li	a2,31
23001fb6:	03164b63          	blt	a2,a7,23001fec <__subdf3+0x254>
23001fba:	02000513          	li	a0,32
23001fbe:	41150533          	sub	a0,a0,a7
23001fc2:	00a71633          	sll	a2,a4,a0
23001fc6:	0117d333          	srl	t1,a5,a7
23001fca:	00a797b3          	sll	a5,a5,a0
23001fce:	00666633          	or	a2,a2,t1
23001fd2:	00f037b3          	snez	a5,a5
23001fd6:	8fd1                	or	a5,a5,a2
23001fd8:	01175733          	srl	a4,a4,a7
23001fdc:	97c2                	add	a5,a5,a6
23001fde:	9736                	add	a4,a4,a3
23001fe0:	0107b6b3          	sltu	a3,a5,a6
23001fe4:	96ba                	add	a3,a3,a4
23001fe6:	883e                	mv	a6,a5
23001fe8:	862e                	mv	a2,a1
23001fea:	bde9                	j	23001ec4 <__subdf3+0x12c>
23001fec:	fe088613          	addi	a2,a7,-32 # fffe0 <StackSize+0xfefe0>
23001ff0:	02000313          	li	t1,32
23001ff4:	00c75633          	srl	a2,a4,a2
23001ff8:	4501                	li	a0,0
23001ffa:	00688863          	beq	a7,t1,2300200a <__subdf3+0x272>
23001ffe:	04000513          	li	a0,64
23002002:	41150533          	sub	a0,a0,a7
23002006:	00a71533          	sll	a0,a4,a0
2300200a:	8fc9                	or	a5,a5,a0
2300200c:	00f037b3          	snez	a5,a5
23002010:	8fd1                	or	a5,a5,a2
23002012:	4701                	li	a4,0
23002014:	b7e1                	j	23001fdc <__subdf3+0x244>
23002016:	8fd9                	or	a5,a5,a4
23002018:	00f037b3          	snez	a5,a5
2300201c:	bfdd                	j	23002012 <__subdf3+0x27a>
2300201e:	00140613          	addi	a2,s0,1 # 400001 <StackSize+0x3ff001>
23002022:	7fe67513          	andi	a0,a2,2046
23002026:	10051863          	bnez	a0,23002136 <__subdf3+0x39e>
2300202a:	00f76633          	or	a2,a4,a5
2300202e:	e039                	bnez	s0,23002074 <__subdf3+0x2dc>
23002030:	52060b63          	beqz	a2,23002566 <__subdf3+0x7ce>
23002034:	0106e633          	or	a2,a3,a6
23002038:	38060263          	beqz	a2,230023bc <__subdf3+0x624>
2300203c:	983e                	add	a6,a6,a5
2300203e:	00f837b3          	sltu	a5,a6,a5
23002042:	9736                	add	a4,a4,a3
23002044:	973e                	add	a4,a4,a5
23002046:	008007b7          	lui	a5,0x800
2300204a:	8ff9                	and	a5,a5,a4
2300204c:	50078e63          	beqz	a5,23002568 <__subdf3+0x7d0>
23002050:	ff8007b7          	lui	a5,0xff800
23002054:	17fd                	addi	a5,a5,-1
23002056:	8f7d                	and	a4,a4,a5
23002058:	4581                	li	a1,0
2300205a:	87c2                	mv	a5,a6
2300205c:	4605                	li	a2,1
2300205e:	0077f693          	andi	a3,a5,7
23002062:	12069063          	bnez	a3,23002182 <__subdf3+0x3ea>
23002066:	c1bd                	beqz	a1,230020cc <__subdf3+0x334>
23002068:	00147693          	andi	a3,s0,1
2300206c:	c2a5                	beqz	a3,230020cc <__subdf3+0x334>
2300206e:	00246413          	ori	s0,s0,2
23002072:	a8a9                	j	230020cc <__subdf3+0x334>
23002074:	7ff00513          	li	a0,2047
23002078:	02a41563          	bne	s0,a0,230020a2 <__subdf3+0x30a>
2300207c:	5c060463          	beqz	a2,23002644 <__subdf3+0x8ac>
23002080:	00400437          	lui	s0,0x400
23002084:	8c79                	and	s0,s0,a4
23002086:	00143413          	seqz	s0,s0
2300208a:	0412                	slli	s0,s0,0x4
2300208c:	02a59763          	bne	a1,a0,230020ba <__subdf3+0x322>
23002090:	0106e5b3          	or	a1,a3,a6
23002094:	c991                	beqz	a1,230020a8 <__subdf3+0x310>
23002096:	004005b7          	lui	a1,0x400
2300209a:	8df5                	and	a1,a1,a3
2300209c:	e591                	bnez	a1,230020a8 <__subdf3+0x310>
2300209e:	4441                	li	s0,16
230020a0:	a021                	j	230020a8 <__subdf3+0x310>
230020a2:	4401                	li	s0,0
230020a4:	fea586e3          	beq	a1,a0,23002090 <__subdf3+0x2f8>
230020a8:	ea09                	bnez	a2,230020ba <__subdf3+0x322>
230020aa:	8736                	mv	a4,a3
230020ac:	87c2                	mv	a5,a6
230020ae:	4581                	li	a1,0
230020b0:	7ff00613          	li	a2,2047
230020b4:	b76d                	j	2300205e <__subdf3+0x2c6>
230020b6:	4401                	li	s0,0
230020b8:	bfe1                	j	23002090 <__subdf3+0x2f8>
230020ba:	0106e6b3          	or	a3,a3,a6
230020be:	dae5                	beqz	a3,230020ae <__subdf3+0x316>
230020c0:	4481                	li	s1,0
230020c2:	00400737          	lui	a4,0x400
230020c6:	4781                	li	a5,0
230020c8:	7ff00613          	li	a2,2047
230020cc:	008006b7          	lui	a3,0x800
230020d0:	8ef9                	and	a3,a3,a4
230020d2:	ca91                	beqz	a3,230020e6 <__subdf3+0x34e>
230020d4:	0605                	addi	a2,a2,1
230020d6:	7ff00693          	li	a3,2047
230020da:	52d60e63          	beq	a2,a3,23002616 <__subdf3+0x87e>
230020de:	ff8006b7          	lui	a3,0xff800
230020e2:	16fd                	addi	a3,a3,-1
230020e4:	8f75                	and	a4,a4,a3
230020e6:	0037d513          	srli	a0,a5,0x3
230020ea:	7ff00693          	li	a3,2047
230020ee:	01d71793          	slli	a5,a4,0x1d
230020f2:	8fc9                	or	a5,a5,a0
230020f4:	830d                	srli	a4,a4,0x3
230020f6:	00d61963          	bne	a2,a3,23002108 <__subdf3+0x370>
230020fa:	8fd9                	or	a5,a5,a4
230020fc:	4701                	li	a4,0
230020fe:	c789                	beqz	a5,23002108 <__subdf3+0x370>
23002100:	00080737          	lui	a4,0x80
23002104:	4781                	li	a5,0
23002106:	4481                	li	s1,0
23002108:	7ff006b7          	lui	a3,0x7ff00
2300210c:	0652                	slli	a2,a2,0x14
2300210e:	0732                	slli	a4,a4,0xc
23002110:	8e75                	and	a2,a2,a3
23002112:	8331                	srli	a4,a4,0xc
23002114:	8f51                	or	a4,a4,a2
23002116:	04fe                	slli	s1,s1,0x1f
23002118:	009766b3          	or	a3,a4,s1
2300211c:	853e                	mv	a0,a5
2300211e:	85b6                	mv	a1,a3
23002120:	c019                	beqz	s0,23002126 <__subdf3+0x38e>
23002122:	00142073          	csrs	fflags,s0
23002126:	40f2                	lw	ra,28(sp)
23002128:	4462                	lw	s0,24(sp)
2300212a:	44d2                	lw	s1,20(sp)
2300212c:	4942                	lw	s2,16(sp)
2300212e:	49b2                	lw	s3,12(sp)
23002130:	4a22                	lw	s4,8(sp)
23002132:	6105                	addi	sp,sp,32
23002134:	8082                	ret
23002136:	7ff00593          	li	a1,2047
2300213a:	02b60163          	beq	a2,a1,2300215c <__subdf3+0x3c4>
2300213e:	983e                	add	a6,a6,a5
23002140:	00f837b3          	sltu	a5,a6,a5
23002144:	9736                	add	a4,a4,a3
23002146:	973e                	add	a4,a4,a5
23002148:	01f71793          	slli	a5,a4,0x1f
2300214c:	00185813          	srli	a6,a6,0x1
23002150:	0107e7b3          	or	a5,a5,a6
23002154:	8305                	srli	a4,a4,0x1
23002156:	4581                	li	a1,0
23002158:	4401                	li	s0,0
2300215a:	b711                	j	2300205e <__subdf3+0x2c6>
2300215c:	00098663          	beqz	s3,23002168 <__subdf3+0x3d0>
23002160:	478d                	li	a5,3
23002162:	00f99663          	bne	s3,a5,2300216e <__subdf3+0x3d6>
23002166:	e881                	bnez	s1,23002176 <__subdf3+0x3de>
23002168:	7ff00613          	li	a2,2047
2300216c:	a881                	j	230021bc <__subdf3+0x424>
2300216e:	4789                	li	a5,2
23002170:	00f99363          	bne	s3,a5,23002176 <__subdf3+0x3de>
23002174:	f8f5                	bnez	s1,23002168 <__subdf3+0x3d0>
23002176:	4581                	li	a1,0
23002178:	577d                	li	a4,-1
2300217a:	57fd                	li	a5,-1
2300217c:	7fe00613          	li	a2,2046
23002180:	4415                	li	s0,5
23002182:	4689                	li	a3,2
23002184:	00146413          	ori	s0,s0,1
23002188:	48d98363          	beq	s3,a3,2300260e <__subdf3+0x876>
2300218c:	468d                	li	a3,3
2300218e:	46d98c63          	beq	s3,a3,23002606 <__subdf3+0x86e>
23002192:	46099f63          	bnez	s3,23002610 <__subdf3+0x878>
23002196:	00f7f693          	andi	a3,a5,15
2300219a:	4511                	li	a0,4
2300219c:	46a68a63          	beq	a3,a0,23002610 <__subdf3+0x878>
230021a0:	00478693          	addi	a3,a5,4 # ff800004 <__HeapLimit+0xbd7d0004>
230021a4:	00f6b7b3          	sltu	a5,a3,a5
230021a8:	973e                	add	a4,a4,a5
230021aa:	87b6                	mv	a5,a3
230021ac:	a195                	j	23002610 <__subdf3+0x878>
230021ae:	00098763          	beqz	s3,230021bc <__subdf3+0x424>
230021b2:	478d                	li	a5,3
230021b4:	00f99863          	bne	s3,a5,230021c4 <__subdf3+0x42c>
230021b8:	3e049c63          	bnez	s1,230025b0 <__subdf3+0x818>
230021bc:	4701                	li	a4,0
230021be:	4781                	li	a5,0
230021c0:	4415                	li	s0,5
230021c2:	b729                	j	230020cc <__subdf3+0x334>
230021c4:	4789                	li	a5,2
230021c6:	3ef99563          	bne	s3,a5,230025b0 <__subdf3+0x818>
230021ca:	f8ed                	bnez	s1,230021bc <__subdf3+0x424>
230021cc:	b76d                	j	23002176 <__subdf3+0x3de>
230021ce:	0cc05763          	blez	a2,2300229c <__subdf3+0x504>
230021d2:	e1c9                	bnez	a1,23002254 <__subdf3+0x4bc>
230021d4:	0106e533          	or	a0,a3,a6
230021d8:	c2050de3          	beqz	a0,23001e12 <__subdf3+0x7a>
230021dc:	fff60513          	addi	a0,a2,-1
230021e0:	e911                	bnez	a0,230021f4 <__subdf3+0x45c>
230021e2:	41078833          	sub	a6,a5,a6
230021e6:	40d706b3          	sub	a3,a4,a3
230021ea:	0107b7b3          	sltu	a5,a5,a6
230021ee:	8e9d                	sub	a3,a3,a5
230021f0:	4605                	li	a2,1
230021f2:	a0a9                	j	2300223c <__subdf3+0x4a4>
230021f4:	7ff00893          	li	a7,2047
230021f8:	c5160be3          	beq	a2,a7,23001e4e <__subdf3+0xb6>
230021fc:	03800613          	li	a2,56
23002200:	08a64963          	blt	a2,a0,23002292 <__subdf3+0x4fa>
23002204:	467d                	li	a2,31
23002206:	06a64063          	blt	a2,a0,23002266 <__subdf3+0x4ce>
2300220a:	02000613          	li	a2,32
2300220e:	8e09                	sub	a2,a2,a0
23002210:	00c695b3          	sll	a1,a3,a2
23002214:	00a858b3          	srl	a7,a6,a0
23002218:	00c81833          	sll	a6,a6,a2
2300221c:	0115e5b3          	or	a1,a1,a7
23002220:	01003833          	snez	a6,a6
23002224:	0105e833          	or	a6,a1,a6
23002228:	00a6d6b3          	srl	a3,a3,a0
2300222c:	41078833          	sub	a6,a5,a6
23002230:	40d706b3          	sub	a3,a4,a3
23002234:	0107b7b3          	sltu	a5,a5,a6
23002238:	8e9d                	sub	a3,a3,a5
2300223a:	8622                	mv	a2,s0
2300223c:	00800937          	lui	s2,0x800
23002240:	0126f7b3          	and	a5,a3,s2
23002244:	ce078ce3          	beqz	a5,23001f3c <__subdf3+0x1a4>
23002248:	197d                	addi	s2,s2,-1
2300224a:	0126f933          	and	s2,a3,s2
2300224e:	8a42                	mv	s4,a6
23002250:	8432                	mv	s0,a2
23002252:	a4b5                	j	230024be <__subdf3+0x726>
23002254:	7ff00593          	li	a1,2047
23002258:	c0b406e3          	beq	s0,a1,23001e64 <__subdf3+0xcc>
2300225c:	008005b7          	lui	a1,0x800
23002260:	8ecd                	or	a3,a3,a1
23002262:	8532                	mv	a0,a2
23002264:	bf61                	j	230021fc <__subdf3+0x464>
23002266:	fe050593          	addi	a1,a0,-32 # 7fffe0 <StackSize+0x7fefe0>
2300226a:	02000893          	li	a7,32
2300226e:	00b6d5b3          	srl	a1,a3,a1
23002272:	4601                	li	a2,0
23002274:	01150763          	beq	a0,a7,23002282 <__subdf3+0x4ea>
23002278:	04000613          	li	a2,64
2300227c:	8e09                	sub	a2,a2,a0
2300227e:	00c69633          	sll	a2,a3,a2
23002282:	01066833          	or	a6,a2,a6
23002286:	01003833          	snez	a6,a6
2300228a:	0105e833          	or	a6,a1,a6
2300228e:	4681                	li	a3,0
23002290:	bf71                	j	2300222c <__subdf3+0x494>
23002292:	0106e833          	or	a6,a3,a6
23002296:	01003833          	snez	a6,a6
2300229a:	bfd5                	j	2300228e <__subdf3+0x4f6>
2300229c:	ce6d                	beqz	a2,23002396 <__subdf3+0x5fe>
2300229e:	40858633          	sub	a2,a1,s0
230022a2:	e439                	bnez	s0,230022f0 <__subdf3+0x558>
230022a4:	00f76533          	or	a0,a4,a5
230022a8:	e509                	bnez	a0,230022b2 <__subdf3+0x51a>
230022aa:	7ff00793          	li	a5,2047
230022ae:	849a                	mv	s1,t1
230022b0:	b161                	j	23001f38 <__subdf3+0x1a0>
230022b2:	fff60893          	addi	a7,a2,-1
230022b6:	00089c63          	bnez	a7,230022ce <__subdf3+0x536>
230022ba:	40f807b3          	sub	a5,a6,a5
230022be:	00f83833          	sltu	a6,a6,a5
230022c2:	8e99                	sub	a3,a3,a4
230022c4:	410686b3          	sub	a3,a3,a6
230022c8:	849a                	mv	s1,t1
230022ca:	883e                	mv	a6,a5
230022cc:	b715                	j	230021f0 <__subdf3+0x458>
230022ce:	7ff00513          	li	a0,2047
230022d2:	04a61563          	bne	a2,a0,2300231c <__subdf3+0x584>
230022d6:	0106e7b3          	or	a5,a3,a6
230022da:	2e078a63          	beqz	a5,230025ce <__subdf3+0x836>
230022de:	004007b7          	lui	a5,0x400
230022e2:	8ff5                	and	a5,a5,a3
230022e4:	8736                	mv	a4,a3
230022e6:	2e079763          	bnez	a5,230025d4 <__subdf3+0x83c>
230022ea:	87c2                	mv	a5,a6
230022ec:	849a                	mv	s1,t1
230022ee:	b94d                	j	23001fa0 <__subdf3+0x208>
230022f0:	7ff00513          	li	a0,2047
230022f4:	02a59063          	bne	a1,a0,23002314 <__subdf3+0x57c>
230022f8:	0106e7b3          	or	a5,a3,a6
230022fc:	2c078f63          	beqz	a5,230025da <__subdf3+0x842>
23002300:	004007b7          	lui	a5,0x400
23002304:	8ff5                	and	a5,a5,a3
23002306:	8736                	mv	a4,a3
23002308:	2c079e63          	bnez	a5,230025e4 <__subdf3+0x84c>
2300230c:	87c2                	mv	a5,a6
2300230e:	7ff00613          	li	a2,2047
23002312:	bfe9                	j	230022ec <__subdf3+0x554>
23002314:	00800537          	lui	a0,0x800
23002318:	8f49                	or	a4,a4,a0
2300231a:	88b2                	mv	a7,a2
2300231c:	03800613          	li	a2,56
23002320:	07164763          	blt	a2,a7,2300238e <__subdf3+0x5f6>
23002324:	467d                	li	a2,31
23002326:	03164f63          	blt	a2,a7,23002364 <__subdf3+0x5cc>
2300232a:	02000513          	li	a0,32
2300232e:	41150533          	sub	a0,a0,a7
23002332:	00a71633          	sll	a2,a4,a0
23002336:	0117de33          	srl	t3,a5,a7
2300233a:	00a797b3          	sll	a5,a5,a0
2300233e:	01c66633          	or	a2,a2,t3
23002342:	00f037b3          	snez	a5,a5
23002346:	8fd1                	or	a5,a5,a2
23002348:	01175733          	srl	a4,a4,a7
2300234c:	40f807b3          	sub	a5,a6,a5
23002350:	40e68733          	sub	a4,a3,a4
23002354:	00f836b3          	sltu	a3,a6,a5
23002358:	40d706b3          	sub	a3,a4,a3
2300235c:	883e                	mv	a6,a5
2300235e:	862e                	mv	a2,a1
23002360:	849a                	mv	s1,t1
23002362:	bde9                	j	2300223c <__subdf3+0x4a4>
23002364:	fe088613          	addi	a2,a7,-32
23002368:	02000e13          	li	t3,32
2300236c:	00c75633          	srl	a2,a4,a2
23002370:	4501                	li	a0,0
23002372:	01c88863          	beq	a7,t3,23002382 <__subdf3+0x5ea>
23002376:	04000513          	li	a0,64
2300237a:	41150533          	sub	a0,a0,a7
2300237e:	00a71533          	sll	a0,a4,a0
23002382:	8fc9                	or	a5,a5,a0
23002384:	00f037b3          	snez	a5,a5
23002388:	8fd1                	or	a5,a5,a2
2300238a:	4701                	li	a4,0
2300238c:	b7c1                	j	2300234c <__subdf3+0x5b4>
2300238e:	8fd9                	or	a5,a5,a4
23002390:	00f037b3          	snez	a5,a5
23002394:	bfdd                	j	2300238a <__subdf3+0x5f2>
23002396:	00140613          	addi	a2,s0,1 # 400001 <StackSize+0x3ff001>
2300239a:	7fe67613          	andi	a2,a2,2046
2300239e:	ea7d                	bnez	a2,23002494 <__subdf3+0x6fc>
230023a0:	00f76533          	or	a0,a4,a5
230023a4:	0106e633          	or	a2,a3,a6
230023a8:	e055                	bnez	s0,2300244c <__subdf3+0x6b4>
230023aa:	e12d                	bnez	a0,2300240c <__subdf3+0x674>
230023ac:	1c061063          	bnez	a2,2300256c <__subdf3+0x7d4>
230023b0:	ffe98493          	addi	s1,s3,-2
230023b4:	0014b493          	seqz	s1,s1
230023b8:	4701                	li	a4,0
230023ba:	4781                	li	a5,0
230023bc:	00e7e6b3          	or	a3,a5,a4
230023c0:	22068f63          	beqz	a3,230025fe <__subdf3+0x866>
230023c4:	01f7d693          	srli	a3,a5,0x1f
230023c8:	00171593          	slli	a1,a4,0x1
230023cc:	95b6                	add	a1,a1,a3
230023ce:	00179693          	slli	a3,a5,0x1
230023d2:	0076f613          	andi	a2,a3,7
230023d6:	4401                	li	s0,0
230023d8:	c605                	beqz	a2,23002400 <__subdf3+0x668>
230023da:	4609                	li	a2,2
230023dc:	1ac98863          	beq	s3,a2,2300258c <__subdf3+0x7f4>
230023e0:	460d                	li	a2,3
230023e2:	18c98b63          	beq	s3,a2,23002578 <__subdf3+0x7e0>
230023e6:	4405                	li	s0,1
230023e8:	00099c63          	bnez	s3,23002400 <__subdf3+0x668>
230023ec:	00f6f613          	andi	a2,a3,15
230023f0:	4511                	li	a0,4
230023f2:	00a60763          	beq	a2,a0,23002400 <__subdf3+0x668>
230023f6:	ffc6b693          	sltiu	a3,a3,-4
230023fa:	0016c693          	xori	a3,a3,1
230023fe:	95b6                	add	a1,a1,a3
23002400:	81e1                	srli	a1,a1,0x18
23002402:	0015c593          	xori	a1,a1,1
23002406:	8985                	andi	a1,a1,1
23002408:	4601                	li	a2,0
2300240a:	b991                	j	2300205e <__subdf3+0x2c6>
2300240c:	da45                	beqz	a2,230023bc <__subdf3+0x624>
2300240e:	410785b3          	sub	a1,a5,a6
23002412:	00b7b533          	sltu	a0,a5,a1
23002416:	40d70633          	sub	a2,a4,a3
2300241a:	8e09                	sub	a2,a2,a0
2300241c:	00800537          	lui	a0,0x800
23002420:	8d71                	and	a0,a0,a2
23002422:	c919                	beqz	a0,23002438 <__subdf3+0x6a0>
23002424:	40f807b3          	sub	a5,a6,a5
23002428:	40e68733          	sub	a4,a3,a4
2300242c:	00f83833          	sltu	a6,a6,a5
23002430:	41070733          	sub	a4,a4,a6
23002434:	849a                	mv	s1,t1
23002436:	b759                	j	230023bc <__subdf3+0x624>
23002438:	00c5e7b3          	or	a5,a1,a2
2300243c:	12079b63          	bnez	a5,23002572 <__subdf3+0x7da>
23002440:	ffe98493          	addi	s1,s3,-2
23002444:	0014b493          	seqz	s1,s1
23002448:	4701                	li	a4,0
2300244a:	bf8d                	j	230023bc <__subdf3+0x624>
2300244c:	7ff00893          	li	a7,2047
23002450:	03141363          	bne	s0,a7,23002476 <__subdf3+0x6de>
23002454:	1e050463          	beqz	a0,2300263c <__subdf3+0x8a4>
23002458:	00400437          	lui	s0,0x400
2300245c:	8c79                	and	s0,s0,a4
2300245e:	00143413          	seqz	s0,s0
23002462:	0412                	slli	s0,s0,0x4
23002464:	03159563          	bne	a1,a7,2300248e <__subdf3+0x6f6>
23002468:	ca11                	beqz	a2,2300247c <__subdf3+0x6e4>
2300246a:	004005b7          	lui	a1,0x400
2300246e:	8df5                	and	a1,a1,a3
23002470:	e591                	bnez	a1,2300247c <__subdf3+0x6e4>
23002472:	4441                	li	s0,16
23002474:	a021                	j	2300247c <__subdf3+0x6e4>
23002476:	4401                	li	s0,0
23002478:	ff1588e3          	beq	a1,a7,23002468 <__subdf3+0x6d0>
2300247c:	e909                	bnez	a0,2300248e <__subdf3+0x6f6>
2300247e:	16060863          	beqz	a2,230025ee <__subdf3+0x856>
23002482:	8736                	mv	a4,a3
23002484:	87c2                	mv	a5,a6
23002486:	849a                	mv	s1,t1
23002488:	b11d                	j	230020ae <__subdf3+0x316>
2300248a:	4401                	li	s0,0
2300248c:	bff1                	j	23002468 <__subdf3+0x6d0>
2300248e:	c20600e3          	beqz	a2,230020ae <__subdf3+0x316>
23002492:	b13d                	j	230020c0 <__subdf3+0x328>
23002494:	41078a33          	sub	s4,a5,a6
23002498:	0147b633          	sltu	a2,a5,s4
2300249c:	40d70933          	sub	s2,a4,a3
230024a0:	40c90933          	sub	s2,s2,a2
230024a4:	00800637          	lui	a2,0x800
230024a8:	00c97633          	and	a2,s2,a2
230024ac:	c625                	beqz	a2,23002514 <__subdf3+0x77c>
230024ae:	40f80a33          	sub	s4,a6,a5
230024b2:	8e99                	sub	a3,a3,a4
230024b4:	01483833          	sltu	a6,a6,s4
230024b8:	41068933          	sub	s2,a3,a6
230024bc:	849a                	mv	s1,t1
230024be:	04090f63          	beqz	s2,2300251c <__subdf3+0x784>
230024c2:	854a                	mv	a0,s2
230024c4:	2dfd                	jal	23002bc2 <__clzsi2>
230024c6:	ff850613          	addi	a2,a0,-8 # 7ffff8 <StackSize+0x7feff8>
230024ca:	47fd                	li	a5,31
230024cc:	04c7cd63          	blt	a5,a2,23002526 <__subdf3+0x78e>
230024d0:	02000693          	li	a3,32
230024d4:	8e91                	sub	a3,a3,a2
230024d6:	00c91733          	sll	a4,s2,a2
230024da:	00da56b3          	srl	a3,s4,a3
230024de:	8ed9                	or	a3,a3,a4
230024e0:	00ca1833          	sll	a6,s4,a2
230024e4:	06864a63          	blt	a2,s0,23002558 <__subdf3+0x7c0>
230024e8:	8e01                	sub	a2,a2,s0
230024ea:	00160713          	addi	a4,a2,1 # 800001 <StackSize+0x7ff001>
230024ee:	47fd                	li	a5,31
230024f0:	04e7c163          	blt	a5,a4,23002532 <__subdf3+0x79a>
230024f4:	02000613          	li	a2,32
230024f8:	8e19                	sub	a2,a2,a4
230024fa:	00c697b3          	sll	a5,a3,a2
230024fe:	00e85533          	srl	a0,a6,a4
23002502:	00c81633          	sll	a2,a6,a2
23002506:	8fc9                	or	a5,a5,a0
23002508:	00c03633          	snez	a2,a2
2300250c:	8fd1                	or	a5,a5,a2
2300250e:	00e6d733          	srl	a4,a3,a4
23002512:	b56d                	j	230023bc <__subdf3+0x624>
23002514:	012a67b3          	or	a5,s4,s2
23002518:	f3dd                	bnez	a5,230024be <__subdf3+0x726>
2300251a:	b71d                	j	23002440 <__subdf3+0x6a8>
2300251c:	8552                	mv	a0,s4
2300251e:	2555                	jal	23002bc2 <__clzsi2>
23002520:	02050513          	addi	a0,a0,32
23002524:	b74d                	j	230024c6 <__subdf3+0x72e>
23002526:	fd850693          	addi	a3,a0,-40
2300252a:	00da16b3          	sll	a3,s4,a3
2300252e:	4801                	li	a6,0
23002530:	bf55                	j	230024e4 <__subdf3+0x74c>
23002532:	1605                	addi	a2,a2,-31
23002534:	02000593          	li	a1,32
23002538:	00c6d633          	srl	a2,a3,a2
2300253c:	4781                	li	a5,0
2300253e:	00b70763          	beq	a4,a1,2300254c <__subdf3+0x7b4>
23002542:	04000793          	li	a5,64
23002546:	8f99                	sub	a5,a5,a4
23002548:	00f697b3          	sll	a5,a3,a5
2300254c:	00f867b3          	or	a5,a6,a5
23002550:	00f037b3          	snez	a5,a5
23002554:	8fd1                	or	a5,a5,a2
23002556:	bdcd                	j	23002448 <__subdf3+0x6b0>
23002558:	ff8007b7          	lui	a5,0xff800
2300255c:	17fd                	addi	a5,a5,-1
2300255e:	40c40633          	sub	a2,s0,a2
23002562:	8efd                	and	a3,a3,a5
23002564:	bae1                	j	23001f3c <__subdf3+0x1a4>
23002566:	8736                	mv	a4,a3
23002568:	87c2                	mv	a5,a6
2300256a:	bd89                	j	230023bc <__subdf3+0x624>
2300256c:	8736                	mv	a4,a3
2300256e:	87c2                	mv	a5,a6
23002570:	b5d1                	j	23002434 <__subdf3+0x69c>
23002572:	8732                	mv	a4,a2
23002574:	87ae                	mv	a5,a1
23002576:	b599                	j	230023bc <__subdf3+0x624>
23002578:	8426                	mv	s0,s1
2300257a:	e80493e3          	bnez	s1,23002400 <__subdf3+0x668>
2300257e:	ff86b693          	sltiu	a3,a3,-8
23002582:	0016c693          	xori	a3,a3,1
23002586:	95b6                	add	a1,a1,a3
23002588:	4405                	li	s0,1
2300258a:	bd9d                	j	23002400 <__subdf3+0x668>
2300258c:	4405                	li	s0,1
2300258e:	e60489e3          	beqz	s1,23002400 <__subdf3+0x668>
23002592:	ff86b693          	sltiu	a3,a3,-8
23002596:	0016c693          	xori	a3,a3,1
2300259a:	95b6                	add	a1,a1,a3
2300259c:	8426                	mv	s0,s1
2300259e:	b58d                	j	23002400 <__subdf3+0x668>
230025a0:	4701                	li	a4,0
230025a2:	7ff00613          	li	a2,2047
230025a6:	b84d                	j	23001e58 <__subdf3+0xc0>
230025a8:	87c2                	mv	a5,a6
230025aa:	7ff00613          	li	a2,2047
230025ae:	b665                	j	23002156 <__subdf3+0x3be>
230025b0:	577d                	li	a4,-1
230025b2:	57fd                	li	a5,-1
230025b4:	7fe00613          	li	a2,2046
230025b8:	4581                	li	a1,0
230025ba:	b6d9                	j	23002180 <__subdf3+0x3e8>
230025bc:	4701                	li	a4,0
230025be:	4781                	li	a5,0
230025c0:	b631                	j	230020cc <__subdf3+0x334>
230025c2:	4701                	li	a4,0
230025c4:	4781                	li	a5,0
230025c6:	bff1                	j	230025a2 <__subdf3+0x80a>
230025c8:	87c2                	mv	a5,a6
230025ca:	4581                	li	a1,0
230025cc:	bc49                	j	2300205e <__subdf3+0x2c6>
230025ce:	4701                	li	a4,0
230025d0:	849a                	mv	s1,t1
230025d2:	bced                	j	230020cc <__subdf3+0x334>
230025d4:	87c2                	mv	a5,a6
230025d6:	849a                	mv	s1,t1
230025d8:	bfcd                	j	230025ca <__subdf3+0x832>
230025da:	4701                	li	a4,0
230025dc:	7ff00613          	li	a2,2047
230025e0:	849a                	mv	s1,t1
230025e2:	b89d                	j	23001e58 <__subdf3+0xc0>
230025e4:	87c2                	mv	a5,a6
230025e6:	7ff00613          	li	a2,2047
230025ea:	849a                	mv	s1,t1
230025ec:	b6ad                	j	23002156 <__subdf3+0x3be>
230025ee:	4781                	li	a5,0
230025f0:	4481                	li	s1,0
230025f2:	00400737          	lui	a4,0x400
230025f6:	7ff00613          	li	a2,2047
230025fa:	4441                	li	s0,16
230025fc:	bcc1                	j	230020cc <__subdf3+0x334>
230025fe:	4701                	li	a4,0
23002600:	4781                	li	a5,0
23002602:	4601                	li	a2,0
23002604:	b891                	j	23001e58 <__subdf3+0xc0>
23002606:	e489                	bnez	s1,23002610 <__subdf3+0x878>
23002608:	00878693          	addi	a3,a5,8 # ff800008 <__HeapLimit+0xbd7d0008>
2300260c:	be61                	j	230021a4 <__subdf3+0x40c>
2300260e:	fced                	bnez	s1,23002608 <__subdf3+0x870>
23002610:	a4059fe3          	bnez	a1,2300206e <__subdf3+0x2d6>
23002614:	bc65                	j	230020cc <__subdf3+0x334>
23002616:	4781                	li	a5,0
23002618:	00098e63          	beqz	s3,23002634 <__subdf3+0x89c>
2300261c:	470d                	li	a4,3
2300261e:	00e99763          	bne	s3,a4,2300262c <__subdf3+0x894>
23002622:	c889                	beqz	s1,23002634 <__subdf3+0x89c>
23002624:	57fd                	li	a5,-1
23002626:	7fe00613          	li	a2,2046
2300262a:	a029                	j	23002634 <__subdf3+0x89c>
2300262c:	4709                	li	a4,2
2300262e:	fee99be3          	bne	s3,a4,23002624 <__subdf3+0x88c>
23002632:	d8ed                	beqz	s1,23002624 <__subdf3+0x88c>
23002634:	00546413          	ori	s0,s0,5
23002638:	873e                	mv	a4,a5
2300263a:	b475                	j	230020e6 <__subdf3+0x34e>
2300263c:	e48587e3          	beq	a1,s0,2300248a <__subdf3+0x6f2>
23002640:	4401                	li	s0,0
23002642:	bd35                	j	2300247e <__subdf3+0x6e6>
23002644:	a68589e3          	beq	a1,s0,230020b6 <__subdf3+0x31e>
23002648:	4401                	li	s0,0
2300264a:	b485                	j	230020aa <__subdf3+0x312>

2300264c <__unorddf2>:
2300264c:	872a                	mv	a4,a0
2300264e:	002027f3          	frrm	a5
23002652:	001007b7          	lui	a5,0x100
23002656:	17fd                	addi	a5,a5,-1
23002658:	00b7f833          	and	a6,a5,a1
2300265c:	81d1                	srli	a1,a1,0x14
2300265e:	8ff5                	and	a5,a5,a3
23002660:	7ff5f593          	andi	a1,a1,2047
23002664:	82d1                	srli	a3,a3,0x14
23002666:	7ff00513          	li	a0,2047
2300266a:	7ff6f693          	andi	a3,a3,2047
2300266e:	00a59563          	bne	a1,a0,23002678 <__unorddf2+0x2c>
23002672:	00e86533          	or	a0,a6,a4
23002676:	e105                	bnez	a0,23002696 <__unorddf2+0x4a>
23002678:	7ff00893          	li	a7,2047
2300267c:	4501                	li	a0,0
2300267e:	05169363          	bne	a3,a7,230026c4 <__unorddf2+0x78>
23002682:	00c7e8b3          	or	a7,a5,a2
23002686:	00089363          	bnez	a7,2300268c <__unorddf2+0x40>
2300268a:	8082                	ret
2300268c:	02d59363          	bne	a1,a3,230026b2 <__unorddf2+0x66>
23002690:	00e86733          	or	a4,a6,a4
23002694:	cf01                	beqz	a4,230026ac <__unorddf2+0x60>
23002696:	00080737          	lui	a4,0x80
2300269a:	00e87833          	and	a6,a6,a4
2300269e:	00080f63          	beqz	a6,230026bc <__unorddf2+0x70>
230026a2:	7ff00713          	li	a4,2047
230026a6:	4505                	li	a0,1
230026a8:	00e69e63          	bne	a3,a4,230026c4 <__unorddf2+0x78>
230026ac:	8e5d                	or	a2,a2,a5
230026ae:	4505                	li	a0,1
230026b0:	ca11                	beqz	a2,230026c4 <__unorddf2+0x78>
230026b2:	00080737          	lui	a4,0x80
230026b6:	8ff9                	and	a5,a5,a4
230026b8:	4505                	li	a0,1
230026ba:	e789                	bnez	a5,230026c4 <__unorddf2+0x78>
230026bc:	00186073          	csrsi	fflags,16
230026c0:	4505                	li	a0,1
230026c2:	8082                	ret
230026c4:	8082                	ret

230026c6 <__fixdfsi>:
230026c6:	882a                	mv	a6,a0
230026c8:	002027f3          	frrm	a5
230026cc:	001007b7          	lui	a5,0x100
230026d0:	0145d693          	srli	a3,a1,0x14
230026d4:	fff78613          	addi	a2,a5,-1 # fffff <StackSize+0xfefff>
230026d8:	7ff6f693          	andi	a3,a3,2047
230026dc:	3fe00713          	li	a4,1022
230026e0:	8e6d                	and	a2,a2,a1
230026e2:	81fd                	srli	a1,a1,0x1f
230026e4:	00d74663          	blt	a4,a3,230026f0 <__fixdfsi+0x2a>
230026e8:	ead1                	bnez	a3,2300277c <__fixdfsi+0xb6>
230026ea:	8d51                	or	a0,a0,a2
230026ec:	e941                	bnez	a0,2300277c <__fixdfsi+0xb6>
230026ee:	8082                	ret
230026f0:	41d00713          	li	a4,1053
230026f4:	02d75863          	bge	a4,a3,23002724 <__fixdfsi+0x5e>
230026f8:	80000737          	lui	a4,0x80000
230026fc:	fff74713          	not	a4,a4
23002700:	00e58533          	add	a0,a1,a4
23002704:	cdbd                	beqz	a1,23002782 <__fixdfsi+0xbc>
23002706:	41e00793          	li	a5,1054
2300270a:	4741                	li	a4,16
2300270c:	04f69263          	bne	a3,a5,23002750 <__fixdfsi+0x8a>
23002710:	00b61793          	slli	a5,a2,0xb
23002714:	01585613          	srli	a2,a6,0x15
23002718:	8fd1                	or	a5,a5,a2
2300271a:	eb9d                	bnez	a5,23002750 <__fixdfsi+0x8a>
2300271c:	00b81713          	slli	a4,a6,0xb
23002720:	e33d                	bnez	a4,23002786 <__fixdfsi+0xc0>
23002722:	8082                	ret
23002724:	43300513          	li	a0,1075
23002728:	8d15                	sub	a0,a0,a3
2300272a:	477d                	li	a4,31
2300272c:	8fd1                	or	a5,a5,a2
2300272e:	02a74463          	blt	a4,a0,23002756 <__fixdfsi+0x90>
23002732:	bed68613          	addi	a2,a3,-1043 # 7feffbed <__HeapLimit+0x3decfbed>
23002736:	00c816b3          	sll	a3,a6,a2
2300273a:	00c797b3          	sll	a5,a5,a2
2300273e:	00a85533          	srl	a0,a6,a0
23002742:	00d03733          	snez	a4,a3
23002746:	8d5d                	or	a0,a0,a5
23002748:	c199                	beqz	a1,2300274e <__fixdfsi+0x88>
2300274a:	40a00533          	neg	a0,a0
2300274e:	c319                	beqz	a4,23002754 <__fixdfsi+0x8e>
23002750:	00172073          	csrs	fflags,a4
23002754:	8082                	ret
23002756:	02000613          	li	a2,32
2300275a:	4701                	li	a4,0
2300275c:	00c50663          	beq	a0,a2,23002768 <__fixdfsi+0xa2>
23002760:	c0d68713          	addi	a4,a3,-1011
23002764:	00e79733          	sll	a4,a5,a4
23002768:	41300513          	li	a0,1043
2300276c:	01076733          	or	a4,a4,a6
23002770:	8d15                	sub	a0,a0,a3
23002772:	00e03733          	snez	a4,a4
23002776:	00a7d533          	srl	a0,a5,a0
2300277a:	b7f9                	j	23002748 <__fixdfsi+0x82>
2300277c:	4501                	li	a0,0
2300277e:	4705                	li	a4,1
23002780:	bfc1                	j	23002750 <__fixdfsi+0x8a>
23002782:	4741                	li	a4,16
23002784:	b7f1                	j	23002750 <__fixdfsi+0x8a>
23002786:	872e                	mv	a4,a1
23002788:	b7e1                	j	23002750 <__fixdfsi+0x8a>

2300278a <__floatsidf>:
2300278a:	1141                	addi	sp,sp,-16
2300278c:	c606                	sw	ra,12(sp)
2300278e:	c422                	sw	s0,8(sp)
23002790:	c226                	sw	s1,4(sp)
23002792:	cd21                	beqz	a0,230027ea <__floatsidf+0x60>
23002794:	41f55793          	srai	a5,a0,0x1f
23002798:	00a7c433          	xor	s0,a5,a0
2300279c:	8c1d                	sub	s0,s0,a5
2300279e:	01f55493          	srli	s1,a0,0x1f
230027a2:	8522                	mv	a0,s0
230027a4:	2939                	jal	23002bc2 <__clzsi2>
230027a6:	41e00713          	li	a4,1054
230027aa:	47a9                	li	a5,10
230027ac:	8f09                	sub	a4,a4,a0
230027ae:	02a7c863          	blt	a5,a0,230027de <__floatsidf+0x54>
230027b2:	47ad                	li	a5,11
230027b4:	8f89                	sub	a5,a5,a0
230027b6:	0555                	addi	a0,a0,21
230027b8:	00f457b3          	srl	a5,s0,a5
230027bc:	00a41433          	sll	s0,s0,a0
230027c0:	8526                	mv	a0,s1
230027c2:	07b2                	slli	a5,a5,0xc
230027c4:	0752                	slli	a4,a4,0x14
230027c6:	83b1                	srli	a5,a5,0xc
230027c8:	057e                	slli	a0,a0,0x1f
230027ca:	8fd9                	or	a5,a5,a4
230027cc:	40b2                	lw	ra,12(sp)
230027ce:	00a7e733          	or	a4,a5,a0
230027d2:	8522                	mv	a0,s0
230027d4:	4422                	lw	s0,8(sp)
230027d6:	4492                	lw	s1,4(sp)
230027d8:	85ba                	mv	a1,a4
230027da:	0141                	addi	sp,sp,16
230027dc:	8082                	ret
230027de:	1555                	addi	a0,a0,-11
230027e0:	00a417b3          	sll	a5,s0,a0
230027e4:	8526                	mv	a0,s1
230027e6:	4401                	li	s0,0
230027e8:	bfe9                	j	230027c2 <__floatsidf+0x38>
230027ea:	4701                	li	a4,0
230027ec:	4781                	li	a5,0
230027ee:	bfe5                	j	230027e6 <__floatsidf+0x5c>

230027f0 <__floatunsidf>:
230027f0:	1141                	addi	sp,sp,-16
230027f2:	c422                	sw	s0,8(sp)
230027f4:	c606                	sw	ra,12(sp)
230027f6:	842a                	mv	s0,a0
230027f8:	c121                	beqz	a0,23002838 <__floatunsidf+0x48>
230027fa:	26e1                	jal	23002bc2 <__clzsi2>
230027fc:	41e00713          	li	a4,1054
23002800:	47a9                	li	a5,10
23002802:	8f09                	sub	a4,a4,a0
23002804:	02a7c463          	blt	a5,a0,2300282c <__floatunsidf+0x3c>
23002808:	47ad                	li	a5,11
2300280a:	8f89                	sub	a5,a5,a0
2300280c:	0555                	addi	a0,a0,21
2300280e:	00f457b3          	srl	a5,s0,a5
23002812:	00a41433          	sll	s0,s0,a0
23002816:	40b2                	lw	ra,12(sp)
23002818:	8522                	mv	a0,s0
2300281a:	07b2                	slli	a5,a5,0xc
2300281c:	4422                	lw	s0,8(sp)
2300281e:	0752                	slli	a4,a4,0x14
23002820:	83b1                	srli	a5,a5,0xc
23002822:	00f766b3          	or	a3,a4,a5
23002826:	85b6                	mv	a1,a3
23002828:	0141                	addi	sp,sp,16
2300282a:	8082                	ret
2300282c:	ff550793          	addi	a5,a0,-11
23002830:	00f417b3          	sll	a5,s0,a5
23002834:	4401                	li	s0,0
23002836:	b7c5                	j	23002816 <__floatunsidf+0x26>
23002838:	4781                	li	a5,0
2300283a:	4701                	li	a4,0
2300283c:	bfe9                	j	23002816 <__floatunsidf+0x26>

2300283e <__trunctfdf2>:
2300283e:	7179                	addi	sp,sp,-48
23002840:	d422                	sw	s0,40(sp)
23002842:	d606                	sw	ra,44(sp)
23002844:	d226                	sw	s1,36(sp)
23002846:	d04a                	sw	s2,32(sp)
23002848:	4114                	lw	a3,0(a0)
2300284a:	4158                	lw	a4,4(a0)
2300284c:	451c                	lw	a5,8(a0)
2300284e:	4540                	lw	s0,12(a0)
23002850:	002024f3          	frrm	s1
23002854:	c43e                	sw	a5,8(sp)
23002856:	cc3e                	sw	a5,24(sp)
23002858:	01041793          	slli	a5,s0,0x10
2300285c:	83c1                	srli	a5,a5,0x10
2300285e:	00141593          	slli	a1,s0,0x1
23002862:	0808                	addi	a0,sp,16
23002864:	c622                	sw	s0,12(sp)
23002866:	ce3e                	sw	a5,28(sp)
23002868:	c036                	sw	a3,0(sp)
2300286a:	c23a                	sw	a4,4(sp)
2300286c:	c836                	sw	a3,16(sp)
2300286e:	ca3a                	sw	a4,20(sp)
23002870:	0115de13          	srli	t3,a1,0x11
23002874:	807d                	srli	s0,s0,0x1f
23002876:	087c                	addi	a5,sp,28
23002878:	862a                	mv	a2,a0
2300287a:	4394                	lw	a3,0(a5)
2300287c:	ffc7a703          	lw	a4,-4(a5)
23002880:	17f1                	addi	a5,a5,-4
23002882:	068e                	slli	a3,a3,0x3
23002884:	8375                	srli	a4,a4,0x1d
23002886:	8ed9                	or	a3,a3,a4
23002888:	c3d4                	sw	a3,4(a5)
2300288a:	fef518e3          	bne	a0,a5,2300287a <__trunctfdf2+0x3c>
2300288e:	47c2                	lw	a5,16(sp)
23002890:	6321                	lui	t1,0x8
23002892:	001e0713          	addi	a4,t3,1 # 10001 <StackSize+0xf001>
23002896:	00379813          	slli	a6,a5,0x3
2300289a:	ffe30793          	addi	a5,t1,-2 # 7ffe <StackSize+0x6ffe>
2300289e:	c842                	sw	a6,16(sp)
230028a0:	8f7d                	and	a4,a4,a5
230028a2:	18070d63          	beqz	a4,23002a3c <__trunctfdf2+0x1fe>
230028a6:	77f1                	lui	a5,0xffffc
230028a8:	40078793          	addi	a5,a5,1024 # ffffc400 <__HeapLimit+0xbdfcc400>
230028ac:	00fe05b3          	add	a1,t3,a5
230028b0:	7fe00793          	li	a5,2046
230028b4:	06b7d063          	bge	a5,a1,23002914 <__trunctfdf2+0xd6>
230028b8:	24048663          	beqz	s1,23002b04 <__trunctfdf2+0x2c6>
230028bc:	478d                	li	a5,3
230028be:	00f49a63          	bne	s1,a5,230028d2 <__trunctfdf2+0x94>
230028c2:	24040163          	beqz	s0,23002b04 <__trunctfdf2+0x2c6>
230028c6:	7fe00593          	li	a1,2046
230028ca:	57fd                	li	a5,-1
230028cc:	557d                	li	a0,-1
230028ce:	4701                	li	a4,0
230028d0:	a819                	j	230028e6 <__trunctfdf2+0xa8>
230028d2:	4789                	li	a5,2
230028d4:	fef499e3          	bne	s1,a5,230028c6 <__trunctfdf2+0x88>
230028d8:	22041663          	bnez	s0,23002b04 <__trunctfdf2+0x2c6>
230028dc:	4701                	li	a4,0
230028de:	7fe00593          	li	a1,2046
230028e2:	57fd                	li	a5,-1
230028e4:	557d                	li	a0,-1
230028e6:	4815                	li	a6,5
230028e8:	4689                	li	a3,2
230028ea:	00186813          	ori	a6,a6,1
230028ee:	2ad48363          	beq	s1,a3,23002b94 <__trunctfdf2+0x356>
230028f2:	468d                	li	a3,3
230028f4:	28d48c63          	beq	s1,a3,23002b8c <__trunctfdf2+0x34e>
230028f8:	28049f63          	bnez	s1,23002b96 <__trunctfdf2+0x358>
230028fc:	00f7f693          	andi	a3,a5,15
23002900:	4611                	li	a2,4
23002902:	28c68a63          	beq	a3,a2,23002b96 <__trunctfdf2+0x358>
23002906:	00478693          	addi	a3,a5,4
2300290a:	00f6b7b3          	sltu	a5,a3,a5
2300290e:	953e                	add	a0,a0,a5
23002910:	87b6                	mv	a5,a3
23002912:	a451                	j	23002b96 <__trunctfdf2+0x358>
23002914:	04b05363          	blez	a1,2300295a <__trunctfdf2+0x11c>
23002918:	4662                	lw	a2,24(sp)
2300291a:	46f2                	lw	a3,28(sp)
2300291c:	4752                	lw	a4,20(sp)
2300291e:	01c65793          	srli	a5,a2,0x1c
23002922:	0692                	slli	a3,a3,0x4
23002924:	8edd                	or	a3,a3,a5
23002926:	00471793          	slli	a5,a4,0x4
2300292a:	0107e7b3          	or	a5,a5,a6
2300292e:	8371                	srli	a4,a4,0x1c
23002930:	0612                	slli	a2,a2,0x4
23002932:	00f037b3          	snez	a5,a5
23002936:	8f51                	or	a4,a4,a2
23002938:	8fd9                	or	a5,a5,a4
2300293a:	ca36                	sw	a3,20(sp)
2300293c:	c83e                	sw	a5,16(sp)
2300293e:	47c2                	lw	a5,16(sp)
23002940:	4552                	lw	a0,20(sp)
23002942:	10058b63          	beqz	a1,23002a58 <__trunctfdf2+0x21a>
23002946:	4701                	li	a4,0
23002948:	4801                	li	a6,0
2300294a:	0077f693          	andi	a3,a5,7
2300294e:	fec9                	bnez	a3,230028e8 <__trunctfdf2+0xaa>
23002950:	1a070f63          	beqz	a4,23002b0e <__trunctfdf2+0x2d0>
23002954:	00187713          	andi	a4,a6,1
23002958:	ac3d                	j	23002b96 <__trunctfdf2+0x358>
2300295a:	fcc00793          	li	a5,-52
2300295e:	00f5d763          	bge	a1,a5,2300296c <__trunctfdf2+0x12e>
23002962:	ca02                	sw	zero,20(sp)
23002964:	4785                	li	a5,1
23002966:	c83e                	sw	a5,16(sp)
23002968:	4581                	li	a1,0
2300296a:	bfd1                	j	2300293e <__trunctfdf2+0x100>
2300296c:	47f2                	lw	a5,28(sp)
2300296e:	00080737          	lui	a4,0x80
23002972:	86aa                	mv	a3,a0
23002974:	00f768b3          	or	a7,a4,a5
23002978:	03d00793          	li	a5,61
2300297c:	40b785b3          	sub	a1,a5,a1
23002980:	ce46                	sw	a7,28(sp)
23002982:	4055d793          	srai	a5,a1,0x5
23002986:	4901                	li	s2,0
23002988:	4701                	li	a4,0
2300298a:	0006a803          	lw	a6,0(a3)
2300298e:	0705                	addi	a4,a4,1
23002990:	0691                	addi	a3,a3,4
23002992:	01096933          	or	s2,s2,a6
23002996:	fee79ae3          	bne	a5,a4,2300298a <__trunctfdf2+0x14c>
2300299a:	01f5f713          	andi	a4,a1,31
2300299e:	00279693          	slli	a3,a5,0x2
230029a2:	e30d                	bnez	a4,230029c4 <__trunctfdf2+0x186>
230029a4:	458d                	li	a1,3
230029a6:	8d9d                	sub	a1,a1,a5
230029a8:	00d60833          	add	a6,a2,a3
230029ac:	00082803          	lw	a6,0(a6)
230029b0:	0705                	addi	a4,a4,1
230029b2:	01062023          	sw	a6,0(a2)
230029b6:	0611                	addi	a2,a2,4
230029b8:	fee5d8e3          	bge	a1,a4,230029a8 <__trunctfdf2+0x16a>
230029bc:	4711                	li	a4,4
230029be:	40f707b3          	sub	a5,a4,a5
230029c2:	a081                	j	23002a02 <__trunctfdf2+0x1c4>
230029c4:	5e71                	li	t3,-4
230029c6:	03c78e33          	mul	t3,a5,t3
230029ca:	1010                	addi	a2,sp,32
230029cc:	9636                	add	a2,a2,a3
230029ce:	ff062603          	lw	a2,-16(a2)
230029d2:	02000813          	li	a6,32
230029d6:	40e80833          	sub	a6,a6,a4
230029da:	01061633          	sll	a2,a2,a6
230029de:	00c96933          	or	s2,s2,a2
230029e2:	460d                	li	a2,3
230029e4:	96aa                	add	a3,a3,a0
230029e6:	4301                	li	t1,0
230029e8:	8e1d                	sub	a2,a2,a5
230029ea:	02c34963          	blt	t1,a2,23002a1c <__trunctfdf2+0x1de>
230029ee:	4691                	li	a3,4
230029f0:	40f687b3          	sub	a5,a3,a5
230029f4:	060a                	slli	a2,a2,0x2
230029f6:	1014                	addi	a3,sp,32
230029f8:	9636                	add	a2,a2,a3
230029fa:	00e8d733          	srl	a4,a7,a4
230029fe:	fee62823          	sw	a4,-16(a2)
23002a02:	4611                	li	a2,4
23002a04:	8e1d                	sub	a2,a2,a5
23002a06:	078a                	slli	a5,a5,0x2
23002a08:	953e                	add	a0,a0,a5
23002a0a:	060a                	slli	a2,a2,0x2
23002a0c:	4581                	li	a1,0
23002a0e:	877fd0ef          	jal	ra,23000284 <memset>
23002a12:	4742                	lw	a4,16(sp)
23002a14:	012037b3          	snez	a5,s2
23002a18:	8fd9                	or	a5,a5,a4
23002a1a:	b7b1                	j	23002966 <__trunctfdf2+0x128>
23002a1c:	428c                	lw	a1,0(a3)
23002a1e:	0046ae83          	lw	t4,4(a3)
23002a22:	01c68f33          	add	t5,a3,t3
23002a26:	00e5d5b3          	srl	a1,a1,a4
23002a2a:	010e9eb3          	sll	t4,t4,a6
23002a2e:	01d5e5b3          	or	a1,a1,t4
23002a32:	00bf2023          	sw	a1,0(t5)
23002a36:	0305                	addi	t1,t1,1
23002a38:	0691                	addi	a3,a3,4
23002a3a:	bf45                	j	230029ea <__trunctfdf2+0x1ac>
23002a3c:	45d2                	lw	a1,20(sp)
23002a3e:	4662                	lw	a2,24(sp)
23002a40:	48f2                	lw	a7,28(sp)
23002a42:	00b666b3          	or	a3,a2,a1
23002a46:	0116e6b3          	or	a3,a3,a7
23002a4a:	0106e533          	or	a0,a3,a6
23002a4e:	040e1c63          	bnez	t3,23002aa6 <__trunctfdf2+0x268>
23002a52:	00a037b3          	snez	a5,a0
23002a56:	4501                	li	a0,0
23002a58:	00f56733          	or	a4,a0,a5
23002a5c:	12070363          	beqz	a4,23002b82 <__trunctfdf2+0x344>
23002a60:	01f7d693          	srli	a3,a5,0x1f
23002a64:	00151713          	slli	a4,a0,0x1
23002a68:	9736                	add	a4,a4,a3
23002a6a:	00179693          	slli	a3,a5,0x1
23002a6e:	0076f613          	andi	a2,a3,7
23002a72:	4801                	li	a6,0
23002a74:	c21d                	beqz	a2,23002a9a <__trunctfdf2+0x25c>
23002a76:	4609                	li	a2,2
23002a78:	06c48d63          	beq	s1,a2,23002af2 <__trunctfdf2+0x2b4>
23002a7c:	460d                	li	a2,3
23002a7e:	06c48163          	beq	s1,a2,23002ae0 <__trunctfdf2+0x2a2>
23002a82:	4805                	li	a6,1
23002a84:	e899                	bnez	s1,23002a9a <__trunctfdf2+0x25c>
23002a86:	00f6f613          	andi	a2,a3,15
23002a8a:	4591                	li	a1,4
23002a8c:	00b60763          	beq	a2,a1,23002a9a <__trunctfdf2+0x25c>
23002a90:	ffc6b693          	sltiu	a3,a3,-4
23002a94:	0016c693          	xori	a3,a3,1
23002a98:	9736                	add	a4,a4,a3
23002a9a:	8361                	srli	a4,a4,0x18
23002a9c:	00174713          	xori	a4,a4,1
23002aa0:	8b05                	andi	a4,a4,1
23002aa2:	4581                	li	a1,0
23002aa4:	b55d                	j	2300294a <__trunctfdf2+0x10c>
23002aa6:	c969                	beqz	a0,23002b78 <__trunctfdf2+0x33a>
23002aa8:	137d                	addi	t1,t1,-1
23002aaa:	4801                	li	a6,0
23002aac:	006e1963          	bne	t3,t1,23002abe <__trunctfdf2+0x280>
23002ab0:	00040837          	lui	a6,0x40
23002ab4:	0108f833          	and	a6,a7,a6
23002ab8:	00183813          	seqz	a6,a6
23002abc:	0812                	slli	a6,a6,0x4
23002abe:	01c5d793          	srli	a5,a1,0x1c
23002ac2:	0892                	slli	a7,a7,0x4
23002ac4:	00461593          	slli	a1,a2,0x4
23002ac8:	8271                	srli	a2,a2,0x1c
23002aca:	8fcd                	or	a5,a5,a1
23002acc:	01166633          	or	a2,a2,a7
23002ad0:	004006b7          	lui	a3,0x400
23002ad4:	9be1                	andi	a5,a5,-8
23002ad6:	00d66533          	or	a0,a2,a3
23002ada:	7ff00593          	li	a1,2047
23002ade:	b5b5                	j	2300294a <__trunctfdf2+0x10c>
23002ae0:	8822                	mv	a6,s0
23002ae2:	fc45                	bnez	s0,23002a9a <__trunctfdf2+0x25c>
23002ae4:	ff86b693          	sltiu	a3,a3,-8
23002ae8:	0016c693          	xori	a3,a3,1
23002aec:	9736                	add	a4,a4,a3
23002aee:	4805                	li	a6,1
23002af0:	b76d                	j	23002a9a <__trunctfdf2+0x25c>
23002af2:	4805                	li	a6,1
23002af4:	d05d                	beqz	s0,23002a9a <__trunctfdf2+0x25c>
23002af6:	ff86b693          	sltiu	a3,a3,-8
23002afa:	0016c693          	xori	a3,a3,1
23002afe:	9736                	add	a4,a4,a3
23002b00:	8822                	mv	a6,s0
23002b02:	bf61                	j	23002a9a <__trunctfdf2+0x25c>
23002b04:	7ff00593          	li	a1,2047
23002b08:	4781                	li	a5,0
23002b0a:	4501                	li	a0,0
23002b0c:	4815                	li	a6,5
23002b0e:	00800737          	lui	a4,0x800
23002b12:	8f69                	and	a4,a4,a0
23002b14:	cb11                	beqz	a4,23002b28 <__trunctfdf2+0x2ea>
23002b16:	0585                	addi	a1,a1,1
23002b18:	7ff00713          	li	a4,2047
23002b1c:	08e58163          	beq	a1,a4,23002b9e <__trunctfdf2+0x360>
23002b20:	ff800737          	lui	a4,0xff800
23002b24:	177d                	addi	a4,a4,-1
23002b26:	8d79                	and	a0,a0,a4
23002b28:	0037d713          	srli	a4,a5,0x3
23002b2c:	01d51793          	slli	a5,a0,0x1d
23002b30:	8fd9                	or	a5,a5,a4
23002b32:	7ff00713          	li	a4,2047
23002b36:	00355693          	srli	a3,a0,0x3
23002b3a:	00e59963          	bne	a1,a4,23002b4c <__trunctfdf2+0x30e>
23002b3e:	8fd5                	or	a5,a5,a3
23002b40:	4681                	li	a3,0
23002b42:	c789                	beqz	a5,23002b4c <__trunctfdf2+0x30e>
23002b44:	000806b7          	lui	a3,0x80
23002b48:	4781                	li	a5,0
23002b4a:	4401                	li	s0,0
23002b4c:	7ff00737          	lui	a4,0x7ff00
23002b50:	05d2                	slli	a1,a1,0x14
23002b52:	06b2                	slli	a3,a3,0xc
23002b54:	8df9                	and	a1,a1,a4
23002b56:	82b1                	srli	a3,a3,0xc
23002b58:	8ecd                	or	a3,a3,a1
23002b5a:	047e                	slli	s0,s0,0x1f
23002b5c:	0086e733          	or	a4,a3,s0
23002b60:	853e                	mv	a0,a5
23002b62:	85ba                	mv	a1,a4
23002b64:	00080463          	beqz	a6,23002b6c <__trunctfdf2+0x32e>
23002b68:	00182073          	csrs	fflags,a6
23002b6c:	50b2                	lw	ra,44(sp)
23002b6e:	5422                	lw	s0,40(sp)
23002b70:	5492                	lw	s1,36(sp)
23002b72:	5902                	lw	s2,32(sp)
23002b74:	6145                	addi	sp,sp,48
23002b76:	8082                	ret
23002b78:	4781                	li	a5,0
23002b7a:	4801                	li	a6,0
23002b7c:	7ff00593          	li	a1,2047
23002b80:	b779                	j	23002b0e <__trunctfdf2+0x2d0>
23002b82:	4781                	li	a5,0
23002b84:	4501                	li	a0,0
23002b86:	4581                	li	a1,0
23002b88:	4801                	li	a6,0
23002b8a:	b751                	j	23002b0e <__trunctfdf2+0x2d0>
23002b8c:	e409                	bnez	s0,23002b96 <__trunctfdf2+0x358>
23002b8e:	00878693          	addi	a3,a5,8
23002b92:	bba5                	j	2300290a <__trunctfdf2+0xcc>
23002b94:	fc6d                	bnez	s0,23002b8e <__trunctfdf2+0x350>
23002b96:	df25                	beqz	a4,23002b0e <__trunctfdf2+0x2d0>
23002b98:	00286813          	ori	a6,a6,2
23002b9c:	bf8d                	j	23002b0e <__trunctfdf2+0x2d0>
23002b9e:	4781                	li	a5,0
23002ba0:	cc89                	beqz	s1,23002bba <__trunctfdf2+0x37c>
23002ba2:	470d                	li	a4,3
23002ba4:	00e49763          	bne	s1,a4,23002bb2 <__trunctfdf2+0x374>
23002ba8:	c809                	beqz	s0,23002bba <__trunctfdf2+0x37c>
23002baa:	57fd                	li	a5,-1
23002bac:	7fe00593          	li	a1,2046
23002bb0:	a029                	j	23002bba <__trunctfdf2+0x37c>
23002bb2:	4709                	li	a4,2
23002bb4:	fee49be3          	bne	s1,a4,23002baa <__trunctfdf2+0x36c>
23002bb8:	d86d                	beqz	s0,23002baa <__trunctfdf2+0x36c>
23002bba:	00586813          	ori	a6,a6,5
23002bbe:	853e                	mv	a0,a5
23002bc0:	b7a5                	j	23002b28 <__trunctfdf2+0x2ea>

23002bc2 <__clzsi2>:
23002bc2:	67c1                	lui	a5,0x10
23002bc4:	02f57663          	bgeu	a0,a5,23002bf0 <__clzsi2+0x2e>
23002bc8:	0ff00793          	li	a5,255
23002bcc:	00a7b7b3          	sltu	a5,a5,a0
23002bd0:	078e                	slli	a5,a5,0x3
23002bd2:	02000713          	li	a4,32
23002bd6:	8f1d                	sub	a4,a4,a5
23002bd8:	00f55533          	srl	a0,a0,a5
23002bdc:	0000a797          	auipc	a5,0xa
23002be0:	6e878793          	addi	a5,a5,1768 # 2300d2c4 <__clz_tab>
23002be4:	953e                	add	a0,a0,a5
23002be6:	00054503          	lbu	a0,0(a0)
23002bea:	40a70533          	sub	a0,a4,a0
23002bee:	8082                	ret
23002bf0:	01000737          	lui	a4,0x1000
23002bf4:	47c1                	li	a5,16
23002bf6:	fce56ee3          	bltu	a0,a4,23002bd2 <__clzsi2+0x10>
23002bfa:	47e1                	li	a5,24
23002bfc:	bfd9                	j	23002bd2 <__clzsi2+0x10>

23002bfe <__umoddi3>:
23002bfe:	832a                	mv	t1,a0
23002c00:	8832                	mv	a6,a2
23002c02:	87b6                	mv	a5,a3
23002c04:	872e                	mv	a4,a1
23002c06:	1c069563          	bnez	a3,23002dd0 <__umoddi3+0x1d2>
23002c0a:	0000a697          	auipc	a3,0xa
23002c0e:	6ba68693          	addi	a3,a3,1722 # 2300d2c4 <__clz_tab>
23002c12:	0ac5f663          	bgeu	a1,a2,23002cbe <__umoddi3+0xc0>
23002c16:	68c1                	lui	a7,0x10
23002c18:	09167c63          	bgeu	a2,a7,23002cb0 <__umoddi3+0xb2>
23002c1c:	0ff00893          	li	a7,255
23002c20:	00c8f363          	bgeu	a7,a2,23002c26 <__umoddi3+0x28>
23002c24:	47a1                	li	a5,8
23002c26:	00f658b3          	srl	a7,a2,a5
23002c2a:	96c6                	add	a3,a3,a7
23002c2c:	0006c683          	lbu	a3,0(a3)
23002c30:	97b6                	add	a5,a5,a3
23002c32:	02000693          	li	a3,32
23002c36:	40f688b3          	sub	a7,a3,a5
23002c3a:	00f68c63          	beq	a3,a5,23002c52 <__umoddi3+0x54>
23002c3e:	011595b3          	sll	a1,a1,a7
23002c42:	00f357b3          	srl	a5,t1,a5
23002c46:	01161833          	sll	a6,a2,a7
23002c4a:	00b7e733          	or	a4,a5,a1
23002c4e:	01131533          	sll	a0,t1,a7
23002c52:	01085593          	srli	a1,a6,0x10
23002c56:	02b777b3          	remu	a5,a4,a1
23002c5a:	01081613          	slli	a2,a6,0x10
23002c5e:	8241                	srli	a2,a2,0x10
23002c60:	01055693          	srli	a3,a0,0x10
23002c64:	02b75733          	divu	a4,a4,a1
23002c68:	07c2                	slli	a5,a5,0x10
23002c6a:	8edd                	or	a3,a3,a5
23002c6c:	02e60733          	mul	a4,a2,a4
23002c70:	00e6f863          	bgeu	a3,a4,23002c80 <__umoddi3+0x82>
23002c74:	96c2                	add	a3,a3,a6
23002c76:	0106e563          	bltu	a3,a6,23002c80 <__umoddi3+0x82>
23002c7a:	00e6f363          	bgeu	a3,a4,23002c80 <__umoddi3+0x82>
23002c7e:	96c2                	add	a3,a3,a6
23002c80:	8e99                	sub	a3,a3,a4
23002c82:	02b6f7b3          	remu	a5,a3,a1
23002c86:	0542                	slli	a0,a0,0x10
23002c88:	8141                	srli	a0,a0,0x10
23002c8a:	02b6d6b3          	divu	a3,a3,a1
23002c8e:	07c2                	slli	a5,a5,0x10
23002c90:	8d5d                	or	a0,a0,a5
23002c92:	02d606b3          	mul	a3,a2,a3
23002c96:	00d57863          	bgeu	a0,a3,23002ca6 <__umoddi3+0xa8>
23002c9a:	9542                	add	a0,a0,a6
23002c9c:	01056563          	bltu	a0,a6,23002ca6 <__umoddi3+0xa8>
23002ca0:	00d57363          	bgeu	a0,a3,23002ca6 <__umoddi3+0xa8>
23002ca4:	9542                	add	a0,a0,a6
23002ca6:	8d15                	sub	a0,a0,a3
23002ca8:	01155533          	srl	a0,a0,a7
23002cac:	4581                	li	a1,0
23002cae:	8082                	ret
23002cb0:	010008b7          	lui	a7,0x1000
23002cb4:	47c1                	li	a5,16
23002cb6:	f71668e3          	bltu	a2,a7,23002c26 <__umoddi3+0x28>
23002cba:	47e1                	li	a5,24
23002cbc:	b7ad                	j	23002c26 <__umoddi3+0x28>
23002cbe:	e601                	bnez	a2,23002cc6 <__umoddi3+0xc8>
23002cc0:	4705                	li	a4,1
23002cc2:	02c75833          	divu	a6,a4,a2
23002cc6:	6741                	lui	a4,0x10
23002cc8:	08e87363          	bgeu	a6,a4,23002d4e <__umoddi3+0x150>
23002ccc:	0ff00713          	li	a4,255
23002cd0:	01077363          	bgeu	a4,a6,23002cd6 <__umoddi3+0xd8>
23002cd4:	47a1                	li	a5,8
23002cd6:	00f85733          	srl	a4,a6,a5
23002cda:	96ba                	add	a3,a3,a4
23002cdc:	0006c603          	lbu	a2,0(a3)
23002ce0:	963e                	add	a2,a2,a5
23002ce2:	02000793          	li	a5,32
23002ce6:	40c788b3          	sub	a7,a5,a2
23002cea:	06c79963          	bne	a5,a2,23002d5c <__umoddi3+0x15e>
23002cee:	410585b3          	sub	a1,a1,a6
23002cf2:	01085693          	srli	a3,a6,0x10
23002cf6:	01081793          	slli	a5,a6,0x10
23002cfa:	83c1                	srli	a5,a5,0x10
23002cfc:	01055613          	srli	a2,a0,0x10
23002d00:	02d5f733          	remu	a4,a1,a3
23002d04:	02d5d5b3          	divu	a1,a1,a3
23002d08:	0742                	slli	a4,a4,0x10
23002d0a:	8f51                	or	a4,a4,a2
23002d0c:	02b785b3          	mul	a1,a5,a1
23002d10:	00b77863          	bgeu	a4,a1,23002d20 <__umoddi3+0x122>
23002d14:	9742                	add	a4,a4,a6
23002d16:	01076563          	bltu	a4,a6,23002d20 <__umoddi3+0x122>
23002d1a:	00b77363          	bgeu	a4,a1,23002d20 <__umoddi3+0x122>
23002d1e:	9742                	add	a4,a4,a6
23002d20:	40b705b3          	sub	a1,a4,a1
23002d24:	02d5f733          	remu	a4,a1,a3
23002d28:	0542                	slli	a0,a0,0x10
23002d2a:	8141                	srli	a0,a0,0x10
23002d2c:	02d5d5b3          	divu	a1,a1,a3
23002d30:	02b785b3          	mul	a1,a5,a1
23002d34:	01071793          	slli	a5,a4,0x10
23002d38:	8d5d                	or	a0,a0,a5
23002d3a:	00b57863          	bgeu	a0,a1,23002d4a <__umoddi3+0x14c>
23002d3e:	9542                	add	a0,a0,a6
23002d40:	01056563          	bltu	a0,a6,23002d4a <__umoddi3+0x14c>
23002d44:	00b57363          	bgeu	a0,a1,23002d4a <__umoddi3+0x14c>
23002d48:	9542                	add	a0,a0,a6
23002d4a:	8d0d                	sub	a0,a0,a1
23002d4c:	bfb1                	j	23002ca8 <__umoddi3+0xaa>
23002d4e:	01000737          	lui	a4,0x1000
23002d52:	47c1                	li	a5,16
23002d54:	f8e861e3          	bltu	a6,a4,23002cd6 <__umoddi3+0xd8>
23002d58:	47e1                	li	a5,24
23002d5a:	bfb5                	j	23002cd6 <__umoddi3+0xd8>
23002d5c:	01181833          	sll	a6,a6,a7
23002d60:	00c5d6b3          	srl	a3,a1,a2
23002d64:	01085793          	srli	a5,a6,0x10
23002d68:	02f6f733          	remu	a4,a3,a5
23002d6c:	011595b3          	sll	a1,a1,a7
23002d70:	00c35633          	srl	a2,t1,a2
23002d74:	8e4d                	or	a2,a2,a1
23002d76:	01081593          	slli	a1,a6,0x10
23002d7a:	81c1                	srli	a1,a1,0x10
23002d7c:	01131533          	sll	a0,t1,a7
23002d80:	01065313          	srli	t1,a2,0x10
23002d84:	02f6d6b3          	divu	a3,a3,a5
23002d88:	0742                	slli	a4,a4,0x10
23002d8a:	00676733          	or	a4,a4,t1
23002d8e:	02d586b3          	mul	a3,a1,a3
23002d92:	00d77863          	bgeu	a4,a3,23002da2 <__umoddi3+0x1a4>
23002d96:	9742                	add	a4,a4,a6
23002d98:	01076563          	bltu	a4,a6,23002da2 <__umoddi3+0x1a4>
23002d9c:	00d77363          	bgeu	a4,a3,23002da2 <__umoddi3+0x1a4>
23002da0:	9742                	add	a4,a4,a6
23002da2:	40d706b3          	sub	a3,a4,a3
23002da6:	02f6f733          	remu	a4,a3,a5
23002daa:	0642                	slli	a2,a2,0x10
23002dac:	8241                	srli	a2,a2,0x10
23002dae:	02f6d6b3          	divu	a3,a3,a5
23002db2:	0742                	slli	a4,a4,0x10
23002db4:	02d586b3          	mul	a3,a1,a3
23002db8:	00c765b3          	or	a1,a4,a2
23002dbc:	00d5f863          	bgeu	a1,a3,23002dcc <__umoddi3+0x1ce>
23002dc0:	95c2                	add	a1,a1,a6
23002dc2:	0105e563          	bltu	a1,a6,23002dcc <__umoddi3+0x1ce>
23002dc6:	00d5f363          	bgeu	a1,a3,23002dcc <__umoddi3+0x1ce>
23002dca:	95c2                	add	a1,a1,a6
23002dcc:	8d95                	sub	a1,a1,a3
23002dce:	b715                	j	23002cf2 <__umoddi3+0xf4>
23002dd0:	ecd5efe3          	bltu	a1,a3,23002cae <__umoddi3+0xb0>
23002dd4:	67c1                	lui	a5,0x10
23002dd6:	04f6f463          	bgeu	a3,a5,23002e1e <__umoddi3+0x220>
23002dda:	0ff00893          	li	a7,255
23002dde:	00d8b7b3          	sltu	a5,a7,a3
23002de2:	078e                	slli	a5,a5,0x3
23002de4:	00f6d8b3          	srl	a7,a3,a5
23002de8:	0000a817          	auipc	a6,0xa
23002dec:	4dc80813          	addi	a6,a6,1244 # 2300d2c4 <__clz_tab>
23002df0:	9846                	add	a6,a6,a7
23002df2:	00084883          	lbu	a7,0(a6)
23002df6:	98be                	add	a7,a7,a5
23002df8:	02000793          	li	a5,32
23002dfc:	41178833          	sub	a6,a5,a7
23002e00:	03179663          	bne	a5,a7,23002e2c <__umoddi3+0x22e>
23002e04:	00b6e463          	bltu	a3,a1,23002e0c <__umoddi3+0x20e>
23002e08:	00c36963          	bltu	t1,a2,23002e1a <__umoddi3+0x21c>
23002e0c:	40c30533          	sub	a0,t1,a2
23002e10:	8d95                	sub	a1,a1,a3
23002e12:	00a33733          	sltu	a4,t1,a0
23002e16:	40e58733          	sub	a4,a1,a4
23002e1a:	85ba                	mv	a1,a4
23002e1c:	bd49                	j	23002cae <__umoddi3+0xb0>
23002e1e:	01000837          	lui	a6,0x1000
23002e22:	47c1                	li	a5,16
23002e24:	fd06e0e3          	bltu	a3,a6,23002de4 <__umoddi3+0x1e6>
23002e28:	47e1                	li	a5,24
23002e2a:	bf6d                	j	23002de4 <__umoddi3+0x1e6>
23002e2c:	011657b3          	srl	a5,a2,a7
23002e30:	010696b3          	sll	a3,a3,a6
23002e34:	00d7ee33          	or	t3,a5,a3
23002e38:	0115d733          	srl	a4,a1,a7
23002e3c:	010e5f13          	srli	t5,t3,0x10
23002e40:	01061eb3          	sll	t4,a2,a6
23002e44:	03e77633          	remu	a2,a4,t5
23002e48:	010595b3          	sll	a1,a1,a6
23002e4c:	011357b3          	srl	a5,t1,a7
23002e50:	8fcd                	or	a5,a5,a1
23002e52:	010e1593          	slli	a1,t3,0x10
23002e56:	81c1                	srli	a1,a1,0x10
23002e58:	01031533          	sll	a0,t1,a6
23002e5c:	0107d693          	srli	a3,a5,0x10
23002e60:	03e75733          	divu	a4,a4,t5
23002e64:	0642                	slli	a2,a2,0x10
23002e66:	8ed1                	or	a3,a3,a2
23002e68:	02e58333          	mul	t1,a1,a4
23002e6c:	863a                	mv	a2,a4
23002e6e:	0066fc63          	bgeu	a3,t1,23002e86 <__umoddi3+0x288>
23002e72:	96f2                	add	a3,a3,t3
23002e74:	fff70613          	addi	a2,a4,-1 # ffffff <StackSize+0xffefff>
23002e78:	01c6e763          	bltu	a3,t3,23002e86 <__umoddi3+0x288>
23002e7c:	0066f563          	bgeu	a3,t1,23002e86 <__umoddi3+0x288>
23002e80:	ffe70613          	addi	a2,a4,-2
23002e84:	96f2                	add	a3,a3,t3
23002e86:	406686b3          	sub	a3,a3,t1
23002e8a:	03e6f333          	remu	t1,a3,t5
23002e8e:	03e6d6b3          	divu	a3,a3,t5
23002e92:	0342                	slli	t1,t1,0x10
23002e94:	02d58733          	mul	a4,a1,a3
23002e98:	01079593          	slli	a1,a5,0x10
23002e9c:	81c1                	srli	a1,a1,0x10
23002e9e:	00b365b3          	or	a1,t1,a1
23002ea2:	87b6                	mv	a5,a3
23002ea4:	00e5fc63          	bgeu	a1,a4,23002ebc <__umoddi3+0x2be>
23002ea8:	95f2                	add	a1,a1,t3
23002eaa:	fff68793          	addi	a5,a3,-1
23002eae:	01c5e763          	bltu	a1,t3,23002ebc <__umoddi3+0x2be>
23002eb2:	00e5f563          	bgeu	a1,a4,23002ebc <__umoddi3+0x2be>
23002eb6:	ffe68793          	addi	a5,a3,-2
23002eba:	95f2                	add	a1,a1,t3
23002ebc:	0642                	slli	a2,a2,0x10
23002ebe:	6f41                	lui	t5,0x10
23002ec0:	8e5d                	or	a2,a2,a5
23002ec2:	ffff0693          	addi	a3,t5,-1 # ffff <StackSize+0xefff>
23002ec6:	00d67333          	and	t1,a2,a3
23002eca:	8d99                	sub	a1,a1,a4
23002ecc:	8241                	srli	a2,a2,0x10
23002ece:	010ed713          	srli	a4,t4,0x10
23002ed2:	00def6b3          	and	a3,t4,a3
23002ed6:	02d307b3          	mul	a5,t1,a3
23002eda:	02d606b3          	mul	a3,a2,a3
23002ede:	02e30333          	mul	t1,t1,a4
23002ee2:	02e60633          	mul	a2,a2,a4
23002ee6:	9336                	add	t1,t1,a3
23002ee8:	0107d713          	srli	a4,a5,0x10
23002eec:	971a                	add	a4,a4,t1
23002eee:	00d77363          	bgeu	a4,a3,23002ef4 <__umoddi3+0x2f6>
23002ef2:	967a                	add	a2,a2,t5
23002ef4:	01075693          	srli	a3,a4,0x10
23002ef8:	96b2                	add	a3,a3,a2
23002efa:	6641                	lui	a2,0x10
23002efc:	167d                	addi	a2,a2,-1
23002efe:	8f71                	and	a4,a4,a2
23002f00:	0742                	slli	a4,a4,0x10
23002f02:	8ff1                	and	a5,a5,a2
23002f04:	97ba                	add	a5,a5,a4
23002f06:	00d5e663          	bltu	a1,a3,23002f12 <__umoddi3+0x314>
23002f0a:	00d59b63          	bne	a1,a3,23002f20 <__umoddi3+0x322>
23002f0e:	00f57963          	bgeu	a0,a5,23002f20 <__umoddi3+0x322>
23002f12:	41d78633          	sub	a2,a5,t4
23002f16:	00c7b7b3          	sltu	a5,a5,a2
23002f1a:	97f2                	add	a5,a5,t3
23002f1c:	8e9d                	sub	a3,a3,a5
23002f1e:	87b2                	mv	a5,a2
23002f20:	40f507b3          	sub	a5,a0,a5
23002f24:	00f53533          	sltu	a0,a0,a5
23002f28:	8d95                	sub	a1,a1,a3
23002f2a:	8d89                	sub	a1,a1,a0
23002f2c:	011598b3          	sll	a7,a1,a7
23002f30:	0107d533          	srl	a0,a5,a6
23002f34:	00a8e533          	or	a0,a7,a0
23002f38:	0105d5b3          	srl	a1,a1,a6
23002f3c:	bb8d                	j	23002cae <__umoddi3+0xb0>

23002f3e <main>:
#include <usb_stdio.h>

#include "io_def.h"

int main(void)
{
23002f3e:	1101                	addi	sp,sp,-32
    bflb_platform_init(0);
23002f40:	4501                	li	a0,0
{
23002f42:	ce06                	sw	ra,28(sp)
23002f44:	ca26                	sw	s1,20(sp)
23002f46:	c452                	sw	s4,8(sp)
23002f48:	c256                	sw	s5,4(sp)
23002f4a:	cc22                	sw	s0,24(sp)
23002f4c:	c84a                	sw	s2,16(sp)
23002f4e:	c64e                	sw	s3,12(sp)
    bflb_platform_init(0);
23002f50:	2409                	jal	23003152 <bflb_platform_init>
    MSG_DBG(
23002f52:	2300c537          	lui	a0,0x2300c
23002f56:	28850513          	addi	a0,a0,648 # 2300c288 <strtol+0xe>
23002f5a:	205d                	jal	23003000 <bflb_platform_printf>
        "Now can use MSG_xxx, LOG_xxx and bflb_platform_printf on uart.\r\n");  // just appear on uart unless use printf

#ifdef M0SENSE_USE_USBSTDIO
    usb_stdio_init();                                        // MUST be called before any call to printf or puts
23002f5c:	16c070ef          	jal	ra,2300a0c8 <usb_stdio_init>
    printf("Now can use printf, puts on usb_cdc_acm.\r\n");  // on usb, ttyACMx on Linux or COMx on Windows.
23002f60:	2300c537          	lui	a0,0x2300c
23002f64:	2cc50513          	addi	a0,a0,716 # 2300c2cc <strtol+0x52>
23002f68:	2bb040ef          	jal	ra,23007a22 <puts>
#endif

    gpio_set_mode(LED_B_PIN, GPIO_OUTPUT_PP_MODE);
23002f6c:	4585                	li	a1,1
23002f6e:	455d                	li	a0,23
23002f70:	57b000ef          	jal	ra,23003cea <gpio_set_mode>
    gpio_set_mode(LED_G_PIN, GPIO_OUTPUT_PP_MODE);
23002f74:	4585                	li	a1,1
23002f76:	4561                	li	a0,24
23002f78:	573000ef          	jal	ra,23003cea <gpio_set_mode>
    gpio_set_mode(LED_R_PIN, GPIO_OUTPUT_PP_MODE);
23002f7c:	4585                	li	a1,1
23002f7e:	4565                	li	a0,25
23002f80:	56b000ef          	jal	ra,23003cea <gpio_set_mode>
    printf("[init] goio set mode complete.\r\n");
23002f84:	2300c537          	lui	a0,0x2300c
23002f88:	2f850513          	addi	a0,a0,760 # 2300c2f8 <strtol+0x7e>
23002f8c:	297040ef          	jal	ra,23007a22 <puts>
        COLOR_MASK = WHITE,
    };

    uint8_t led_state = BLACK;

    printf("[main] start loop\r\n");
23002f90:	2300c537          	lui	a0,0x2300c
23002f94:	31850513          	addi	a0,a0,792 # 2300c318 <strtol+0x9e>
23002f98:	28b040ef          	jal	ra,23007a22 <puts>
    uint8_t led_state = BLACK;
23002f9c:	4481                	li	s1,0
23002f9e:	2300cab7          	lui	s5,0x2300c
23002fa2:	2300ca37          	lui	s4,0x2300c
    while (1) {
        led_state = (led_state + 1) & COLOR_MASK;
23002fa6:	00148413          	addi	s0,s1,1
23002faa:	00747493          	andi	s1,s0,7
        printf("increase 1 so led_state is %x\r\n", led_state);
23002fae:	85a6                	mv	a1,s1
23002fb0:	32ca8513          	addi	a0,s5,812 # 2300c32c <strtol+0xb2>
23002fb4:	155040ef          	jal	ra,23007908 <iprintf>
        printf("rgb(%u,%u,%u)\r\n", !!(led_state & RED), !!(led_state & GREEN), !!(led_state & BLUE));
23002fb8:	00447913          	andi	s2,s0,4
23002fbc:	00247993          	andi	s3,s0,2
23002fc0:	8805                	andi	s0,s0,1
23002fc2:	86a2                	mv	a3,s0
23002fc4:	01303633          	snez	a2,s3
23002fc8:	012035b3          	snez	a1,s2
23002fcc:	34ca0513          	addi	a0,s4,844 # 2300c34c <strtol+0xd2>
23002fd0:	139040ef          	jal	ra,23007908 <iprintf>

        gpio_write(LED_B_PIN, !(led_state & BLUE));
23002fd4:	00144593          	xori	a1,s0,1
23002fd8:	455d                	li	a0,23
23002fda:	66d000ef          	jal	ra,23003e46 <gpio_write>
        gpio_write(LED_G_PIN, !(led_state & GREEN));
23002fde:	0019b593          	seqz	a1,s3
23002fe2:	4561                	li	a0,24
23002fe4:	663000ef          	jal	ra,23003e46 <gpio_write>
        gpio_write(LED_R_PIN, !(led_state & RED));
23002fe8:	00193593          	seqz	a1,s2
23002fec:	4565                	li	a0,25
23002fee:	659000ef          	jal	ra,23003e46 <gpio_write>
        mtimer_delay_ms(200);
23002ff2:	0c800513          	li	a0,200
23002ff6:	67d000ef          	jal	ra,23003e72 <mtimer_delay_ms>
    while (1) {
23002ffa:	b775                	j	23002fa6 <main+0x68>

23002ffc <board_get_debug_uart_index>:
}

__WEAK__ enum uart_index_type board_get_debug_uart_index(void)
{
    return 0;
}
23002ffc:	4501                	li	a0,0
23002ffe:	8082                	ret

23003000 <bflb_platform_printf>:
{
    struct device *uart;
    char print_buf[128];
    va_list ap;

    if (!uart_dbg_disable) {
23003000:	10e1c303          	lbu	t1,270(gp) # 4201690e <uart_dbg_disable>
{
23003004:	7131                	addi	sp,sp,-192
23003006:	cf06                	sw	ra,156(sp)
23003008:	cd22                	sw	s0,152(sp)
2300300a:	d32e                	sw	a1,164(sp)
2300300c:	d532                	sw	a2,168(sp)
2300300e:	d736                	sw	a3,172(sp)
23003010:	d93a                	sw	a4,176(sp)
23003012:	db3e                	sw	a5,180(sp)
23003014:	dd42                	sw	a6,184(sp)
23003016:	df46                	sw	a7,188(sp)
    if (!uart_dbg_disable) {
23003018:	00030663          	beqz	t1,23003024 <bflb_platform_printf+0x24>
        }
#endif
        uart = device_find("debug_log");
        device_write(uart, 0, (uint8_t *)print_buf, strlen(print_buf));
    }
}
2300301c:	40fa                	lw	ra,156(sp)
2300301e:	446a                	lw	s0,152(sp)
23003020:	6129                	addi	sp,sp,192
23003022:	8082                	ret
        va_start(ap, fmt);
23003024:	1154                	addi	a3,sp,164
        vsnprintf(print_buf, sizeof(print_buf) - 1, fmt, ap);
23003026:	862a                	mv	a2,a0
23003028:	07f00593          	li	a1,127
2300302c:	0808                	addi	a0,sp,16
        va_start(ap, fmt);
2300302e:	c636                	sw	a3,12(sp)
        vsnprintf(print_buf, sizeof(print_buf) - 1, fmt, ap);
23003030:	27d040ef          	jal	ra,23007aac <vsniprintf>
        uart = device_find("debug_log");
23003034:	2300c537          	lui	a0,0x2300c
23003038:	35c50513          	addi	a0,a0,860 # 2300c35c <strtol+0xe2>
2300303c:	1e4070ef          	jal	ra,2300a220 <device_find>
23003040:	842a                	mv	s0,a0
        device_write(uart, 0, (uint8_t *)print_buf, strlen(print_buf));
23003042:	0808                	addi	a0,sp,16
23003044:	1f3040ef          	jal	ra,23007a36 <strlen>
23003048:	86aa                	mv	a3,a0
2300304a:	0810                	addi	a2,sp,16
2300304c:	8522                	mv	a0,s0
2300304e:	4581                	li	a1,0
23003050:	278070ef          	jal	ra,2300a2c8 <device_write>
}
23003054:	40fa                	lw	ra,156(sp)
23003056:	446a                	lw	s0,152(sp)
23003058:	6129                	addi	sp,sp,192
2300305a:	8082                	ret

2300305c <bl_show_flashinfo>:
{
2300305c:	7159                	addi	sp,sp,-112
2300305e:	d686                	sw	ra,108(sp)
23003060:	d4a2                	sw	s0,104(sp)
    uint8_t *pFlashCfg = NULL;
23003062:	c202                	sw	zero,4(sp)
    uint32_t flashCfgLen = 0;
23003064:	c402                	sw	zero,8(sp)
    flashJedecId = flash_get_jedecid();
23003066:	453000ef          	jal	ra,23003cb8 <flash_get_jedecid>
2300306a:	842a                	mv	s0,a0
    flash_get_cfg(&pFlashCfg, &flashCfgLen);
2300306c:	002c                	addi	a1,sp,8
2300306e:	0048                	addi	a0,sp,4
23003070:	46b000ef          	jal	ra,23003cda <flash_get_cfg>
    arch_memcpy((void *)&flashCfg, pFlashCfg, flashCfgLen);
23003074:	4622                	lw	a2,8(sp)
23003076:	4592                	lw	a1,4(sp)
23003078:	0068                	addi	a0,sp,12
2300307a:	1f011097          	auipc	ra,0x1f011
2300307e:	3f8080e7          	jalr	1016(ra) # 42014472 <arch_memcpy>
    MSG("show flash cfg:\r\n");
23003082:	2300c537          	lui	a0,0x2300c
23003086:	36850513          	addi	a0,a0,872 # 2300c368 <strtol+0xee>
2300308a:	3f9d                	jal	23003000 <bflb_platform_printf>
    MSG("jedec id   0x%06X\r\n", flashJedecId);
2300308c:	2300c537          	lui	a0,0x2300c
23003090:	85a2                	mv	a1,s0
23003092:	37c50513          	addi	a0,a0,892 # 2300c37c <strtol+0x102>
23003096:	37ad                	jal	23003000 <bflb_platform_printf>
    MSG("mid            0x%02X\r\n", flashCfg.mid);
23003098:	01914583          	lbu	a1,25(sp)
2300309c:	2300c537          	lui	a0,0x2300c
230030a0:	39050513          	addi	a0,a0,912 # 2300c390 <strtol+0x116>
230030a4:	3fb1                	jal	23003000 <bflb_platform_printf>
    MSG("iomode         0x%02X\r\n", flashCfg.ioMode);
230030a6:	00c14583          	lbu	a1,12(sp)
230030aa:	2300c537          	lui	a0,0x2300c
230030ae:	3a850513          	addi	a0,a0,936 # 2300c3a8 <strtol+0x12e>
230030b2:	37b9                	jal	23003000 <bflb_platform_printf>
    MSG("clk delay      0x%02X\r\n", flashCfg.clkDelay);
230030b4:	00e14583          	lbu	a1,14(sp)
230030b8:	2300c537          	lui	a0,0x2300c
230030bc:	3c050513          	addi	a0,a0,960 # 2300c3c0 <strtol+0x146>
230030c0:	3781                	jal	23003000 <bflb_platform_printf>
    MSG("clk invert     0x%02X\r\n", flashCfg.clkInvert);
230030c2:	00f14583          	lbu	a1,15(sp)
230030c6:	2300c537          	lui	a0,0x2300c
230030ca:	3d850513          	addi	a0,a0,984 # 2300c3d8 <strtol+0x15e>
230030ce:	3f0d                	jal	23003000 <bflb_platform_printf>
    MSG("read reg cmd0  0x%02X\r\n", flashCfg.readRegCmd[0]);
230030d0:	04014583          	lbu	a1,64(sp)
230030d4:	2300c537          	lui	a0,0x2300c
230030d8:	3f050513          	addi	a0,a0,1008 # 2300c3f0 <strtol+0x176>
230030dc:	3715                	jal	23003000 <bflb_platform_printf>
    MSG("read reg cmd1  0x%02X\r\n", flashCfg.readRegCmd[1]);
230030de:	04114583          	lbu	a1,65(sp)
230030e2:	2300c537          	lui	a0,0x2300c
230030e6:	40850513          	addi	a0,a0,1032 # 2300c408 <strtol+0x18e>
230030ea:	3f19                	jal	23003000 <bflb_platform_printf>
    MSG("write reg cmd0 0x%02X\r\n", flashCfg.writeRegCmd[0]);
230030ec:	04414583          	lbu	a1,68(sp)
230030f0:	2300c537          	lui	a0,0x2300c
230030f4:	42050513          	addi	a0,a0,1056 # 2300c420 <strtol+0x1a6>
230030f8:	3721                	jal	23003000 <bflb_platform_printf>
    MSG("write reg cmd1 0x%02X\r\n", flashCfg.writeRegCmd[1]);
230030fa:	04514583          	lbu	a1,69(sp)
230030fe:	2300c537          	lui	a0,0x2300c
23003102:	43850513          	addi	a0,a0,1080 # 2300c438 <strtol+0x1be>
23003106:	3ded                	jal	23003000 <bflb_platform_printf>
    MSG("qe write len   0x%02X\r\n", flashCfg.qeWriteRegLen);
23003108:	03c14583          	lbu	a1,60(sp)
2300310c:	2300c537          	lui	a0,0x2300c
23003110:	45050513          	addi	a0,a0,1104 # 2300c450 <strtol+0x1d6>
23003114:	35f5                	jal	23003000 <bflb_platform_printf>
    MSG("cread support  0x%02X\r\n", flashCfg.cReadSupport);
23003116:	00d14583          	lbu	a1,13(sp)
2300311a:	2300c537          	lui	a0,0x2300c
2300311e:	46850513          	addi	a0,a0,1128 # 2300c468 <strtol+0x1ee>
23003122:	3df9                	jal	23003000 <bflb_platform_printf>
    MSG("cread code     0x%02X\r\n", flashCfg.cReadMode);
23003124:	04a14583          	lbu	a1,74(sp)
23003128:	2300c537          	lui	a0,0x2300c
2300312c:	48050513          	addi	a0,a0,1152 # 2300c480 <strtol+0x206>
23003130:	3dc1                	jal	23003000 <bflb_platform_printf>
    MSG("burst wrap cmd 0x%02X\r\n", flashCfg.burstWrapCmd);
23003132:	04c14583          	lbu	a1,76(sp)
23003136:	2300c537          	lui	a0,0x2300c
2300313a:	49850513          	addi	a0,a0,1176 # 2300c498 <strtol+0x21e>
2300313e:	35c9                	jal	23003000 <bflb_platform_printf>
    MSG("-------------------\r\n");
23003140:	2300c537          	lui	a0,0x2300c
23003144:	4b050513          	addi	a0,a0,1200 # 2300c4b0 <strtol+0x236>
23003148:	3d65                	jal	23003000 <bflb_platform_printf>
}
2300314a:	50b6                	lw	ra,108(sp)
2300314c:	5426                	lw	s0,104(sp)
2300314e:	6165                	addi	sp,sp,112
23003150:	8082                	ret

23003152 <bflb_platform_init>:
{
23003152:	1141                	addi	sp,sp,-16
23003154:	c606                	sw	ra,12(sp)
23003156:	c226                	sw	s1,4(sp)
23003158:	c422                	sw	s0,8(sp)
2300315a:	c04a                	sw	s2,0(sp)
    cpu_global_irq_disable();
2300315c:	1f011097          	auipc	ra,0x1f011
23003160:	eb8080e7          	jalr	-328(ra) # 42014014 <cpu_global_irq_disable>
    ret = flash_init();
23003164:	1f011097          	auipc	ra,0x1f011
23003168:	ec0080e7          	jalr	-320(ra) # 42014024 <flash_init>
2300316c:	84aa                	mv	s1,a0
    board_init();
2300316e:	2435                	jal	2300339a <board_init>
    if (!uart_dbg_disable) {
23003170:	10e1c783          	lbu	a5,270(gp) # 4201690e <uart_dbg_disable>
23003174:	cba1                	beqz	a5,230031c4 <bflb_platform_init+0x72>
    if (!initialized) {
23003176:	10d18413          	addi	s0,gp,269 # 4201690d <initialized.0>
2300317a:	00044783          	lbu	a5,0(s0) # 400000 <StackSize+0x3ff000>
2300317e:	eb95                	bnez	a5,230031b2 <bflb_platform_init+0x60>
        system_mmheap[0].mem_size = ((size_t)&__HeapLimit - (size_t)&__HeapBase);
23003180:	420305b7          	lui	a1,0x42030
        system_mmheap[0].addr = (uint8_t *)&__HeapBase;
23003184:	15418793          	addi	a5,gp,340 # 42016954 <__HeapBase>
        system_mmheap[0].mem_size = ((size_t)&__HeapLimit - (size_t)&__HeapBase);
23003188:	00058593          	mv	a1,a1
        system_mmheap[0].addr = (uint8_t *)&__HeapBase;
2300318c:	a9c18913          	addi	s2,gp,-1380 # 4201629c <system_mmheap>
        system_mmheap[0].mem_size = ((size_t)&__HeapLimit - (size_t)&__HeapBase);
23003190:	8d9d                	sub	a1,a1,a5
        system_mmheap[0].addr = (uint8_t *)&__HeapBase;
23003192:	00f92023          	sw	a5,0(s2) # 800000 <StackSize+0x7ff000>
        system_mmheap[0].mem_size = ((size_t)&__HeapLimit - (size_t)&__HeapBase);
23003196:	00b92223          	sw	a1,4(s2)
        if (system_mmheap[0].mem_size > 0) {
2300319a:	e1a5                	bnez	a1,230031fa <bflb_platform_init+0xa8>
        MSG("dynamic memory init success,heap size = %d Kbyte \r\n", system_mmheap[0].mem_size / 1024);
2300319c:	2300c537          	lui	a0,0x2300c
230031a0:	81a9                	srli	a1,a1,0xa
230031a2:	4c850513          	addi	a0,a0,1224 # 2300c4c8 <strtol+0x24e>
230031a6:	3da9                	jal	23003000 <bflb_platform_printf>
        initialized = 1;
230031a8:	4785                	li	a5,1
230031aa:	00f40023          	sb	a5,0(s0)
        if (ret != SUCCESS) {
230031ae:	e8a5                	bnez	s1,2300321e <bflb_platform_init+0xcc>
        bl_show_flashinfo();
230031b0:	3575                	jal	2300305c <bl_show_flashinfo>
}
230031b2:	4422                	lw	s0,8(sp)
230031b4:	40b2                	lw	ra,12(sp)
230031b6:	4492                	lw	s1,4(sp)
230031b8:	4902                	lw	s2,0(sp)
230031ba:	0141                	addi	sp,sp,16
    cpu_global_irq_enable();
230031bc:	1f011317          	auipc	t1,0x1f011
230031c0:	e4430067          	jr	-444(t1) # 42014000 <cpu_global_irq_enable>
        uart_register(board_get_debug_uart_index(), "debug_log");
230031c4:	2300c437          	lui	s0,0x2300c
230031c8:	3d15                	jal	23002ffc <board_get_debug_uart_index>
230031ca:	35c40593          	addi	a1,s0,860 # 2300c35c <strtol+0xe2>
230031ce:	20e010ef          	jal	ra,230043dc <uart_register>
        struct device *uart = device_find("debug_log");
230031d2:	35c40513          	addi	a0,s0,860
230031d6:	04a070ef          	jal	ra,2300a220 <device_find>
230031da:	842a                	mv	s0,a0
        if (uart) {
230031dc:	cd09                	beqz	a0,230031f6 <bflb_platform_init+0xa4>
            device_open(uart, DEVICE_OFLAG_STREAM_TX | DEVICE_OFLAG_INT_RX);
230031de:	45a5                	li	a1,9
230031e0:	092070ef          	jal	ra,2300a272 <device_open>
            device_set_callback(uart, NULL);
230031e4:	4581                	li	a1,0
230031e6:	8522                	mv	a0,s0
230031e8:	0f8070ef          	jal	ra,2300a2e0 <device_set_callback>
            device_control(uart, DEVICE_CTRL_CLR_INT, (void *)(UART_RX_FIFO_IT));
230031ec:	4621                	li	a2,8
230031ee:	4589                	li	a1,2
230031f0:	8522                	mv	a0,s0
230031f2:	0c2070ef          	jal	ra,2300a2b4 <device_control>
        bl_show_info();
230031f6:	2225                	jal	2300331e <bl_show_info>
230031f8:	bfbd                	j	23003176 <bflb_platform_init+0x24>
            mmheap_init(&mmheap_root, system_mmheap);
230031fa:	a9c18593          	addi	a1,gp,-1380 # 4201629c <system_mmheap>
230031fe:	a9018513          	addi	a0,gp,-1392 # 42016290 <mmheap_root>
23003202:	5e0070ef          	jal	ra,2300a7e2 <mmheap_init>
        MSG("dynamic memory init success,heap size = %d Kbyte \r\n", system_mmheap[0].mem_size / 1024);
23003206:	00492583          	lw	a1,4(s2)
2300320a:	2300c537          	lui	a0,0x2300c
2300320e:	4c850513          	addi	a0,a0,1224 # 2300c4c8 <strtol+0x24e>
23003212:	81a9                	srli	a1,a1,0xa
23003214:	33f5                	jal	23003000 <bflb_platform_printf>
        initialized = 1;
23003216:	4785                	li	a5,1
23003218:	00f40023          	sb	a5,0(s0)
        if (ret != SUCCESS) {
2300321c:	d8d1                	beqz	s1,230031b0 <bflb_platform_init+0x5e>
            MSG("flash init fail!!!\r\n");
2300321e:	2300c537          	lui	a0,0x2300c
23003222:	4fc50513          	addi	a0,a0,1276 # 2300c4fc <strtol+0x282>
23003226:	3be9                	jal	23003000 <bflb_platform_printf>
23003228:	b761                	j	230031b0 <bflb_platform_init+0x5e>

2300322a <__errno>:

    //         return &FreeRTOS_errno;
    //     }
    // #endif
    return (int *)&_sys_errno;
}
2300322a:	11018513          	addi	a0,gp,272 # 42016910 <_sys_errno>
2300322e:	8082                	ret

23003230 <_getpid_r>:
#endif

int _getpid_r(struct _reent *ptr)
{
    return 0;
}
23003230:	4501                	li	a0,0
23003232:	8082                	ret

23003234 <_fstat_r>:
}

int _fstat_r(struct _reent *ptr, int fd, struct stat *pstat)
{
    /* return "not supported" */
    ptr->_errno = -ENOSYS;
23003234:	fa800793          	li	a5,-88
23003238:	c11c                	sw	a5,0(a0)
    return -1;
}
2300323a:	557d                	li	a0,-1
2300323c:	8082                	ret

2300323e <_isatty_r>:
2300323e:	fa800793          	li	a5,-88
23003242:	c11c                	sw	a5,0(a0)
23003244:	557d                	li	a0,-1
23003246:	8082                	ret

23003248 <_kill_r>:
}

int _kill_r(struct _reent *ptr, int pid, int sig)
{
    /* return "not supported" */
    ptr->_errno = -ENOSYS;
23003248:	fa800793          	li	a5,-88
2300324c:	c11c                	sw	a5,0(a0)
    return -1;
}
2300324e:	557d                	li	a0,-1
23003250:	8082                	ret

23003252 <_lseek_r>:
23003252:	fa800793          	li	a5,-88
23003256:	c11c                	sw	a5,0(a0)
23003258:	557d                	li	a0,-1
2300325a:	8082                	ret

2300325c <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
#ifndef CONF_VFS_ENABLE
    /* return "not supported" */
    ptr->_errno = -ENOSYS;
2300325c:	fa800793          	li	a5,-88
23003260:	c11c                	sw	a5,0(a0)
    return -1;
#else
    return aos_close(fd);
#endif
}
23003262:	557d                	li	a0,-1
23003264:	8082                	ret

23003266 <_read_r>:

_ssize_t _read_r(struct _reent *ptr, int fd, void *buf, size_t nbytes)
{
#ifndef CONF_VFS_ENABLE
    /* return "not supported" */
    ptr->_errno = -ENOSYS;
23003266:	fa800793          	li	a5,-88
2300326a:	c11c                	sw	a5,0(a0)
    _ssize_t rc;

    rc = aos_read(fd, buf, nbytes);
    return rc;
#endif
}
2300326c:	557d                	li	a0,-1
2300326e:	8082                	ret

23003270 <_write_r>:
        device_write(uart, 0, (uint8_t *)buf, nbytes);
    }
    return 0;
#else
#define CDC_IN_EP 0x82
    struct device *usb_fs = device_find("usb");
23003270:	2300c537          	lui	a0,0x2300c
{
23003274:	1141                	addi	sp,sp,-16
    struct device *usb_fs = device_find("usb");
23003276:	51450513          	addi	a0,a0,1300 # 2300c514 <strtol+0x29a>
{
2300327a:	c606                	sw	ra,12(sp)
2300327c:	c422                	sw	s0,8(sp)
2300327e:	c226                	sw	s1,4(sp)
23003280:	8432                	mv	s0,a2
23003282:	84b6                	mv	s1,a3
    struct device *usb_fs = device_find("usb");
23003284:	79d060ef          	jal	ra,2300a220 <device_find>
    usb_dc_ep_write(usb_fs, CDC_IN_EP, (uint8_t *)buf, nbytes, NULL);
23003288:	86a6                	mv	a3,s1
2300328a:	8622                	mv	a2,s0
2300328c:	4701                	li	a4,0
2300328e:	08200593          	li	a1,130
23003292:	399010ef          	jal	ra,23004e2a <usb_dc_ep_write>
    _ssize_t rc;

    rc = aos_write(fd, buf, nbytes);
    return rc;
#endif
}
23003296:	40b2                	lw	ra,12(sp)
23003298:	4422                	lw	s0,8(sp)
2300329a:	4492                	lw	s1,4(sp)
2300329c:	4501                	li	a0,0
2300329e:	0141                	addi	sp,sp,16
230032a0:	8082                	ret

230032a2 <_malloc_r>:

void *_malloc_r(struct _reent *ptr, size_t size)
{
230032a2:	1141                	addi	sp,sp,-16
230032a4:	c422                	sw	s0,8(sp)
230032a6:	842a                	mv	s0,a0
    void *result;

    result = (void *)mmheap_alloc(&mmheap_root, size);
230032a8:	a9018513          	addi	a0,gp,-1392 # 42016290 <mmheap_root>
{
230032ac:	c606                	sw	ra,12(sp)
    result = (void *)mmheap_alloc(&mmheap_root, size);
230032ae:	236070ef          	jal	ra,2300a4e4 <mmheap_alloc>
    if (result == NULL) {
230032b2:	c509                	beqz	a0,230032bc <_malloc_r+0x1a>
        ptr->_errno = -ENOMEM;
    }

    return result;
}
230032b4:	40b2                	lw	ra,12(sp)
230032b6:	4422                	lw	s0,8(sp)
230032b8:	0141                	addi	sp,sp,16
230032ba:	8082                	ret
        ptr->_errno = -ENOMEM;
230032bc:	57d1                	li	a5,-12
}
230032be:	40b2                	lw	ra,12(sp)
        ptr->_errno = -ENOMEM;
230032c0:	c01c                	sw	a5,0(s0)
}
230032c2:	4422                	lw	s0,8(sp)
230032c4:	0141                	addi	sp,sp,16
230032c6:	8082                	ret

230032c8 <_realloc_r>:

void *_realloc_r(struct _reent *ptr, void *old, size_t newlen)
{
230032c8:	1141                	addi	sp,sp,-16
230032ca:	c422                	sw	s0,8(sp)
230032cc:	842a                	mv	s0,a0
    void *result;

    result = (void *)mmheap_realloc(&mmheap_root, old, newlen);
230032ce:	a9018513          	addi	a0,gp,-1392 # 42016290 <mmheap_root>
{
230032d2:	c606                	sw	ra,12(sp)
    result = (void *)mmheap_realloc(&mmheap_root, old, newlen);
230032d4:	318070ef          	jal	ra,2300a5ec <mmheap_realloc>
    if (result == NULL) {
230032d8:	c509                	beqz	a0,230032e2 <_realloc_r+0x1a>
        ptr->_errno = -ENOMEM;
    }
    return result;
}
230032da:	40b2                	lw	ra,12(sp)
230032dc:	4422                	lw	s0,8(sp)
230032de:	0141                	addi	sp,sp,16
230032e0:	8082                	ret
        ptr->_errno = -ENOMEM;
230032e2:	57d1                	li	a5,-12
}
230032e4:	40b2                	lw	ra,12(sp)
        ptr->_errno = -ENOMEM;
230032e6:	c01c                	sw	a5,0(s0)
}
230032e8:	4422                	lw	s0,8(sp)
230032ea:	0141                	addi	sp,sp,16
230032ec:	8082                	ret

230032ee <_calloc_r>:

void *_calloc_r(struct _reent *ptr, size_t size, size_t len)
{
230032ee:	1141                	addi	sp,sp,-16
230032f0:	c422                	sw	s0,8(sp)
230032f2:	842a                	mv	s0,a0
    void *result;

    result = (void *)mmheap_calloc(&mmheap_root, size, len);
230032f4:	a9018513          	addi	a0,gp,-1392 # 42016290 <mmheap_root>
{
230032f8:	c606                	sw	ra,12(sp)
    result = (void *)mmheap_calloc(&mmheap_root, size, len);
230032fa:	1f2070ef          	jal	ra,2300a4ec <mmheap_calloc>
    if (result == NULL) {
230032fe:	c509                	beqz	a0,23003308 <_calloc_r+0x1a>
        ptr->_errno = -ENOMEM;
    }

    return result;
}
23003300:	40b2                	lw	ra,12(sp)
23003302:	4422                	lw	s0,8(sp)
23003304:	0141                	addi	sp,sp,16
23003306:	8082                	ret
        ptr->_errno = -ENOMEM;
23003308:	57d1                	li	a5,-12
}
2300330a:	40b2                	lw	ra,12(sp)
        ptr->_errno = -ENOMEM;
2300330c:	c01c                	sw	a5,0(s0)
}
2300330e:	4422                	lw	s0,8(sp)
23003310:	0141                	addi	sp,sp,16
23003312:	8082                	ret

23003314 <_free_r>:

void _free_r(struct _reent *ptr, void *addr)
{
    mmheap_free(&mmheap_root, addr);
23003314:	a9018513          	addi	a0,gp,-1392 # 42016290 <mmheap_root>
23003318:	2000706f          	j	2300a518 <mmheap_free>

2300331c <_exit>:

/* for exit() and abort() */
void __attribute__((noreturn))
_exit(int status)
{
    while (1) {
2300331c:	a001                	j	2300331c <_exit>

2300331e <bl_show_info>:
    system_clock_init();
    peripheral_clock_init();
}

void bl_show_info(void)
{
2300331e:	1141                	addi	sp,sp,-16
23003320:	c422                	sw	s0,8(sp)
    MSG("\r\n");
23003322:	2300d437          	lui	s0,0x2300d
23003326:	8b040513          	addi	a0,s0,-1872 # 2300c8b0 <af_pin_table+0x1e0>
{
2300332a:	c606                	sw	ra,12(sp)
    MSG("\r\n");
2300332c:	39d1                	jal	23003000 <bflb_platform_printf>
    MSG("  ____               __  __      _       _       _     \r\n");
2300332e:	2300c537          	lui	a0,0x2300c
23003332:	51850513          	addi	a0,a0,1304 # 2300c518 <strtol+0x29e>
23003336:	31e9                	jal	23003000 <bflb_platform_printf>
    MSG(" |  _ \\             / _|/ _|    | |     | |     | |    \r\n");
23003338:	2300c537          	lui	a0,0x2300c
2300333c:	55450513          	addi	a0,a0,1364 # 2300c554 <strtol+0x2da>
23003340:	31c1                	jal	23003000 <bflb_platform_printf>
    MSG(" | |_) | ___  _   _| |_| |_ __ _| | ___ | | __ _| |__  \r\n");
23003342:	2300c537          	lui	a0,0x2300c
23003346:	59050513          	addi	a0,a0,1424 # 2300c590 <strtol+0x316>
2300334a:	395d                	jal	23003000 <bflb_platform_printf>
    MSG(" |  _ < / _ \\| | | |  _|  _/ _` | |/ _ \\| |/ _` | '_ \\ \r\n");
2300334c:	2300c537          	lui	a0,0x2300c
23003350:	5cc50513          	addi	a0,a0,1484 # 2300c5cc <strtol+0x352>
23003354:	3175                	jal	23003000 <bflb_platform_printf>
    MSG(" | |_) | (_) | |_| | | | || (_| | | (_) | | (_| | |_) |\r\n");
23003356:	2300c537          	lui	a0,0x2300c
2300335a:	60850513          	addi	a0,a0,1544 # 2300c608 <strtol+0x38e>
2300335e:	314d                	jal	23003000 <bflb_platform_printf>
    MSG(" |____/ \\___/ \\__,_|_| |_| \\__,_|_|\\___/|_|\\__,_|_.__/ \r\n");
23003360:	2300c537          	lui	a0,0x2300c
23003364:	64450513          	addi	a0,a0,1604 # 2300c644 <strtol+0x3ca>
23003368:	3961                	jal	23003000 <bflb_platform_printf>
    MSG("\r\n");
2300336a:	8b040513          	addi	a0,s0,-1872
2300336e:	3949                	jal	23003000 <bflb_platform_printf>
    MSG("Build:%s,%s\r\n", __TIME__, __DATE__);
23003370:	2300c537          	lui	a0,0x2300c
23003374:	2300c637          	lui	a2,0x2300c
23003378:	2300c5b7          	lui	a1,0x2300c
2300337c:	69850513          	addi	a0,a0,1688 # 2300c698 <strtol+0x41e>
23003380:	68060613          	addi	a2,a2,1664 # 2300c680 <strtol+0x406>
23003384:	68c58593          	addi	a1,a1,1676 # 2300c68c <strtol+0x412>
23003388:	39a5                	jal	23003000 <bflb_platform_printf>
    MSG("pwm clock:%dhz\r\n", peripheral_clock_get(PERIPHERAL_CLOCK_PWM));
    MSG("cam clock:%dM\r\n", peripheral_clock_get(PERIPHERAL_CLOCK_CAM) / 1000000);
    MSG("timer0 clock:%dM\r\n", peripheral_clock_get(PERIPHERAL_CLOCK_TIMER0) / 1000000);
    MSG("timer1 clock:%dM\r\n", peripheral_clock_get(PERIPHERAL_CLOCK_TIMER1) / 1000000);
#endif
}
2300338a:	4422                	lw	s0,8(sp)
2300338c:	40b2                	lw	ra,12(sp)
    MSG("Copyright (c) 2021 Bouffalolab team\r\n");
2300338e:	2300c537          	lui	a0,0x2300c
23003392:	6a850513          	addi	a0,a0,1704 # 2300c6a8 <strtol+0x42e>
}
23003396:	0141                	addi	sp,sp,16
    MSG("Copyright (c) 2021 Bouffalolab team\r\n");
23003398:	b1a5                	j	23003000 <bflb_platform_printf>

2300339a <board_init>:

void board_init(void)
{
2300339a:	715d                	addi	sp,sp,-80
2300339c:	c686                	sw	ra,76(sp)
2300339e:	c4a2                	sw	s0,72(sp)
230033a0:	c2a6                	sw	s1,68(sp)
230033a2:	c0ca                	sw	s2,64(sp)
230033a4:	de4e                	sw	s3,60(sp)
230033a6:	dc52                	sw	s4,56(sp)
230033a8:	da56                	sw	s5,52(sp)
230033aa:	d85a                	sw	s6,48(sp)
230033ac:	d65e                	sw	s7,44(sp)
230033ae:	d462                	sw	s8,40(sp)
230033b0:	ce6e                	sw	s11,28(sp)
230033b2:	d266                	sw	s9,36(sp)
230033b4:	d06a                	sw	s10,32(sp)
230033b6:	2300c4b7          	lui	s1,0x2300c
    system_clock_init();
230033ba:	2cad                	jal	23003634 <system_clock_init>
    peripheral_clock_init();
230033bc:	26a9                	jal	23003706 <peripheral_clock_init>
    gpio_cfg.smtCtrl = 1;
230033be:	6d048493          	addi	s1,s1,1744 # 2300c6d0 <af_pin_table>
    gpio_cfg.drive = 2;
230033c2:	10200793          	li	a5,258
230033c6:	00f11623          	sh	a5,12(sp)
    for (int i = 0; i < sizeof(af_pin_table) / sizeof(af_pin_table[0]); i++) {
230033ca:	00448413          	addi	s0,s1,4
    gpio_cfg.drive = 2;
230033ce:	0ff00793          	li	a5,255
230033d2:	03c48493          	addi	s1,s1,60
230033d6:	4501                	li	a0,0
    uint8_t hbn_gpio_mask = 0x1f;
230033d8:	4a7d                	li	s4,31
    uint8_t hbn_aon_ie = 0;
230033da:	4981                	li	s3,0
        gpio_cfg.gpioMode = GPIO_MODE_AF;
230033dc:	4d89                	li	s11,2
        if ((af_pin_table[i].pin > GPIO_PIN_8) && (af_pin_table[i].pin < GPIO_PIN_13)) {
230033de:	490d                	li	s2,3
        } else if ((af_pin_table[i].func & 0xF0) == 0xF0) {
230033e0:	0f000a93          	li	s5,240
        } else if (af_pin_table[i].func == GPIO_FUN_PWM) {
230033e4:	4ba1                	li	s7,8
        } else if (af_pin_table[i].func == GPIO_FUN_QDEC) {
230033e6:	4b51                	li	s6,20
        } else if (af_pin_table[i].func == GPIO_FUN_QDEC_LED) {
230033e8:	0d300c13          	li	s8,211
        gpio_cfg.gpioFun = af_pin_table[i].func;
230033ec:	0ff7f593          	zext.b	a1,a5
        if ((af_pin_table[i].pin > GPIO_PIN_8) && (af_pin_table[i].pin < GPIO_PIN_13)) {
230033f0:	ff750713          	addi	a4,a0,-9
        gpio_cfg.gpioMode = GPIO_MODE_AF;
230033f4:	01b11523          	sh	s11,10(sp)
        gpio_cfg.gpioPin = af_pin_table[i].pin;
230033f8:	00a10423          	sb	a0,8(sp)
        gpio_cfg.gpioFun = af_pin_table[i].func;
230033fc:	00b104a3          	sb	a1,9(sp)
        if ((af_pin_table[i].pin > GPIO_PIN_8) && (af_pin_table[i].pin < GPIO_PIN_13)) {
23003400:	0ff77693          	zext.b	a3,a4
23003404:	02d96263          	bltu	s2,a3,23003428 <board_init+0x8e>
            if ((af_pin_table[i].func != 10) && ((af_pin_table[i].func < GPIO_FUN_GPIO_OUTPUT_UP) || (af_pin_table[i].func > GPIO_FUN_GPIO_OUTPUT_NONE)))
23003408:	4629                	li	a2,10
2300340a:	06c78163          	beq	a5,a2,2300346c <board_init+0xd2>
2300340e:	f2078613          	addi	a2,a5,-224 # ff20 <StackSize+0xef20>
23003412:	0642                	slli	a2,a2,0x10
23003414:	8241                	srli	a2,a2,0x10
23003416:	00cdf963          	bgeu	s11,a2,23003428 <board_init+0x8e>
                hbn_aon_ie |= (1 << (af_pin_table[i].pin - 9));
2300341a:	4605                	li	a2,1
2300341c:	00e61633          	sll	a2,a2,a4
23003420:	013669b3          	or	s3,a2,s3
23003424:	0ff9f993          	zext.b	s3,s3
        if (af_pin_table[i].func == GPIO_FUN_UNUSED) {
23003428:	0ff00613          	li	a2,255
2300342c:	02c78863          	beq	a5,a2,2300345c <board_init+0xc2>
        } else if (af_pin_table[i].func == GPIO_FUN_WAKEUP) {
23003430:	0fe00613          	li	a2,254
23003434:	04c78e63          	beq	a5,a2,23003490 <board_init+0xf6>
        } else if ((af_pin_table[i].func == GPIO_FUN_USB) || (af_pin_table[i].func == GPIO_FUN_DAC) || (af_pin_table[i].func == GPIO_FUN_ADC)) {
23003438:	f3078713          	addi	a4,a5,-208
2300343c:	0742                	slli	a4,a4,0x10
2300343e:	8341                	srli	a4,a4,0x10
23003440:	02ede663          	bltu	s11,a4,2300346c <board_init+0xd2>
            gpio_cfg.gpioFun = GPIO_FUN_ANALOG;
23003444:	47a9                	li	a5,10
23003446:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_ANALOG;
2300344a:	20300793          	li	a5,515
2300344e:	00f11523          	sh	a5,10(sp)
        GLB_GPIO_Init(&gpio_cfg);
23003452:	0028                	addi	a0,sp,8
23003454:	1f011097          	auipc	ra,0x1f011
23003458:	cc8080e7          	jalr	-824(ra) # 4201411c <GLB_GPIO_Init>
    for (int i = 0; i < sizeof(af_pin_table) / sizeof(af_pin_table[0]); i++) {
2300345c:	04940963          	beq	s0,s1,230034ae <board_init+0x114>
        gpio_cfg.gpioPin = af_pin_table[i].pin;
23003460:	00044503          	lbu	a0,0(s0)
        gpio_cfg.gpioFun = af_pin_table[i].func;
23003464:	00245783          	lhu	a5,2(s0)
23003468:	0411                	addi	s0,s0,4
2300346a:	b749                	j	230033ec <board_init+0x52>
        } else if ((af_pin_table[i].func & 0xF0) == 0xF0) {
2300346c:	0f07f713          	andi	a4,a5,240
23003470:	0b570163          	beq	a4,s5,23003512 <board_init+0x178>
        } else if (af_pin_table[i].func == GPIO_FUN_PWM) {
23003474:	09778163          	beq	a5,s7,230034f6 <board_init+0x15c>
        } else if (af_pin_table[i].func == GPIO_FUN_QDEC) {
23003478:	0b678d63          	beq	a5,s6,23003532 <board_init+0x198>
        } else if (af_pin_table[i].func == GPIO_FUN_QDEC_LED) {
2300347c:	0d878263          	beq	a5,s8,23003540 <board_init+0x1a6>
        } else if (af_pin_table[i].func == GPIO_FUN_CLK_OUT) {
23003480:	e7f9                	bnez	a5,2300354e <board_init+0x1b4>
            if (af_pin_table[i].pin % 2) {
23003482:	8905                	andi	a0,a0,1
23003484:	12050563          	beqz	a0,230035ae <board_init+0x214>
                GLB_Set_Chip_Out_1_CLK_Sel(GLB_CHIP_CLK_OUT_I2S_REF_CLK);
23003488:	4505                	li	a0,1
2300348a:	352020ef          	jal	ra,230057dc <GLB_Set_Chip_Out_1_CLK_Sel>
2300348e:	b7d1                	j	23003452 <board_init+0xb8>
            if (af_pin_table[i].pin < GPIO_PIN_8) {
23003490:	479d                	li	a5,7
23003492:	06a7e663          	bltu	a5,a0,230034fe <board_init+0x164>
                tmpVal = BL_RD_REG(PDS_BASE, PDS_GPIO_INT);
23003496:	4000e737          	lui	a4,0x4000e
2300349a:	433c                	lw	a5,64(a4)
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_GPIO_INT_SELECT, af_pin_table[i].pin);
2300349c:	0522                	slli	a0,a0,0x8
2300349e:	88e7f793          	andi	a5,a5,-1906
230034a2:	8fc9                	or	a5,a5,a0
                tmpVal = BL_CLR_REG_BIT(tmpVal, PDS_GPIO_INT_MASK);
230034a4:	0407e793          	ori	a5,a5,64
                BL_WR_REG(PDS_BASE, PDS_GPIO_INT, tmpVal);
230034a8:	c33c                	sw	a5,64(a4)
    for (int i = 0; i < sizeof(af_pin_table) / sizeof(af_pin_table[0]); i++) {
230034aa:	fa941be3          	bne	s0,s1,23003460 <board_init+0xc6>
    tmpVal = BL_RD_REG(HBN_BASE, HBN_IRQ_MODE);
230034ae:	4000f6b7          	lui	a3,0x4000f
230034b2:	4adc                	lw	a5,20(a3)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_PIN_WAKEUP_MASK, hbn_gpio_mask);
230034b4:	0a0e                	slli	s4,s4,0x3
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_REG_AON_PAD_IE_SMT, hbn_aon_ie);
230034b6:	7779                	lui	a4,0xffffe
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_PIN_WAKEUP_MASK, hbn_gpio_mask);
230034b8:	f077f793          	andi	a5,a5,-249
230034bc:	00fa67b3          	or	a5,s4,a5
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_REG_AON_PAD_IE_SMT, hbn_aon_ie);
230034c0:	0ff70713          	addi	a4,a4,255 # ffffe0ff <__HeapLimit+0xbdfce0ff>
230034c4:	8f7d                	and	a4,a4,a5
230034c6:	00899793          	slli	a5,s3,0x8
230034ca:	8fd9                	or	a5,a5,a4
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_PIN_WAKEUP_MODE, HBN_GPIO_INT_TRIGGER_ASYNC_FALLING_EDGE);
230034cc:	7741                	lui	a4,0xffff0
230034ce:	1761                	addi	a4,a4,-8
    board_clock_init();
    board_pin_mux_init();
230034d0:	40b6                	lw	ra,76(sp)
230034d2:	4426                	lw	s0,72(sp)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_PIN_WAKEUP_MODE, HBN_GPIO_INT_TRIGGER_ASYNC_FALLING_EDGE);
230034d4:	8ff9                	and	a5,a5,a4
230034d6:	0047e793          	ori	a5,a5,4
    BL_WR_REG(HBN_BASE, HBN_IRQ_MODE, tmpVal);
230034da:	cadc                	sw	a5,20(a3)
230034dc:	4496                	lw	s1,68(sp)
230034de:	4906                	lw	s2,64(sp)
230034e0:	59f2                	lw	s3,60(sp)
230034e2:	5a62                	lw	s4,56(sp)
230034e4:	5ad2                	lw	s5,52(sp)
230034e6:	5b42                	lw	s6,48(sp)
230034e8:	5bb2                	lw	s7,44(sp)
230034ea:	5c22                	lw	s8,40(sp)
230034ec:	5c92                	lw	s9,36(sp)
230034ee:	5d02                	lw	s10,32(sp)
230034f0:	4df2                	lw	s11,28(sp)
230034f2:	6161                	addi	sp,sp,80
230034f4:	8082                	ret
            gpio_cfg.pullType = GPIO_PULL_DOWN;
230034f6:	4785                	li	a5,1
230034f8:	00f105a3          	sb	a5,11(sp)
230034fc:	bf99                	j	23003452 <board_init+0xb8>
            } else if ((af_pin_table[i].pin > GPIO_PIN_8) && (af_pin_table[i].pin < GPIO_PIN_13)) {
230034fe:	f4d96fe3          	bltu	s2,a3,2300345c <board_init+0xc2>
                hbn_gpio_mask &= ~(1 << (af_pin_table[i].pin - 9));
23003502:	4785                	li	a5,1
23003504:	00e79733          	sll	a4,a5,a4
23003508:	fff74713          	not	a4,a4
2300350c:	01477a33          	and	s4,a4,s4
23003510:	b7b1                	j	2300345c <board_init+0xc2>
            uint8_t uart_func = af_pin_table[i].func & 0x07;
23003512:	0075fd13          	andi	s10,a1,7
            uint8_t uart_sig = gpio_cfg.gpioPin % 8;
23003516:	00757c93          	andi	s9,a0,7
            GLB_UART_Fun_Sel((GLB_UART_SIG_Type)uart_sig, (GLB_UART_SIG_FUN_Type)uart_func);
2300351a:	85ea                	mv	a1,s10
            gpio_cfg.gpioFun = GPIO_FUN_UART;
2300351c:	471d                	li	a4,7
            GLB_UART_Fun_Sel((GLB_UART_SIG_Type)uart_sig, (GLB_UART_SIG_FUN_Type)uart_func);
2300351e:	8566                	mv	a0,s9
            gpio_cfg.gpioFun = GPIO_FUN_UART;
23003520:	00e104a3          	sb	a4,9(sp)
            GLB_UART_Fun_Sel((GLB_UART_SIG_Type)uart_sig, (GLB_UART_SIG_FUN_Type)uart_func);
23003524:	428020ef          	jal	ra,2300594c <GLB_UART_Fun_Sel>
            GLB_UART_Fun_Sel((GLB_UART_SIG_Type)uart_func, (GLB_UART_SIG_FUN_Type)uart_sig);
23003528:	85e6                	mv	a1,s9
2300352a:	856a                	mv	a0,s10
2300352c:	420020ef          	jal	ra,2300594c <GLB_UART_Fun_Sel>
23003530:	b70d                	j	23003452 <board_init+0xb8>
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
23003532:	20000793          	li	a5,512
            gpio_cfg.gpioFun = GPIO_FUN_QDEC;
23003536:	016104a3          	sb	s6,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
2300353a:	00f11523          	sh	a5,10(sp)
2300353e:	bf11                	j	23003452 <board_init+0xb8>
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
23003540:	20100793          	li	a5,513
            gpio_cfg.gpioFun = GPIO_FUN_QDEC;
23003544:	016104a3          	sb	s6,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
23003548:	00f11523          	sh	a5,10(sp)
2300354c:	b719                	j	23003452 <board_init+0xb8>
        } else if ((af_pin_table[i].func == GPIO_FUN_GPIO_INPUT_UP) || (af_pin_table[i].func == GPIO_FUN_GPIO_EXTI_FALLING_EDGE) || (af_pin_table[i].func == GPIO_FUN_GPIO_EXTI_LOW_LEVEL)) {
2300354e:	0e300713          	li	a4,227
23003552:	06e78263          	beq	a5,a4,230035b6 <board_init+0x21c>
23003556:	0e700713          	li	a4,231
2300355a:	06e78e63          	beq	a5,a4,230035d6 <board_init+0x23c>
2300355e:	0e900713          	li	a4,233
23003562:	06e78063          	beq	a5,a4,230035c2 <board_init+0x228>
        } else if ((af_pin_table[i].func == GPIO_FUN_GPIO_INPUT_DOWN) || (af_pin_table[i].func == GPIO_FUN_GPIO_EXTI_RISING_EDGE) || (af_pin_table[i].func == GPIO_FUN_GPIO_EXTI_HIGH_LEVEL)) {
23003566:	0e400713          	li	a4,228
2300356a:	06e78863          	beq	a5,a4,230035da <board_init+0x240>
2300356e:	0e600713          	li	a4,230
23003572:	08e78863          	beq	a5,a4,23003602 <board_init+0x268>
23003576:	0e800713          	li	a4,232
2300357a:	06e78863          	beq	a5,a4,230035ea <board_init+0x250>
        } else if (af_pin_table[i].func == GPIO_FUN_GPIO_INPUT_NONE) {
2300357e:	0e500713          	li	a4,229
23003582:	08e78263          	beq	a5,a4,23003606 <board_init+0x26c>
        } else if (af_pin_table[i].func == GPIO_FUN_GPIO_OUTPUT_UP) {
23003586:	0e000713          	li	a4,224
2300358a:	08e78663          	beq	a5,a4,23003616 <board_init+0x27c>
        } else if (af_pin_table[i].func == GPIO_FUN_GPIO_OUTPUT_DOWN) {
2300358e:	0e100713          	li	a4,225
23003592:	08e78963          	beq	a5,a4,23003624 <board_init+0x28a>
        } else if (af_pin_table[i].func == GPIO_FUN_GPIO_OUTPUT_NONE) {
23003596:	0e200713          	li	a4,226
2300359a:	eae79ce3          	bne	a5,a4,23003452 <board_init+0xb8>
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
2300359e:	47ad                	li	a5,11
230035a0:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
230035a4:	20100793          	li	a5,513
230035a8:	00f11523          	sh	a5,10(sp)
230035ac:	b55d                	j	23003452 <board_init+0xb8>
                GLB_Set_Chip_Out_0_CLK_Sel(GLB_CHIP_CLK_OUT_I2S_REF_CLK);
230035ae:	4505                	li	a0,1
230035b0:	214020ef          	jal	ra,230057c4 <GLB_Set_Chip_Out_0_CLK_Sel>
230035b4:	bd79                	j	23003452 <board_init+0xb8>
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
230035b6:	47ad                	li	a5,11
230035b8:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
230035bc:	00010523          	sb	zero,10(sp)
            if (af_pin_table[i].func == GPIO_FUN_GPIO_EXTI_FALLING_EDGE) {
230035c0:	bd49                	j	23003452 <board_init+0xb8>
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
230035c2:	4609                	li	a2,2
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
230035c4:	47ad                	li	a5,11
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
230035c6:	4585                	li	a1,1
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
230035c8:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
230035cc:	00010523          	sb	zero,10(sp)
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
230035d0:	3d0020ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
230035d4:	bdbd                	j	23003452 <board_init+0xb8>
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_PULSE);
230035d6:	4601                	li	a2,0
230035d8:	b7f5                	j	230035c4 <board_init+0x22a>
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
230035da:	47ad                	li	a5,11
230035dc:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
230035e0:	10000793          	li	a5,256
230035e4:	00f11523          	sh	a5,10(sp)
            if (af_pin_table[i].func == GPIO_FUN_GPIO_EXTI_RISING_EDGE) {
230035e8:	b5ad                	j	23003452 <board_init+0xb8>
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
230035ea:	460d                	li	a2,3
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
230035ec:	47ad                	li	a5,11
230035ee:	00f104a3          	sb	a5,9(sp)
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
230035f2:	4585                	li	a1,1
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
230035f4:	10000793          	li	a5,256
230035f8:	00f11523          	sh	a5,10(sp)
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
230035fc:	3a4020ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003600:	bd89                	j	23003452 <board_init+0xb8>
                GLB_Set_GPIO_IntMod(af_pin_table[i].pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_PULSE);
23003602:	4605                	li	a2,1
23003604:	b7e5                	j	230035ec <board_init+0x252>
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
23003606:	47ad                	li	a5,11
23003608:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
2300360c:	20000793          	li	a5,512
23003610:	00f11523          	sh	a5,10(sp)
23003614:	bd3d                	j	23003452 <board_init+0xb8>
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
23003616:	47ad                	li	a5,11
23003618:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
2300361c:	4785                	li	a5,1
2300361e:	00f10523          	sb	a5,10(sp)
            gpio_cfg.pullType = GPIO_PULL_UP;
23003622:	bd05                	j	23003452 <board_init+0xb8>
            gpio_cfg.gpioFun = GPIO_FUN_GPIO;
23003624:	47ad                	li	a5,11
23003626:	00f104a3          	sb	a5,9(sp)
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
2300362a:	10100793          	li	a5,257
2300362e:	00f11523          	sh	a5,10(sp)
23003632:	b505                	j	23003452 <board_init+0xb8>

23003634 <system_clock_init>:
    tmpVal &= (~(1 << BL_AHB_SLAVE1_MJPEG));
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
}

void system_clock_init(void)
{
23003634:	1141                	addi	sp,sp,-16
#if XTAL_TYPE != EXTERNAL_XTAL_32M
    internal_rc32m_init();
    AON_Power_Off_XTAL();
#endif
    /*select root clock*/
    GLB_Set_System_CLK(XTAL_TYPE, BSP_ROOT_CLOCK_SOURCE);
23003636:	4591                	li	a1,4
23003638:	4505                	li	a0,1
{
2300363a:	c606                	sw	ra,12(sp)
2300363c:	c422                	sw	s0,8(sp)
    GLB_Set_System_CLK(XTAL_TYPE, BSP_ROOT_CLOCK_SOURCE);
2300363e:	1f011097          	auipc	ra,0x1f011
23003642:	34e080e7          	jalr	846(ra) # 4201498c <GLB_Set_System_CLK>
#if BSP_ROOT_CLOCK_SOURCE == ROOT_CLOCK_SOURCE_PLL_57P6M
    /* fix 57.6M */
    SystemCoreClockSet(57.6 * 1000 * 1000);
#endif
    /*set fclk/hclk and bclk clock*/
    GLB_Set_System_CLK_Div(BSP_FCLK_DIV, BSP_BCLK_DIV);
23003646:	4585                	li	a1,1
23003648:	4501                	li	a0,0
2300364a:	1f011097          	auipc	ra,0x1f011
2300364e:	1d2080e7          	jalr	466(ra) # 4201481c <GLB_Set_System_CLK_Div>

uint32_t system_clock_get(enum system_clock_type type)
{
    switch (type) {
        case SYSTEM_CLOCK_ROOT_CLOCK:
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003652:	1f011097          	auipc	ra,0x1f011
23003656:	31c080e7          	jalr	796(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
2300365a:	c151                	beqz	a0,230036de <system_clock_init+0xaa>
                return 32 * 1000 * 1000;
            } else if (GLB_Get_Root_CLK_Sel() == 1)
2300365c:	1f011097          	auipc	ra,0x1f011
23003660:	312080e7          	jalr	786(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003664:	4705                	li	a4,1
23003666:	06e50c63          	beq	a0,a4,230036de <system_clock_init+0xaa>
                return 32 * 1000 * 1000;
            else {
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
2300366a:	400007b7          	lui	a5,0x40000
2300366e:	439c                	lw	a5,0(a5)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003670:	8391                	srli	a5,a5,0x4
23003672:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003674:	cbb5                	beqz	a5,230036e8 <system_clock_init+0xb4>
                    return 57.6 * 1000 * 1000;
                } else if (tmpVal == 1) {
23003676:	08e78363          	beq	a5,a4,230036fc <system_clock_init+0xc8>
                    return 96 * 1000 * 1000;
                } else if (tmpVal == 2) {
2300367a:	4709                	li	a4,2
                    return 144 * 1000 * 1000;
                } else {
                    return 0;
2300367c:	4401                	li	s0,0
                } else if (tmpVal == 2) {
2300367e:	06e78a63          	beq	a5,a4,230036f2 <system_clock_init+0xbe>
            }
        case SYSTEM_CLOCK_FCLK:
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1);

        case SYSTEM_CLOCK_BCLK:
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1) / (GLB_Get_BCLK_Div() + 1);
23003682:	1f011097          	auipc	ra,0x1f011
23003686:	300080e7          	jalr	768(ra) # 42014982 <GLB_Get_HCLK_Div>
2300368a:	0505                	addi	a0,a0,1
2300368c:	02a45433          	divu	s0,s0,a0
23003690:	1f011097          	auipc	ra,0x1f011
23003694:	2e8080e7          	jalr	744(ra) # 42014978 <GLB_Get_BCLK_Div>
23003698:	00150613          	addi	a2,a0,1
    GLB_Set_MTimer_CLK(1, GLB_MTIMER_CLK_BCLK, mtimer_get_clk_src_div());
2300369c:	4581                	li	a1,0
2300369e:	4505                	li	a0,1
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1) / (GLB_Get_BCLK_Div() + 1);
230036a0:	02c45433          	divu	s0,s0,a2
    return (system_clock_get(SYSTEM_CLOCK_BCLK) / 1000 / 1000 - 1);
230036a4:	000f4637          	lui	a2,0xf4
230036a8:	24060613          	addi	a2,a2,576 # f4240 <StackSize+0xf3240>
230036ac:	02c45633          	divu	a2,s0,a2
    GLB_Set_MTimer_CLK(1, GLB_MTIMER_CLK_BCLK, mtimer_get_clk_src_div());
230036b0:	167d                	addi	a2,a2,-1
230036b2:	1d0020ef          	jal	ra,23005882 <GLB_Set_MTimer_CLK>
    PDS_Set_Audio_PLL_Freq(BSP_AUDIO_PLL_CLOCK_SOURCE - ROOT_CLOCK_SOURCE_AUPLL_12288000_HZ);
230036b6:	4511                	li	a0,4
230036b8:	1f011097          	auipc	ra,0x1f011
230036bc:	1fa080e7          	jalr	506(ra) # 420148b2 <PDS_Set_Audio_PLL_Freq>
    HBN_32K_Sel(HBN_32K_RC);
230036c0:	4501                	li	a0,0
230036c2:	1f011097          	auipc	ra,0x1f011
230036c6:	1b4080e7          	jalr	436(ra) # 42014876 <HBN_32K_Sel>
    HBN_Power_Off_Xtal_32K();
230036ca:	1f011097          	auipc	ra,0x1f011
230036ce:	1d0080e7          	jalr	464(ra) # 4201489a <HBN_Power_Off_Xtal_32K>
}
230036d2:	4422                	lw	s0,8(sp)
230036d4:	40b2                	lw	ra,12(sp)
    HBN_Set_XCLK_CLK_Sel(HBN_XCLK_CLK_XTAL);
230036d6:	4505                	li	a0,1
}
230036d8:	0141                	addi	sp,sp,16
    HBN_Set_XCLK_CLK_Sel(HBN_XCLK_CLK_XTAL);
230036da:	3980206f          	j	23005a72 <HBN_Set_XCLK_CLK_Sel>
                return 32 * 1000 * 1000;
230036de:	01e85437          	lui	s0,0x1e85
230036e2:	80040413          	addi	s0,s0,-2048 # 1e84800 <StackSize+0x1e83800>
230036e6:	bf71                	j	23003682 <system_clock_init+0x4e>
                    return 57.6 * 1000 * 1000;
230036e8:	036ef437          	lui	s0,0x36ef
230036ec:	80040413          	addi	s0,s0,-2048 # 36ee800 <StackSize+0x36ed800>
230036f0:	bf49                	j	23003682 <system_clock_init+0x4e>
                    return 144 * 1000 * 1000;
230036f2:	08954437          	lui	s0,0x8954
230036f6:	40040413          	addi	s0,s0,1024 # 8954400 <StackSize+0x8953400>
230036fa:	b761                	j	23003682 <system_clock_init+0x4e>
                    return 96 * 1000 * 1000;
230036fc:	05b8e437          	lui	s0,0x5b8e
23003700:	80040413          	addi	s0,s0,-2048 # 5b8d800 <StackSize+0x5b8c800>
23003704:	bfbd                	j	23003682 <system_clock_init+0x4e>

23003706 <peripheral_clock_init>:
{
23003706:	1141                	addi	sp,sp,-16
23003708:	c422                	sw	s0,8(sp)
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CGEN_CFG1);
2300370a:	40000437          	lui	s0,0x40000
2300370e:	505c                	lw	a5,36(s0)
    tmpVal &= (~(1 << BL_AHB_SLAVE1_MJPEG));
23003710:	8000d737          	lui	a4,0x8000d
23003714:	f9f70713          	addi	a4,a4,-97 # 8000cf9f <__HeapLimit+0x3dfdcf9f>
23003718:	8ff9                	and	a5,a5,a4
{
2300371a:	c606                	sw	ra,12(sp)
2300371c:	c226                	sw	s1,4(sp)
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
2300371e:	d05c                	sw	a5,36(s0)
    GLB_Set_UART_CLK(ENABLE, HBN_UART_CLK_96M, BSP_UART_CLOCK_DIV);
23003720:	4601                	li	a2,0
23003722:	4585                	li	a1,1
23003724:	4505                	li	a0,1
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CGEN_CFG1);
23003726:	5044                	lw	s1,36(s0)
    GLB_Set_UART_CLK(ENABLE, HBN_UART_CLK_96M, BSP_UART_CLOCK_DIV);
23003728:	05e020ef          	jal	ra,23005786 <GLB_Set_UART_CLK>
    GLB_Set_I2C_CLK(ENABLE, BSP_I2C_CLOCK_DIV);
2300372c:	4581                	li	a1,0
2300372e:	4505                	li	a0,1
23003730:	0c2020ef          	jal	ra,230057f2 <GLB_Set_I2C_CLK>
    GLB_Set_SPI_CLK(ENABLE, BSP_SPI_CLOCK_DIV);
23003734:	4581                	li	a1,0
23003736:	4505                	li	a0,1
23003738:	0f4020ef          	jal	ra,2300582c <GLB_Set_SPI_CLK>
    tmpVal |= (1 << BL_AHB_SLAVE1_TMR);
2300373c:	002f0737          	lui	a4,0x2f0
23003740:	8f45                	or	a4,a4,s1
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
23003742:	d058                	sw	a4,36(s0)
    uint32_t tmp = BL_RD_REG(TIMER_BASE, TIMER_TCCR);
23003744:	4000a7b7          	lui	a5,0x4000a
23003748:	5007a683          	lw	a3,1280(a5) # 4000a500 <__dtcm_load_addr+0x1cffc584>
    tmp = BL_SET_REG_BITS_VAL(tmp, TIMER_TCDR2, BSP_TIMER0_CLOCK_DIV);
2300374c:	7641                	lui	a2,0xffff0
2300374e:	0ff60613          	addi	a2,a2,255 # ffff00ff <__HeapLimit+0xbdfc00ff>
    tmp = BL_SET_REG_BITS_VAL(tmp, TIMER_CS_1, TIMER_CLKSRC_FCLK);
23003752:	9acd                	andi	a3,a3,-13
    BL_WR_REG(TIMER_BASE, TIMER_TCCR, tmp);
23003754:	50d7a023          	sw	a3,1280(a5)
    tmp = BL_RD_REG(TIMER_BASE, TIMER_TCDR);
23003758:	5bc7a683          	lw	a3,1468(a5)
    tmp1 = BL_SET_REG_BITS_VAL(tmp1, TIMER_TCDR3, BSP_TIMER1_CLOCK_DIV);
2300375c:	ff010537          	lui	a0,0xff010
23003760:	157d                	addi	a0,a0,-1
    tmp = BL_SET_REG_BITS_VAL(tmp, TIMER_TCDR2, BSP_TIMER0_CLOCK_DIV);
23003762:	8ef1                	and	a3,a3,a2
    BL_WR_REG(TIMER_BASE, TIMER_TCDR, tmp);
23003764:	5ad7ae23          	sw	a3,1468(a5)
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
23003768:	d058                	sw	a4,36(s0)
    uint32_t tmp1 = BL_RD_REG(TIMER_BASE, TIMER_TCCR);
2300376a:	5007a683          	lw	a3,1280(a5)
    tmpVal |= (1 << BL_AHB_SLAVE1_PWM);
2300376e:	003f05b7          	lui	a1,0x3f0
23003772:	8dc5                	or	a1,a1,s1
    tmp1 = BL_SET_REG_BITS_VAL(tmp1, TIMER_CS_2, TIMER_CLKSRC_FCLK);
23003774:	f9f6f693          	andi	a3,a3,-97
    BL_WR_REG(TIMER_BASE, TIMER_TCCR, tmp1);
23003778:	50d7a023          	sw	a3,1280(a5)
    tmp1 = BL_RD_REG(TIMER_BASE, TIMER_TCDR);
2300377c:	5bc7a603          	lw	a2,1468(a5)
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
23003780:	43078693          	addi	a3,a5,1072
        BL_WR_REG(PWMx, PWM_CLKDIV, BSP_PWM_CLOCK_DIV + 1);
23003784:	02000813          	li	a6,32
    tmp1 = BL_SET_REG_BITS_VAL(tmp1, TIMER_TCDR3, BSP_TIMER1_CLOCK_DIV);
23003788:	8e69                	and	a2,a2,a0
    BL_WR_REG(TIMER_BASE, TIMER_TCDR, tmp1);
2300378a:	5ac7ae23          	sw	a2,1468(a5)
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
2300378e:	d058                	sw	a4,36(s0)
    uint32_t tmpwdt = BL_RD_REG(TIMER_BASE, TIMER_TCCR);
23003790:	5007a603          	lw	a2,1280(a5)
    uint32_t timeoutCnt = 160 * 1000;
23003794:	00027737          	lui	a4,0x27
23003798:	10070713          	addi	a4,a4,256 # 27100 <StackSize+0x26100>
    tmpwdt = BL_SET_REG_BITS_VAL(tmpwdt, TIMER_CS_WDT, TIMER_CLKSRC_FCLK);
2300379c:	cff67613          	andi	a2,a2,-769
    BL_WR_REG(TIMER_BASE, TIMER_TCCR, tmpwdt);
230037a0:	50c7a023          	sw	a2,1280(a5)
    tmpwdt = BL_RD_REG(TIMER_BASE, TIMER_TCDR);
230037a4:	5bc7a603          	lw	a2,1468(a5)
    for (int i = 0; i < 5; i++) {
230037a8:	4d078513          	addi	a0,a5,1232
    tmpwdt = BL_SET_REG_BITS_VAL(tmpwdt, TIMER_WCDR, BSP_WDT_CLOCK_DIV);
230037ac:	0622                	slli	a2,a2,0x8
230037ae:	8221                	srli	a2,a2,0x8
    BL_WR_REG(TIMER_BASE, TIMER_TCDR, tmpwdt);
230037b0:	5ac7ae23          	sw	a2,1468(a5)
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
230037b4:	d04c                	sw	a1,36(s0)
        tmp_pwm = BL_RD_REG(PWMx, PWM_CONFIG);
230037b6:	429c                	lw	a5,0(a3)
        BL_WR_REG(PWMx, PWM_CONFIG, BL_SET_REG_BIT(tmp_pwm, PWM_STOP_EN));
230037b8:	0407e793          	ori	a5,a5,64
230037bc:	c29c                	sw	a5,0(a3)
        while (!BL_IS_REG_BIT_SET(BL_RD_REG(PWMx, PWM_CONFIG), PWM_STS_TOP)) {
230037be:	a019                	j	230037c4 <peripheral_clock_init+0xbe>
            timeoutCnt--;
230037c0:	177d                	addi	a4,a4,-1
            if (timeoutCnt == 0) {
230037c2:	cf29                	beqz	a4,2300381c <peripheral_clock_init+0x116>
        while (!BL_IS_REG_BIT_SET(BL_RD_REG(PWMx, PWM_CONFIG), PWM_STS_TOP)) {
230037c4:	429c                	lw	a5,0(a3)
230037c6:	0807f793          	andi	a5,a5,128
230037ca:	dbfd                	beqz	a5,230037c0 <peripheral_clock_init+0xba>
        tmp_pwm = BL_RD_REG(PWMx, PWM_CONFIG);
230037cc:	429c                	lw	a5,0(a3)
    for (int i = 0; i < 5; i++) {
230037ce:	02068693          	addi	a3,a3,32 # 4000f020 <__dtcm_load_addr+0x1d0010a4>
        tmp_pwm = BL_SET_REG_BITS_VAL(tmp_pwm, PWM_REG_CLK_SEL, PWM_CLK_32K);
230037d2:	9bf1                	andi	a5,a5,-4
230037d4:	0027e793          	ori	a5,a5,2
        BL_WR_REG(PWMx, PWM_CONFIG, tmp_pwm);
230037d8:	fef6a023          	sw	a5,-32(a3)
        BL_WR_REG(PWMx, PWM_CLKDIV, BSP_PWM_CLOCK_DIV + 1);
230037dc:	fd06a823          	sw	a6,-48(a3)
    for (int i = 0; i < 5; i++) {
230037e0:	fca69be3          	bne	a3,a0,230037b6 <peripheral_clock_init+0xb0>
    GLB_Set_I2S_CLK(ENABLE, GLB_I2S_OUT_REF_CLK_NONE);
230037e4:	4581                	li	a1,0
230037e6:	4505                	li	a0,1
230037e8:	733010ef          	jal	ra,2300571a <GLB_Set_I2S_CLK>
    GLB_Set_ADC_CLK(ENABLE, GLB_ADC_CLK_XCLK, BSP_ADC_CLOCK_DIV);
230037ec:	4601                	li	a2,0
230037ee:	4585                	li	a1,1
230037f0:	4505                	li	a0,1
230037f2:	0da020ef          	jal	ra,230058cc <GLB_Set_ADC_CLK>
    GLB_Set_DAC_CLK(ENABLE, GLB_DAC_CLK_AUDIO_PLL, BSP_DAC_CLOCK_DIV + 1);
230037f6:	460d                	li	a2,3
230037f8:	4589                	li	a1,2
230037fa:	4505                	li	a0,1
230037fc:	110020ef          	jal	ra,2300590c <GLB_Set_DAC_CLK>
    GLB_Set_QDEC_CLK(GLB_QDEC_CLK_XCLK, BSP_QDEC_KEYSCAN_CLOCK_DIV);
23003800:	45fd                	li	a1,31
23003802:	4501                	li	a0,0
23003804:	76d010ef          	jal	ra,23005770 <GLB_Set_QDEC_CLK>
    GLB_Set_USB_CLK(1);
23003808:	4505                	li	a0,1
2300380a:	745010ef          	jal	ra,2300574e <GLB_Set_USB_CLK>
    tmpVal |= (1 << BL_AHB_SLAVE1_DMA);
2300380e:	1f3f17b7          	lui	a5,0x1f3f1
23003812:	0791                	addi	a5,a5,4
23003814:	8cdd                	or	s1,s1,a5
    BL_WR_REG(GLB_BASE, GLB_CGEN_CFG1, tmpVal);
23003816:	400007b7          	lui	a5,0x40000
2300381a:	d3c4                	sw	s1,36(a5)
}
2300381c:	40b2                	lw	ra,12(sp)
2300381e:	4422                	lw	s0,8(sp)
23003820:	4492                	lw	s1,4(sp)
23003822:	0141                	addi	sp,sp,16
23003824:	8082                	ret

23003826 <system_clock_get>:
    switch (type) {
23003826:	478d                	li	a5,3
23003828:	0ef50b63          	beq	a0,a5,2300391e <system_clock_get+0xf8>
{
2300382c:	1141                	addi	sp,sp,-16
2300382e:	c422                	sw	s0,8(sp)
23003830:	c606                	sw	ra,12(sp)
23003832:	c226                	sw	s1,4(sp)
23003834:	c04a                	sw	s2,0(sp)
23003836:	842a                	mv	s0,a0
    switch (type) {
23003838:	04a7e063          	bltu	a5,a0,23003878 <system_clock_get+0x52>
2300383c:	4485                	li	s1,1
2300383e:	0e950563          	beq	a0,s1,23003928 <system_clock_get+0x102>
23003842:	4909                	li	s2,2
23003844:	05251a63          	bne	a0,s2,23003898 <system_clock_get+0x72>
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003848:	1f011097          	auipc	ra,0x1f011
2300384c:	126080e7          	jalr	294(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003850:	cd59                	beqz	a0,230038ee <system_clock_get+0xc8>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
23003852:	1f011097          	auipc	ra,0x1f011
23003856:	11c080e7          	jalr	284(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
2300385a:	08950a63          	beq	a0,s1,230038ee <system_clock_get+0xc8>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
2300385e:	400007b7          	lui	a5,0x40000
23003862:	439c                	lw	a5,0(a5)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003864:	8391                	srli	a5,a5,0x4
23003866:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003868:	12078363          	beqz	a5,2300398e <system_clock_get+0x168>
                } else if (tmpVal == 1) {
2300386c:	14978563          	beq	a5,s1,230039b6 <system_clock_get+0x190>
                } else if (tmpVal == 2) {
23003870:	10878063          	beq	a5,s0,23003970 <system_clock_get+0x14a>
                    return 0;
23003874:	4401                	li	s0,0
23003876:	a041                	j	230038f6 <system_clock_get+0xd0>
    switch (type) {
23003878:	4791                	li	a5,4
2300387a:	04f50c63          	beq	a0,a5,230038d2 <system_clock_get+0xac>
2300387e:	4795                	li	a5,5
23003880:	04f51263          	bne	a0,a5,230038c4 <system_clock_get+0x9e>
            } else if (BSP_AUDIO_PLL_CLOCK_SOURCE == ROOT_CLOCK_SOURCE_AUPLL_5644800_HZ) {
                return 5644800;
            } else if (BSP_AUDIO_PLL_CLOCK_SOURCE == ROOT_CLOCK_SOURCE_AUPLL_24576000_HZ) {
                return 24576000;
            } else if (BSP_AUDIO_PLL_CLOCK_SOURCE == ROOT_CLOCK_SOURCE_AUPLL_24000000_HZ) {
                return 24000000;
23003884:	016e3537          	lui	a0,0x16e3
23003888:	60050513          	addi	a0,a0,1536 # 16e3600 <StackSize+0x16e2600>
        default:
            break;
    }

    return 0;
}
2300388c:	40b2                	lw	ra,12(sp)
2300388e:	4422                	lw	s0,8(sp)
23003890:	4492                	lw	s1,4(sp)
23003892:	4902                	lw	s2,0(sp)
23003894:	0141                	addi	sp,sp,16
23003896:	8082                	ret
    switch (type) {
23003898:	e515                	bnez	a0,230038c4 <system_clock_get+0x9e>
            if (GLB_Get_Root_CLK_Sel() == 0) {
2300389a:	1f011097          	auipc	ra,0x1f011
2300389e:	0d4080e7          	jalr	212(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
230038a2:	c129                	beqz	a0,230038e4 <system_clock_get+0xbe>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
230038a4:	1f011097          	auipc	ra,0x1f011
230038a8:	0ca080e7          	jalr	202(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
230038ac:	02950c63          	beq	a0,s1,230038e4 <system_clock_get+0xbe>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
230038b0:	400007b7          	lui	a5,0x40000
230038b4:	439c                	lw	a5,0(a5)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
230038b6:	8391                	srli	a5,a5,0x4
230038b8:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
230038ba:	cff9                	beqz	a5,23003998 <system_clock_get+0x172>
                } else if (tmpVal == 1) {
230038bc:	10978263          	beq	a5,s1,230039c0 <system_clock_get+0x19a>
                } else if (tmpVal == 2) {
230038c0:	0b278d63          	beq	a5,s2,2300397a <system_clock_get+0x154>
}
230038c4:	40b2                	lw	ra,12(sp)
230038c6:	4422                	lw	s0,8(sp)
230038c8:	4492                	lw	s1,4(sp)
230038ca:	4902                	lw	s2,0(sp)
    return 0;
230038cc:	4501                	li	a0,0
}
230038ce:	0141                	addi	sp,sp,16
230038d0:	8082                	ret
230038d2:	40b2                	lw	ra,12(sp)
230038d4:	4422                	lw	s0,8(sp)
    switch (type) {
230038d6:	6521                	lui	a0,0x8
}
230038d8:	4492                	lw	s1,4(sp)
230038da:	4902                	lw	s2,0(sp)
    switch (type) {
230038dc:	d0050513          	addi	a0,a0,-768 # 7d00 <StackSize+0x6d00>
}
230038e0:	0141                	addi	sp,sp,16
230038e2:	8082                	ret
                return 32 * 1000 * 1000;
230038e4:	01e85537          	lui	a0,0x1e85
230038e8:	80050513          	addi	a0,a0,-2048 # 1e84800 <StackSize+0x1e83800>
230038ec:	b745                	j	2300388c <system_clock_get+0x66>
230038ee:	01e85437          	lui	s0,0x1e85
230038f2:	80040413          	addi	s0,s0,-2048 # 1e84800 <StackSize+0x1e83800>
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1) / (GLB_Get_BCLK_Div() + 1);
230038f6:	1f011097          	auipc	ra,0x1f011
230038fa:	08c080e7          	jalr	140(ra) # 42014982 <GLB_Get_HCLK_Div>
230038fe:	0505                	addi	a0,a0,1
23003900:	02a45433          	divu	s0,s0,a0
23003904:	1f011097          	auipc	ra,0x1f011
23003908:	074080e7          	jalr	116(ra) # 42014978 <GLB_Get_BCLK_Div>
2300390c:	0505                	addi	a0,a0,1
}
2300390e:	40b2                	lw	ra,12(sp)
23003910:	4492                	lw	s1,4(sp)
23003912:	4902                	lw	s2,0(sp)
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1) / (GLB_Get_BCLK_Div() + 1);
23003914:	02a45533          	divu	a0,s0,a0
}
23003918:	4422                	lw	s0,8(sp)
2300391a:	0141                	addi	sp,sp,16
2300391c:	8082                	ret
            return 32000000;
2300391e:	01e85537          	lui	a0,0x1e85
23003922:	80050513          	addi	a0,a0,-2048 # 1e84800 <StackSize+0x1e83800>
}
23003926:	8082                	ret
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003928:	1f011097          	auipc	ra,0x1f011
2300392c:	046080e7          	jalr	70(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003930:	c91d                	beqz	a0,23003966 <system_clock_get+0x140>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
23003932:	1f011097          	auipc	ra,0x1f011
23003936:	03c080e7          	jalr	60(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
2300393a:	02850663          	beq	a0,s0,23003966 <system_clock_get+0x140>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
2300393e:	400007b7          	lui	a5,0x40000
23003942:	439c                	lw	a5,0(a5)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003944:	8391                	srli	a5,a5,0x4
23003946:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003948:	cfa9                	beqz	a5,230039a2 <system_clock_get+0x17c>
                } else if (tmpVal == 1) {
2300394a:	06878163          	beq	a5,s0,230039ac <system_clock_get+0x186>
                } else if (tmpVal == 2) {
2300394e:	4709                	li	a4,2
                    return 0;
23003950:	4401                	li	s0,0
                } else if (tmpVal == 2) {
23003952:	02e78963          	beq	a5,a4,23003984 <system_clock_get+0x15e>
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1);
23003956:	1f011097          	auipc	ra,0x1f011
2300395a:	02c080e7          	jalr	44(ra) # 42014982 <GLB_Get_HCLK_Div>
2300395e:	0505                	addi	a0,a0,1
23003960:	02a45533          	divu	a0,s0,a0
23003964:	b725                	j	2300388c <system_clock_get+0x66>
                return 32 * 1000 * 1000;
23003966:	01e85537          	lui	a0,0x1e85
2300396a:	80050413          	addi	s0,a0,-2048 # 1e84800 <StackSize+0x1e83800>
2300396e:	b7e5                	j	23003956 <system_clock_get+0x130>
                    return 144 * 1000 * 1000;
23003970:	08954437          	lui	s0,0x8954
23003974:	40040413          	addi	s0,s0,1024 # 8954400 <StackSize+0x8953400>
23003978:	bfbd                	j	230038f6 <system_clock_get+0xd0>
2300397a:	08954537          	lui	a0,0x8954
2300397e:	40050513          	addi	a0,a0,1024 # 8954400 <StackSize+0x8953400>
23003982:	b729                	j	2300388c <system_clock_get+0x66>
23003984:	08954537          	lui	a0,0x8954
23003988:	40050413          	addi	s0,a0,1024 # 8954400 <StackSize+0x8953400>
2300398c:	b7e9                	j	23003956 <system_clock_get+0x130>
                    return 57.6 * 1000 * 1000;
2300398e:	036ef437          	lui	s0,0x36ef
23003992:	80040413          	addi	s0,s0,-2048 # 36ee800 <StackSize+0x36ed800>
23003996:	b785                	j	230038f6 <system_clock_get+0xd0>
23003998:	036ef537          	lui	a0,0x36ef
2300399c:	80050513          	addi	a0,a0,-2048 # 36ee800 <StackSize+0x36ed800>
230039a0:	b5f5                	j	2300388c <system_clock_get+0x66>
230039a2:	036ef537          	lui	a0,0x36ef
230039a6:	80050413          	addi	s0,a0,-2048 # 36ee800 <StackSize+0x36ed800>
230039aa:	b775                	j	23003956 <system_clock_get+0x130>
                    return 96 * 1000 * 1000;
230039ac:	05b8e537          	lui	a0,0x5b8e
230039b0:	80050413          	addi	s0,a0,-2048 # 5b8d800 <StackSize+0x5b8c800>
230039b4:	b74d                	j	23003956 <system_clock_get+0x130>
230039b6:	05b8e437          	lui	s0,0x5b8e
230039ba:	80040413          	addi	s0,s0,-2048 # 5b8d800 <StackSize+0x5b8c800>
230039be:	bf25                	j	230038f6 <system_clock_get+0xd0>
230039c0:	05b8e537          	lui	a0,0x5b8e
230039c4:	80050513          	addi	a0,a0,-2048 # 5b8d800 <StackSize+0x5b8c800>
230039c8:	b5d1                	j	2300388c <system_clock_get+0x66>

230039ca <peripheral_clock_get>:
uint32_t peripheral_clock_get(enum peripheral_clock_type type)
{
    uint32_t tmpVal;
    uint32_t div;

    switch (type) {
230039ca:	4795                	li	a5,5
230039cc:	20f50263          	beq	a0,a5,23003bd0 <peripheral_clock_get+0x206>
{
230039d0:	1141                	addi	sp,sp,-16
230039d2:	c422                	sw	s0,8(sp)
230039d4:	c606                	sw	ra,12(sp)
230039d6:	c226                	sw	s1,4(sp)
230039d8:	c04a                	sw	s2,0(sp)
230039da:	842a                	mv	s0,a0
    switch (type) {
230039dc:	04a7e063          	bltu	a5,a0,23003a1c <peripheral_clock_get+0x52>
230039e0:	4789                	li	a5,2
230039e2:	1af50663          	beq	a0,a5,23003b8e <peripheral_clock_get+0x1c4>
230039e6:	08a7f163          	bgeu	a5,a0,23003a68 <peripheral_clock_get+0x9e>
230039ea:	470d                	li	a4,3
230039ec:	16e50e63          	beq	a0,a4,23003b68 <peripheral_clock_get+0x19e>
                return system_clock_get(SYSTEM_CLOCK_XCLK) / (div + 1);
            }
#endif
#if defined(BSP_USING_DAC0)
        case PERIPHERAL_CLOCK_DAC:
            tmpVal = BL_RD_REG(GLB_BASE, GLB_DIG32K_WAKEUP_CTRL);
230039f0:	40000737          	lui	a4,0x40000
230039f4:	0a872503          	lw	a0,168(a4) # 400000a8 <__dtcm_load_addr+0x1cff212c>
            div = BL_GET_REG_BITS_VAL(tmpVal, GLB_DIG_512K_DIV);
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_DIG_CLK_SRC_SEL);
230039f8:	01c55713          	srli	a4,a0,0x1c
230039fc:	8b0d                	andi	a4,a4,3
            div = BL_GET_REG_BITS_VAL(tmpVal, GLB_DIG_512K_DIV);
230039fe:	8141                	srli	a0,a0,0x10
23003a00:	07f57513          	andi	a0,a0,127
            if (tmpVal == GLB_DAC_CLK_AUDIO_PLL) {
23003a04:	16f70e63          	beq	a4,a5,23003b80 <peripheral_clock_get+0x1b6>
                return system_clock_get(SYSTEM_CLOCK_AUPLL) / div;
            } else if (tmpVal == GLB_DAC_CLK_XCLK) {
23003a08:	4785                	li	a5,1
23003a0a:	0af71763          	bne	a4,a5,23003ab8 <peripheral_clock_get+0xee>
                return system_clock_get(SYSTEM_CLOCK_XCLK) / div;
23003a0e:	01e857b7          	lui	a5,0x1e85
23003a12:	80078793          	addi	a5,a5,-2048 # 1e84800 <StackSize+0x1e83800>
23003a16:	02a7d533          	divu	a0,a5,a0
23003a1a:	a209                	j	23003b1c <peripheral_clock_get+0x152>
    switch (type) {
23003a1c:	47a5                	li	a5,9
23003a1e:	1ef50463          	beq	a0,a5,23003c06 <peripheral_clock_get+0x23c>
23003a22:	08a7f563          	bgeu	a5,a0,23003aac <peripheral_clock_get+0xe2>
23003a26:	47a9                	li	a5,10
23003a28:	0ef51963          	bne	a0,a5,23003b1a <peripheral_clock_get+0x150>
                return system_clock_get(SYSTEM_CLOCK_XCLK) / (div + 1);
            }
#endif
#if defined(BSP_USING_WDT)
        case PERIPHERAL_CLOCK_WDT:
            tmpVal = BL_RD_REG(TIMER_BASE, TIMER_TCCR);
23003a2c:	4000a7b7          	lui	a5,0x4000a
23003a30:	5007a483          	lw	s1,1280(a5) # 4000a500 <__dtcm_load_addr+0x1cffc584>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_WDT);

            div = BL_RD_REG(TIMER_BASE, TIMER_TCDR);
23003a34:	5bc7a503          	lw	a0,1468(a5)
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_WDT);
23003a38:	80a1                	srli	s1,s1,0x8
            div = BL_GET_REG_BITS_VAL(div, TIMER_WCDR);
23003a3a:	8161                	srli	a0,a0,0x18
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_WDT);
23003a3c:	888d                	andi	s1,s1,3
            if (tmpVal == TIMER_CLKSRC_FCLK) {
                return system_clock_get(SYSTEM_CLOCK_FCLK) / (div + 1);
23003a3e:	00150413          	addi	s0,a0,1
            if (tmpVal == TIMER_CLKSRC_FCLK) {
23003a42:	c8c9                	beqz	s1,23003ad4 <peripheral_clock_get+0x10a>
            } else if (tmpVal == TIMER_CLKSRC_32K) {
23003a44:	4785                	li	a5,1
23003a46:	1af48a63          	beq	s1,a5,23003bfa <peripheral_clock_get+0x230>
                return system_clock_get(SYSTEM_CLOCK_32K_CLK) / (div + 1);
            } else if (tmpVal == TIMER_CLKSRC_1K) {
23003a4a:	4789                	li	a5,2
23003a4c:	0cf48e63          	beq	s1,a5,23003b28 <peripheral_clock_get+0x15e>
        case PERIPHERAL_CLOCK_PWM:
            tmpVal = BL_RD_REG(PWM_BASE + PWM_CHANNEL_OFFSET, PWM_CONFIG);
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, PWM_REG_CLK_SEL);
            div = BL_RD_REG(PWM_BASE + PWM_CHANNEL_OFFSET, PWM_CLKDIV);
            if (tmpVal == PWM_CLK_XCLK) {
                return system_clock_get(SYSTEM_CLOCK_XCLK) / div;
23003a50:	01e85537          	lui	a0,0x1e85
23003a54:	80050513          	addi	a0,a0,-2048 # 1e84800 <StackSize+0x1e83800>
23003a58:	02855533          	divu	a0,a0,s0
    }

    (void)(tmpVal);
    (void)(div);
    return 0;
}
23003a5c:	40b2                	lw	ra,12(sp)
23003a5e:	4422                	lw	s0,8(sp)
23003a60:	4492                	lw	s1,4(sp)
23003a62:	4902                	lw	s2,0(sp)
23003a64:	0141                	addi	sp,sp,16
23003a66:	8082                	ret
    switch (type) {
23003a68:	1a050f63          	beqz	a0,23003c26 <peripheral_clock_get+0x25c>
23003a6c:	4785                	li	a5,1
23003a6e:	0af51663          	bne	a0,a5,23003b1a <peripheral_clock_get+0x150>
            tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
23003a72:	40000937          	lui	s2,0x40000
23003a76:	00c92483          	lw	s1,12(s2) # 4000000c <__dtcm_load_addr+0x1cff2090>
            div = BL_GET_REG_BITS_VAL(tmpVal, GLB_SPI_CLK_DIV);
23003a7a:	88fd                	andi	s1,s1,31
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003a7c:	1f011097          	auipc	ra,0x1f011
23003a80:	ef2080e7          	jalr	-270(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003a84:	c55d                	beqz	a0,23003b32 <peripheral_clock_get+0x168>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
23003a86:	1f011097          	auipc	ra,0x1f011
23003a8a:	ee8080e7          	jalr	-280(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003a8e:	0a850263          	beq	a0,s0,23003b32 <peripheral_clock_get+0x168>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
23003a92:	00092783          	lw	a5,0(s2)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003a96:	8391                	srli	a5,a5,0x4
23003a98:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003a9a:	1a078f63          	beqz	a5,23003c58 <peripheral_clock_get+0x28e>
                } else if (tmpVal == 1) {
23003a9e:	1e878963          	beq	a5,s0,23003c90 <peripheral_clock_get+0x2c6>
                } else if (tmpVal == 2) {
23003aa2:	4709                	li	a4,2
23003aa4:	12e78163          	beq	a5,a4,23003bc6 <peripheral_clock_get+0x1fc>
                    return 0;
23003aa8:	4401                	li	s0,0
23003aaa:	a841                	j	23003b3a <peripheral_clock_get+0x170>
    switch (type) {
23003aac:	4799                	li	a5,6
23003aae:	12f50663          	beq	a0,a5,23003bda <peripheral_clock_get+0x210>
23003ab2:	47a1                	li	a5,8
23003ab4:	06f51363          	bne	a0,a5,23003b1a <peripheral_clock_get+0x150>
            tmpVal = BL_RD_REG(TIMER_BASE, TIMER_TCCR);
23003ab8:	4000a7b7          	lui	a5,0x4000a
23003abc:	5007a483          	lw	s1,1280(a5) # 4000a500 <__dtcm_load_addr+0x1cffc584>
            div = BL_RD_REG(TIMER_BASE, TIMER_TCDR);
23003ac0:	5bc7a503          	lw	a0,1468(a5)
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_1);
23003ac4:	8089                	srli	s1,s1,0x2
            div = BL_GET_REG_BITS_VAL(div, TIMER_TCDR2);
23003ac6:	8121                	srli	a0,a0,0x8
23003ac8:	0ff57513          	zext.b	a0,a0
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_1);
23003acc:	888d                	andi	s1,s1,3
                return system_clock_get(SYSTEM_CLOCK_FCLK) / (div + 1);
23003ace:	00150413          	addi	s0,a0,1
            if (tmpVal == TIMER_CLKSRC_FCLK) {
23003ad2:	f8ad                	bnez	s1,23003a44 <peripheral_clock_get+0x7a>
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003ad4:	1f011097          	auipc	ra,0x1f011
23003ad8:	e9a080e7          	jalr	-358(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003adc:	16050963          	beqz	a0,23003c4e <peripheral_clock_get+0x284>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
23003ae0:	1f011097          	auipc	ra,0x1f011
23003ae4:	e8e080e7          	jalr	-370(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003ae8:	4705                	li	a4,1
23003aea:	16e50263          	beq	a0,a4,23003c4e <peripheral_clock_get+0x284>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
23003aee:	400007b7          	lui	a5,0x40000
23003af2:	439c                	lw	a5,0(a5)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003af4:	8391                	srli	a5,a5,0x4
23003af6:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003af8:	18078763          	beqz	a5,23003c86 <peripheral_clock_get+0x2bc>
                } else if (tmpVal == 1) {
23003afc:	1ae78963          	beq	a5,a4,23003cae <peripheral_clock_get+0x2e4>
                } else if (tmpVal == 2) {
23003b00:	4709                	li	a4,2
23003b02:	18e78c63          	beq	a5,a4,23003c9a <peripheral_clock_get+0x2d0>
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1);
23003b06:	1f011097          	auipc	ra,0x1f011
23003b0a:	e7c080e7          	jalr	-388(ra) # 42014982 <GLB_Get_HCLK_Div>
23003b0e:	0505                	addi	a0,a0,1
23003b10:	02a4d533          	divu	a0,s1,a0
                return system_clock_get(SYSTEM_CLOCK_FCLK) / (div + 1);
23003b14:	02855533          	divu	a0,a0,s0
23003b18:	a011                	j	23003b1c <peripheral_clock_get+0x152>
    switch (type) {
23003b1a:	4501                	li	a0,0
}
23003b1c:	40b2                	lw	ra,12(sp)
23003b1e:	4422                	lw	s0,8(sp)
23003b20:	4492                	lw	s1,4(sp)
23003b22:	4902                	lw	s2,0(sp)
23003b24:	0141                	addi	sp,sp,16
23003b26:	8082                	ret
                return 1000 / (div + 1);
23003b28:	3e800513          	li	a0,1000
23003b2c:	02855533          	divu	a0,a0,s0
23003b30:	b7f5                	j	23003b1c <peripheral_clock_get+0x152>
                return 32 * 1000 * 1000;
23003b32:	01e85437          	lui	s0,0x1e85
23003b36:	80040413          	addi	s0,s0,-2048 # 1e84800 <StackSize+0x1e83800>
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1) / (GLB_Get_BCLK_Div() + 1);
23003b3a:	1f011097          	auipc	ra,0x1f011
23003b3e:	e48080e7          	jalr	-440(ra) # 42014982 <GLB_Get_HCLK_Div>
23003b42:	0505                	addi	a0,a0,1
23003b44:	02a45433          	divu	s0,s0,a0
23003b48:	1f011097          	auipc	ra,0x1f011
23003b4c:	e30080e7          	jalr	-464(ra) # 42014978 <GLB_Get_BCLK_Div>
23003b50:	0505                	addi	a0,a0,1
}
23003b52:	40b2                	lw	ra,12(sp)
            return system_clock_get(SYSTEM_CLOCK_BCLK) / (div + 1);
23003b54:	0485                	addi	s1,s1,1
}
23003b56:	4902                	lw	s2,0(sp)
            return system_clock_get(SYSTEM_CLOCK_ROOT_CLOCK) / (GLB_Get_HCLK_Div() + 1) / (GLB_Get_BCLK_Div() + 1);
23003b58:	02a45533          	divu	a0,s0,a0
}
23003b5c:	4422                	lw	s0,8(sp)
            return system_clock_get(SYSTEM_CLOCK_BCLK) / (div + 1);
23003b5e:	02955533          	divu	a0,a0,s1
}
23003b62:	4492                	lw	s1,4(sp)
23003b64:	0141                	addi	sp,sp,16
23003b66:	8082                	ret
            tmpVal = BL_RD_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL);
23003b68:	400007b7          	lui	a5,0x40000
23003b6c:	0a47a503          	lw	a0,164(a5) # 400000a4 <__dtcm_load_addr+0x1cff2128>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_GPADC_32M_CLK_SEL);
23003b70:	00755793          	srli	a5,a0,0x7
23003b74:	8b85                	andi	a5,a5,1
            div = BL_GET_REG_BITS_VAL(tmpVal, GLB_GPADC_32M_CLK_DIV);
23003b76:	03f57513          	andi	a0,a0,63
                return system_clock_get(SYSTEM_CLOCK_AUPLL) / (div + 1);
23003b7a:	0505                	addi	a0,a0,1
            if (tmpVal == GLB_ADC_CLK_AUDIO_PLL) {
23003b7c:	e80799e3          	bnez	a5,23003a0e <peripheral_clock_get+0x44>
                return system_clock_get(SYSTEM_CLOCK_AUPLL) / div;
23003b80:	016e37b7          	lui	a5,0x16e3
23003b84:	60078793          	addi	a5,a5,1536 # 16e3600 <StackSize+0x16e2600>
23003b88:	02a7d533          	divu	a0,a5,a0
23003b8c:	bf41                	j	23003b1c <peripheral_clock_get+0x152>
            tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
23003b8e:	40000937          	lui	s2,0x40000
23003b92:	00c92483          	lw	s1,12(s2) # 4000000c <__dtcm_load_addr+0x1cff2090>
            div = BL_GET_REG_BITS_VAL(tmpVal, GLB_I2C_CLK_DIV);
23003b96:	80c1                	srli	s1,s1,0x10
23003b98:	0ff4f493          	zext.b	s1,s1
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003b9c:	1f011097          	auipc	ra,0x1f011
23003ba0:	dd2080e7          	jalr	-558(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003ba4:	d559                	beqz	a0,23003b32 <peripheral_clock_get+0x168>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
23003ba6:	1f011097          	auipc	ra,0x1f011
23003baa:	dc8080e7          	jalr	-568(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003bae:	4705                	li	a4,1
23003bb0:	f8e501e3          	beq	a0,a4,23003b32 <peripheral_clock_get+0x168>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
23003bb4:	00092783          	lw	a5,0(s2)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003bb8:	8391                	srli	a5,a5,0x4
23003bba:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003bbc:	cfd1                	beqz	a5,23003c58 <peripheral_clock_get+0x28e>
                } else if (tmpVal == 1) {
23003bbe:	0ce78963          	beq	a5,a4,23003c90 <peripheral_clock_get+0x2c6>
                } else if (tmpVal == 2) {
23003bc2:	ee8793e3          	bne	a5,s0,23003aa8 <peripheral_clock_get+0xde>
                    return 144 * 1000 * 1000;
23003bc6:	08954437          	lui	s0,0x8954
23003bca:	40040413          	addi	s0,s0,1024 # 8954400 <StackSize+0x8953400>
23003bce:	b7b5                	j	23003b3a <peripheral_clock_get+0x170>
            return system_clock_get(SYSTEM_CLOCK_AUPLL);
23003bd0:	016e3537          	lui	a0,0x16e3
23003bd4:	60050513          	addi	a0,a0,1536 # 16e3600 <StackSize+0x16e2600>
}
23003bd8:	8082                	ret
            tmpVal = BL_RD_REG(PWM_BASE + PWM_CHANNEL_OFFSET, PWM_CONFIG);
23003bda:	4000a737          	lui	a4,0x4000a
23003bde:	43072783          	lw	a5,1072(a4) # 4000a430 <__dtcm_load_addr+0x1cffc4b4>
            div = BL_RD_REG(PWM_BASE + PWM_CHANNEL_OFFSET, PWM_CLKDIV);
23003be2:	42072403          	lw	s0,1056(a4)
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, PWM_REG_CLK_SEL);
23003be6:	8b8d                	andi	a5,a5,3
            if (tmpVal == PWM_CLK_XCLK) {
23003be8:	e60784e3          	beqz	a5,23003a50 <peripheral_clock_get+0x86>
            } else if (tmpVal == PWM_CLK_BCLK) {
23003bec:	4705                	li	a4,1
23003bee:	0ae78b63          	beq	a5,a4,23003ca4 <peripheral_clock_get+0x2da>
            } else if (tmpVal == PWM_CLK_32K) {
23003bf2:	4709                	li	a4,2
    return 0;
23003bf4:	4501                	li	a0,0
            } else if (tmpVal == PWM_CLK_32K) {
23003bf6:	f2e793e3          	bne	a5,a4,23003b1c <peripheral_clock_get+0x152>
                return system_clock_get(SYSTEM_CLOCK_32K_CLK) / div;
23003bfa:	6521                	lui	a0,0x8
23003bfc:	d0050513          	addi	a0,a0,-768 # 7d00 <StackSize+0x6d00>
23003c00:	02855533          	divu	a0,a0,s0
23003c04:	bf21                	j	23003b1c <peripheral_clock_get+0x152>
            tmpVal = BL_RD_REG(TIMER_BASE, TIMER_TCCR);
23003c06:	4000a7b7          	lui	a5,0x4000a
23003c0a:	5007a483          	lw	s1,1280(a5) # 4000a500 <__dtcm_load_addr+0x1cffc584>
            div = BL_RD_REG(TIMER_BASE, TIMER_TCDR);
23003c0e:	5bc7a503          	lw	a0,1468(a5)
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_2);
23003c12:	8095                	srli	s1,s1,0x5
            div = BL_GET_REG_BITS_VAL(div, TIMER_TCDR3);
23003c14:	8141                	srli	a0,a0,0x10
23003c16:	0ff57513          	zext.b	a0,a0
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, TIMER_CS_2);
23003c1a:	888d                	andi	s1,s1,3
                return system_clock_get(SYSTEM_CLOCK_FCLK) / (div + 1);
23003c1c:	00150413          	addi	s0,a0,1
            if (tmpVal == TIMER_CLKSRC_FCLK) {
23003c20:	e20492e3          	bnez	s1,23003a44 <peripheral_clock_get+0x7a>
23003c24:	bd45                	j	23003ad4 <peripheral_clock_get+0x10a>
            tmpVal = BL_RD_REG(HBN_BASE, HBN_GLB);
23003c26:	4000f7b7          	lui	a5,0x4000f
23003c2a:	5b84                	lw	s1,48(a5)
            div = BL_RD_REG(GLB_BASE, GLB_CLK_CFG2);
23003c2c:	40000937          	lui	s2,0x40000
23003c30:	00892503          	lw	a0,8(s2) # 40000008 <__dtcm_load_addr+0x1cff208c>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, HBN_UART_CLK_SEL);
23003c34:	8089                	srli	s1,s1,0x2
23003c36:	8885                	andi	s1,s1,1
            div = BL_GET_REG_BITS_VAL(div, GLB_UART_CLK_DIV);
23003c38:	891d                	andi	a0,a0,7
                return system_clock_get(SYSTEM_CLOCK_FCLK) / (div + 1);
23003c3a:	00150413          	addi	s0,a0,1
            if (tmpVal == HBN_UART_CLK_FCLK) {
23003c3e:	c095                	beqz	s1,23003c62 <peripheral_clock_get+0x298>
                return 96000000 / (div + 1);
23003c40:	05b8e537          	lui	a0,0x5b8e
23003c44:	80050513          	addi	a0,a0,-2048 # 5b8d800 <StackSize+0x5b8c800>
23003c48:	02855533          	divu	a0,a0,s0
23003c4c:	bdc1                	j	23003b1c <peripheral_clock_get+0x152>
                return 32 * 1000 * 1000;
23003c4e:	01e854b7          	lui	s1,0x1e85
23003c52:	80048493          	addi	s1,s1,-2048 # 1e84800 <StackSize+0x1e83800>
23003c56:	bd45                	j	23003b06 <peripheral_clock_get+0x13c>
                    return 57.6 * 1000 * 1000;
23003c58:	036ef437          	lui	s0,0x36ef
23003c5c:	80040413          	addi	s0,s0,-2048 # 36ee800 <StackSize+0x36ed800>
23003c60:	bde9                	j	23003b3a <peripheral_clock_get+0x170>
            if (GLB_Get_Root_CLK_Sel() == 0) {
23003c62:	1f011097          	auipc	ra,0x1f011
23003c66:	d0c080e7          	jalr	-756(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003c6a:	d175                	beqz	a0,23003c4e <peripheral_clock_get+0x284>
            } else if (GLB_Get_Root_CLK_Sel() == 1)
23003c6c:	1f011097          	auipc	ra,0x1f011
23003c70:	d02080e7          	jalr	-766(ra) # 4201496e <GLB_Get_Root_CLK_Sel>
23003c74:	4705                	li	a4,1
23003c76:	fce50ce3          	beq	a0,a4,23003c4e <peripheral_clock_get+0x284>
                uint32_t tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
23003c7a:	00092783          	lw	a5,0(s2)
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, GLB_REG_PLL_SEL);
23003c7e:	8391                	srli	a5,a5,0x4
23003c80:	8b8d                	andi	a5,a5,3
                if (tmpVal == 0) {
23003c82:	e6079de3          	bnez	a5,23003afc <peripheral_clock_get+0x132>
                    return 57.6 * 1000 * 1000;
23003c86:	036ef4b7          	lui	s1,0x36ef
23003c8a:	80048493          	addi	s1,s1,-2048 # 36ee800 <StackSize+0x36ed800>
23003c8e:	bda5                	j	23003b06 <peripheral_clock_get+0x13c>
                    return 96 * 1000 * 1000;
23003c90:	05b8e437          	lui	s0,0x5b8e
23003c94:	80040413          	addi	s0,s0,-2048 # 5b8d800 <StackSize+0x5b8c800>
23003c98:	b54d                	j	23003b3a <peripheral_clock_get+0x170>
                    return 144 * 1000 * 1000;
23003c9a:	089544b7          	lui	s1,0x8954
23003c9e:	40048493          	addi	s1,s1,1024 # 8954400 <StackSize+0x8953400>
23003ca2:	b595                	j	23003b06 <peripheral_clock_get+0x13c>
                return system_clock_get(SYSTEM_CLOCK_BCLK) / div;
23003ca4:	4509                	li	a0,2
23003ca6:	3641                	jal	23003826 <system_clock_get>
23003ca8:	02855533          	divu	a0,a0,s0
23003cac:	bd85                	j	23003b1c <peripheral_clock_get+0x152>
                    return 96 * 1000 * 1000;
23003cae:	05b8e4b7          	lui	s1,0x5b8e
23003cb2:	80048493          	addi	s1,s1,-2048 # 5b8d800 <StackSize+0x5b8c800>
23003cb6:	bd81                	j	23003b06 <peripheral_clock_get+0x13c>

23003cb8 <flash_get_jedecid>:
 */
uint32_t flash_get_jedecid(void)
{
    uint32_t jid = 0;

    jid = ((g_jedec_id&0xff)<<16) + (g_jedec_id&0xff00) + ((g_jedec_id&0xff0000)>>16);
23003cb8:	1181a503          	lw	a0,280(gp) # 42016918 <g_jedec_id>
23003cbc:	00ff0737          	lui	a4,0xff0
23003cc0:	01051793          	slli	a5,a0,0x10
23003cc4:	8ff9                	and	a5,a5,a4
23003cc6:	6741                	lui	a4,0x10
23003cc8:	f0070713          	addi	a4,a4,-256 # ff00 <StackSize+0xef00>
23003ccc:	8f69                	and	a4,a4,a0
23003cce:	8141                	srli	a0,a0,0x10
23003cd0:	8fd9                	or	a5,a5,a4
23003cd2:	0ff57513          	zext.b	a0,a0
    return jid;
}
23003cd6:	953e                	add	a0,a0,a5
23003cd8:	8082                	ret

23003cda <flash_get_cfg>:
 *
 * @return BL_Err_Type
 */
BL_Err_Type flash_get_cfg(uint8_t **cfg_addr, uint32_t *len)
{
    *cfg_addr = (uint8_t *)&g_flash_cfg;
23003cda:	aac18793          	addi	a5,gp,-1364 # 420162ac <g_flash_cfg>
23003cde:	c11c                	sw	a5,0(a0)
    *len = sizeof(SPI_Flash_Cfg_Type);
23003ce0:	05400793          	li	a5,84
23003ce4:	c19c                	sw	a5,0(a1)

    return SUCCESS;
}
23003ce6:	4501                	li	a0,0
23003ce8:	8082                	ret

23003cea <gpio_set_mode>:
 *
 * @param pin
 * @param mode
 */
void gpio_set_mode(uint32_t pin, uint32_t mode)
{
23003cea:	1101                	addi	sp,sp,-32
    GLB_GPIO_Cfg_Type gpio_cfg;

    gpio_cfg.gpioFun = GPIO_FUN_GPIO;
23003cec:	47ad                	li	a5,11
{
23003cee:	ca26                	sw	s1,20(sp)
    gpio_cfg.gpioPin = pin;
    gpio_cfg.drive = 0;
23003cf0:	10000713          	li	a4,256
    gpio_cfg.gpioPin = pin;
23003cf4:	0ff57493          	zext.b	s1,a0
    gpio_cfg.gpioFun = GPIO_FUN_GPIO;
23003cf8:	00f104a3          	sb	a5,9(sp)
{
23003cfc:	ce06                	sw	ra,28(sp)
23003cfe:	cc22                	sw	s0,24(sp)
    gpio_cfg.gpioPin = pin;
23003d00:	00910423          	sb	s1,8(sp)
    gpio_cfg.drive = 0;
23003d04:	00e11623          	sh	a4,12(sp)
    gpio_cfg.smtCtrl = 1;

    switch (mode) {
23003d08:	478d                	li	a5,3
23003d0a:	08f58363          	beq	a1,a5,23003d90 <gpio_set_mode+0xa6>
23003d0e:	842e                	mv	s0,a1
23003d10:	02b7ec63          	bltu	a5,a1,23003d48 <gpio_set_mode+0x5e>
23003d14:	4785                	li	a5,1
23003d16:	06f58763          	beq	a1,a5,23003d84 <gpio_set_mode+0x9a>
23003d1a:	4789                	li	a5,2
23003d1c:	02f59063          	bne	a1,a5,23003d3c <gpio_set_mode+0x52>
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
            gpio_cfg.pullType = GPIO_PULL_UP;
            break;

        case GPIO_OUTPUT_PD_MODE:
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
23003d20:	10100793          	li	a5,257
23003d24:	00f11523          	sh	a5,10(sp)
            }

            break;
    }

    GLB_GPIO_Init(&gpio_cfg);
23003d28:	0028                	addi	a0,sp,8
23003d2a:	1f010097          	auipc	ra,0x1f010
23003d2e:	3f2080e7          	jalr	1010(ra) # 4201411c <GLB_GPIO_Init>
}
23003d32:	40f2                	lw	ra,28(sp)
23003d34:	4462                	lw	s0,24(sp)
23003d36:	44d2                	lw	s1,20(sp)
23003d38:	6105                	addi	sp,sp,32
23003d3a:	8082                	ret
    switch (mode) {
23003d3c:	e18d                	bnez	a1,23003d5e <gpio_set_mode+0x74>
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
23003d3e:	20100793          	li	a5,513
23003d42:	00f11523          	sh	a5,10(sp)
            break;
23003d46:	b7cd                	j	23003d28 <gpio_set_mode+0x3e>
    switch (mode) {
23003d48:	4795                	li	a5,5
23003d4a:	04f58063          	beq	a1,a5,23003d8a <gpio_set_mode+0xa0>
23003d4e:	47b9                	li	a5,14
23003d50:	02f59463          	bne	a1,a5,23003d78 <gpio_set_mode+0x8e>
            GLB_GPIO_Set_HZ(pin);
23003d54:	8526                	mv	a0,s1
23003d56:	1f010097          	auipc	ra,0x1f010
23003d5a:	5ee080e7          	jalr	1518(ra) # 42014344 <GLB_GPIO_Set_HZ>
            CPU_Interrupt_Disable(GPIO_INT0_IRQn);
23003d5e:	03c00513          	li	a0,60
23003d62:	0c3010ef          	jal	ra,23005624 <clic_disable_interrupt>
            GLB_GPIO_IntMask(pin, MASK);
23003d66:	8526                	mv	a0,s1
23003d68:	4585                	li	a1,1
23003d6a:	407010ef          	jal	ra,23005970 <GLB_GPIO_IntMask>
}
23003d6e:	40f2                	lw	ra,28(sp)
23003d70:	4462                	lw	s0,24(sp)
23003d72:	44d2                	lw	s1,20(sp)
23003d74:	6105                	addi	sp,sp,32
23003d76:	8082                	ret
    switch (mode) {
23003d78:	4791                	li	a5,4
23003d7a:	02f59063          	bne	a1,a5,23003d9a <gpio_set_mode+0xb0>
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
23003d7e:	00011523          	sh	zero,10(sp)
            break;
23003d82:	b75d                	j	23003d28 <gpio_set_mode+0x3e>
            gpio_cfg.gpioMode = GPIO_MODE_OUTPUT;
23003d84:	00b11523          	sh	a1,10(sp)
            break;
23003d88:	b745                	j	23003d28 <gpio_set_mode+0x3e>
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
23003d8a:	00e11523          	sh	a4,10(sp)
            break;
23003d8e:	bf69                	j	23003d28 <gpio_set_mode+0x3e>
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
23003d90:	20000793          	li	a5,512
23003d94:	00f11523          	sh	a5,10(sp)
            break;
23003d98:	bf41                	j	23003d28 <gpio_set_mode+0x3e>
            CPU_Interrupt_Disable(GPIO_INT0_IRQn);
23003d9a:	03c00513          	li	a0,60
23003d9e:	087010ef          	jal	ra,23005624 <clic_disable_interrupt>
            GLB_GPIO_IntMask(pin, MASK);
23003da2:	4585                	li	a1,1
23003da4:	8526                	mv	a0,s1
23003da6:	3cb010ef          	jal	ra,23005970 <GLB_GPIO_IntMask>
            if (mode == GPIO_ASYNC_RISING_TRIGER_INT_MODE) {
23003daa:	4799                	li	a5,6
            gpio_cfg.gpioMode = GPIO_MODE_INPUT;
23003dac:	00010523          	sb	zero,10(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_PULSE);
23003db0:	4605                	li	a2,1
            if (mode == GPIO_ASYNC_RISING_TRIGER_INT_MODE) {
23003db2:	04f40163          	beq	s0,a5,23003df4 <gpio_set_mode+0x10a>
            else if (mode == GPIO_ASYNC_FALLING_TRIGER_INT_MODE) {
23003db6:	479d                	li	a5,7
23003db8:	04f40f63          	beq	s0,a5,23003e16 <gpio_set_mode+0x12c>
            else if (mode == GPIO_ASYNC_HIGH_LEVEL_INT_MODE) {
23003dbc:	47a1                	li	a5,8
23003dbe:	02f40a63          	beq	s0,a5,23003df2 <gpio_set_mode+0x108>
            else if (mode == GPIO_ASYNC_LOW_LEVEL_INT_MODE) {
23003dc2:	47a5                	li	a5,9
23003dc4:	06f40163          	beq	s0,a5,23003e26 <gpio_set_mode+0x13c>
            else if (mode == GPIO_SYNC_RISING_TRIGER_INT_MODE) {
23003dc8:	47a9                	li	a5,10
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_POS_PULSE);
23003dca:	4605                	li	a2,1
            else if (mode == GPIO_SYNC_RISING_TRIGER_INT_MODE) {
23003dcc:	02f40d63          	beq	s0,a5,23003e06 <gpio_set_mode+0x11c>
            else if (mode == GPIO_SYNC_FALLING_TRIGER_INT_MODE) {
23003dd0:	47ad                	li	a5,11
23003dd2:	06f40263          	beq	s0,a5,23003e36 <gpio_set_mode+0x14c>
            else if (mode == GPIO_SYNC_HIGH_LEVEL_INT_MODE) {
23003dd6:	47b1                	li	a5,12
23003dd8:	02f40663          	beq	s0,a5,23003e04 <gpio_set_mode+0x11a>
            else if (mode == GPIO_SYNC_LOW_LEVEL_INT_MODE) {
23003ddc:	47b5                	li	a5,13
23003dde:	f4f41ae3          	bne	s0,a5,23003d32 <gpio_set_mode+0x48>
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
23003de2:	4609                	li	a2,2
23003de4:	4581                	li	a1,0
23003de6:	8526                	mv	a0,s1
                gpio_cfg.pullType = GPIO_PULL_UP;
23003de8:	000105a3          	sb	zero,11(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
23003dec:	3b5010ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003df0:	bf25                	j	23003d28 <gpio_set_mode+0x3e>
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
23003df2:	460d                	li	a2,3
                gpio_cfg.pullType = GPIO_PULL_DOWN;
23003df4:	4785                	li	a5,1
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
23003df6:	4585                	li	a1,1
23003df8:	8526                	mv	a0,s1
                gpio_cfg.pullType = GPIO_PULL_DOWN;
23003dfa:	00f105a3          	sb	a5,11(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
23003dfe:	3a3010ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003e02:	b71d                	j	23003d28 <gpio_set_mode+0x3e>
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
23003e04:	460d                	li	a2,3
                gpio_cfg.pullType = GPIO_PULL_DOWN;
23003e06:	4785                	li	a5,1
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
23003e08:	4581                	li	a1,0
23003e0a:	8526                	mv	a0,s1
                gpio_cfg.pullType = GPIO_PULL_DOWN;
23003e0c:	00f105a3          	sb	a5,11(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_POS_LEVEL);
23003e10:	391010ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003e14:	bf11                	j	23003d28 <gpio_set_mode+0x3e>
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_PULSE);
23003e16:	4601                	li	a2,0
23003e18:	4585                	li	a1,1
23003e1a:	8526                	mv	a0,s1
                gpio_cfg.pullType = GPIO_PULL_UP;
23003e1c:	000105a3          	sb	zero,11(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_PULSE);
23003e20:	381010ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003e24:	b711                	j	23003d28 <gpio_set_mode+0x3e>
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
23003e26:	4609                	li	a2,2
23003e28:	4585                	li	a1,1
23003e2a:	8526                	mv	a0,s1
                gpio_cfg.pullType = GPIO_PULL_UP;
23003e2c:	000105a3          	sb	zero,11(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_ASYNC, GLB_GPIO_INT_TRIG_NEG_LEVEL);
23003e30:	371010ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003e34:	bdd5                	j	23003d28 <gpio_set_mode+0x3e>
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_NEG_PULSE);
23003e36:	4601                	li	a2,0
23003e38:	4581                	li	a1,0
23003e3a:	8526                	mv	a0,s1
                gpio_cfg.pullType = GPIO_PULL_UP;
23003e3c:	000105a3          	sb	zero,11(sp)
                GLB_Set_GPIO_IntMod(pin, GLB_GPIO_INT_CONTROL_SYNC, GLB_GPIO_INT_TRIG_NEG_PULSE);
23003e40:	361010ef          	jal	ra,230059a0 <GLB_Set_GPIO_IntMod>
23003e44:	b5d5                	j	23003d28 <gpio_set_mode+0x3e>

23003e46 <gpio_write>:
 * @param pin
 * @param value
 */
void gpio_write(uint32_t pin, uint32_t value)
{
    uint32_t tmp = BL_RD_REG(GLB_BASE, GLB_GPIO_OUTPUT);
23003e46:	400007b7          	lui	a5,0x40000
23003e4a:	1887a703          	lw	a4,392(a5) # 40000188 <__dtcm_load_addr+0x1cff220c>

    if (value)
        tmp |= (1 << pin);
23003e4e:	4785                	li	a5,1
23003e50:	00a797b3          	sll	a5,a5,a0
    if (value)
23003e54:	c599                	beqz	a1,23003e62 <gpio_write+0x1c>
        tmp |= (1 << pin);
23003e56:	8fd9                	or	a5,a5,a4
    else
        tmp &= ~(1 << pin);

    BL_WR_REG(GLB_BASE, GLB_GPIO_OUTPUT, tmp);
23003e58:	40000737          	lui	a4,0x40000
23003e5c:	18f72423          	sw	a5,392(a4) # 40000188 <__dtcm_load_addr+0x1cff220c>
}
23003e60:	8082                	ret
        tmp &= ~(1 << pin);
23003e62:	fff7c793          	not	a5,a5
23003e66:	8ff9                	and	a5,a5,a4
    BL_WR_REG(GLB_BASE, GLB_GPIO_OUTPUT, tmp);
23003e68:	40000737          	lui	a4,0x40000
23003e6c:	18f72423          	sw	a5,392(a4) # 40000188 <__dtcm_load_addr+0x1cff220c>
}
23003e70:	8082                	ret

23003e72 <mtimer_delay_ms>:
 * @brief
 *
 * @param time
 */
void mtimer_delay_ms(uint32_t time)
{
23003e72:	7179                	addi	sp,sp,-48
    uint64_t cnt = 0;
    uint32_t clock = SystemCoreClockGet();
23003e74:	4000f7b7          	lui	a5,0x4000f
{
23003e78:	cc52                	sw	s4,24(sp)
23003e7a:	ca56                	sw	s5,20(sp)
    uint32_t clock = SystemCoreClockGet();
23003e7c:	1087aa03          	lw	s4,264(a5) # 4000f108 <__dtcm_load_addr+0x1d00118c>
{
23003e80:	d606                	sw	ra,44(sp)
23003e82:	d422                	sw	s0,40(sp)
23003e84:	d226                	sw	s1,36(sp)
23003e86:	d04a                	sw	s2,32(sp)
23003e88:	ce4e                	sw	s3,28(sp)
23003e8a:	c85a                	sw	s6,16(sp)
23003e8c:	c65e                	sw	s7,12(sp)
23003e8e:	8aaa                	mv	s5,a0
        tmpValLow = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME);
23003e90:	0200c7b7          	lui	a5,0x200c
23003e94:	ff87a503          	lw	a0,-8(a5) # 200bff8 <StackSize+0x200aff8>
        tmpValHigh = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME + 4);
23003e98:	ffc7a583          	lw	a1,-4(a5)
        tmpValHigh1 = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME + 4);
23003e9c:	ffc7a703          	lw	a4,-4(a5)
    } while (tmpValHigh != tmpValHigh1);
23003ea0:	fee59ae3          	bne	a1,a4,23003e94 <mtimer_delay_ms+0x22>

    while (mtimer_get_time_ms() - startTime < time) {
        cnt++;

        /* assume BFLB_BSP_Get_Time_Ms take 32 cycles*/
        if (cnt > (time * (clock >> (10 + 5))) * 2) {
23003ea4:	00fa5a13          	srli	s4,s4,0xf
23003ea8:	035a0a33          	mul	s4,s4,s5
    return mtimer_get_time_us() / 1000;
23003eac:	3e800613          	li	a2,1000
23003eb0:	4681                	li	a3,0
23003eb2:	cb6fc0ef          	jal	ra,23000368 <__udivdi3>
23003eb6:	892a                	mv	s2,a0
23003eb8:	84ae                	mv	s1,a1
    while (mtimer_get_time_ms() - startTime < time) {
23003eba:	4981                	li	s3,0
    uint64_t cnt = 0;
23003ebc:	4b01                	li	s6,0
23003ebe:	4b81                	li	s7,0
        tmpValLow = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME);
23003ec0:	0200c437          	lui	s0,0x200c
        if (cnt > (time * (clock >> (10 + 5))) * 2) {
23003ec4:	0a06                	slli	s4,s4,0x1
        tmpValLow = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME);
23003ec6:	ff842503          	lw	a0,-8(s0) # 200bff8 <StackSize+0x200aff8>
        tmpValHigh = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME + 4);
23003eca:	ffc42583          	lw	a1,-4(s0)
        tmpValHigh1 = *(volatile uint32_t *)(CLIC_CTRL_ADDR + CLIC_MTIME + 4);
23003ece:	ffc42783          	lw	a5,-4(s0)
    } while (tmpValHigh != tmpValHigh1);
23003ed2:	fef59ae3          	bne	a1,a5,23003ec6 <mtimer_delay_ms+0x54>
    return mtimer_get_time_us() / 1000;
23003ed6:	3e800613          	li	a2,1000
23003eda:	4681                	li	a3,0
23003edc:	c8cfc0ef          	jal	ra,23000368 <__udivdi3>
    while (mtimer_get_time_ms() - startTime < time) {
23003ee0:	41250733          	sub	a4,a0,s2
        cnt++;
23003ee4:	001b0793          	addi	a5,s6,1
    while (mtimer_get_time_ms() - startTime < time) {
23003ee8:	00e53533          	sltu	a0,a0,a4
23003eec:	8d85                	sub	a1,a1,s1
        cnt++;
23003eee:	0167bb33          	sltu	s6,a5,s6
    while (mtimer_get_time_ms() - startTime < time) {
23003ef2:	40a58533          	sub	a0,a1,a0
        cnt++;
23003ef6:	9bda                	add	s7,s7,s6
    while (mtimer_get_time_ms() - startTime < time) {
23003ef8:	00a99963          	bne	s3,a0,23003f0a <mtimer_delay_ms+0x98>
23003efc:	01577763          	bgeu	a4,s5,23003f0a <mtimer_delay_ms+0x98>
        cnt++;
23003f00:	8b3e                	mv	s6,a5
        if (cnt > (time * (clock >> (10 + 5))) * 2) {
23003f02:	000b9463          	bnez	s7,23003f0a <mtimer_delay_ms+0x98>
23003f06:	fcfa70e3          	bgeu	s4,a5,23003ec6 <mtimer_delay_ms+0x54>
            break;
        }
    }
}
23003f0a:	50b2                	lw	ra,44(sp)
23003f0c:	5422                	lw	s0,40(sp)
23003f0e:	5492                	lw	s1,36(sp)
23003f10:	5902                	lw	s2,32(sp)
23003f12:	49f2                	lw	s3,28(sp)
23003f14:	4a62                	lw	s4,24(sp)
23003f16:	4ad2                	lw	s5,20(sp)
23003f18:	4b42                	lw	s6,16(sp)
23003f1a:	4bb2                	lw	s7,12(sp)
23003f1c:	6145                	addi	sp,sp,48
23003f1e:	8082                	ret

23003f20 <uart_open>:
 * @param dev
 * @param oflag
 * @return int
 */
int uart_open(struct device *dev, uint16_t oflag)
{
23003f20:	7179                	addi	sp,sp,-48
23003f22:	d606                	sw	ra,44(sp)
23003f24:	d422                	sw	s0,40(sp)
23003f26:	d226                	sw	s1,36(sp)
23003f28:	842a                	mv	s0,a0
    uart_device_t *uart_device = (uart_device_t *)dev;
    UART_FifoCfg_Type fifoCfg = { 0 };
    UART_CFG_Type uart_cfg = { 0 };

    /* disable all interrupt */
    UART_IntMask(uart_device->id, UART_INT_ALL, MASK);
23003f2a:	03c54503          	lbu	a0,60(a0)
23003f2e:	4605                	li	a2,1
{
23003f30:	84ae                	mv	s1,a1
    UART_IntMask(uart_device->id, UART_INT_ALL, MASK);
23003f32:	45a5                	li	a1,9
    UART_FifoCfg_Type fifoCfg = { 0 };
23003f34:	c402                	sw	zero,8(sp)
    UART_CFG_Type uart_cfg = { 0 };
23003f36:	c602                	sw	zero,12(sp)
23003f38:	c802                	sw	zero,16(sp)
23003f3a:	ca02                	sw	zero,20(sp)
23003f3c:	cc02                	sw	zero,24(sp)
23003f3e:	ce02                	sw	zero,28(sp)
    UART_IntMask(uart_device->id, UART_INT_ALL, MASK);
23003f40:	659010ef          	jal	ra,23005d98 <UART_IntMask>
    /* disable uart before config */
    UART_Disable(uart_device->id, UART_TXRX);
23003f44:	03c44503          	lbu	a0,60(s0)
23003f48:	4589                	li	a1,2
23003f4a:	571010ef          	jal	ra,23005cba <UART_Disable>

    uint32_t uart_clk = peripheral_clock_get(PERIPHERAL_CLOCK_UART);
23003f4e:	4501                	li	a0,0
23003f50:	a7bff0ef          	jal	ra,230039ca <peripheral_clock_get>
    uart_cfg.baudRate = uart_device->baudrate;
    uart_cfg.dataBits = uart_device->databits;
    uart_cfg.stopBits = uart_device->stopbits;
    uart_cfg.parity = uart_device->parity;
23003f54:	04644703          	lbu	a4,70(s0)
    uart_cfg.baudRate = uart_device->baudrate;
23003f58:	4030                	lw	a2,64(s0)
    uart_cfg.dataBits = uart_device->databits;
23003f5a:	04445683          	lhu	a3,68(s0)
    uint32_t uart_clk = peripheral_clock_get(PERIPHERAL_CLOCK_UART);
23003f5e:	87aa                	mv	a5,a0
    uart_cfg.rxLinMode = UART_RX_LINMODE_ENABLE;
    uart_cfg.txBreakBitCnt = UART_TX_BREAKBIT_CNT;
    uart_cfg.rxDeglitch = ENABLE;

    /* uart init with default configuration */
    UART_Init(uart_device->id, &uart_cfg);
23003f60:	03c44503          	lbu	a0,60(s0)
23003f64:	006c                	addi	a1,sp,12
    uart_cfg.uartClk = uart_clk;
23003f66:	c63e                	sw	a5,12(sp)
    uart_cfg.rxDeglitch = ENABLE;
23003f68:	4785                	li	a5,1
    uart_cfg.parity = uart_device->parity;
23003f6a:	00e10b23          	sb	a4,22(sp)
    uart_cfg.rxDeglitch = ENABLE;
23003f6e:	cc3e                	sw	a5,24(sp)
    uart_cfg.baudRate = uart_device->baudrate;
23003f70:	c832                	sw	a2,16(sp)
    uart_cfg.dataBits = uart_device->databits;
23003f72:	00d11a23          	sh	a3,20(sp)
    uart_cfg.ctsFlowControl = UART_CTS_FLOWCONTROL_ENABLE;
23003f76:	00010ba3          	sb	zero,23(sp)
    uart_cfg.rxLinMode = UART_RX_LINMODE_ENABLE;
23003f7a:	00011e23          	sh	zero,28(sp)
    uart_cfg.byteBitInverse = UART_MSB_FIRST_ENABLE;
23003f7e:	00010f23          	sb	zero,30(sp)
    UART_Init(uart_device->id, &uart_cfg);
23003f82:	37d010ef          	jal	ra,23005afe <UART_Init>

    /* Enable tx free run mode */
    UART_TxFreeRun(uart_device->id, ENABLE);
23003f86:	03c44503          	lbu	a0,60(s0)
23003f8a:	4585                	li	a1,1
23003f8c:	5a3010ef          	jal	ra,23005d2e <UART_TxFreeRun>
    /*set de-glitch function cycle count value*/
    UART_SetDeglitchCount(uart_device->id, 2);
23003f90:	03c44503          	lbu	a0,60(s0)
23003f94:	4589                	li	a1,2
23003f96:	577010ef          	jal	ra,23005d0c <UART_SetDeglitchCount>

    /* Set rx time-out value */
    UART_SetRxTimeoutValue(uart_device->id, UART_DEFAULT_RTO_TIMEOUT);
23003f9a:	03c44503          	lbu	a0,60(s0)
23003f9e:	06400593          	li	a1,100
23003fa2:	54b010ef          	jal	ra,23005cec <UART_SetRxTimeoutValue>

    fifoCfg.txFifoDmaThreshold = uart_device->fifo_threshold;
23003fa6:	04744783          	lbu	a5,71(s0)
    fifoCfg.txFifoDmaEnable = DISABLE;
23003faa:	00011523          	sh	zero,10(sp)
    fifoCfg.rxFifoDmaThreshold = uart_device->fifo_threshold;
    fifoCfg.rxFifoDmaEnable = DISABLE;

    if (oflag & DEVICE_OFLAG_STREAM_TX) {
    }
    if ((oflag & DEVICE_OFLAG_INT_TX) || (oflag & DEVICE_OFLAG_INT_RX)) {
23003fae:	00c4f713          	andi	a4,s1,12
    fifoCfg.txFifoDmaThreshold = uart_device->fifo_threshold;
23003fb2:	00f10423          	sb	a5,8(sp)
    fifoCfg.rxFifoDmaThreshold = uart_device->fifo_threshold;
23003fb6:	00f104a3          	sb	a5,9(sp)
#ifdef BSP_USING_UART0
        if (uart_device->id == UART0_ID)
23003fba:	03c44503          	lbu	a0,60(s0)
    if ((oflag & DEVICE_OFLAG_INT_TX) || (oflag & DEVICE_OFLAG_INT_RX)) {
23003fbe:	c709                	beqz	a4,23003fc8 <uart_open+0xa8>
        if (uart_device->id == UART0_ID)
23003fc0:	cd15                	beqz	a0,23003ffc <uart_open+0xdc>
            Interrupt_Handler_Register(UART0_IRQn, UART0_IRQ);
#endif
#ifdef BSP_USING_UART1
        if (uart_device->id == UART1_ID)
23003fc2:	4785                	li	a5,1
23003fc4:	04f50963          	beq	a0,a5,23004016 <uart_open+0xf6>
            Interrupt_Handler_Register(UART1_IRQn, UART1_IRQ);
#endif
    }
    if (oflag & DEVICE_OFLAG_DMA_TX) {
23003fc8:	0104f793          	andi	a5,s1,16
23003fcc:	c781                	beqz	a5,23003fd4 <uart_open+0xb4>
        fifoCfg.txFifoDmaEnable = ENABLE;
23003fce:	4785                	li	a5,1
23003fd0:	00f10523          	sb	a5,10(sp)
    }
    if (oflag & DEVICE_OFLAG_DMA_RX) {
23003fd4:	0204f493          	andi	s1,s1,32
23003fd8:	c481                	beqz	s1,23003fe0 <uart_open+0xc0>
        fifoCfg.rxFifoDmaEnable = ENABLE;
23003fda:	4785                	li	a5,1
23003fdc:	00f105a3          	sb	a5,11(sp)
    }

    UART_FifoConfig(uart_device->id, &fifoCfg);
23003fe0:	002c                	addi	a1,sp,8
23003fe2:	43b010ef          	jal	ra,23005c1c <UART_FifoConfig>
    /* enable uart */
    UART_Enable(uart_device->id, UART_TXRX);
23003fe6:	03c44503          	lbu	a0,60(s0)
23003fea:	4589                	li	a1,2
23003fec:	499010ef          	jal	ra,23005c84 <UART_Enable>
    return 0;
}
23003ff0:	50b2                	lw	ra,44(sp)
23003ff2:	5422                	lw	s0,40(sp)
23003ff4:	5492                	lw	s1,36(sp)
23003ff6:	4501                	li	a0,0
23003ff8:	6145                	addi	sp,sp,48
23003ffa:	8082                	ret
            Interrupt_Handler_Register(UART0_IRQn, UART0_IRQ);
23003ffc:	230045b7          	lui	a1,0x23004
23004000:	02d00513          	li	a0,45
23004004:	5a458593          	addi	a1,a1,1444 # 230045a4 <UART0_IRQ>
23004008:	5f6010ef          	jal	ra,230055fe <Interrupt_Handler_Register>
        if (uart_device->id == UART1_ID)
2300400c:	03c44503          	lbu	a0,60(s0)
23004010:	4785                	li	a5,1
23004012:	faf51be3          	bne	a0,a5,23003fc8 <uart_open+0xa8>
            Interrupt_Handler_Register(UART1_IRQn, UART1_IRQ);
23004016:	230045b7          	lui	a1,0x23004
2300401a:	02e00513          	li	a0,46
2300401e:	59e58593          	addi	a1,a1,1438 # 2300459e <UART1_IRQ>
23004022:	5dc010ef          	jal	ra,230055fe <Interrupt_Handler_Register>
    UART_FifoConfig(uart_device->id, &fifoCfg);
23004026:	03c44503          	lbu	a0,60(s0)
2300402a:	bf79                	j	23003fc8 <uart_open+0xa8>

2300402c <uart_close>:
 *
 * @param dev
 * @return int
 */
int uart_close(struct device *dev)
{
2300402c:	1141                	addi	sp,sp,-16
2300402e:	c422                	sw	s0,8(sp)
23004030:	c606                	sw	ra,12(sp)
23004032:	842a                	mv	s0,a0
    uart_device_t *uart_device = (uart_device_t *)dev;

    UART_Disable(uart_device->id, UART_TXRX);
23004034:	03c54503          	lbu	a0,60(a0)
23004038:	4589                	li	a1,2
2300403a:	481010ef          	jal	ra,23005cba <UART_Disable>
    if (uart_device->id == 0) {
2300403e:	03c44783          	lbu	a5,60(s0)
23004042:	cb89                	beqz	a5,23004054 <uart_close+0x28>
        GLB_AHB_Slave1_Reset(BL_AHB_SLAVE1_UART0);
    } else if (uart_device->id == 1) {
23004044:	4705                	li	a4,1
23004046:	00e78f63          	beq	a5,a4,23004064 <uart_close+0x38>
        GLB_AHB_Slave1_Reset(BL_AHB_SLAVE1_UART1);
    }
    return 0;
}
2300404a:	40b2                	lw	ra,12(sp)
2300404c:	4422                	lw	s0,8(sp)
2300404e:	4501                	li	a0,0
23004050:	0141                	addi	sp,sp,16
23004052:	8082                	ret
        GLB_AHB_Slave1_Reset(BL_AHB_SLAVE1_UART0);
23004054:	4541                	li	a0,16
23004056:	7f8010ef          	jal	ra,2300584e <GLB_AHB_Slave1_Reset>
}
2300405a:	40b2                	lw	ra,12(sp)
2300405c:	4422                	lw	s0,8(sp)
2300405e:	4501                	li	a0,0
23004060:	0141                	addi	sp,sp,16
23004062:	8082                	ret
        GLB_AHB_Slave1_Reset(BL_AHB_SLAVE1_UART1);
23004064:	4545                	li	a0,17
23004066:	7e8010ef          	jal	ra,2300584e <GLB_AHB_Slave1_Reset>
}
2300406a:	40b2                	lw	ra,12(sp)
2300406c:	4422                	lw	s0,8(sp)
2300406e:	4501                	li	a0,0
23004070:	0141                	addi	sp,sp,16
23004072:	8082                	ret

23004074 <uart_control>:
 * @param cmd
 * @param args
 * @return int
 */
int uart_control(struct device *dev, int cmd, void *args)
{
23004074:	7139                	addi	sp,sp,-64
23004076:	dc22                	sw	s0,56(sp)
23004078:	de06                	sw	ra,60(sp)
2300407a:	da26                	sw	s1,52(sp)
2300407c:	d84a                	sw	s2,48(sp)
2300407e:	d64e                	sw	s3,44(sp)
23004080:	d452                	sw	s4,40(sp)
    uart_device_t *uart_device = (uart_device_t *)dev;

    switch (cmd) {
23004082:	47a9                	li	a5,10
{
23004084:	842a                	mv	s0,a0
    switch (cmd) {
23004086:	22f58063          	beq	a1,a5,230042a6 <uart_control+0x232>
2300408a:	08b7cb63          	blt	a5,a1,23004120 <uart_control+0xac>
2300408e:	4795                	li	a5,5
23004090:	18f58163          	beq	a1,a5,23004212 <uart_control+0x19e>
23004094:	84b2                	mv	s1,a2
23004096:	06b7d863          	bge	a5,a1,23004106 <uart_control+0x92>
2300409a:	47a1                	li	a5,8
2300409c:	16f58863          	beq	a1,a5,2300420c <uart_control+0x198>
230040a0:	47a5                	li	a5,9
230040a2:	00f59c63          	bne	a1,a5,230040ba <uart_control+0x46>
            break;
        case DEVICE_CTRL_ATTACH_TX_DMA /* constant-expression */:
            uart_device->tx_dma = (struct device *)args;
            break;
        case DEVICE_CTRL_ATTACH_RX_DMA /* constant-expression */:
            uart_device->rx_dma = (struct device *)args;
230040a6:	c470                	sw	a2,76(s0)
            return UART_RxFifoClear(uart_device->id);
        default:
            break;
    }

    return 0;
230040a8:	4501                	li	a0,0
}
230040aa:	50f2                	lw	ra,60(sp)
230040ac:	5462                	lw	s0,56(sp)
230040ae:	54d2                	lw	s1,52(sp)
230040b0:	5942                	lw	s2,48(sp)
230040b2:	59b2                	lw	s3,44(sp)
230040b4:	5a22                	lw	s4,40(sp)
230040b6:	6121                	addi	sp,sp,64
230040b8:	8082                	ret
    switch (cmd) {
230040ba:	4799                	li	a5,6
230040bc:	4501                	li	a0,0
230040be:	fef596e3          	bne	a1,a5,230040aa <uart_control+0x36>
            uint32_t uart_clk = peripheral_clock_get(PERIPHERAL_CLOCK_UART);
230040c2:	909ff0ef          	jal	ra,230039ca <peripheral_clock_get>
            uart_cfg.parity = cfg->parity;
230040c6:	0064c783          	lbu	a5,6(s1)
            uint32_t uart_clk = peripheral_clock_get(PERIPHERAL_CLOCK_UART);
230040ca:	862a                	mv	a2,a0
            uart_cfg.baudRate = cfg->baudrate;
230040cc:	4094                	lw	a3,0(s1)
            uart_cfg.dataBits = cfg->databits;
230040ce:	0044d703          	lhu	a4,4(s1)
            UART_Init(uart_device->id, &uart_cfg);
230040d2:	03c44503          	lbu	a0,60(s0)
230040d6:	006c                	addi	a1,sp,12
            uart_cfg.parity = cfg->parity;
230040d8:	00f10b23          	sb	a5,22(sp)
            uart_cfg.rxDeglitch = ENABLE;
230040dc:	4785                	li	a5,1
            uart_cfg.uartClk = uart_clk;
230040de:	c632                	sw	a2,12(sp)
            uart_cfg.baudRate = cfg->baudrate;
230040e0:	c836                	sw	a3,16(sp)
            uart_cfg.dataBits = cfg->databits;
230040e2:	00e11a23          	sh	a4,20(sp)
            uart_cfg.rxDeglitch = ENABLE;
230040e6:	cc3e                	sw	a5,24(sp)
            uart_cfg.ctsFlowControl = UART_CTS_FLOWCONTROL_ENABLE;
230040e8:	00010ba3          	sb	zero,23(sp)
            uart_cfg.rxLinMode = UART_RX_LINMODE_ENABLE;
230040ec:	00011e23          	sh	zero,28(sp)
            uart_cfg.byteBitInverse = UART_MSB_FIRST_ENABLE;
230040f0:	00010f23          	sb	zero,30(sp)
            UART_Init(uart_device->id, &uart_cfg);
230040f4:	20b010ef          	jal	ra,23005afe <UART_Init>
            UART_SetDeglitchCount(uart_device->id, 2);
230040f8:	03c44503          	lbu	a0,60(s0)
230040fc:	4589                	li	a1,2
230040fe:	40f010ef          	jal	ra,23005d0c <UART_SetDeglitchCount>
    return 0;
23004102:	4501                	li	a0,0
23004104:	b75d                	j	230040aa <uart_control+0x36>
    switch (cmd) {
23004106:	4789                	li	a5,2
23004108:	14f58063          	beq	a1,a5,23004248 <uart_control+0x1d4>
2300410c:	4791                	li	a5,4
2300410e:	02f59963          	bne	a1,a5,23004140 <uart_control+0xcc>
            UART_Enable(uart_device->id, UART_TXRX);
23004112:	03c54503          	lbu	a0,60(a0)
23004116:	4589                	li	a1,2
23004118:	36d010ef          	jal	ra,23005c84 <UART_Enable>
    return 0;
2300411c:	4501                	li	a0,0
            break;
2300411e:	b771                	j	230040aa <uart_control+0x36>
    switch (cmd) {
23004120:	47c1                	li	a5,16
23004122:	16f58863          	beq	a1,a5,23004292 <uart_control+0x21e>
23004126:	06b7d363          	bge	a5,a1,2300418c <uart_control+0x118>
2300412a:	47c9                	li	a5,18
2300412c:	16f58863          	beq	a1,a5,2300429c <uart_control+0x228>
23004130:	47cd                	li	a5,19
23004132:	04f59563          	bne	a1,a5,2300417c <uart_control+0x108>
            return UART_RxFifoClear(uart_device->id);
23004136:	03c54503          	lbu	a0,60(a0)
2300413a:	43f010ef          	jal	ra,23005d78 <UART_RxFifoClear>
2300413e:	b7b5                	j	230040aa <uart_control+0x36>
    switch (cmd) {
23004140:	4785                	li	a5,1
23004142:	0cf59363          	bne	a1,a5,23004208 <uart_control+0x194>
            uint32_t offset = __builtin_ctz((uint32_t)args);
23004146:	8532                	mv	a0,a2
23004148:	9e4fc0ef          	jal	ra,2300032c <__ctzsi2>
2300414c:	892a                	mv	s2,a0
            while (offset < 9) {
2300414e:	47a1                	li	a5,8
            UART_Enable(uart_device->id, UART_TXRX);
23004150:	03c44503          	lbu	a0,60(s0)
            while (offset < 9) {
23004154:	0927cc63          	blt	a5,s2,230041ec <uart_control+0x178>
                if ((uint32_t)args & (1 << offset)) {
23004158:	4a05                	li	s4,1
            while (offset < 9) {
2300415a:	49a5                	li	s3,9
2300415c:	a021                	j	23004164 <uart_control+0xf0>
                offset++;
2300415e:	0905                	addi	s2,s2,1
            while (offset < 9) {
23004160:	09390663          	beq	s2,s3,230041ec <uart_control+0x178>
                if ((uint32_t)args & (1 << offset)) {
23004164:	012a17b3          	sll	a5,s4,s2
23004168:	8fe5                	and	a5,a5,s1
2300416a:	dbf5                	beqz	a5,2300415e <uart_control+0xea>
                    UART_IntMask(uart_device->id, offset, UNMASK);
2300416c:	0ff97593          	zext.b	a1,s2
23004170:	4601                	li	a2,0
23004172:	427010ef          	jal	ra,23005d98 <UART_IntMask>
            if (uart_device->id == UART0_ID)
23004176:	03c44503          	lbu	a0,60(s0)
2300417a:	b7d5                	j	2300415e <uart_control+0xea>
    switch (cmd) {
2300417c:	47c5                	li	a5,17
2300417e:	08f59563          	bne	a1,a5,23004208 <uart_control+0x194>
            return UART_GetRxFifoCount(uart_device->id);
23004182:	03c54503          	lbu	a0,60(a0)
23004186:	505010ef          	jal	ra,23005e8a <UART_GetRxFifoCount>
2300418a:	b705                	j	230040aa <uart_control+0x36>
    switch (cmd) {
2300418c:	47b1                	li	a5,12
2300418e:	08f58963          	beq	a1,a5,23004220 <uart_control+0x1ac>
23004192:	47b5                	li	a5,13
23004194:	02f59663          	bne	a1,a5,230041c0 <uart_control+0x14c>
            uint32_t tmpVal = BL_RD_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0);
23004198:	03c54783          	lbu	a5,60(a0)
2300419c:	4000a737          	lui	a4,0x4000a
230041a0:	08070713          	addi	a4,a4,128 # 4000a080 <__dtcm_load_addr+0x1cffc104>
230041a4:	07a2                	slli	a5,a5,0x8
230041a6:	97ba                	add	a5,a5,a4
230041a8:	4394                	lw	a3,0(a5)
            dev->oflag |= DEVICE_OFLAG_DMA_RX;
230041aa:	01e55703          	lhu	a4,30(a0)
    return 0;
230041ae:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, UART_DMA_RX_EN);
230041b0:	0026e693          	ori	a3,a3,2
            BL_WR_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0, tmpVal);
230041b4:	c394                	sw	a3,0(a5)
            dev->oflag |= DEVICE_OFLAG_DMA_RX;
230041b6:	02076793          	ori	a5,a4,32
230041ba:	00f41f23          	sh	a5,30(s0)
            break;
230041be:	b5f5                	j	230040aa <uart_control+0x36>
    switch (cmd) {
230041c0:	47ad                	li	a5,11
230041c2:	04f59363          	bne	a1,a5,23004208 <uart_control+0x194>
            uint32_t tmpVal = BL_RD_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0);
230041c6:	03c54783          	lbu	a5,60(a0)
230041ca:	4000a737          	lui	a4,0x4000a
230041ce:	08070713          	addi	a4,a4,128 # 4000a080 <__dtcm_load_addr+0x1cffc104>
230041d2:	07a2                	slli	a5,a5,0x8
230041d4:	97ba                	add	a5,a5,a4
230041d6:	4394                	lw	a3,0(a5)
            dev->oflag &= ~DEVICE_OFLAG_DMA_RX;
230041d8:	01e55703          	lhu	a4,30(a0)
    return 0;
230041dc:	4501                	li	a0,0
            tmpVal = BL_CLR_REG_BIT(tmpVal, UART_DMA_RX_EN);
230041de:	9af5                	andi	a3,a3,-3
            BL_WR_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0, tmpVal);
230041e0:	c394                	sw	a3,0(a5)
            dev->oflag &= ~DEVICE_OFLAG_DMA_RX;
230041e2:	fdf77793          	andi	a5,a4,-33
230041e6:	00f41f23          	sh	a5,30(s0)
            break;
230041ea:	b5c1                	j	230040aa <uart_control+0x36>
            if (uart_device->id == UART0_ID)
230041ec:	c911                	beqz	a0,23004200 <uart_control+0x18c>
            else if (uart_device->id == UART1_ID)
230041ee:	4785                	li	a5,1
230041f0:	00f51c63          	bne	a0,a5,23004208 <uart_control+0x194>
                CPU_Interrupt_Enable(UART1_IRQn);
230041f4:	02e00513          	li	a0,46
230041f8:	41a010ef          	jal	ra,23005612 <clic_enable_interrupt>
    return 0;
230041fc:	4501                	li	a0,0
230041fe:	b575                	j	230040aa <uart_control+0x36>
                CPU_Interrupt_Enable(UART0_IRQn);
23004200:	02d00513          	li	a0,45
23004204:	40e010ef          	jal	ra,23005612 <clic_enable_interrupt>
    return 0;
23004208:	4501                	li	a0,0
2300420a:	b545                	j	230040aa <uart_control+0x36>
            uart_device->tx_dma = (struct device *)args;
2300420c:	c430                	sw	a2,72(s0)
    return 0;
2300420e:	4501                	li	a0,0
            break;
23004210:	bd69                	j	230040aa <uart_control+0x36>
            UART_Disable(uart_device->id, UART_TXRX);
23004212:	03c54503          	lbu	a0,60(a0)
23004216:	4589                	li	a1,2
23004218:	2a3010ef          	jal	ra,23005cba <UART_Disable>
    return 0;
2300421c:	4501                	li	a0,0
            break;
2300421e:	b571                	j	230040aa <uart_control+0x36>
            uint32_t tmpVal = BL_RD_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0);
23004220:	03c54783          	lbu	a5,60(a0)
23004224:	4000a737          	lui	a4,0x4000a
23004228:	08070713          	addi	a4,a4,128 # 4000a080 <__dtcm_load_addr+0x1cffc104>
2300422c:	07a2                	slli	a5,a5,0x8
2300422e:	97ba                	add	a5,a5,a4
23004230:	4394                	lw	a3,0(a5)
            dev->oflag |= DEVICE_OFLAG_DMA_TX;
23004232:	01e55703          	lhu	a4,30(a0)
    return 0;
23004236:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, UART_DMA_TX_EN);
23004238:	0016e693          	ori	a3,a3,1
            BL_WR_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0, tmpVal);
2300423c:	c394                	sw	a3,0(a5)
            dev->oflag |= DEVICE_OFLAG_DMA_TX;
2300423e:	01076793          	ori	a5,a4,16
23004242:	00f41f23          	sh	a5,30(s0)
            break;
23004246:	b595                	j	230040aa <uart_control+0x36>
            uint32_t offset = __builtin_ctz((uint32_t)args);
23004248:	8532                	mv	a0,a2
2300424a:	8e2fc0ef          	jal	ra,2300032c <__ctzsi2>
2300424e:	892a                	mv	s2,a0
            while (offset < 9) {
23004250:	47a1                	li	a5,8
            UART_Enable(uart_device->id, UART_TXRX);
23004252:	03c44503          	lbu	a0,60(s0)
            while (offset < 9) {
23004256:	0327c463          	blt	a5,s2,2300427e <uart_control+0x20a>
                if ((uint32_t)args & (1 << offset)) {
2300425a:	4a05                	li	s4,1
            while (offset < 9) {
2300425c:	49a5                	li	s3,9
2300425e:	a021                	j	23004266 <uart_control+0x1f2>
                offset++;
23004260:	0905                	addi	s2,s2,1
            while (offset < 9) {
23004262:	01390e63          	beq	s2,s3,2300427e <uart_control+0x20a>
                if ((uint32_t)args & (1 << offset)) {
23004266:	012a17b3          	sll	a5,s4,s2
2300426a:	8fe5                	and	a5,a5,s1
2300426c:	dbf5                	beqz	a5,23004260 <uart_control+0x1ec>
                    UART_IntMask(uart_device->id, offset, MASK);
2300426e:	0ff97593          	zext.b	a1,s2
23004272:	4605                	li	a2,1
23004274:	325010ef          	jal	ra,23005d98 <UART_IntMask>
            if (uart_device->id == UART0_ID)
23004278:	03c44503          	lbu	a0,60(s0)
2300427c:	b7d5                	j	23004260 <uart_control+0x1ec>
2300427e:	c539                	beqz	a0,230042cc <uart_control+0x258>
            else if (uart_device->id == UART1_ID)
23004280:	4785                	li	a5,1
23004282:	f8f513e3          	bne	a0,a5,23004208 <uart_control+0x194>
                CPU_Interrupt_Disable(UART1_IRQn);
23004286:	02e00513          	li	a0,46
2300428a:	39a010ef          	jal	ra,23005624 <clic_disable_interrupt>
    return 0;
2300428e:	4501                	li	a0,0
23004290:	bd29                	j	230040aa <uart_control+0x36>
            return UART_GetTxFifoCount(uart_device->id);
23004292:	03c54503          	lbu	a0,60(a0)
23004296:	3db010ef          	jal	ra,23005e70 <UART_GetTxFifoCount>
2300429a:	bd01                	j	230040aa <uart_control+0x36>
            return UART_TxFifoClear(uart_device->id);
2300429c:	03c54503          	lbu	a0,60(a0)
230042a0:	2b9010ef          	jal	ra,23005d58 <UART_TxFifoClear>
230042a4:	b519                	j	230040aa <uart_control+0x36>
            uint32_t tmpVal = BL_RD_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0);
230042a6:	03c54783          	lbu	a5,60(a0)
230042aa:	4000a737          	lui	a4,0x4000a
230042ae:	08070713          	addi	a4,a4,128 # 4000a080 <__dtcm_load_addr+0x1cffc104>
230042b2:	07a2                	slli	a5,a5,0x8
230042b4:	97ba                	add	a5,a5,a4
230042b6:	4394                	lw	a3,0(a5)
            dev->oflag &= ~DEVICE_OFLAG_DMA_TX;
230042b8:	01e55703          	lhu	a4,30(a0)
    return 0;
230042bc:	4501                	li	a0,0
            tmpVal = BL_CLR_REG_BIT(tmpVal, UART_DMA_TX_EN);
230042be:	9af9                	andi	a3,a3,-2
            BL_WR_REG(UART0_BASE + uart_device->id * 0x100, UART_FIFO_CONFIG_0, tmpVal);
230042c0:	c394                	sw	a3,0(a5)
            dev->oflag &= ~DEVICE_OFLAG_DMA_TX;
230042c2:	fef77793          	andi	a5,a4,-17
230042c6:	00f41f23          	sh	a5,30(s0)
            break;
230042ca:	b3c5                	j	230040aa <uart_control+0x36>
                CPU_Interrupt_Disable(UART0_IRQn);
230042cc:	02d00513          	li	a0,45
230042d0:	354010ef          	jal	ra,23005624 <clic_disable_interrupt>
    return 0;
230042d4:	4501                	li	a0,0
230042d6:	bbd1                	j	230040aa <uart_control+0x36>

230042d8 <uart_write>:
 */
int uart_write(struct device *dev, uint32_t pos, const void *buffer, uint32_t size)
{
    int ret = 0;
    uart_device_t *uart_device = (uart_device_t *)dev;
    if (dev->oflag & DEVICE_OFLAG_DMA_TX) {
230042d8:	01e55783          	lhu	a5,30(a0)
{
230042dc:	1141                	addi	sp,sp,-16
230042de:	c606                	sw	ra,12(sp)
230042e0:	c422                	sw	s0,8(sp)
230042e2:	c226                	sw	s1,4(sp)
    if (dev->oflag & DEVICE_OFLAG_DMA_TX) {
230042e4:	0107f713          	andi	a4,a5,16
{
230042e8:	85b2                	mv	a1,a2
    if (dev->oflag & DEVICE_OFLAG_DMA_TX) {
230042ea:	c705                	beqz	a4,23004312 <uart_write+0x3a>
        struct device *dma_ch = (struct device *)uart_device->tx_dma;
230042ec:	4524                	lw	s1,72(a0)
        if (!dma_ch)
230042ee:	c4ad                	beqz	s1,23004358 <uart_write+0x80>
            return -1;

        if (uart_device->id == 0) {
230042f0:	03c54783          	lbu	a5,60(a0)
            ret = dma_reload(dma_ch, (uint32_t)buffer, (uint32_t)DMA_ADDR_UART0_TDR, size);
230042f4:	4000a637          	lui	a2,0x4000a
230042f8:	08860613          	addi	a2,a2,136 # 4000a088 <__dtcm_load_addr+0x1cffc10c>
        if (uart_device->id == 0) {
230042fc:	cf8d                	beqz	a5,23004336 <uart_write+0x5e>
            dma_channel_start(dma_ch);
        } else if (uart_device->id == 1) {
230042fe:	4705                	li	a4,1
    int ret = 0;
23004300:	4401                	li	s0,0
        } else if (uart_device->id == 1) {
23004302:	02e78663          	beq	a5,a4,2300432e <uart_write+0x56>
        return ret;
    } else if (dev->oflag & DEVICE_OFLAG_INT_TX) {
        return -2;
    } else
        return UART_SendData(uart_device->id, (uint8_t *)buffer, size);
}
23004306:	40b2                	lw	ra,12(sp)
23004308:	8522                	mv	a0,s0
2300430a:	4422                	lw	s0,8(sp)
2300430c:	4492                	lw	s1,4(sp)
2300430e:	0141                	addi	sp,sp,16
23004310:	8082                	ret
    } else if (dev->oflag & DEVICE_OFLAG_INT_TX) {
23004312:	8b91                	andi	a5,a5,4
23004314:	e3a1                	bnez	a5,23004354 <uart_write+0x7c>
        return UART_SendData(uart_device->id, (uint8_t *)buffer, size);
23004316:	03c54503          	lbu	a0,60(a0)
2300431a:	8636                	mv	a2,a3
2300431c:	2c7010ef          	jal	ra,23005de2 <UART_SendData>
23004320:	842a                	mv	s0,a0
}
23004322:	40b2                	lw	ra,12(sp)
23004324:	8522                	mv	a0,s0
23004326:	4422                	lw	s0,8(sp)
23004328:	4492                	lw	s1,4(sp)
2300432a:	0141                	addi	sp,sp,16
2300432c:	8082                	ret
            ret = dma_reload(dma_ch, (uint32_t)buffer, (uint32_t)DMA_ADDR_UART1_TDR, size);
2300432e:	4000a637          	lui	a2,0x4000a
23004332:	18860613          	addi	a2,a2,392 # 4000a188 <__dtcm_load_addr+0x1cffc20c>
23004336:	8526                	mv	a0,s1
23004338:	153020ef          	jal	ra,23006c8a <dma_reload>
2300433c:	842a                	mv	s0,a0
            dma_channel_start(dma_ch);
2300433e:	4601                	li	a2,0
23004340:	8526                	mv	a0,s1
23004342:	45c5                	li	a1,17
23004344:	771050ef          	jal	ra,2300a2b4 <device_control>
}
23004348:	40b2                	lw	ra,12(sp)
2300434a:	8522                	mv	a0,s0
2300434c:	4422                	lw	s0,8(sp)
2300434e:	4492                	lw	s1,4(sp)
23004350:	0141                	addi	sp,sp,16
23004352:	8082                	ret
        return -2;
23004354:	5479                	li	s0,-2
23004356:	bf45                	j	23004306 <uart_write+0x2e>
            return -1;
23004358:	547d                	li	s0,-1
2300435a:	b775                	j	23004306 <uart_write+0x2e>

2300435c <uart_read>:
 */
int uart_read(struct device *dev, uint32_t pos, void *buffer, uint32_t size)
{
    int ret = -1;
    uart_device_t *uart_device = (uart_device_t *)dev;
    if (dev->oflag & DEVICE_OFLAG_DMA_RX) {
2300435c:	01e55783          	lhu	a5,30(a0)
{
23004360:	1141                	addi	sp,sp,-16
23004362:	c606                	sw	ra,12(sp)
23004364:	c422                	sw	s0,8(sp)
23004366:	c226                	sw	s1,4(sp)
    if (dev->oflag & DEVICE_OFLAG_DMA_RX) {
23004368:	0207f813          	andi	a6,a5,32
2300436c:	02080563          	beqz	a6,23004396 <uart_read+0x3a>
        struct device *dma_ch = (struct device *)uart_device->rx_dma;
23004370:	4564                	lw	s1,76(a0)
        if (!dma_ch)
23004372:	c0bd                	beqz	s1,230043d8 <uart_read+0x7c>
            return -1;

        if (uart_device->id == 0) {
23004374:	03c54783          	lbu	a5,60(a0)
            ret = dma_reload(dma_ch, (uint32_t)DMA_ADDR_UART0_RDR, (uint32_t)buffer, size);
23004378:	4000a5b7          	lui	a1,0x4000a
2300437c:	08c58593          	addi	a1,a1,140 # 4000a08c <__dtcm_load_addr+0x1cffc110>
        if (uart_device->id == 0) {
23004380:	cb9d                	beqz	a5,230043b6 <uart_read+0x5a>
            dma_channel_start(dma_ch);
        } else if (uart_device->id == 1) {
23004382:	4705                	li	a4,1
            return -1;
23004384:	547d                	li	s0,-1
        } else if (uart_device->id == 1) {
23004386:	02e78463          	beq	a5,a4,230043ae <uart_read+0x52>
    } else if (dev->oflag & DEVICE_OFLAG_INT_RX) {
        return -2;
    } else {
        return UART_ReceiveData(uart_device->id, (uint8_t *)buffer, size);
    }
}
2300438a:	40b2                	lw	ra,12(sp)
2300438c:	8522                	mv	a0,s0
2300438e:	4422                	lw	s0,8(sp)
23004390:	4492                	lw	s1,4(sp)
23004392:	0141                	addi	sp,sp,16
23004394:	8082                	ret
    } else if (dev->oflag & DEVICE_OFLAG_INT_RX) {
23004396:	8ba1                	andi	a5,a5,8
23004398:	ef95                	bnez	a5,230043d4 <uart_read+0x78>
}
2300439a:	4422                	lw	s0,8(sp)
2300439c:	40b2                	lw	ra,12(sp)
2300439e:	4492                	lw	s1,4(sp)
        return UART_ReceiveData(uart_device->id, (uint8_t *)buffer, size);
230043a0:	03c54503          	lbu	a0,60(a0)
230043a4:	85b2                	mv	a1,a2
230043a6:	8636                	mv	a2,a3
}
230043a8:	0141                	addi	sp,sp,16
        return UART_ReceiveData(uart_device->id, (uint8_t *)buffer, size);
230043aa:	28b0106f          	j	23005e34 <UART_ReceiveData>
            ret = dma_reload(dma_ch, (uint32_t)DMA_ADDR_UART1_RDR, (uint32_t)buffer, size);
230043ae:	4000a5b7          	lui	a1,0x4000a
230043b2:	18c58593          	addi	a1,a1,396 # 4000a18c <__dtcm_load_addr+0x1cffc210>
230043b6:	8526                	mv	a0,s1
230043b8:	0d3020ef          	jal	ra,23006c8a <dma_reload>
230043bc:	842a                	mv	s0,a0
            dma_channel_start(dma_ch);
230043be:	4601                	li	a2,0
230043c0:	8526                	mv	a0,s1
230043c2:	45c5                	li	a1,17
230043c4:	6f1050ef          	jal	ra,2300a2b4 <device_control>
}
230043c8:	40b2                	lw	ra,12(sp)
230043ca:	8522                	mv	a0,s0
230043cc:	4422                	lw	s0,8(sp)
230043ce:	4492                	lw	s1,4(sp)
230043d0:	0141                	addi	sp,sp,16
230043d2:	8082                	ret
        return -2;
230043d4:	5479                	li	s0,-2
230043d6:	bf55                	j	2300438a <uart_read+0x2e>
            return -1;
230043d8:	547d                	li	s0,-1
230043da:	bf45                	j	2300438a <uart_read+0x2e>

230043dc <uart_register>:
    if (UART_MAX_INDEX == 0)
        return -DEVICE_EINVAL;

    dev = &(uartx_device[index].parent);

    dev->open = uart_open;
230043dc:	00251793          	slli	a5,a0,0x2
230043e0:	97aa                	add	a5,a5,a0
230043e2:	42016537          	lui	a0,0x42016
230043e6:	0792                	slli	a5,a5,0x4
230043e8:	00050513          	mv	a0,a0
230043ec:	953e                	add	a0,a0,a5
230043ee:	230047b7          	lui	a5,0x23004
230043f2:	f2078793          	addi	a5,a5,-224 # 23003f20 <uart_open>
230043f6:	d11c                	sw	a5,32(a0)
    dev->close = uart_close;
230043f8:	230047b7          	lui	a5,0x23004
230043fc:	02c78793          	addi	a5,a5,44 # 2300402c <uart_close>
23004400:	d15c                	sw	a5,36(a0)
    dev->control = uart_control;
23004402:	230047b7          	lui	a5,0x23004
23004406:	07478793          	addi	a5,a5,116 # 23004074 <uart_control>
2300440a:	d51c                	sw	a5,40(a0)
    dev->write = uart_write;
2300440c:	230047b7          	lui	a5,0x23004
23004410:	2d878793          	addi	a5,a5,728 # 230042d8 <uart_write>
23004414:	d55c                	sw	a5,44(a0)
    dev->read = uart_read;
23004416:	230047b7          	lui	a5,0x23004
2300441a:	35c78793          	addi	a5,a5,860 # 2300435c <uart_read>
2300441e:	d91c                	sw	a5,48(a0)

    dev->type = DEVICE_CLASS_UART;
23004420:	4789                	li	a5,2
23004422:	00f50ea3          	sb	a5,29(a0) # 4201601d <uartx_device+0x1d>
    dev->handle = NULL;
23004426:	02052c23          	sw	zero,56(a0)

    return device_register(dev, name);
2300442a:	59f0506f          	j	2300a1c8 <device_register>

2300442e <uart_isr>:
 * @brief
 *
 * @param handle
 */
void uart_isr(uart_device_t *handle)
{
2300442e:	7135                	addi	sp,sp,-160
23004430:	cd22                	sw	s0,152(sp)
23004432:	c74e                	sw	s3,140(sp)
23004434:	cf06                	sw	ra,156(sp)
23004436:	cb26                	sw	s1,148(sp)
23004438:	c94a                	sw	s2,144(sp)
    uint32_t tmpVal = 0;
    uint32_t maskVal = 0;
    uint32_t UARTx = (UART0_BASE + handle->id * 0x100);
2300443a:	03c54903          	lbu	s2,60(a0)

    tmpVal = BL_RD_REG(UARTx, UART_INT_STS);
2300443e:	4000a7b7          	lui	a5,0x4000a
23004442:	02078693          	addi	a3,a5,32 # 4000a020 <__dtcm_load_addr+0x1cffc0a4>
    uint32_t UARTx = (UART0_BASE + handle->id * 0x100);
23004446:	0922                	slli	s2,s2,0x8
    maskVal = BL_RD_REG(UARTx, UART_INT_MASK);
23004448:	02478713          	addi	a4,a5,36
    tmpVal = BL_RD_REG(UARTx, UART_INT_STS);
2300444c:	96ca                	add	a3,a3,s2
    maskVal = BL_RD_REG(UARTx, UART_INT_MASK);
2300444e:	974a                	add	a4,a4,s2

    if (!handle->parent.callback)
23004450:	03452803          	lw	a6,52(a0)
    tmpVal = BL_RD_REG(UARTx, UART_INT_STS);
23004454:	4280                	lw	s0,0(a3)
    maskVal = BL_RD_REG(UARTx, UART_INT_MASK);
23004456:	00072983          	lw	s3,0(a4)
    if (!handle->parent.callback)
2300445a:	0e080063          	beqz	a6,2300453a <uart_isr+0x10c>
        return;

    /* Length of uart tx data transfer arrived interrupt */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_UTX_END_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_UTX_END_MASK)) {
2300445e:	00147713          	andi	a4,s0,1
23004462:	84aa                	mv	s1,a0
23004464:	cf09                	beqz	a4,2300447e <uart_isr+0x50>
23004466:	0019f713          	andi	a4,s3,1
2300446a:	eb11                	bnez	a4,2300447e <uart_isr+0x50>
        BL_WR_REG(UARTx, UART_INT_CLEAR, 0x1);
2300446c:	02878793          	addi	a5,a5,40
23004470:	97ca                	add	a5,a5,s2
23004472:	4705                	li	a4,1
23004474:	c398                	sw	a4,0(a5)
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_TX_END);
23004476:	4681                	li	a3,0
23004478:	4601                	li	a2,0
2300447a:	4581                	li	a1,0
2300447c:	9802                	jalr	a6
    }

    /* Length of uart rx data transfer arrived interrupt */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_URX_END_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_URX_END_MASK)) {
2300447e:	00247793          	andi	a5,s0,2
23004482:	c385                	beqz	a5,230044a2 <uart_isr+0x74>
23004484:	0029f793          	andi	a5,s3,2
23004488:	ef89                	bnez	a5,230044a2 <uart_isr+0x74>
        BL_WR_REG(UARTx, UART_INT_CLEAR, 0x2);
2300448a:	4000a7b7          	lui	a5,0x4000a
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_END);
2300448e:	58d8                	lw	a4,52(s1)
        BL_WR_REG(UARTx, UART_INT_CLEAR, 0x2);
23004490:	02878793          	addi	a5,a5,40 # 4000a028 <__dtcm_load_addr+0x1cffc0ac>
23004494:	97ca                	add	a5,a5,s2
23004496:	4689                	li	a3,2
23004498:	c394                	sw	a3,0(a5)
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_END);
2300449a:	4601                	li	a2,0
2300449c:	4581                	li	a1,0
2300449e:	8526                	mv	a0,s1
230044a0:	9702                	jalr	a4
    }

    /* Tx fifo ready interrupt,auto-cleared when data is pushed */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_UTX_FIFO_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_UTX_FIFO_MASK)) {
230044a2:	00447793          	andi	a5,s0,4
230044a6:	cb91                	beqz	a5,230044ba <uart_isr+0x8c>
230044a8:	0049f793          	andi	a5,s3,4
230044ac:	e799                	bnez	a5,230044ba <uart_isr+0x8c>
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_TX_FIFO);
230044ae:	58dc                	lw	a5,52(s1)
230044b0:	4685                	li	a3,1
230044b2:	4601                	li	a2,0
230044b4:	4581                	li	a1,0
230044b6:	8526                	mv	a0,s1
230044b8:	9782                	jalr	a5
    }

    /* Rx fifo ready interrupt,auto-cleared when data is popped */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_URX_FIFO_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_URX_FIFO_MASK)) {
230044ba:	00847793          	andi	a5,s0,8
230044be:	c781                	beqz	a5,230044c6 <uart_isr+0x98>
230044c0:	0089f793          	andi	a5,s3,8
230044c4:	c3d1                	beqz	a5,23004548 <uart_isr+0x11a>
            handle->parent.callback(&handle->parent, &buffer[0], len, UART_EVENT_RX_FIFO);
        }
    }

    /* Rx time-out interrupt */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_URX_RTO_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_URX_RTO_MASK)) {
230044c6:	01047793          	andi	a5,s0,16
230044ca:	c781                	beqz	a5,230044d2 <uart_isr+0xa4>
230044cc:	0109f793          	andi	a5,s3,16
230044d0:	cfd1                	beqz	a5,2300456c <uart_isr+0x13e>
            handle->parent.callback(&handle->parent, &buffer[0], len, UART_EVENT_RTO);
        }
    }

    /* Rx parity check error interrupt */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_URX_PCE_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_URX_PCE_MASK)) {
230044d2:	02047793          	andi	a5,s0,32
230044d6:	c39d                	beqz	a5,230044fc <uart_isr+0xce>
230044d8:	0209f793          	andi	a5,s3,32
230044dc:	e385                	bnez	a5,230044fc <uart_isr+0xce>
        BL_WR_REG(UARTx, UART_INT_CLEAR, 0x20);
230044de:	4000a7b7          	lui	a5,0x4000a
230044e2:	02878793          	addi	a5,a5,40 # 4000a028 <__dtcm_load_addr+0x1cffc0ac>
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_PCE);
230044e6:	58d8                	lw	a4,52(s1)
        BL_WR_REG(UARTx, UART_INT_CLEAR, 0x20);
230044e8:	993e                	add	s2,s2,a5
230044ea:	02000793          	li	a5,32
230044ee:	00f92023          	sw	a5,0(s2)
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_PCE);
230044f2:	4695                	li	a3,5
230044f4:	4601                	li	a2,0
230044f6:	4581                	li	a1,0
230044f8:	8526                	mv	a0,s1
230044fa:	9702                	jalr	a4
    }

    /* Tx fifo overflow/underflow error interrupt */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_UTX_FER_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_UTX_FER_MASK)) {
230044fc:	04047793          	andi	a5,s0,64
23004500:	cb91                	beqz	a5,23004514 <uart_isr+0xe6>
23004502:	0409f793          	andi	a5,s3,64
23004506:	e799                	bnez	a5,23004514 <uart_isr+0xe6>
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_TX_FER);
23004508:	58dc                	lw	a5,52(s1)
2300450a:	4699                	li	a3,6
2300450c:	4601                	li	a2,0
2300450e:	4581                	li	a1,0
23004510:	8526                	mv	a0,s1
23004512:	9782                	jalr	a5
    }

    /* Rx fifo overflow/underflow error interrupt */
    if (BL_IS_REG_BIT_SET(tmpVal, UART_URX_FER_INT) && !BL_IS_REG_BIT_SET(maskVal, UART_CR_URX_FER_MASK)) {
23004514:	08047413          	andi	s0,s0,128
23004518:	c00d                	beqz	s0,2300453a <uart_isr+0x10c>
2300451a:	0809f993          	andi	s3,s3,128
2300451e:	00099e63          	bnez	s3,2300453a <uart_isr+0x10c>
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_FER);
    }
}
23004522:	446a                	lw	s0,152(sp)
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_FER);
23004524:	58dc                	lw	a5,52(s1)
}
23004526:	40fa                	lw	ra,156(sp)
23004528:	494a                	lw	s2,144(sp)
2300452a:	49ba                	lw	s3,140(sp)
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_FER);
2300452c:	8526                	mv	a0,s1
}
2300452e:	44da                	lw	s1,148(sp)
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_FER);
23004530:	469d                	li	a3,7
23004532:	4601                	li	a2,0
23004534:	4581                	li	a1,0
}
23004536:	610d                	addi	sp,sp,160
        handle->parent.callback(&handle->parent, NULL, 0, UART_EVENT_RX_FER);
23004538:	8782                	jr	a5
}
2300453a:	40fa                	lw	ra,156(sp)
2300453c:	446a                	lw	s0,152(sp)
2300453e:	44da                	lw	s1,148(sp)
23004540:	494a                	lw	s2,144(sp)
23004542:	49ba                	lw	s3,140(sp)
23004544:	610d                	addi	sp,sp,160
23004546:	8082                	ret
        uint8_t len = UART_ReceiveData(handle->id, buffer, UART_FIFO_MAX_LEN);
23004548:	03c4c503          	lbu	a0,60(s1)
2300454c:	08000613          	li	a2,128
23004550:	858a                	mv	a1,sp
23004552:	0e3010ef          	jal	ra,23005e34 <UART_ReceiveData>
        if (len) {
23004556:	0ff57793          	zext.b	a5,a0
2300455a:	d7b5                	beqz	a5,230044c6 <uart_isr+0x98>
            handle->parent.callback(&handle->parent, &buffer[0], len, UART_EVENT_RX_FIFO);
2300455c:	58dc                	lw	a5,52(s1)
2300455e:	0ff57613          	zext.b	a2,a0
23004562:	468d                	li	a3,3
23004564:	858a                	mv	a1,sp
23004566:	8526                	mv	a0,s1
23004568:	9782                	jalr	a5
2300456a:	bfb1                	j	230044c6 <uart_isr+0x98>
        BL_WR_REG(UARTx, UART_INT_CLEAR, 0x10);
2300456c:	4000a7b7          	lui	a5,0x4000a
23004570:	02878793          	addi	a5,a5,40 # 4000a028 <__dtcm_load_addr+0x1cffc0ac>
23004574:	97ca                	add	a5,a5,s2
23004576:	4741                	li	a4,16
23004578:	c398                	sw	a4,0(a5)
        uint8_t len = UART_ReceiveData(handle->id, buffer, UART_FIFO_MAX_LEN);
2300457a:	03c4c503          	lbu	a0,60(s1)
2300457e:	08000613          	li	a2,128
23004582:	858a                	mv	a1,sp
23004584:	0b1010ef          	jal	ra,23005e34 <UART_ReceiveData>
        if (len) {
23004588:	0ff57793          	zext.b	a5,a0
2300458c:	d3b9                	beqz	a5,230044d2 <uart_isr+0xa4>
            handle->parent.callback(&handle->parent, &buffer[0], len, UART_EVENT_RTO);
2300458e:	58dc                	lw	a5,52(s1)
23004590:	0ff57613          	zext.b	a2,a0
23004594:	4691                	li	a3,4
23004596:	858a                	mv	a1,sp
23004598:	8526                	mv	a0,s1
2300459a:	9782                	jalr	a5
2300459c:	bf1d                	j	230044d2 <uart_isr+0xa4>

2300459e <UART1_IRQ>:
 * @brief
 *
 */
void UART1_IRQ(void)
{
    uart_isr(&uartx_device[UART1_INDEX]);
2300459e:	85018513          	addi	a0,gp,-1968 # 42016050 <uartx_device+0x50>
230045a2:	b571                	j	2300442e <uart_isr>

230045a4 <UART0_IRQ>:
    uart_isr(&uartx_device[UART0_INDEX]);
230045a4:	42016537          	lui	a0,0x42016
230045a8:	00050513          	mv	a0,a0
230045ac:	b549                	j	2300442e <uart_isr>

230045ae <usb_control>:
 */
int usb_control(struct device *dev, int cmd, void *args)
{
    struct usb_dc_device *usb_device = (struct usb_dc_device *)dev;

    switch (cmd) {
230045ae:	47c5                	li	a5,17
230045b0:	0ef58063          	beq	a1,a5,23004690 <usb_control+0xe2>
{
230045b4:	1101                	addi	sp,sp,-32
230045b6:	cc22                	sw	s0,24(sp)
230045b8:	ce06                	sw	ra,28(sp)
230045ba:	ca26                	sw	s1,20(sp)
230045bc:	c84a                	sw	s2,16(sp)
230045be:	c64e                	sw	s3,12(sp)
230045c0:	c452                	sw	s4,8(sp)
230045c2:	8432                	mv	s0,a2
    switch (cmd) {
230045c4:	02b7db63          	bge	a5,a1,230045fa <usb_control+0x4c>
230045c8:	47d1                	li	a5,20
230045ca:	0cf58e63          	beq	a1,a5,230046a6 <usb_control+0xf8>
230045ce:	08b7da63          	bge	a5,a1,23004662 <usb_control+0xb4>
230045d2:	47d5                	li	a5,21
230045d4:	0cf58e63          	beq	a1,a5,230046b0 <usb_control+0x102>
230045d8:	47d9                	li	a5,22
230045da:	00f59763          	bne	a1,a5,230045e8 <usb_control+0x3a>
        case DEVICE_CTRL_USB_DC_SET_TX_DMA /* constant-expression */:
            USB_Set_EPx_TX_DMA_Interface_Config(((uint32_t)args) & 0x7f, ENABLE);
            break;

        case DEVICE_CTRL_USB_DC_SET_RX_DMA /* constant-expression */:
            USB_Set_EPx_RX_DMA_Interface_Config(((uint32_t)args) & 0x7f, ENABLE);
230045de:	4585                	li	a1,1
230045e0:	07f67513          	andi	a0,a2,127
230045e4:	3da020ef          	jal	ra,230069be <USB_Set_EPx_RX_DMA_Interface_Config>

        default:
            break;
    }

    return 0;
230045e8:	4501                	li	a0,0
}
230045ea:	40f2                	lw	ra,28(sp)
230045ec:	4462                	lw	s0,24(sp)
230045ee:	44d2                	lw	s1,20(sp)
230045f0:	4942                	lw	s2,16(sp)
230045f2:	49b2                	lw	s3,12(sp)
230045f4:	4a22                	lw	s4,8(sp)
230045f6:	6105                	addi	sp,sp,32
230045f8:	8082                	ret
    switch (cmd) {
230045fa:	47a1                	li	a5,8
230045fc:	0cf58163          	beq	a1,a5,230046be <usb_control+0x110>
23004600:	00b7df63          	bge	a5,a1,2300461e <usb_control+0x70>
23004604:	47a5                	li	a5,9
23004606:	0cf58063          	beq	a1,a5,230046c6 <usb_control+0x118>
2300460a:	47c1                	li	a5,16
2300460c:	fcf59ee3          	bne	a1,a5,230045e8 <usb_control+0x3a>
            USB_Set_EPx_Status(USB_EP_GET_IDX(((uint32_t)args) & 0x7f), USB_EP_STATUS_ACK);
23004610:	4581                	li	a1,0
23004612:	07f67513          	andi	a0,a2,127
23004616:	685010ef          	jal	ra,2300649a <USB_Set_EPx_Status>
            return 0;
2300461a:	4501                	li	a0,0
2300461c:	b7f9                	j	230045ea <usb_control+0x3c>
    switch (cmd) {
2300461e:	4785                	li	a5,1
23004620:	0af58763          	beq	a1,a5,230046ce <usb_control+0x120>
23004624:	4789                	li	a5,2
23004626:	fcf591e3          	bne	a1,a5,230045e8 <usb_control+0x3a>
            uint32_t offset = __builtin_ctz((uint32_t)args);
2300462a:	8532                	mv	a0,a2
2300462c:	d01fb0ef          	jal	ra,2300032c <__ctzsi2>
            while (offset < 24) {
23004630:	47dd                	li	a5,23
            uint32_t offset = __builtin_ctz((uint32_t)args);
23004632:	84aa                	mv	s1,a0
            while (offset < 24) {
23004634:	faa7cae3          	blt	a5,a0,230045e8 <usb_control+0x3a>
                if ((uint32_t)args & (1 << offset)) {
23004638:	4a05                	li	s4,1
            while (offset < 24) {
2300463a:	49e1                	li	s3,24
2300463c:	a021                	j	23004644 <usb_control+0x96>
                offset++;
2300463e:	0485                	addi	s1,s1,1
            while (offset < 24) {
23004640:	fb3484e3          	beq	s1,s3,230045e8 <usb_control+0x3a>
                if ((uint32_t)args & (1 << offset)) {
23004644:	009a17b3          	sll	a5,s4,s1
23004648:	8fe1                	and	a5,a5,s0
2300464a:	dbf5                	beqz	a5,2300463e <usb_control+0x90>
                    USB_IntEn(offset, DISABLE);
2300464c:	0ff4f913          	zext.b	s2,s1
23004650:	4581                	li	a1,0
23004652:	854a                	mv	a0,s2
23004654:	75b010ef          	jal	ra,230065ae <USB_IntEn>
                    USB_IntMask(offset, MASK);
23004658:	4585                	li	a1,1
2300465a:	854a                	mv	a0,s2
2300465c:	7a3010ef          	jal	ra,230065fe <USB_IntMask>
23004660:	bff9                	j	2300463e <usb_control+0x90>
    switch (cmd) {
23004662:	47c9                	li	a5,18
23004664:	00f58a63          	beq	a1,a5,23004678 <usb_control+0xca>
23004668:	47cd                	li	a5,19
2300466a:	f6f59fe3          	bne	a1,a5,230045e8 <usb_control+0x3a>
            return USB_Get_EPx_TX_FIFO_CNT(((uint32_t)args) & 0x7f);
2300466e:	07f67513          	andi	a0,a2,127
23004672:	4c0020ef          	jal	ra,23006b32 <USB_Get_EPx_TX_FIFO_CNT>
23004676:	bf95                	j	230045ea <usb_control+0x3c>
            tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
23004678:	400006b7          	lui	a3,0x40000
2300467c:	2286a783          	lw	a5,552(a3) # 40000228 <__dtcm_load_addr+0x1cff22ac>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_ENUM, 0);
23004680:	fff00737          	lui	a4,0xfff00
23004684:	177d                	addi	a4,a4,-1
23004686:	8ff9                	and	a5,a5,a4
            BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
23004688:	22f6a423          	sw	a5,552(a3)
            return 0;
2300468c:	4501                	li	a0,0
2300468e:	bfb1                	j	230045ea <usb_control+0x3c>
            tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
23004690:	40000737          	lui	a4,0x40000
23004694:	22872783          	lw	a5,552(a4) # 40000228 <__dtcm_load_addr+0x1cff22ac>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_ENUM, 1);
23004698:	001006b7          	lui	a3,0x100
            return 0;
2300469c:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_ENUM, 1);
2300469e:	8fd5                	or	a5,a5,a3
            BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
230046a0:	22f72423          	sw	a5,552(a4)
}
230046a4:	8082                	ret
            return USB_Get_EPx_RX_FIFO_CNT(((uint32_t)args) & 0x7f);
230046a6:	07f67513          	andi	a0,a2,127
230046aa:	52c020ef          	jal	ra,23006bd6 <USB_Get_EPx_RX_FIFO_CNT>
230046ae:	bf35                	j	230045ea <usb_control+0x3c>
            USB_Set_EPx_TX_DMA_Interface_Config(((uint32_t)args) & 0x7f, ENABLE);
230046b0:	4585                	li	a1,1
230046b2:	07f67513          	andi	a0,a2,127
230046b6:	194020ef          	jal	ra,2300684a <USB_Set_EPx_TX_DMA_Interface_Config>
    return 0;
230046ba:	4501                	li	a0,0
            break;
230046bc:	b73d                	j	230045ea <usb_control+0x3c>
            usb_device->tx_dma = (struct device *)args;
230046be:	14c52023          	sw	a2,320(a0) # 42016140 <__global_locale+0x40>
    return 0;
230046c2:	4501                	li	a0,0
            break;
230046c4:	b71d                	j	230045ea <usb_control+0x3c>
            usb_device->rx_dma = (struct device *)args;
230046c6:	14c52223          	sw	a2,324(a0)
    return 0;
230046ca:	4501                	li	a0,0
            break;
230046cc:	bf39                	j	230045ea <usb_control+0x3c>
            uint32_t offset = __builtin_ctz((uint32_t)args);
230046ce:	8532                	mv	a0,a2
230046d0:	c5dfb0ef          	jal	ra,2300032c <__ctzsi2>
            while (offset < 24) {
230046d4:	47dd                	li	a5,23
            uint32_t offset = __builtin_ctz((uint32_t)args);
230046d6:	84aa                	mv	s1,a0
                if ((uint32_t)args & (1 << offset)) {
230046d8:	4a05                	li	s4,1
            while (offset < 24) {
230046da:	49e1                	li	s3,24
230046dc:	00a7d663          	bge	a5,a0,230046e8 <usb_control+0x13a>
230046e0:	b721                	j	230045e8 <usb_control+0x3a>
                offset++;
230046e2:	0485                	addi	s1,s1,1
            while (offset < 24) {
230046e4:	f13482e3          	beq	s1,s3,230045e8 <usb_control+0x3a>
                if ((uint32_t)args & (1 << offset)) {
230046e8:	009a17b3          	sll	a5,s4,s1
230046ec:	8fe1                	and	a5,a5,s0
230046ee:	dbf5                	beqz	a5,230046e2 <usb_control+0x134>
                    USB_IntEn(offset, ENABLE);
230046f0:	0ff4f913          	zext.b	s2,s1
230046f4:	4585                	li	a1,1
230046f6:	854a                	mv	a0,s2
230046f8:	6b7010ef          	jal	ra,230065ae <USB_IntEn>
                    USB_IntMask(offset, UNMASK);
230046fc:	4581                	li	a1,0
230046fe:	854a                	mv	a0,s2
23004700:	6ff010ef          	jal	ra,230065fe <USB_IntMask>
23004704:	bff9                	j	230046e2 <usb_control+0x134>

23004706 <usb_write>:

int usb_write(struct device *dev, uint32_t pos, const void *buffer, uint32_t size)
{
23004706:	1101                	addi	sp,sp,-32
23004708:	ca26                	sw	s1,20(sp)
    struct usb_dc_device *usb_device = (struct usb_dc_device *)dev;
    uint8_t ep_idx = USB_EP_GET_IDX(pos);

    if (usb_device->in_ep[ep_idx].ep_cfg.ep_type == USBD_EP_TYPE_ISOC) {
2300470a:	07f5f493          	andi	s1,a1,127
2300470e:	00448793          	addi	a5,s1,4
23004712:	0792                	slli	a5,a5,0x4
23004714:	97aa                	add	a5,a5,a0
{
23004716:	ce06                	sw	ra,28(sp)
23004718:	cc22                	sw	s0,24(sp)
2300471a:	c84a                	sw	s2,16(sp)
2300471c:	c64e                	sw	s3,12(sp)
    if (usb_device->in_ep[ep_idx].ep_cfg.ep_type == USBD_EP_TYPE_ISOC) {
2300471e:	00c7c703          	lbu	a4,12(a5)
23004722:	4785                	li	a5,1
23004724:	06f71763          	bne	a4,a5,23004792 <usb_write+0x8c>
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x10;

        dma_channel_stop(usb_device->tx_dma);
23004728:	892a                	mv	s2,a0
2300472a:	14052503          	lw	a0,320(a0)
2300472e:	89b2                	mv	s3,a2
23004730:	45c9                	li	a1,18
23004732:	4601                	li	a2,0
23004734:	8436                	mv	s0,a3
23004736:	37f050ef          	jal	ra,2300a2b4 <device_control>
        usb_lli_list.src_addr = (uint32_t)buffer;
2300473a:	c4818793          	addi	a5,gp,-952 # 42016448 <usb_lli_list>
        usb_lli_list.dst_addr = usb_ep_addr;
        usb_lli_list.cfg.bits.TransferSize = size;
2300473e:	47d8                	lw	a4,12(a5)
23004740:	01441693          	slli	a3,s0,0x14
23004744:	82d1                	srli	a3,a3,0x14
23004746:	04003437          	lui	s0,0x4003
2300474a:	8ec1                	or	a3,a3,s0
2300474c:	f3fe4437          	lui	s0,0xf3fe4
23004750:	8c79                	and	s0,s0,a4
        usb_lli_list.cfg.bits.DI = 0;
        usb_lli_list.cfg.bits.SI = 1;
        usb_lli_list.cfg.bits.SBSize = DMA_BURST_INCR16;
        usb_lli_list.cfg.bits.DBSize = DMA_BURST_INCR1;
        dma_channel_update(usb_device->tx_dma, (void *)((uint32_t)&usb_lli_list));
23004752:	14092503          	lw	a0,320(s2)
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x10;
23004756:	4000e5b7          	lui	a1,0x4000e
        usb_lli_list.cfg.bits.TransferSize = size;
2300475a:	8ec1                	or	a3,a3,s0
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x10;
2300475c:	b0858593          	addi	a1,a1,-1272 # 4000db08 <__dtcm_load_addr+0x1cfffb8c>
23004760:	0492                	slli	s1,s1,0x4
23004762:	94ae                	add	s1,s1,a1
        dma_channel_update(usb_device->tx_dma, (void *)((uint32_t)&usb_lli_list));
23004764:	c4818613          	addi	a2,gp,-952 # 42016448 <usb_lli_list>
23004768:	45cd                	li	a1,19
        usb_lli_list.cfg.bits.TransferSize = size;
2300476a:	c7d4                	sw	a3,12(a5)
        usb_lli_list.src_addr = (uint32_t)buffer;
2300476c:	0137a023          	sw	s3,0(a5)
        usb_lli_list.dst_addr = usb_ep_addr;
23004770:	c3c4                	sw	s1,4(a5)
        dma_channel_update(usb_device->tx_dma, (void *)((uint32_t)&usb_lli_list));
23004772:	343050ef          	jal	ra,2300a2b4 <device_control>
        dma_channel_start(usb_device->tx_dma);
23004776:	14092503          	lw	a0,320(s2)
2300477a:	4601                	li	a2,0
2300477c:	45c5                	li	a1,17
2300477e:	337050ef          	jal	ra,2300a2b4 <device_control>
        return 0;
    } else {
    }

    return -1;
}
23004782:	40f2                	lw	ra,28(sp)
23004784:	4462                	lw	s0,24(sp)
23004786:	44d2                	lw	s1,20(sp)
23004788:	4942                	lw	s2,16(sp)
2300478a:	49b2                	lw	s3,12(sp)
        return 0;
2300478c:	4501                	li	a0,0
}
2300478e:	6105                	addi	sp,sp,32
23004790:	8082                	ret
23004792:	40f2                	lw	ra,28(sp)
23004794:	4462                	lw	s0,24(sp)
23004796:	44d2                	lw	s1,20(sp)
23004798:	4942                	lw	s2,16(sp)
2300479a:	49b2                	lw	s3,12(sp)
    return -1;
2300479c:	557d                	li	a0,-1
}
2300479e:	6105                	addi	sp,sp,32
230047a0:	8082                	ret

230047a2 <usb_read>:

int usb_read(struct device *dev, uint32_t pos, void *buffer, uint32_t size)
{
230047a2:	1101                	addi	sp,sp,-32
230047a4:	c84a                	sw	s2,16(sp)
    struct usb_dc_device *usb_device = (struct usb_dc_device *)dev;
    uint8_t ep_idx = USB_EP_GET_IDX(pos);

    if (usb_device->out_ep[ep_idx].ep_cfg.ep_type == USBD_EP_TYPE_ISOC) {
230047a6:	07f5f913          	andi	s2,a1,127
230047aa:	00c90713          	addi	a4,s2,12
230047ae:	0712                	slli	a4,a4,0x4
{
230047b0:	ce06                	sw	ra,28(sp)
230047b2:	cc22                	sw	s0,24(sp)
230047b4:	ca26                	sw	s1,20(sp)
230047b6:	c64e                	sw	s3,12(sp)
    if (usb_device->out_ep[ep_idx].ep_cfg.ep_type == USBD_EP_TYPE_ISOC) {
230047b8:	972a                	add	a4,a4,a0
230047ba:	00c74703          	lbu	a4,12(a4)
230047be:	4785                	li	a5,1
230047c0:	06f71b63          	bne	a4,a5,23004836 <usb_read+0x94>
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x1c;

        dma_channel_stop(usb_device->tx_dma);
230047c4:	84aa                	mv	s1,a0
230047c6:	14052503          	lw	a0,320(a0)
230047ca:	89b2                	mv	s3,a2
230047cc:	45c9                	li	a1,18
230047ce:	4601                	li	a2,0
230047d0:	8436                	mv	s0,a3
230047d2:	2e3050ef          	jal	ra,2300a2b4 <device_control>
        usb_lli_list.src_addr = usb_ep_addr;
230047d6:	c4818713          	addi	a4,gp,-952 # 42016448 <usb_lli_list>
        usb_lli_list.dst_addr = (uint32_t)buffer;
        usb_lli_list.cfg.bits.TransferSize = size;
230047da:	474c                	lw	a1,12(a4)
230047dc:	01441693          	slli	a3,s0,0x14
230047e0:	82d1                	srli	a3,a3,0x14
230047e2:	08018437          	lui	s0,0x8018
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x1c;
230047e6:	00391793          	slli	a5,s2,0x3
        usb_lli_list.cfg.bits.TransferSize = size;
230047ea:	8ec1                	or	a3,a3,s0
230047ec:	f3fe4437          	lui	s0,0xf3fe4
230047f0:	8c6d                	and	s0,s0,a1
        usb_lli_list.cfg.bits.DI = 1;
        usb_lli_list.cfg.bits.SI = 0;
        usb_lli_list.cfg.bits.SBSize = DMA_BURST_INCR1;
        usb_lli_list.cfg.bits.DBSize = DMA_BURST_INCR16;
        dma_channel_update(usb_device->rx_dma, (void *)((uint32_t)&usb_lli_list));
230047f2:	1444a503          	lw	a0,324(s1)
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x1c;
230047f6:	412787b3          	sub	a5,a5,s2
230047fa:	4000e5b7          	lui	a1,0x4000e
        usb_lli_list.cfg.bits.TransferSize = size;
230047fe:	8ec1                	or	a3,a3,s0
        uint32_t usb_ep_addr = USB_BASE + 0x308 + ep_idx * 0x1c;
23004800:	b0858593          	addi	a1,a1,-1272 # 4000db08 <__dtcm_load_addr+0x1cfffb8c>
23004804:	078a                	slli	a5,a5,0x2
23004806:	97ae                	add	a5,a5,a1
        dma_channel_update(usb_device->rx_dma, (void *)((uint32_t)&usb_lli_list));
23004808:	c4818613          	addi	a2,gp,-952 # 42016448 <usb_lli_list>
2300480c:	45cd                	li	a1,19
        usb_lli_list.cfg.bits.TransferSize = size;
2300480e:	c754                	sw	a3,12(a4)
        usb_lli_list.dst_addr = (uint32_t)buffer;
23004810:	01372223          	sw	s3,4(a4)
        usb_lli_list.src_addr = usb_ep_addr;
23004814:	c31c                	sw	a5,0(a4)
        dma_channel_update(usb_device->rx_dma, (void *)((uint32_t)&usb_lli_list));
23004816:	29f050ef          	jal	ra,2300a2b4 <device_control>
        dma_channel_start(usb_device->rx_dma);
2300481a:	1444a503          	lw	a0,324(s1)
2300481e:	4601                	li	a2,0
23004820:	45c5                	li	a1,17
23004822:	293050ef          	jal	ra,2300a2b4 <device_control>
        return 0;
    } else {
    }

    return -1;
}
23004826:	40f2                	lw	ra,28(sp)
23004828:	4462                	lw	s0,24(sp)
2300482a:	44d2                	lw	s1,20(sp)
2300482c:	4942                	lw	s2,16(sp)
2300482e:	49b2                	lw	s3,12(sp)
        return 0;
23004830:	4501                	li	a0,0
}
23004832:	6105                	addi	sp,sp,32
23004834:	8082                	ret
23004836:	40f2                	lw	ra,28(sp)
23004838:	4462                	lw	s0,24(sp)
2300483a:	44d2                	lw	s1,20(sp)
2300483c:	4942                	lw	s2,16(sp)
2300483e:	49b2                	lw	s3,12(sp)
    return -1;
23004840:	557d                	li	a0,-1
}
23004842:	6105                	addi	sp,sp,32
23004844:	8082                	ret

23004846 <usb_open>:
{
23004846:	1101                	addi	sp,sp,-32
23004848:	cc22                	sw	s0,24(sp)
    tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
2300484a:	40000437          	lui	s0,0x40000
2300484e:	22842783          	lw	a5,552(s0) # 40000228 <__dtcm_load_addr+0x1cff22ac>
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_PU_USB);
23004852:	ff800737          	lui	a4,0xff800
23004856:	177d                	addi	a4,a4,-1
{
23004858:	ce06                	sw	ra,28(sp)
2300485a:	ca26                	sw	s1,20(sp)
2300485c:	c84a                	sw	s2,16(sp)
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_PU_USB);
2300485e:	8ff9                	and	a5,a5,a4
    USB_Config_Type usbCfg = { 0 };
23004860:	c402                	sw	zero,8(sp)
23004862:	00011623          	sh	zero,12(sp)
    BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
23004866:	22f42423          	sw	a5,552(s0)
    mtimer_delay_ms(10);
2300486a:	4529                	li	a0,10
2300486c:	e06ff0ef          	jal	ra,23003e72 <mtimer_delay_ms>
    tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
23004870:	22842703          	lw	a4,552(s0)
    tmpVal = BL_SET_REG_BIT(tmpVal, GLB_PU_USB);
23004874:	00800637          	lui	a2,0x800
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_PU_USB, 0);
23004878:	ff7006b7          	lui	a3,0xff700
    tmpVal = BL_SET_REG_BIT(tmpVal, GLB_PU_USB);
2300487c:	8f51                	or	a4,a4,a2
    BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
2300487e:	22e42423          	sw	a4,552(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
23004882:	22842703          	lw	a4,552(s0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_PU_USB, 0);
23004886:	16fd                	addi	a3,a3,-1
    CPU_Interrupt_Disable(USB_IRQn);
23004888:	02500513          	li	a0,37
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_PU_USB, 0);
2300488c:	8f75                	and	a4,a4,a3
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
2300488e:	22e42423          	sw	a4,552(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR_CONFIG);
23004892:	22c42703          	lw	a4,556(s0)
    usbCfg.SoftwareCtrl = 1;
23004896:	4485                	li	s1,1
    BL_WR_REG(USB_BASE, USB_INT_EN, 0);
23004898:	4000e937          	lui	s2,0x4000e
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_BD_VTH, 7);
2300489c:	07076713          	ori	a4,a4,112
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR_CONFIG, tmpVal);
230048a0:	22e42623          	sw	a4,556(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
230048a4:	22842783          	lw	a5,552(s0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_PU_USB, 1);
230048a8:	ffbef737          	lui	a4,0xffbef
230048ac:	88f70713          	addi	a4,a4,-1905 # ffbee88f <__HeapLimit+0xbdbbe88f>
230048b0:	8fd1                	or	a5,a5,a2
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
230048b2:	22f42423          	sw	a5,552(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
230048b6:	22842783          	lw	a5,552(s0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_ROUT_NMOS, 3);
230048ba:	8ff9                	and	a5,a5,a4
230048bc:	00200737          	lui	a4,0x200
230048c0:	33070713          	addi	a4,a4,816 # 200330 <StackSize+0x1ff330>
230048c4:	8fd9                	or	a5,a5,a4
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
230048c6:	22f42423          	sw	a5,552(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR_CONFIG);
230048ca:	22c42783          	lw	a5,556(s0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_V_HYS_M, 2);
230048ce:	88889737          	lui	a4,0x88889
230048d2:	f8070713          	addi	a4,a4,-128 # 88888f80 <__HeapLimit+0x46858f80>
230048d6:	8ff9                	and	a5,a5,a4
230048d8:	22225737          	lui	a4,0x22225
230048dc:	09a70713          	addi	a4,a4,154 # 2222509a <StackSize+0x2222409a>
230048e0:	8fd9                	or	a5,a5,a4
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR_CONFIG, tmpVal);
230048e2:	22f42623          	sw	a5,556(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR_CONFIG);
230048e6:	22c42783          	lw	a5,556(s0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_ENUM, 1);
230048ea:	00100737          	lui	a4,0x100
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_BD_VTH, 7);
230048ee:	0707e793          	ori	a5,a5,112
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR_CONFIG, tmpVal);
230048f2:	22f42623          	sw	a5,556(s0)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
230048f6:	22842783          	lw	a5,552(s0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_ENUM, 1);
230048fa:	8fd9                	or	a5,a5,a4
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
230048fc:	22f42423          	sw	a5,552(s0)
    CPU_Interrupt_Disable(USB_IRQn);
23004900:	525000ef          	jal	ra,23005624 <clic_disable_interrupt>
    usbCfg.EnumOutEn = ENABLE;
23004904:	004007b7          	lui	a5,0x400
    USB_Set_Config(DISABLE, &usbCfg);
23004908:	002c                	addi	a1,sp,8
    usbCfg.EnumOutEn = ENABLE;
2300490a:	10178793          	addi	a5,a5,257 # 400101 <StackSize+0x3ff101>
    USB_Set_Config(DISABLE, &usbCfg);
2300490e:	4501                	li	a0,0
    usbCfg.EnumOutEn = ENABLE;
23004910:	c43e                	sw	a5,8(sp)
    usbCfg.SoftwareCtrl = 1;
23004912:	00911623          	sh	s1,12(sp)
    USB_Set_Config(DISABLE, &usbCfg);
23004916:	674010ef          	jal	ra,23005f8a <USB_Set_Config>
    usb_fs_device.out_ep[0].ep_cfg.ep_mps = USB_CTRL_EP_MPS;
2300491a:	04000713          	li	a4,64
    usb_fs_device.out_ep[0].ep_ena = 1U;
2300491e:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
    BL_WR_REG(USB_BASE, USB_INT_EN, 0);
23004922:	82092023          	sw	zero,-2016(s2) # 4000d820 <__dtcm_load_addr+0x1cfff8a4>
    usb_fs_device.out_ep[0].ep_cfg.ep_mps = USB_CTRL_EP_MPS;
23004926:	0ce79523          	sh	a4,202(a5)
    usb_fs_device.in_ep[0].ep_cfg.ep_mps = USB_CTRL_EP_MPS;
2300492a:	04e79523          	sh	a4,74(a5)
    usb_fs_device.out_ep[0].ep_ena = 1U;
2300492e:	0c978023          	sb	s1,192(a5)
    usb_fs_device.in_ep[0].ep_ena = 1U;
23004932:	04978023          	sb	s1,64(a5)
    usb_fs_device.out_ep[0].ep_cfg.ep_type = USBD_EP_TYPE_CTRL;
23004936:	0c078623          	sb	zero,204(a5)
    usb_fs_device.in_ep[0].ep_cfg.ep_type = USBD_EP_TYPE_CTRL;
2300493a:	04078623          	sb	zero,76(a5)
    USB_IntEn(USB_INT_RESET, ENABLE);          //1
2300493e:	4585                	li	a1,1
23004940:	4505                	li	a0,1
23004942:	46d010ef          	jal	ra,230065ae <USB_IntEn>
    USB_IntEn(USB_INT_EP0_SETUP_DONE, ENABLE); //5
23004946:	4585                	li	a1,1
23004948:	4515                	li	a0,5
2300494a:	465010ef          	jal	ra,230065ae <USB_IntEn>
    USB_IntEn(USB_INT_EP0_IN_DONE, ENABLE);    //7
2300494e:	4585                	li	a1,1
23004950:	451d                	li	a0,7
23004952:	45d010ef          	jal	ra,230065ae <USB_IntEn>
    USB_IntEn(USB_INT_EP0_OUT_DONE, ENABLE);   //9
23004956:	4585                	li	a1,1
23004958:	4525                	li	a0,9
2300495a:	455010ef          	jal	ra,230065ae <USB_IntEn>
    USB_IntEn(USB_INT_RESET_END, ENABLE);      //27
2300495e:	4585                	li	a1,1
23004960:	456d                	li	a0,27
23004962:	44d010ef          	jal	ra,230065ae <USB_IntEn>
    BL_WR_REG(USB_BASE, USB_INT_MASK, 0xffffffff);
23004966:	57fd                	li	a5,-1
23004968:	82f92423          	sw	a5,-2008(s2)
    USB_IntMask(USB_INT_RESET, UNMASK);          //1
2300496c:	4581                	li	a1,0
2300496e:	4505                	li	a0,1
23004970:	48f010ef          	jal	ra,230065fe <USB_IntMask>
    USB_IntMask(USB_INT_EP0_SETUP_DONE, UNMASK); //5
23004974:	4581                	li	a1,0
23004976:	4515                	li	a0,5
23004978:	487010ef          	jal	ra,230065fe <USB_IntMask>
    USB_IntMask(USB_INT_EP0_IN_DONE, UNMASK);    //7
2300497c:	4581                	li	a1,0
2300497e:	451d                	li	a0,7
23004980:	47f010ef          	jal	ra,230065fe <USB_IntMask>
    USB_IntMask(USB_INT_EP0_OUT_DONE, UNMASK);   //9
23004984:	4581                	li	a1,0
23004986:	4525                	li	a0,9
23004988:	477010ef          	jal	ra,230065fe <USB_IntMask>
    USB_IntMask(USB_INT_RESET_END, UNMASK);      //27
2300498c:	4581                	li	a1,0
2300498e:	456d                	li	a0,27
23004990:	46f010ef          	jal	ra,230065fe <USB_IntMask>
    USB_Clr_IntStatus(USB_INT_ALL);
23004994:	02000513          	li	a0,32
23004998:	4e3010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
    Interrupt_Handler_Register(USB_IRQn, USB_FS_IRQ);
2300499c:	230055b7          	lui	a1,0x23005
230049a0:	1dc58593          	addi	a1,a1,476 # 230051dc <USB_FS_IRQ>
230049a4:	02500513          	li	a0,37
230049a8:	457000ef          	jal	ra,230055fe <Interrupt_Handler_Register>
    CPU_Interrupt_Enable(USB_IRQn);
230049ac:	02500513          	li	a0,37
230049b0:	463000ef          	jal	ra,23005612 <clic_enable_interrupt>
    USB_Enable();
230049b4:	5b0010ef          	jal	ra,23005f64 <USB_Enable>
}
230049b8:	40f2                	lw	ra,28(sp)
230049ba:	4462                	lw	s0,24(sp)
230049bc:	44d2                	lw	s1,20(sp)
230049be:	4942                	lw	s2,16(sp)
230049c0:	4501                	li	a0,0
230049c2:	6105                	addi	sp,sp,32
230049c4:	8082                	ret

230049c6 <usb_close>:
{
230049c6:	1141                	addi	sp,sp,-16
    CPU_Interrupt_Disable(USB_IRQn);
230049c8:	02500513          	li	a0,37
{
230049cc:	c606                	sw	ra,12(sp)
    CPU_Interrupt_Disable(USB_IRQn);
230049ce:	457000ef          	jal	ra,23005624 <clic_disable_interrupt>
    USB_IntMask(USB_INT_LPM_WAKEUP, MASK);
230049d2:	4585                	li	a1,1
230049d4:	4571                	li	a0,28
230049d6:	429010ef          	jal	ra,230065fe <USB_IntMask>
    USB_IntMask(USB_INT_LPM_PACKET, MASK);
230049da:	4585                	li	a1,1
230049dc:	4575                	li	a0,29
230049de:	421010ef          	jal	ra,230065fe <USB_IntMask>
    USB_Disable();
230049e2:	596010ef          	jal	ra,23005f78 <USB_Disable>
    USB_Clr_IntStatus(USB_INT_ALL);
230049e6:	02000513          	li	a0,32
230049ea:	491010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
    tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
230049ee:	400007b7          	lui	a5,0x40000
230049f2:	2287a703          	lw	a4,552(a5) # 40000228 <__dtcm_load_addr+0x1cff22ac>
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_PU_USB);
230049f6:	ff8006b7          	lui	a3,0xff800
230049fa:	16fd                	addi	a3,a3,-1
230049fc:	8f75                	and	a4,a4,a3
    BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
230049fe:	22e7a423          	sw	a4,552(a5)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR);
23004a02:	2287a703          	lw	a4,552(a5)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_PU_USB, 0);
23004a06:	ff7006b7          	lui	a3,0xff700
23004a0a:	16fd                	addi	a3,a3,-1
23004a0c:	8f75                	and	a4,a4,a3
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR, tmpVal);
23004a0e:	22e7a423          	sw	a4,552(a5)
        tmpVal = BL_RD_REG(GLB_BASE, GLB_USB_XCVR_CONFIG);
23004a12:	22c7a703          	lw	a4,556(a5)
    GLB_AHB_Slave1_Reset(BL_AHB_SLAVE1_USB);
23004a16:	4571                	li	a0,28
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_USB_BD_VTH, 7);
23004a18:	07076713          	ori	a4,a4,112
        BL_WR_REG(GLB_BASE, GLB_USB_XCVR_CONFIG, tmpVal);
23004a1c:	22e7a623          	sw	a4,556(a5)
    GLB_AHB_Slave1_Reset(BL_AHB_SLAVE1_USB);
23004a20:	62f000ef          	jal	ra,2300584e <GLB_AHB_Slave1_Reset>
}
23004a24:	40b2                	lw	ra,12(sp)
23004a26:	4501                	li	a0,0
23004a28:	0141                	addi	sp,sp,16
23004a2a:	8082                	ret

23004a2c <usb_dc_register>:
        return -DEVICE_EINVAL;
    }

    dev = &(usb_fs_device.parent);

    dev->open = usb_open;
23004a2c:	23005737          	lui	a4,0x23005
23004a30:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
23004a34:	84670713          	addi	a4,a4,-1978 # 23004846 <usb_open>
23004a38:	d398                	sw	a4,32(a5)
    dev->close = usb_close;
23004a3a:	23005737          	lui	a4,0x23005
23004a3e:	9c670713          	addi	a4,a4,-1594 # 230049c6 <usb_close>
23004a42:	d3d8                	sw	a4,36(a5)
    dev->control = usb_control;
23004a44:	23004737          	lui	a4,0x23004
23004a48:	5ae70713          	addi	a4,a4,1454 # 230045ae <usb_control>
23004a4c:	d798                	sw	a4,40(a5)
    dev->write = usb_write;
23004a4e:	23004737          	lui	a4,0x23004
23004a52:	70670713          	addi	a4,a4,1798 # 23004706 <usb_write>
23004a56:	d7d8                	sw	a4,44(a5)
    dev->read = usb_read;
23004a58:	23004737          	lui	a4,0x23004
23004a5c:	7a270713          	addi	a4,a4,1954 # 230047a2 <usb_read>
23004a60:	db98                	sw	a4,48(a5)

    dev->type = DEVICE_CLASS_USB;
23004a62:	4731                	li	a4,12
    dev->handle = NULL;

    return device_register(dev, name);
23004a64:	b0018513          	addi	a0,gp,-1280 # 42016300 <usb_fs_device>
    dev->type = DEVICE_CLASS_USB;
23004a68:	00e78ea3          	sb	a4,29(a5)
    dev->handle = NULL;
23004a6c:	0207ac23          	sw	zero,56(a5)
    return device_register(dev, name);
23004a70:	7580506f          	j	2300a1c8 <device_register>

23004a74 <usb_dc_set_dev_address>:
 * @param[in] addr Device address
 *
 * @return 0 on success, negative errno code on fail.
 */
int usb_dc_set_dev_address(const uint8_t addr)
{
23004a74:	1141                	addi	sp,sp,-16
23004a76:	c606                	sw	ra,12(sp)
    USB_Set_Device_Addr(addr);
23004a78:	5a4010ef          	jal	ra,2300601c <USB_Set_Device_Addr>
    return 0;
}
23004a7c:	40b2                	lw	ra,12(sp)
23004a7e:	4501                	li	a0,0
23004a80:	0141                	addi	sp,sp,16
23004a82:	8082                	ret

23004a84 <usb_dc_ep_open>:
int usb_dc_ep_open(struct device *dev, const struct usb_dc_ep_cfg *ep_cfg)
{
    uint8_t ep;
    EP_Config_Type epCfg;

    if (!ep_cfg) {
23004a84:	10058363          	beqz	a1,23004b8a <usb_dc_ep_open+0x106>
{
23004a88:	1101                	addi	sp,sp,-32
23004a8a:	cc22                	sw	s0,24(sp)
23004a8c:	ce06                	sw	ra,28(sp)
23004a8e:	ca26                	sw	s1,20(sp)
23004a90:	c84a                	sw	s2,16(sp)
        return -1;
    }

    ep = ep_cfg->ep_addr;
23004a92:	0005c783          	lbu	a5,0(a1)
    uint8_t ep_idx = USB_EP_GET_IDX(ep);

    USB_DC_LOG_DBG("%s ep %x, mps %d, type %d\r\n", __func__, ep, ep_cfg->ep_mps, ep_cfg->ep_type);

    if (ep_idx == 0) {
        return 0;
23004a96:	4501                	li	a0,0
    uint8_t ep_idx = USB_EP_GET_IDX(ep);
23004a98:	07f7f413          	andi	s0,a5,127
    if (ep_idx == 0) {
23004a9c:	c425                	beqz	s0,23004b04 <usb_dc_ep_open+0x80>
    }

    if (USB_EP_DIR_IS_OUT(ep)) {
23004a9e:	01879493          	slli	s1,a5,0x18
23004aa2:	84e1                	srai	s1,s1,0x18
        epCfg.dir = EP_OUT;
        epCfg.EPMaxPacketSize = ep_cfg->ep_mps;
23004aa4:	0025d703          	lhu	a4,2(a1)
    if (USB_EP_DIR_IS_OUT(ep)) {
23004aa8:	0604c463          	bltz	s1,23004b10 <usb_dc_ep_open+0x8c>
        usb_fs_device.out_ep[ep_idx].ep_cfg.ep_mps = ep_cfg->ep_mps;
23004aac:	00c40793          	addi	a5,s0,12
23004ab0:	b0018913          	addi	s2,gp,-1280 # 42016300 <usb_fs_device>
23004ab4:	0792                	slli	a5,a5,0x4
23004ab6:	97ca                	add	a5,a5,s2
23004ab8:	00e79523          	sh	a4,10(a5)
        usb_fs_device.out_ep[ep_idx].ep_cfg.ep_type = ep_cfg->ep_type;
23004abc:	0045c683          	lbu	a3,4(a1)
        epCfg.dir = EP_OUT;
23004ac0:	4609                	li	a2,2
        epCfg.EPMaxPacketSize = ep_cfg->ep_mps;
23004ac2:	00e11623          	sh	a4,12(sp)
        epCfg.dir = EP_OUT;
23004ac6:	00c10723          	sb	a2,14(sp)
        usb_fs_device.out_ep[ep_idx].ep_cfg.ep_type = ep_cfg->ep_type;
23004aca:	00d78623          	sb	a3,12(a5)
        epCfg.EPMaxPacketSize = ep_cfg->ep_mps;
        usb_fs_device.in_ep[ep_idx].ep_cfg.ep_mps = ep_cfg->ep_mps;
        usb_fs_device.in_ep[ep_idx].ep_cfg.ep_type = ep_cfg->ep_type;
    }

    switch (ep_cfg->ep_type) {
23004ace:	0045c783          	lbu	a5,4(a1)
23004ad2:	4709                	li	a4,2
23004ad4:	06e78463          	beq	a5,a4,23004b3c <usb_dc_ep_open+0xb8>
23004ad8:	08f76e63          	bltu	a4,a5,23004b74 <usb_dc_ep_open+0xf0>
23004adc:	c3dd                	beqz	a5,23004b82 <usb_dc_ep_open+0xfe>
        case USBD_EP_TYPE_CTRL:
            epCfg.type = USB_DC_EP_TYPE_CTRL;
            break;

        case USBD_EP_TYPE_ISOC:
            epCfg.type = USB_DC_EP_TYPE_ISOC;
23004ade:	00e107a3          	sb	a4,15(sp)

        default:
            return -1;
    }

    USB_Set_EPx_Config(ep_idx, &epCfg);
23004ae2:	006c                	addi	a1,sp,12
23004ae4:	8522                	mv	a0,s0
23004ae6:	3c3010ef          	jal	ra,230066a8 <USB_Set_EPx_Config>

    if (USB_EP_DIR_IS_OUT(ep)) {
23004aea:	0604c263          	bltz	s1,23004b4e <usb_dc_ep_open+0xca>
        /* Clear NAK and enable ep */
        USB_Set_EPx_Status(USB_EP_GET_IDX(ep), USB_EP_STATUS_ACK);
23004aee:	8522                	mv	a0,s0
23004af0:	4581                	li	a1,0
        usb_fs_device.out_ep[ep_idx].ep_ena = 1U;
23004af2:	0431                	addi	s0,s0,12
        USB_Set_EPx_Status(USB_EP_GET_IDX(ep), USB_EP_STATUS_ACK);
23004af4:	1a7010ef          	jal	ra,2300649a <USB_Set_EPx_Status>
        usb_fs_device.out_ep[ep_idx].ep_ena = 1U;
23004af8:	0412                	slli	s0,s0,0x4
23004afa:	944a                	add	s0,s0,s2
23004afc:	4785                	li	a5,1
23004afe:	00f40023          	sb	a5,0(s0)
        //USB_Set_EPx_Status(USB_EP_GET_IDX(ep), USB_EP_STATUS_ACK);
        USB_Set_EPx_Status(USB_EP_GET_IDX(ep), USB_EP_STATUS_NACK);
        usb_fs_device.in_ep[ep_idx].ep_ena = 1U;
    }

    return 0;
23004b02:	4501                	li	a0,0
}
23004b04:	40f2                	lw	ra,28(sp)
23004b06:	4462                	lw	s0,24(sp)
23004b08:	44d2                	lw	s1,20(sp)
23004b0a:	4942                	lw	s2,16(sp)
23004b0c:	6105                	addi	sp,sp,32
23004b0e:	8082                	ret
        usb_fs_device.in_ep[ep_idx].ep_cfg.ep_mps = ep_cfg->ep_mps;
23004b10:	00440793          	addi	a5,s0,4
23004b14:	b0018913          	addi	s2,gp,-1280 # 42016300 <usb_fs_device>
23004b18:	0792                	slli	a5,a5,0x4
23004b1a:	97ca                	add	a5,a5,s2
23004b1c:	00e79523          	sh	a4,10(a5)
        usb_fs_device.in_ep[ep_idx].ep_cfg.ep_type = ep_cfg->ep_type;
23004b20:	0045c683          	lbu	a3,4(a1)
        epCfg.dir = EP_IN;
23004b24:	4605                	li	a2,1
        epCfg.EPMaxPacketSize = ep_cfg->ep_mps;
23004b26:	00e11623          	sh	a4,12(sp)
        epCfg.dir = EP_IN;
23004b2a:	00c10723          	sb	a2,14(sp)
        usb_fs_device.in_ep[ep_idx].ep_cfg.ep_type = ep_cfg->ep_type;
23004b2e:	00d78623          	sb	a3,12(a5)
    switch (ep_cfg->ep_type) {
23004b32:	0045c783          	lbu	a5,4(a1)
23004b36:	4709                	li	a4,2
23004b38:	fae790e3          	bne	a5,a4,23004ad8 <usb_dc_ep_open+0x54>
            epCfg.type = USB_DC_EP_TYPE_BULK;
23004b3c:	4791                	li	a5,4
    USB_Set_EPx_Config(ep_idx, &epCfg);
23004b3e:	006c                	addi	a1,sp,12
23004b40:	8522                	mv	a0,s0
            epCfg.type = USB_DC_EP_TYPE_BULK;
23004b42:	00f107a3          	sb	a5,15(sp)
    USB_Set_EPx_Config(ep_idx, &epCfg);
23004b46:	363010ef          	jal	ra,230066a8 <USB_Set_EPx_Config>
    if (USB_EP_DIR_IS_OUT(ep)) {
23004b4a:	fa04d2e3          	bgez	s1,23004aee <usb_dc_ep_open+0x6a>
        USB_Set_EPx_Status(USB_EP_GET_IDX(ep), USB_EP_STATUS_NACK);
23004b4e:	8522                	mv	a0,s0
23004b50:	4585                	li	a1,1
23004b52:	149010ef          	jal	ra,2300649a <USB_Set_EPx_Status>
        usb_fs_device.in_ep[ep_idx].ep_ena = 1U;
23004b56:	00440793          	addi	a5,s0,4
23004b5a:	0792                	slli	a5,a5,0x4
23004b5c:	00f90433          	add	s0,s2,a5
23004b60:	4785                	li	a5,1
23004b62:	00f40023          	sb	a5,0(s0)
}
23004b66:	40f2                	lw	ra,28(sp)
23004b68:	4462                	lw	s0,24(sp)
23004b6a:	44d2                	lw	s1,20(sp)
23004b6c:	4942                	lw	s2,16(sp)
    return 0;
23004b6e:	4501                	li	a0,0
}
23004b70:	6105                	addi	sp,sp,32
23004b72:	8082                	ret
    switch (ep_cfg->ep_type) {
23004b74:	470d                	li	a4,3
23004b76:	557d                	li	a0,-1
23004b78:	f8e796e3          	bne	a5,a4,23004b04 <usb_dc_ep_open+0x80>
            epCfg.type = USB_DC_EP_TYPE_INTR;
23004b7c:	000107a3          	sb	zero,15(sp)
            break;
23004b80:	b78d                	j	23004ae2 <usb_dc_ep_open+0x5e>
            epCfg.type = USB_DC_EP_TYPE_CTRL;
23004b82:	4795                	li	a5,5
23004b84:	00f107a3          	sb	a5,15(sp)
            break;
23004b88:	bfa9                	j	23004ae2 <usb_dc_ep_open+0x5e>
        return -1;
23004b8a:	557d                	li	a0,-1
}
23004b8c:	8082                	ret

23004b8e <usb_dc_ep_close>:

int usb_dc_ep_close(const uint8_t ep)
{
    return 0;
}
23004b8e:	4501                	li	a0,0
23004b90:	8082                	ret

23004b92 <usb_dc_ep_set_stall>:
int usb_dc_ep_set_stall(const uint8_t ep)
{
    uint32_t tmpVal = 0;
    uint8_t ep_idx = USB_EP_GET_IDX(ep);

    if (USB_EP_DIR_IS_OUT(ep)) {
23004b92:	01851793          	slli	a5,a0,0x18
23004b96:	87e1                	srai	a5,a5,0x18
    uint8_t ep_idx = USB_EP_GET_IDX(ep);
23004b98:	07f57513          	andi	a0,a0,127
    if (USB_EP_DIR_IS_OUT(ep)) {
23004b9c:	0807cd63          	bltz	a5,23004c36 <usb_dc_ep_set_stall+0xa4>
        usb_fs_device.out_ep[ep_idx].is_stalled = 1U;
23004ba0:	00c50793          	addi	a5,a0,12
    } else {
        usb_fs_device.in_ep[ep_idx].is_stalled = 1U;
23004ba4:	00479713          	slli	a4,a5,0x4
23004ba8:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
23004bac:	97ba                	add	a5,a5,a4
23004bae:	4705                	li	a4,1
23004bb0:	c3d8                	sw	a4,4(a5)
    }

    switch (ep_idx) {
23004bb2:	4791                	li	a5,4
23004bb4:	08f50d63          	beq	a0,a5,23004c4e <usb_dc_ep_set_stall+0xbc>
23004bb8:	04a7e263          	bltu	a5,a0,23004bfc <usb_dc_ep_set_stall+0x6a>
23004bbc:	4789                	li	a5,2
23004bbe:	0af50c63          	beq	a0,a5,23004c76 <usb_dc_ep_set_stall+0xe4>
23004bc2:	00a7ff63          	bgeu	a5,a0,23004be0 <usb_dc_ep_set_stall+0x4e>
23004bc6:	478d                	li	a5,3
23004bc8:	00f51a63          	bne	a0,a5,23004bdc <usb_dc_ep_set_stall+0x4a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP2_STALL);
            BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
            break;
        case 3:
            tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
23004bcc:	4000e737          	lui	a4,0x4000e
23004bd0:	84872783          	lw	a5,-1976(a4) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP3_STALL);
23004bd4:	66c1                	lui	a3,0x10
23004bd6:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
23004bd8:	84f72423          	sw	a5,-1976(a4)

        default:
            break;
    }
    return 0;
}
23004bdc:	4501                	li	a0,0
23004bde:	8082                	ret
    switch (ep_idx) {
23004be0:	c54d                	beqz	a0,23004c8a <usb_dc_ep_set_stall+0xf8>
23004be2:	4785                	li	a5,1
23004be4:	fef51ce3          	bne	a0,a5,23004bdc <usb_dc_ep_set_stall+0x4a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
23004be8:	4000e737          	lui	a4,0x4000e
23004bec:	84072783          	lw	a5,-1984(a4) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP1_STALL);
23004bf0:	66c1                	lui	a3,0x10
}
23004bf2:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP1_STALL);
23004bf4:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
23004bf6:	84f72023          	sw	a5,-1984(a4)
}
23004bfa:	8082                	ret
    switch (ep_idx) {
23004bfc:	4799                	li	a5,6
23004bfe:	06f50263          	beq	a0,a5,23004c62 <usb_dc_ep_set_stall+0xd0>
23004c02:	479d                	li	a5,7
23004c04:	00f51c63          	bne	a0,a5,23004c1c <usb_dc_ep_set_stall+0x8a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
23004c08:	4000e737          	lui	a4,0x4000e
23004c0c:	85872783          	lw	a5,-1960(a4) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP7_STALL);
23004c10:	66c1                	lui	a3,0x10
}
23004c12:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP7_STALL);
23004c14:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
23004c16:	84f72c23          	sw	a5,-1960(a4)
}
23004c1a:	8082                	ret
    switch (ep_idx) {
23004c1c:	4795                	li	a5,5
23004c1e:	faf51fe3          	bne	a0,a5,23004bdc <usb_dc_ep_set_stall+0x4a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
23004c22:	4000e737          	lui	a4,0x4000e
23004c26:	85072783          	lw	a5,-1968(a4) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP5_STALL);
23004c2a:	66c1                	lui	a3,0x10
}
23004c2c:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP5_STALL);
23004c2e:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
23004c30:	84f72823          	sw	a5,-1968(a4)
}
23004c34:	8082                	ret
        usb_fs_device.in_ep[ep_idx].is_stalled = 1U;
23004c36:	00450793          	addi	a5,a0,4
23004c3a:	00479713          	slli	a4,a5,0x4
23004c3e:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
23004c42:	97ba                	add	a5,a5,a4
23004c44:	4705                	li	a4,1
23004c46:	c3d8                	sw	a4,4(a5)
    switch (ep_idx) {
23004c48:	4791                	li	a5,4
23004c4a:	f6f517e3          	bne	a0,a5,23004bb8 <usb_dc_ep_set_stall+0x26>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
23004c4e:	4000e737          	lui	a4,0x4000e
23004c52:	84c72783          	lw	a5,-1972(a4) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23004c56:	66c1                	lui	a3,0x10
}
23004c58:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23004c5a:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23004c5c:	84f72623          	sw	a5,-1972(a4)
}
23004c60:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
23004c62:	4000e737          	lui	a4,0x4000e
23004c66:	85472783          	lw	a5,-1964(a4) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP6_STALL);
23004c6a:	66c1                	lui	a3,0x10
}
23004c6c:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP6_STALL);
23004c6e:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
23004c70:	84f72a23          	sw	a5,-1964(a4)
}
23004c74:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
23004c76:	4000e737          	lui	a4,0x4000e
23004c7a:	84472783          	lw	a5,-1980(a4) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP2_STALL);
23004c7e:	66c1                	lui	a3,0x10
}
23004c80:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP2_STALL);
23004c82:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
23004c84:	84f72223          	sw	a5,-1980(a4)
}
23004c88:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23004c8a:	4000e737          	lui	a4,0x4000e
23004c8e:	80072783          	lw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EP0_SW_STALL);
23004c92:	010006b7          	lui	a3,0x1000
}
23004c96:	4501                	li	a0,0
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EP0_SW_STALL);
23004c98:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23004c9a:	80f72023          	sw	a5,-2048(a4)
}
23004c9e:	8082                	ret

23004ca0 <usb_dc_ep_clear_stall>:
 */
int usb_dc_ep_clear_stall(const uint8_t ep)
{
    uint8_t ep_idx = USB_EP_GET_IDX(ep);
    uint32_t tmpVal = 0;
    if (USB_EP_DIR_IS_OUT(ep)) {
23004ca0:	01851793          	slli	a5,a0,0x18
23004ca4:	87e1                	srai	a5,a5,0x18
    uint8_t ep_idx = USB_EP_GET_IDX(ep);
23004ca6:	07f57513          	andi	a0,a0,127
    if (USB_EP_DIR_IS_OUT(ep)) {
23004caa:	0a07ca63          	bltz	a5,23004d5e <usb_dc_ep_clear_stall+0xbe>
        usb_fs_device.out_ep[ep_idx].is_stalled = 0;
23004cae:	00c50793          	addi	a5,a0,12
    } else {
        usb_fs_device.in_ep[ep_idx].is_stalled = 0;
23004cb2:	00479713          	slli	a4,a5,0x4
23004cb6:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
23004cba:	97ba                	add	a5,a5,a4
23004cbc:	0007a223          	sw	zero,4(a5)
    }
    switch (ep_idx) {
23004cc0:	4791                	li	a5,4
23004cc2:	0af50a63          	beq	a0,a5,23004d76 <usb_dc_ep_clear_stall+0xd6>
23004cc6:	04a7e763          	bltu	a5,a0,23004d14 <usb_dc_ep_clear_stall+0x74>
23004cca:	4789                	li	a5,2
23004ccc:	0ef50163          	beq	a0,a5,23004dae <usb_dc_ep_clear_stall+0x10e>
23004cd0:	478d                	li	a5,3
23004cd2:	02f51063          	bne	a0,a5,23004cf2 <usb_dc_ep_clear_stall+0x52>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP2_NACK);
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP2_STALL);
            BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
            break;
        case 3:
            tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
23004cd6:	4000e6b7          	lui	a3,0x4000e
23004cda:	8486a783          	lw	a5,-1976(a3) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP3_RDY);
            tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP3_NACK);
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP3_STALL);
23004cde:	7741                	lui	a4,0xffff0
23004ce0:	177d                	addi	a4,a4,-1
23004ce2:	8ff9                	and	a5,a5,a4
23004ce4:	00060737          	lui	a4,0x60
23004ce8:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
23004cea:	84f6a423          	sw	a5,-1976(a3)

        default:
            break;
    }
    return 0;
}
23004cee:	4501                	li	a0,0
23004cf0:	8082                	ret
    switch (ep_idx) {
23004cf2:	4785                	li	a5,1
23004cf4:	fef51de3          	bne	a0,a5,23004cee <usb_dc_ep_clear_stall+0x4e>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
23004cf8:	4000e6b7          	lui	a3,0x4000e
23004cfc:	8406a783          	lw	a5,-1984(a3) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP1_STALL);
23004d00:	7741                	lui	a4,0xffff0
23004d02:	177d                	addi	a4,a4,-1
23004d04:	8ff9                	and	a5,a5,a4
23004d06:	00060737          	lui	a4,0x60
23004d0a:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
23004d0c:	84f6a023          	sw	a5,-1984(a3)
}
23004d10:	4501                	li	a0,0
23004d12:	8082                	ret
    switch (ep_idx) {
23004d14:	4799                	li	a5,6
23004d16:	06f50e63          	beq	a0,a5,23004d92 <usb_dc_ep_clear_stall+0xf2>
23004d1a:	479d                	li	a5,7
23004d1c:	02f51063          	bne	a0,a5,23004d3c <usb_dc_ep_clear_stall+0x9c>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
23004d20:	4000e6b7          	lui	a3,0x4000e
23004d24:	8586a783          	lw	a5,-1960(a3) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP7_STALL);
23004d28:	7741                	lui	a4,0xffff0
23004d2a:	177d                	addi	a4,a4,-1
23004d2c:	8ff9                	and	a5,a5,a4
23004d2e:	00060737          	lui	a4,0x60
23004d32:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
23004d34:	84f6ac23          	sw	a5,-1960(a3)
}
23004d38:	4501                	li	a0,0
23004d3a:	8082                	ret
    switch (ep_idx) {
23004d3c:	4795                	li	a5,5
23004d3e:	faf518e3          	bne	a0,a5,23004cee <usb_dc_ep_clear_stall+0x4e>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
23004d42:	4000e6b7          	lui	a3,0x4000e
23004d46:	8506a783          	lw	a5,-1968(a3) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP5_STALL);
23004d4a:	7741                	lui	a4,0xffff0
23004d4c:	177d                	addi	a4,a4,-1
23004d4e:	8ff9                	and	a5,a5,a4
23004d50:	00060737          	lui	a4,0x60
23004d54:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
23004d56:	84f6a823          	sw	a5,-1968(a3)
}
23004d5a:	4501                	li	a0,0
23004d5c:	8082                	ret
        usb_fs_device.in_ep[ep_idx].is_stalled = 0;
23004d5e:	00450793          	addi	a5,a0,4
23004d62:	00479713          	slli	a4,a5,0x4
23004d66:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
23004d6a:	97ba                	add	a5,a5,a4
23004d6c:	0007a223          	sw	zero,4(a5)
    switch (ep_idx) {
23004d70:	4791                	li	a5,4
23004d72:	f4f51ae3          	bne	a0,a5,23004cc6 <usb_dc_ep_clear_stall+0x26>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
23004d76:	4000e6b7          	lui	a3,0x4000e
23004d7a:	84c6a783          	lw	a5,-1972(a3) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23004d7e:	7741                	lui	a4,0xffff0
23004d80:	177d                	addi	a4,a4,-1
23004d82:	8ff9                	and	a5,a5,a4
23004d84:	00060737          	lui	a4,0x60
23004d88:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23004d8a:	84f6a623          	sw	a5,-1972(a3)
}
23004d8e:	4501                	li	a0,0
23004d90:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
23004d92:	4000e6b7          	lui	a3,0x4000e
23004d96:	8546a783          	lw	a5,-1964(a3) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP6_STALL);
23004d9a:	7741                	lui	a4,0xffff0
23004d9c:	177d                	addi	a4,a4,-1
23004d9e:	8ff9                	and	a5,a5,a4
23004da0:	00060737          	lui	a4,0x60
23004da4:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
23004da6:	84f6aa23          	sw	a5,-1964(a3)
}
23004daa:	4501                	li	a0,0
23004dac:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
23004dae:	4000e6b7          	lui	a3,0x4000e
23004db2:	8446a783          	lw	a5,-1980(a3) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
            tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP2_STALL);
23004db6:	7741                	lui	a4,0xffff0
23004db8:	177d                	addi	a4,a4,-1
23004dba:	8ff9                	and	a5,a5,a4
23004dbc:	00060737          	lui	a4,0x60
23004dc0:	8fd9                	or	a5,a5,a4
            BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
23004dc2:	84f6a223          	sw	a5,-1980(a3)
}
23004dc6:	4501                	li	a0,0
23004dc8:	8082                	ret

23004dca <usb_dc_ep_is_stalled>:
 */
int usb_dc_ep_is_stalled(struct device *dev, const uint8_t ep, uint8_t *stalled)
{
    uint8_t ep_idx = USB_EP_GET_IDX(ep);

    if (!stalled) {
23004dca:	ce31                	beqz	a2,23004e26 <usb_dc_ep_is_stalled+0x5c>
{
23004dcc:	1141                	addi	sp,sp,-16
23004dce:	c226                	sw	s1,4(sp)
23004dd0:	07f5f493          	andi	s1,a1,127
        return -1;
    }

    *stalled = 0U;

    if (USB_EP_DIR_IS_OUT(ep)) {
23004dd4:	05e2                	slli	a1,a1,0x18
{
23004dd6:	c422                	sw	s0,8(sp)
23004dd8:	c606                	sw	ra,12(sp)
    *stalled = 0U;
23004dda:	00060023          	sb	zero,0(a2) # 800000 <StackSize+0x7ff000>
    if (USB_EP_DIR_IS_OUT(ep)) {
23004dde:	85e1                	srai	a1,a1,0x18
23004de0:	8432                	mv	s0,a2
        if ((USB_Get_EPx_Status(ep_idx) & USB_EP_STATUS_STALL) && usb_fs_device.out_ep[ep_idx].is_stalled) {
23004de2:	8526                	mv	a0,s1
    if (USB_EP_DIR_IS_OUT(ep)) {
23004de4:	0205c663          	bltz	a1,23004e10 <usb_dc_ep_is_stalled+0x46>
        if ((USB_Get_EPx_Status(ep_idx) & USB_EP_STATUS_STALL) && usb_fs_device.out_ep[ep_idx].is_stalled) {
23004de8:	6f6010ef          	jal	ra,230064de <USB_Get_EPx_Status>
23004dec:	8909                	andi	a0,a0,2
23004dee:	c919                	beqz	a0,23004e04 <usb_dc_ep_is_stalled+0x3a>
23004df0:	04b1                	addi	s1,s1,12
23004df2:	b0018793          	addi	a5,gp,-1280 # 42016300 <usb_fs_device>
23004df6:	0492                	slli	s1,s1,0x4
23004df8:	94be                	add	s1,s1,a5
23004dfa:	40dc                	lw	a5,4(s1)
23004dfc:	c781                	beqz	a5,23004e04 <usb_dc_ep_is_stalled+0x3a>
            *stalled = 1U;
23004dfe:	4785                	li	a5,1
23004e00:	00f40023          	sb	a5,0(s0)
            *stalled = 1U;
        }
    }

    return 0;
}
23004e04:	40b2                	lw	ra,12(sp)
23004e06:	4422                	lw	s0,8(sp)
23004e08:	4492                	lw	s1,4(sp)
    return 0;
23004e0a:	4501                	li	a0,0
}
23004e0c:	0141                	addi	sp,sp,16
23004e0e:	8082                	ret
        if ((USB_Get_EPx_Status(ep_idx) & USB_EP_STATUS_STALL) && usb_fs_device.in_ep[ep_idx].is_stalled) {
23004e10:	6ce010ef          	jal	ra,230064de <USB_Get_EPx_Status>
23004e14:	8909                	andi	a0,a0,2
23004e16:	0491                	addi	s1,s1,4
23004e18:	fd69                	bnez	a0,23004df2 <usb_dc_ep_is_stalled+0x28>
}
23004e1a:	40b2                	lw	ra,12(sp)
23004e1c:	4422                	lw	s0,8(sp)
23004e1e:	4492                	lw	s1,4(sp)
    return 0;
23004e20:	4501                	li	a0,0
}
23004e22:	0141                	addi	sp,sp,16
23004e24:	8082                	ret
        return -1;
23004e26:	557d                	li	a0,-1
}
23004e28:	8082                	ret

23004e2a <usb_dc_ep_write>:
    uint32_t ep_tx_fifo_addr;

    ep_idx = USB_EP_GET_IDX(ep);

    /* Check if IN ep */
    if (USB_EP_GET_DIR(ep) != USB_EP_DIR_IN) {
23004e2a:	01859793          	slli	a5,a1,0x18
23004e2e:	87e1                	srai	a5,a5,0x18
23004e30:	1207d063          	bgez	a5,23004f50 <usb_dc_ep_write+0x126>
{
23004e34:	7179                	addi	sp,sp,-48
23004e36:	d226                	sw	s1,36(sp)
    ep_idx = USB_EP_GET_IDX(ep);
23004e38:	07f5f493          	andi	s1,a1,127
{
23004e3c:	ce4e                	sw	s3,28(sp)
23004e3e:	c462                	sw	s8,8(sp)
               usb_fs_device.in_ep[ep_idx].ep_ena) {
23004e40:	00448c13          	addi	s8,s1,4
23004e44:	b0018993          	addi	s3,gp,-1280 # 42016300 <usb_fs_device>
23004e48:	004c1793          	slli	a5,s8,0x4
{
23004e4c:	cc52                	sw	s4,24(sp)
23004e4e:	d606                	sw	ra,44(sp)
23004e50:	d422                	sw	s0,40(sp)
23004e52:	d04a                	sw	s2,32(sp)
23004e54:	ca56                	sw	s5,20(sp)
23004e56:	c85a                	sw	s6,16(sp)
23004e58:	c65e                	sw	s7,12(sp)
23004e5a:	c266                	sw	s9,4(sp)
               usb_fs_device.in_ep[ep_idx].ep_ena) {
23004e5c:	97ce                	add	a5,a5,s3
    } else if ((USB_EP_DIR_IS_IN(ep)) &&
23004e5e:	0007c783          	lbu	a5,0(a5)
23004e62:	8a2e                	mv	s4,a1
        return -USB_DC_EP_DIR_ERR;
    }

    /* Check if ep enabled */
    if (!usb_ep_is_enabled(ep)) {
        return -USB_DC_EP_EN_ERR;
23004e64:	5579                	li	a0,-2
    } else if ((USB_EP_DIR_IS_IN(ep)) &&
23004e66:	ef91                	bnez	a5,23004e82 <usb_dc_ep_write+0x58>
    if (ret_bytes) {
        *ret_bytes = data_len;
    }

    return USB_DC_OK;
}
23004e68:	50b2                	lw	ra,44(sp)
23004e6a:	5422                	lw	s0,40(sp)
23004e6c:	5492                	lw	s1,36(sp)
23004e6e:	5902                	lw	s2,32(sp)
23004e70:	49f2                	lw	s3,28(sp)
23004e72:	4a62                	lw	s4,24(sp)
23004e74:	4ad2                	lw	s5,20(sp)
23004e76:	4b42                	lw	s6,16(sp)
23004e78:	4bb2                	lw	s7,12(sp)
23004e7a:	4c22                	lw	s8,8(sp)
23004e7c:	4c92                	lw	s9,4(sp)
23004e7e:	6145                	addi	sp,sp,48
23004e80:	8082                	ret
23004e82:	01000437          	lui	s0,0x1000
23004e86:	8b32                	mv	s6,a2
23004e88:	8ab6                	mv	s5,a3
23004e8a:	8bba                	mv	s7,a4
    if (!data && data_len) {
23004e8c:	147d                	addi	s0,s0,-1
23004e8e:	c651                	beqz	a2,23004f1a <usb_dc_ep_write+0xf0>
    while (!USB_Is_EPx_RDY_Free(ep_idx) && (usb_fs_device.in_ep[ep_idx].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23004e90:	004c1913          	slli	s2,s8,0x4
23004e94:	994e                	add	s2,s2,s3
23004e96:	4c85                	li	s9,1
23004e98:	a031                	j	23004ea4 <usb_dc_ep_write+0x7a>
23004e9a:	00c94783          	lbu	a5,12(s2)
23004e9e:	01978863          	beq	a5,s9,23004eae <usb_dc_ep_write+0x84>
        if (!timeout) {
23004ea2:	c44d                	beqz	s0,23004f4c <usb_dc_ep_write+0x122>
    while (!USB_Is_EPx_RDY_Free(ep_idx) && (usb_fs_device.in_ep[ep_idx].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23004ea4:	8526                	mv	a0,s1
23004ea6:	370010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
        if (!timeout) {
23004eaa:	147d                	addi	s0,s0,-1
    while (!USB_Is_EPx_RDY_Free(ep_idx) && (usb_fs_device.in_ep[ep_idx].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23004eac:	d57d                	beqz	a0,23004e9a <usb_dc_ep_write+0x70>
    if (!data_len) {
23004eae:	060a8063          	beqz	s5,23004f0e <usb_dc_ep_write+0xe4>
    if (data_len > usb_fs_device.in_ep[ep_idx].ep_cfg.ep_mps) {
23004eb2:	004c1793          	slli	a5,s8,0x4
23004eb6:	97ce                	add	a5,a5,s3
23004eb8:	00a7d403          	lhu	s0,10(a5)
23004ebc:	008af363          	bgeu	s5,s0,23004ec2 <usb_dc_ep_write+0x98>
23004ec0:	8456                	mv	s0,s5
        if (avail_space >= usb_fs_device.in_ep[ep_idx].ep_cfg.ep_mps) {
23004ec2:	0c12                	slli	s8,s8,0x4
23004ec4:	99e2                	add	s3,s3,s8
        uint32_t avail_space = USB_Get_EPx_TX_FIFO_CNT(ep_idx);
23004ec6:	8526                	mv	a0,s1
23004ec8:	46b010ef          	jal	ra,23006b32 <USB_Get_EPx_TX_FIFO_CNT>
        if (avail_space >= usb_fs_device.in_ep[ep_idx].ep_cfg.ep_mps) {
23004ecc:	00a9d783          	lhu	a5,10(s3)
23004ed0:	fef56be3          	bltu	a0,a5,23004ec6 <usb_dc_ep_write+0x9c>
    ep_tx_fifo_addr = USB_BASE + USB_EP0_TX_FIFO_WDATA_OFFSET + ep_idx * 0x10;
23004ed4:	4000e7b7          	lui	a5,0x4000e
23004ed8:	00449913          	slli	s2,s1,0x4
23004edc:	90878793          	addi	a5,a5,-1784 # 4000d908 <__dtcm_load_addr+0x1cfff98c>
    if ((data_len == 1) && (ep_idx == 0)) {
23004ee0:	4705                	li	a4,1
    ep_tx_fifo_addr = USB_BASE + USB_EP0_TX_FIFO_WDATA_OFFSET + ep_idx * 0x10;
23004ee2:	993e                	add	s2,s2,a5
    if ((data_len == 1) && (ep_idx == 0)) {
23004ee4:	04e40e63          	beq	s0,a4,23004f40 <usb_dc_ep_write+0x116>
    } else if (ep_idx == 0) {
23004ee8:	c0a9                	beqz	s1,23004f2a <usb_dc_ep_write+0x100>
    memcopy_to_fifo((void *)ep_tx_fifo_addr, (uint8_t *)data, data_len);
23004eea:	8622                	mv	a2,s0
23004eec:	85da                	mv	a1,s6
23004eee:	854a                	mv	a0,s2
    if (USB_EP_GET_IDX(ep) != 0)
23004ef0:	f7fa7a13          	andi	s4,s4,-129
    memcopy_to_fifo((void *)ep_tx_fifo_addr, (uint8_t *)data, data_len);
23004ef4:	1eb050ef          	jal	ra,2300a8de <memcopy_to_fifo>
    if (USB_EP_GET_IDX(ep) != 0)
23004ef8:	000a0563          	beqz	s4,23004f02 <usb_dc_ep_write+0xd8>
        USB_Set_EPx_Rdy(USB_EP_GET_IDX(ep));
23004efc:	8526                	mv	a0,s1
23004efe:	214010ef          	jal	ra,23006112 <USB_Set_EPx_Rdy>
    if (ret_bytes) {
23004f02:	000b8a63          	beqz	s7,23004f16 <usb_dc_ep_write+0xec>
        *ret_bytes = data_len;
23004f06:	008ba023          	sw	s0,0(s7)
    return USB_DC_OK;
23004f0a:	4501                	li	a0,0
23004f0c:	bfb1                	j	23004e68 <usb_dc_ep_write+0x3e>
        if ((USB_EP_GET_IDX(ep) != 0)) {
23004f0e:	f7fa7a13          	andi	s4,s4,-129
23004f12:	000a1763          	bnez	s4,23004f20 <usb_dc_ep_write+0xf6>
            return USB_DC_OK;
23004f16:	4501                	li	a0,0
23004f18:	bf81                	j	23004e68 <usb_dc_ep_write+0x3e>
    if (!data && data_len) {
23004f1a:	dabd                	beqz	a3,23004e90 <usb_dc_ep_write+0x66>
        return -USB_DC_ADDR_ERR;
23004f1c:	5571                	li	a0,-4
23004f1e:	b7a9                	j	23004e68 <usb_dc_ep_write+0x3e>
            USB_Set_EPx_Rdy(USB_EP_GET_IDX(ep));
23004f20:	8526                	mv	a0,s1
23004f22:	1f0010ef          	jal	ra,23006112 <USB_Set_EPx_Rdy>
            return USB_DC_OK;
23004f26:	4501                	li	a0,0
23004f28:	b781                	j	23004e68 <usb_dc_ep_write+0x3e>
        USB_Set_EPx_Xfer_Size(EP_ID0, 64);
23004f2a:	04000593          	li	a1,64
23004f2e:	4501                	li	a0,0
23004f30:	108010ef          	jal	ra,23006038 <USB_Set_EPx_Xfer_Size>
    memcopy_to_fifo((void *)ep_tx_fifo_addr, (uint8_t *)data, data_len);
23004f34:	8622                	mv	a2,s0
23004f36:	85da                	mv	a1,s6
23004f38:	854a                	mv	a0,s2
23004f3a:	1a5050ef          	jal	ra,2300a8de <memcopy_to_fifo>
    if (USB_EP_GET_IDX(ep) != 0)
23004f3e:	b7d1                	j	23004f02 <usb_dc_ep_write+0xd8>
    if ((data_len == 1) && (ep_idx == 0)) {
23004f40:	f4cd                	bnez	s1,23004eea <usb_dc_ep_write+0xc0>
        USB_Set_EPx_Xfer_Size(EP_ID0, 1);
23004f42:	4585                	li	a1,1
23004f44:	4501                	li	a0,0
23004f46:	0f2010ef          	jal	ra,23006038 <USB_Set_EPx_Xfer_Size>
23004f4a:	b7ed                	j	23004f34 <usb_dc_ep_write+0x10a>
            return -USB_DC_EP_TIMEOUT_ERR;
23004f4c:	5575                	li	a0,-3
23004f4e:	bf29                	j	23004e68 <usb_dc_ep_write+0x3e>
        return -USB_DC_EP_DIR_ERR;
23004f50:	557d                	li	a0,-1
}
23004f52:	8082                	ret

23004f54 <usb_dc_ep_read>:
    uint32_t read_count;
    uint32_t ep_rx_fifo_addr;
    uint32_t timeout = 0x00FFFFFF;

    /* Check if OUT ep */
    if (USB_EP_GET_DIR(ep) != USB_EP_DIR_OUT) {
23004f54:	01859793          	slli	a5,a1,0x18
23004f58:	87e1                	srai	a5,a5,0x18
23004f5a:	0a07c963          	bltz	a5,2300500c <usb_dc_ep_read+0xb8>
{
23004f5e:	1101                	addi	sp,sp,-32
23004f60:	c84a                	sw	s2,16(sp)
        usb_fs_device.out_ep[ep_idx].ep_ena) {
23004f62:	00c58793          	addi	a5,a1,12
{
23004f66:	c256                	sw	s5,4(sp)
        usb_fs_device.out_ep[ep_idx].ep_ena) {
23004f68:	b0018913          	addi	s2,gp,-1280 # 42016300 <usb_fs_device>
23004f6c:	8aba                	mv	s5,a4
23004f6e:	00479713          	slli	a4,a5,0x4
{
23004f72:	ca26                	sw	s1,20(sp)
23004f74:	ce06                	sw	ra,28(sp)
23004f76:	cc22                	sw	s0,24(sp)
23004f78:	c64e                	sw	s3,12(sp)
23004f7a:	c452                	sw	s4,8(sp)
23004f7c:	c05a                	sw	s6,0(sp)
        usb_fs_device.out_ep[ep_idx].ep_ena) {
23004f7e:	974a                	add	a4,a4,s2
    if ((USB_EP_DIR_IS_OUT(ep)) &&
23004f80:	00074703          	lbu	a4,0(a4) # 60000 <StackSize+0x5f000>
23004f84:	84ae                	mv	s1,a1
    }

    /* Check if ep enabled */
    if (!usb_ep_is_enabled(ep)) {
        USB_DC_LOG_ERR("Not enabled endpoint\r\n");
        return -USB_DC_EP_EN_ERR;
23004f86:	5579                	li	a0,-2
    if ((USB_EP_DIR_IS_OUT(ep)) &&
23004f88:	eb19                	bnez	a4,23004f9e <usb_dc_ep_read+0x4a>
    if (read_bytes) {
        *read_bytes = read_count;
    }

    return USB_DC_OK;
}
23004f8a:	40f2                	lw	ra,28(sp)
23004f8c:	4462                	lw	s0,24(sp)
23004f8e:	44d2                	lw	s1,20(sp)
23004f90:	4942                	lw	s2,16(sp)
23004f92:	49b2                	lw	s3,12(sp)
23004f94:	4a22                	lw	s4,8(sp)
23004f96:	4a92                	lw	s5,4(sp)
23004f98:	4b02                	lw	s6,0(sp)
23004f9a:	6105                	addi	sp,sp,32
23004f9c:	8082                	ret
23004f9e:	01000437          	lui	s0,0x1000
23004fa2:	8a32                	mv	s4,a2
23004fa4:	8b36                	mv	s6,a3
    if (!data && data_len) {
23004fa6:	147d                	addi	s0,s0,-1
23004fa8:	ca29                	beqz	a2,23004ffa <usb_dc_ep_read+0xa6>
    while (!USB_Is_EPx_RDY_Free(ep_idx) && (usb_fs_device.out_ep[ep_idx].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23004faa:	0792                	slli	a5,a5,0x4
23004fac:	993e                	add	s2,s2,a5
23004fae:	4985                	li	s3,1
23004fb0:	a031                	j	23004fbc <usb_dc_ep_read+0x68>
23004fb2:	00c94783          	lbu	a5,12(s2)
23004fb6:	01378863          	beq	a5,s3,23004fc6 <usb_dc_ep_read+0x72>
        if (!timeout) {
23004fba:	c439                	beqz	s0,23005008 <usb_dc_ep_read+0xb4>
    while (!USB_Is_EPx_RDY_Free(ep_idx) && (usb_fs_device.out_ep[ep_idx].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23004fbc:	8526                	mv	a0,s1
23004fbe:	258010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
        if (!timeout) {
23004fc2:	147d                	addi	s0,s0,-1
    while (!USB_Is_EPx_RDY_Free(ep_idx) && (usb_fs_device.out_ep[ep_idx].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23004fc4:	d57d                	beqz	a0,23004fb2 <usb_dc_ep_read+0x5e>
            USB_Set_EPx_Rdy(USB_EP_GET_IDX(ep));
23004fc6:	8526                	mv	a0,s1
    if (!data_len) {
23004fc8:	000b1363          	bnez	s6,23004fce <usb_dc_ep_read+0x7a>
        if ((USB_EP_GET_IDX(ep) != 0)) {
23004fcc:	e895                	bnez	s1,23005000 <usb_dc_ep_read+0xac>
    read_count = USB_Get_EPx_RX_FIFO_CNT(ep_idx);
23004fce:	409010ef          	jal	ra,23006bd6 <USB_Get_EPx_RX_FIFO_CNT>
    read_count = MIN(read_count, data_len);
23004fd2:	03656263          	bltu	a0,s6,23004ff6 <usb_dc_ep_read+0xa2>
    fifocopy_to_mem((void *)ep_rx_fifo_addr, data, read_count);
23004fd6:	4000e537          	lui	a0,0x4000e
    ep_rx_fifo_addr = (USB_BASE + USB_EP0_RX_FIFO_RDATA_OFFSET + ep_idx * 0x10);
23004fda:	0492                	slli	s1,s1,0x4
    fifocopy_to_mem((void *)ep_rx_fifo_addr, data, read_count);
23004fdc:	90c50513          	addi	a0,a0,-1780 # 4000d90c <__dtcm_load_addr+0x1cfff990>
23004fe0:	9526                	add	a0,a0,s1
23004fe2:	865a                	mv	a2,s6
23004fe4:	85d2                	mv	a1,s4
23004fe6:	10d050ef          	jal	ra,2300a8f2 <fifocopy_to_mem>
    return USB_DC_OK;
23004fea:	4501                	li	a0,0
    if (read_bytes) {
23004fec:	f80a8fe3          	beqz	s5,23004f8a <usb_dc_ep_read+0x36>
        *read_bytes = read_count;
23004ff0:	016aa023          	sw	s6,0(s5)
23004ff4:	bf59                	j	23004f8a <usb_dc_ep_read+0x36>
    read_count = MIN(read_count, data_len);
23004ff6:	8b2a                	mv	s6,a0
23004ff8:	bff9                	j	23004fd6 <usb_dc_ep_read+0x82>
    if (!data && data_len) {
23004ffa:	dac5                	beqz	a3,23004faa <usb_dc_ep_read+0x56>
        return -USB_DC_ADDR_ERR;
23004ffc:	5571                	li	a0,-4
23004ffe:	b771                	j	23004f8a <usb_dc_ep_read+0x36>
            USB_Set_EPx_Rdy(USB_EP_GET_IDX(ep));
23005000:	112010ef          	jal	ra,23006112 <USB_Set_EPx_Rdy>
            return USB_DC_OK;
23005004:	4501                	li	a0,0
23005006:	b751                	j	23004f8a <usb_dc_ep_read+0x36>
            return -USB_DC_EP_TIMEOUT_ERR;
23005008:	5575                	li	a0,-3
2300500a:	b741                	j	23004f8a <usb_dc_ep_read+0x36>
        return -USB_DC_EP_DIR_ERR;
2300500c:	557d                	li	a0,-1
}
2300500e:	8082                	ret

23005010 <usb_dc_isr>:
 * @brief
 *
 * @param device
 */
void usb_dc_isr(usb_dc_device_t *device)
{
23005010:	1101                	addi	sp,sp,-32
23005012:	cc22                	sw	s0,24(sp)
23005014:	c64e                	sw	s3,12(sp)
23005016:	c452                	sw	s4,8(sp)
23005018:	ce06                	sw	ra,28(sp)
2300501a:	ca26                	sw	s1,20(sp)
2300501c:	c84a                	sw	s2,16(sp)
2300501e:	c256                	sw	s5,4(sp)
23005020:	89aa                	mv	s3,a0
23005022:	440d                	li	s0,3

    /* EP1_DONE -> EP2_DONE -> ...... -> EP7_DONE*/
    for (USB_INT_Type epint = USB_INT_EP1_DONE; epint <= USB_INT_EP7_DONE; epint += 2) {
        if (USB_Get_IntStatus(epint)) {
            epnum = (epint - USB_INT_EP0_OUT_CMD) >> 1;
            if (!USB_Is_EPx_RDY_Free(epnum) && (device->out_ep[epnum].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23005024:	4a05                	li	s4,1
23005026:	a029                	j	23005030 <usb_dc_isr+0x20>
    for (USB_INT_Type epint = USB_INT_EP1_DONE; epint <= USB_INT_EP7_DONE; epint += 2) {
23005028:	0409                	addi	s0,s0,2
2300502a:	47c5                	li	a5,17
2300502c:	04f40863          	beq	s0,a5,2300507c <usb_dc_isr+0x6c>
23005030:	00840493          	addi	s1,s0,8 # 1000008 <StackSize+0xfff008>
23005034:	0ff4f493          	zext.b	s1,s1
        if (USB_Get_IntStatus(epint)) {
23005038:	8526                	mv	a0,s1
2300503a:	614010ef          	jal	ra,2300664e <USB_Get_IntStatus>
2300503e:	d56d                	beqz	a0,23005028 <usb_dc_isr+0x18>
            epnum = (epint - USB_INT_EP0_OUT_CMD) >> 1;
23005040:	40145913          	srai	s2,s0,0x1
            if (!USB_Is_EPx_RDY_Free(epnum) && (device->out_ep[epnum].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23005044:	0ff97513          	zext.b	a0,s2
23005048:	1ce010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
2300504c:	00c90793          	addi	a5,s2,12
23005050:	872a                	mv	a4,a0
23005052:	0792                	slli	a5,a5,0x4
                USB_DC_LOG_ERR("ep%d out busy\r\n", epnum);
                continue;
            }
            USB_Clr_IntStatus(epint);
23005054:	8526                	mv	a0,s1
            if (!USB_Is_EPx_RDY_Free(epnum) && (device->out_ep[epnum].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
23005056:	97ce                	add	a5,a5,s3
23005058:	e709                	bnez	a4,23005062 <usb_dc_isr+0x52>
2300505a:	00c7c783          	lbu	a5,12(a5)
2300505e:	fd4795e3          	bne	a5,s4,23005028 <usb_dc_isr+0x18>
            USB_Clr_IntStatus(epint);
23005062:	618010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
            device->parent.callback(&device->parent, (void *)((uint32_t)USB_SET_EP_OUT(epnum)), 0, USB_DC_EVENT_EP_OUT_NOTIFY);
23005066:	0349a783          	lw	a5,52(s3)
2300506a:	46c5                	li	a3,17
2300506c:	4601                	li	a2,0
2300506e:	85ca                	mv	a1,s2
23005070:	854e                	mv	a0,s3
23005072:	9782                	jalr	a5
    for (USB_INT_Type epint = USB_INT_EP1_DONE; epint <= USB_INT_EP7_DONE; epint += 2) {
23005074:	0409                	addi	s0,s0,2
23005076:	47c5                	li	a5,17
23005078:	faf41ce3          	bne	s0,a5,23005030 <usb_dc_isr+0x20>
2300507c:	4409                	li	s0,2

    /* EP1_CMD -> EP2_CMD -> ...... -> EP7_CMD*/
    for (USB_INT_Type epint = USB_INT_EP1_CMD; epint <= USB_INT_EP7_CMD; epint += 2) {
        if (USB_Get_IntStatus(epint)) {
            epnum = (epint - USB_INT_EP0_OUT_CMD) >> 1;
            if (!USB_Is_EPx_RDY_Free(epnum) && (device->in_ep[epnum].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
2300507e:	4a85                	li	s5,1
23005080:	a029                	j	2300508a <usb_dc_isr+0x7a>
    for (USB_INT_Type epint = USB_INT_EP1_CMD; epint <= USB_INT_EP7_CMD; epint += 2) {
23005082:	0409                	addi	s0,s0,2
23005084:	47c1                	li	a5,16
23005086:	04f40963          	beq	s0,a5,230050d8 <usb_dc_isr+0xc8>
2300508a:	00840493          	addi	s1,s0,8
2300508e:	0ff4f493          	zext.b	s1,s1
        if (USB_Get_IntStatus(epint)) {
23005092:	8526                	mv	a0,s1
23005094:	5ba010ef          	jal	ra,2300664e <USB_Get_IntStatus>
23005098:	d56d                	beqz	a0,23005082 <usb_dc_isr+0x72>
            epnum = (epint - USB_INT_EP0_OUT_CMD) >> 1;
2300509a:	40145913          	srai	s2,s0,0x1
2300509e:	0ff97a13          	zext.b	s4,s2
            if (!USB_Is_EPx_RDY_Free(epnum) && (device->in_ep[epnum].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
230050a2:	8552                	mv	a0,s4
230050a4:	172010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
230050a8:	0911                	addi	s2,s2,4
230050aa:	87aa                	mv	a5,a0
230050ac:	0912                	slli	s2,s2,0x4
                USB_DC_LOG_DBG("ep%d in busy\r\n", epnum);
                continue;
            }
            USB_Clr_IntStatus(epint);
230050ae:	8526                	mv	a0,s1
            if (!USB_Is_EPx_RDY_Free(epnum) && (device->in_ep[epnum].ep_cfg.ep_type != USBD_EP_TYPE_ISOC)) {
230050b0:	994e                	add	s2,s2,s3
230050b2:	e789                	bnez	a5,230050bc <usb_dc_isr+0xac>
230050b4:	00c94783          	lbu	a5,12(s2)
230050b8:	fd5795e3          	bne	a5,s5,23005082 <usb_dc_isr+0x72>
            USB_Clr_IntStatus(epint);
230050bc:	5be010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
            device->parent.callback(&device->parent, (void *)((uint32_t)USB_SET_EP_IN(epnum)), 0, USB_DC_EVENT_EP_IN_NOTIFY);
230050c0:	0349a783          	lw	a5,52(s3)
230050c4:	46c1                	li	a3,16
230050c6:	4601                	li	a2,0
230050c8:	080a6593          	ori	a1,s4,128
230050cc:	854e                	mv	a0,s3
230050ce:	9782                	jalr	a5
    for (USB_INT_Type epint = USB_INT_EP1_CMD; epint <= USB_INT_EP7_CMD; epint += 2) {
230050d0:	0409                	addi	s0,s0,2
230050d2:	47c1                	li	a5,16
230050d4:	faf41be3          	bne	s0,a5,2300508a <usb_dc_isr+0x7a>
        }
    }

    /* EP0 setup done */
    if (USB_Get_IntStatus(USB_INT_EP0_SETUP_DONE)) {
230050d8:	4515                	li	a0,5
230050da:	574010ef          	jal	ra,2300664e <USB_Get_IntStatus>
230050de:	cd11                	beqz	a0,230050fa <usb_dc_isr+0xea>
        if (!USB_Is_EPx_RDY_Free(0)) {
230050e0:	4501                	li	a0,0
230050e2:	134010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
230050e6:	e93d                	bnez	a0,2300515c <usb_dc_isr+0x14c>
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_ERROR);
        USB_Clr_IntStatus(USB_INT_ERROR);
        return;
    }
#endif
}
230050e8:	40f2                	lw	ra,28(sp)
230050ea:	4462                	lw	s0,24(sp)
230050ec:	44d2                	lw	s1,20(sp)
230050ee:	4942                	lw	s2,16(sp)
230050f0:	49b2                	lw	s3,12(sp)
230050f2:	4a22                	lw	s4,8(sp)
230050f4:	4a92                	lw	s5,4(sp)
230050f6:	6105                	addi	sp,sp,32
230050f8:	8082                	ret
    if (USB_Get_IntStatus(USB_INT_EP0_IN_DONE)) {
230050fa:	451d                	li	a0,7
230050fc:	552010ef          	jal	ra,2300664e <USB_Get_IntStatus>
23005100:	c105                	beqz	a0,23005120 <usb_dc_isr+0x110>
        if (!USB_Is_EPx_RDY_Free(0)) {
23005102:	4501                	li	a0,0
23005104:	112010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
23005108:	d165                	beqz	a0,230050e8 <usb_dc_isr+0xd8>
        USB_Clr_IntStatus(USB_INT_EP0_IN_DONE);
2300510a:	451d                	li	a0,7
2300510c:	56e010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
        device->parent.callback(&device->parent, (void *)0x80, 0, USB_DC_EVENT_EP0_IN_NOTIFY);
23005110:	0349a783          	lw	a5,52(s3)
23005114:	854e                	mv	a0,s3
23005116:	46b9                	li	a3,14
23005118:	4601                	li	a2,0
2300511a:	08000593          	li	a1,128
2300511e:	a881                	j	2300516e <usb_dc_isr+0x15e>
    if (USB_Get_IntStatus(USB_INT_EP0_OUT_DONE)) {
23005120:	4525                	li	a0,9
23005122:	52c010ef          	jal	ra,2300664e <USB_Get_IntStatus>
23005126:	e125                	bnez	a0,23005186 <usb_dc_isr+0x176>
    if (USB_Get_IntStatus(USB_INT_SOF)) {
23005128:	526010ef          	jal	ra,2300664e <USB_Get_IntStatus>
2300512c:	ed3d                	bnez	a0,230051aa <usb_dc_isr+0x19a>
    if (USB_Get_IntStatus(USB_INT_RESET)) {
2300512e:	4505                	li	a0,1
23005130:	51e010ef          	jal	ra,2300664e <USB_Get_IntStatus>
23005134:	ed49                	bnez	a0,230051ce <usb_dc_isr+0x1be>
    if (USB_Get_IntStatus(USB_INT_RESET_END)) {
23005136:	456d                	li	a0,27
23005138:	516010ef          	jal	ra,2300664e <USB_Get_IntStatus>
2300513c:	e13d                	bnez	a0,230051a2 <usb_dc_isr+0x192>
    if (USB_Get_IntStatus(USB_INT_VBUS_TGL)) {
2300513e:	4509                	li	a0,2
23005140:	50e010ef          	jal	ra,2300664e <USB_Get_IntStatus>
23005144:	d155                	beqz	a0,230050e8 <usb_dc_isr+0xd8>
}
23005146:	4462                	lw	s0,24(sp)
23005148:	40f2                	lw	ra,28(sp)
2300514a:	44d2                	lw	s1,20(sp)
2300514c:	4942                	lw	s2,16(sp)
2300514e:	49b2                	lw	s3,12(sp)
23005150:	4a22                	lw	s4,8(sp)
23005152:	4a92                	lw	s5,4(sp)
        USB_Clr_IntStatus(USB_INT_VBUS_TGL);
23005154:	4509                	li	a0,2
}
23005156:	6105                	addi	sp,sp,32
        USB_Clr_IntStatus(USB_INT_VBUS_TGL);
23005158:	5220106f          	j	2300667a <USB_Clr_IntStatus>
        USB_Clr_IntStatus(USB_INT_EP0_SETUP_DONE);
2300515c:	4515                	li	a0,5
2300515e:	51c010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_SETUP_NOTIFY);
23005162:	0349a783          	lw	a5,52(s3)
23005166:	854e                	mv	a0,s3
23005168:	46b5                	li	a3,13
2300516a:	4601                	li	a2,0
2300516c:	4581                	li	a1,0
        device->parent.callback(&device->parent, (void *)0x80, 0, USB_DC_EVENT_EP0_IN_NOTIFY);
2300516e:	9782                	jalr	a5
}
23005170:	4462                	lw	s0,24(sp)
23005172:	40f2                	lw	ra,28(sp)
23005174:	44d2                	lw	s1,20(sp)
23005176:	4942                	lw	s2,16(sp)
23005178:	49b2                	lw	s3,12(sp)
2300517a:	4a22                	lw	s4,8(sp)
2300517c:	4a92                	lw	s5,4(sp)
        USB_Set_EPx_Rdy(EP_ID0);
2300517e:	4501                	li	a0,0
}
23005180:	6105                	addi	sp,sp,32
        USB_Set_EPx_Rdy(EP_ID0);
23005182:	7910006f          	j	23006112 <USB_Set_EPx_Rdy>
        if (!USB_Is_EPx_RDY_Free(0)) {
23005186:	4501                	li	a0,0
23005188:	08e010ef          	jal	ra,23006216 <USB_Is_EPx_RDY_Free>
2300518c:	dd31                	beqz	a0,230050e8 <usb_dc_isr+0xd8>
        USB_Clr_IntStatus(USB_INT_EP0_OUT_DONE);
2300518e:	4525                	li	a0,9
23005190:	4ea010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
        device->parent.callback(&device->parent, (void *)0x00, 0, USB_DC_EVENT_EP0_OUT_NOTIFY);
23005194:	0349a783          	lw	a5,52(s3)
23005198:	854e                	mv	a0,s3
2300519a:	46bd                	li	a3,15
2300519c:	4601                	li	a2,0
2300519e:	4581                	li	a1,0
230051a0:	b7f9                	j	2300516e <usb_dc_isr+0x15e>
        USB_Clr_IntStatus(USB_INT_RESET_END);
230051a2:	456d                	li	a0,27
230051a4:	4d6010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
        USB_Set_EPx_Rdy(EP_ID0);
230051a8:	b7e1                	j	23005170 <usb_dc_isr+0x160>
        USB_Clr_IntStatus(USB_INT_SOF);
230051aa:	4501                	li	a0,0
230051ac:	4ce010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_SOF);
230051b0:	0349a783          	lw	a5,52(s3)
230051b4:	4689                	li	a3,2
}
230051b6:	4462                	lw	s0,24(sp)
230051b8:	40f2                	lw	ra,28(sp)
230051ba:	44d2                	lw	s1,20(sp)
230051bc:	4942                	lw	s2,16(sp)
230051be:	4a22                	lw	s4,8(sp)
230051c0:	4a92                	lw	s5,4(sp)
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_RESET);
230051c2:	854e                	mv	a0,s3
}
230051c4:	49b2                	lw	s3,12(sp)
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_RESET);
230051c6:	4601                	li	a2,0
230051c8:	4581                	li	a1,0
}
230051ca:	6105                	addi	sp,sp,32
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_RESET);
230051cc:	8782                	jr	a5
        USB_Clr_IntStatus(USB_INT_RESET);
230051ce:	4505                	li	a0,1
230051d0:	4aa010ef          	jal	ra,2300667a <USB_Clr_IntStatus>
        device->parent.callback(&device->parent, NULL, 0, USB_DC_EVENT_RESET);
230051d4:	0349a783          	lw	a5,52(s3)
230051d8:	4685                	li	a3,1
230051da:	bff1                	j	230051b6 <usb_dc_isr+0x1a6>

230051dc <USB_FS_IRQ>:
 * @brief
 *
 */
void USB_FS_IRQ(void)
{
    usb_dc_isr(&usb_fs_device);
230051dc:	b0018513          	addi	a0,gp,-1280 # 42016300 <usb_fs_device>
230051e0:	bd05                	j	23005010 <usb_dc_isr>

230051e2 <start_load>:
//extern uint32_t __copy_table_end__;
//extern uint32_t __zero_table_start__;
//extern uint32_t __zero_table_end__;

void start_load(void)
{
230051e2:	1141                	addi	sp,sp,-16

    /* Copy ITCM code */
    pSrc = &__itcm_load_addr;
    pDest = &__tcm_code_start__;

    for (; pDest < &__tcm_code_end__;) {
230051e4:	42014537          	lui	a0,0x42014
230051e8:	420157b7          	lui	a5,0x42015
{
230051ec:	c606                	sw	ra,12(sp)
    for (; pDest < &__tcm_code_end__;) {
230051ee:	00050713          	mv	a4,a0
230051f2:	ae878793          	addi	a5,a5,-1304 # 42014ae8 <__tcm_code_end__>
230051f6:	00f77f63          	bgeu	a4,a5,23005214 <start_load+0x32>
        *pDest++ = *pSrc++;
230051fa:	fff78613          	addi	a2,a5,-1
230051fe:	8e19                	sub	a2,a2,a4
23005200:	9a71                	andi	a2,a2,-4
23005202:	2300d5b7          	lui	a1,0x2300d
23005206:	0611                	addi	a2,a2,4
23005208:	49458593          	addi	a1,a1,1172 # 2300d494 <__text_code_end__>
2300520c:	00050513          	mv	a0,a0
23005210:	43f010ef          	jal	ra,23006e4e <memcpy>

    /* Copy DTCM code */
    pSrc = &__dtcm_load_addr;
    pDest = &__tcm_data_start__;

    for (; pDest < &__tcm_data_end__;) {
23005214:	42015537          	lui	a0,0x42015
23005218:	420157b7          	lui	a5,0x42015
2300521c:	ae850713          	addi	a4,a0,-1304 # 42014ae8 <__tcm_code_end__>
23005220:	ae878793          	addi	a5,a5,-1304 # 42014ae8 <__tcm_code_end__>
23005224:	00f77f63          	bgeu	a4,a5,23005242 <start_load+0x60>
        *pDest++ = *pSrc++;
23005228:	fff78613          	addi	a2,a5,-1
2300522c:	8e19                	sub	a2,a2,a4
2300522e:	9a71                	andi	a2,a2,-4
23005230:	2300e5b7          	lui	a1,0x2300e
23005234:	0611                	addi	a2,a2,4
23005236:	f7c58593          	addi	a1,a1,-132 # 2300df7c <__dtcm_load_addr>
2300523a:	ae850513          	addi	a0,a0,-1304
2300523e:	411010ef          	jal	ra,23006e4e <memcpy>

    /* BF Add system RAM data copy */
    pSrc = &__system_ram_load_addr;
    pDest = &__system_ram_data_start__;

    for (; pDest < &__system_ram_data_end__;) {
23005242:	42016537          	lui	a0,0x42016
23005246:	420167b7          	lui	a5,0x42016
2300524a:	00050713          	mv	a4,a0
2300524e:	00078793          	mv	a5,a5
23005252:	00f77f63          	bgeu	a4,a5,23005270 <start_load+0x8e>
        *pDest++ = *pSrc++;
23005256:	fff78613          	addi	a2,a5,-1 # 42015fff <__StackLimit+0xfff>
2300525a:	8e19                	sub	a2,a2,a4
2300525c:	9a71                	andi	a2,a2,-4
2300525e:	2300e5b7          	lui	a1,0x2300e
23005262:	0611                	addi	a2,a2,4
23005264:	f7c58593          	addi	a1,a1,-132 # 2300df7c <__dtcm_load_addr>
23005268:	00050513          	mv	a0,a0
2300526c:	3e3010ef          	jal	ra,23006e4e <memcpy>

    /* BF Add OCARAM data copy */
    pSrc = &__ram_load_addr;
    pDest = &__ram_data_start__;

    for (; pDest < &__ram_data_end__;) {
23005270:	42016537          	lui	a0,0x42016
23005274:	00050713          	mv	a4,a0
23005278:	a9018793          	addi	a5,gp,-1392 # 42016290 <mmheap_root>
2300527c:	00f77f63          	bgeu	a4,a5,2300529a <start_load+0xb8>
        *pDest++ = *pSrc++;
23005280:	fff78613          	addi	a2,a5,-1
23005284:	8e19                	sub	a2,a2,a4
23005286:	9a71                	andi	a2,a2,-4
23005288:	2300e5b7          	lui	a1,0x2300e
2300528c:	0611                	addi	a2,a2,4
2300528e:	f7c58593          	addi	a1,a1,-132 # 2300df7c <__dtcm_load_addr>
23005292:	00050513          	mv	a0,a0
23005296:	3b9010ef          	jal	ra,23006e4e <memcpy>
     *
     *  Both addresses must be aligned to 4 bytes boundary.
     */
    pDest = &__bss_start__;

    for (; pDest < &__bss_end__;) {
2300529a:	a9018713          	addi	a4,gp,-1392 # 42016290 <mmheap_root>
2300529e:	15418793          	addi	a5,gp,340 # 42016954 <__HeapBase>
230052a2:	00f77e63          	bgeu	a4,a5,230052be <start_load+0xdc>
        *pDest++ = 0ul;
230052a6:	fff78613          	addi	a2,a5,-1
    }

#endif
230052aa:	40b2                	lw	ra,12(sp)
        *pDest++ = 0ul;
230052ac:	8e19                	sub	a2,a2,a4
230052ae:	9a71                	andi	a2,a2,-4
230052b0:	0611                	addi	a2,a2,4
230052b2:	4581                	li	a1,0
230052b4:	a9018513          	addi	a0,gp,-1392 # 42016290 <mmheap_root>
230052b8:	0141                	addi	sp,sp,16
        *pDest++ = 0ul;
230052ba:	fcbfa06f          	j	23000284 <memset>
230052be:	40b2                	lw	ra,12(sp)
230052c0:	0141                	addi	sp,sp,16
230052c2:	8082                	ret

230052c4 <Trap_Handler>:
    unsigned long cause;
    unsigned long epc;
    unsigned long tval;
    uint8_t isecall = 0;

    MSG("Trap_Handler\r\n");
230052c4:	2300c537          	lui	a0,0x2300c
{
230052c8:	1141                	addi	sp,sp,-16
    MSG("Trap_Handler\r\n");
230052ca:	70c50513          	addi	a0,a0,1804 # 2300c70c <af_pin_table+0x3c>
{
230052ce:	c606                	sw	ra,12(sp)
230052d0:	c422                	sw	s0,8(sp)
230052d2:	c226                	sw	s1,4(sp)
    MSG("Trap_Handler\r\n");
230052d4:	d2dfd0ef          	jal	ra,23003000 <bflb_platform_printf>

    cause = read_csr(mcause);
230052d8:	34202473          	csrr	s0,mcause
    MSG("mcause=%08x\r\n", (uint32_t)cause);
230052dc:	2300c537          	lui	a0,0x2300c
230052e0:	85a2                	mv	a1,s0
230052e2:	71c50513          	addi	a0,a0,1820 # 2300c71c <af_pin_table+0x4c>
230052e6:	d1bfd0ef          	jal	ra,23003000 <bflb_platform_printf>
    epc = read_csr(mepc);
230052ea:	341024f3          	csrr	s1,mepc
    MSG("mepc:%08x\r\n", (uint32_t)epc);
230052ee:	2300c537          	lui	a0,0x2300c
230052f2:	85a6                	mv	a1,s1
230052f4:	72c50513          	addi	a0,a0,1836 # 2300c72c <af_pin_table+0x5c>
230052f8:	d09fd0ef          	jal	ra,23003000 <bflb_platform_printf>
    tval = read_csr(mtval);
230052fc:	343025f3          	csrr	a1,mtval
    MSG("mtval:%08x\r\n", (uint32_t)tval);
23005300:	2300c537          	lui	a0,0x2300c
23005304:	73850513          	addi	a0,a0,1848 # 2300c738 <af_pin_table+0x68>
23005308:	cf9fd0ef          	jal	ra,23003000 <bflb_platform_printf>

    cause = (cause & 0x3ff);
2300530c:	3ff47593          	andi	a1,s0,1023

    switch (cause) {
23005310:	4795                	li	a5,5
23005312:	08f58463          	beq	a1,a5,2300539a <Trap_Handler+0xd6>
23005316:	02b7ef63          	bltu	a5,a1,23005354 <Trap_Handler+0x90>
2300531a:	478d                	li	a5,3
2300531c:	08f58663          	beq	a1,a5,230053a8 <Trap_Handler+0xe4>
23005320:	3fc47413          	andi	s0,s0,1020
23005324:	c819                	beqz	s0,2300533a <Trap_Handler+0x76>
23005326:	4791                	li	a5,4
23005328:	08f59763          	bne	a1,a5,230053b6 <Trap_Handler+0xf2>
        case 3:
            MSG("Breakpoint\r\n");
            break;

        case 4:
            MSG("Load address misaligned\r\n");
2300532c:	2300c537          	lui	a0,0x2300c
23005330:	78c50513          	addi	a0,a0,1932 # 2300c78c <af_pin_table+0xbc>
23005334:	ccdfd0ef          	jal	ra,23003000 <bflb_platform_printf>
            write_csr(mepc, epc);
            break;
    }

    if (!isecall) {
        while (1)
23005338:	a001                	j	23005338 <Trap_Handler+0x74>
    switch (cause) {
2300533a:	4785                	li	a5,1
2300533c:	08f58763          	beq	a1,a5,230053ca <Trap_Handler+0x106>
23005340:	4789                	li	a5,2
23005342:	06f59a63          	bne	a1,a5,230053b6 <Trap_Handler+0xf2>
            MSG("Illegal instruction\r\n");
23005346:	2300c537          	lui	a0,0x2300c
2300534a:	76450513          	addi	a0,a0,1892 # 2300c764 <af_pin_table+0x94>
2300534e:	cb3fd0ef          	jal	ra,23003000 <bflb_platform_printf>
    if (!isecall) {
23005352:	b7dd                	j	23005338 <Trap_Handler+0x74>
    switch (cause) {
23005354:	47a1                	li	a5,8
23005356:	08f58163          	beq	a1,a5,230053d8 <Trap_Handler+0x114>
2300535a:	02b7f363          	bgeu	a5,a1,23005380 <Trap_Handler+0xbc>
2300535e:	47ad                	li	a5,11
23005360:	04f59b63          	bne	a1,a5,230053b6 <Trap_Handler+0xf2>
            MSG("Environment call from M-mode\r\n");
23005364:	2300d537          	lui	a0,0x2300d
23005368:	81850513          	addi	a0,a0,-2024 # 2300c818 <af_pin_table+0x148>
2300536c:	c95fd0ef          	jal	ra,23003000 <bflb_platform_printf>
            epc += 4;
23005370:	0491                	addi	s1,s1,4
            write_csr(mepc, epc);
23005372:	34149073          	csrw	mepc,s1
            ;
    }
}
23005376:	40b2                	lw	ra,12(sp)
23005378:	4422                	lw	s0,8(sp)
2300537a:	4492                	lw	s1,4(sp)
2300537c:	0141                	addi	sp,sp,16
2300537e:	8082                	ret
    switch (cause) {
23005380:	4799                	li	a5,6
23005382:	06f58563          	beq	a1,a5,230053ec <Trap_Handler+0x128>
23005386:	479d                	li	a5,7
23005388:	02f59763          	bne	a1,a5,230053b6 <Trap_Handler+0xf2>
            MSG("Store/AMO access fault\r\n");
2300538c:	2300c537          	lui	a0,0x2300c
23005390:	7dc50513          	addi	a0,a0,2012 # 2300c7dc <af_pin_table+0x10c>
23005394:	c6dfd0ef          	jal	ra,23003000 <bflb_platform_printf>
    if (!isecall) {
23005398:	b745                	j	23005338 <Trap_Handler+0x74>
            MSG("Load access fault\r\n");
2300539a:	2300c537          	lui	a0,0x2300c
2300539e:	7a850513          	addi	a0,a0,1960 # 2300c7a8 <af_pin_table+0xd8>
230053a2:	c5ffd0ef          	jal	ra,23003000 <bflb_platform_printf>
    if (!isecall) {
230053a6:	bf49                	j	23005338 <Trap_Handler+0x74>
            MSG("Breakpoint\r\n");
230053a8:	2300c537          	lui	a0,0x2300c
230053ac:	77c50513          	addi	a0,a0,1916 # 2300c77c <af_pin_table+0xac>
230053b0:	c51fd0ef          	jal	ra,23003000 <bflb_platform_printf>
    if (!isecall) {
230053b4:	b751                	j	23005338 <Trap_Handler+0x74>
            MSG("Cause num=%d\r\n", (uint32_t)cause);
230053b6:	2300d537          	lui	a0,0x2300d
230053ba:	83850513          	addi	a0,a0,-1992 # 2300c838 <af_pin_table+0x168>
230053be:	c43fd0ef          	jal	ra,23003000 <bflb_platform_printf>
            epc += 4;
230053c2:	0491                	addi	s1,s1,4
            write_csr(mepc, epc);
230053c4:	34149073          	csrw	mepc,s1
    if (!isecall) {
230053c8:	bf85                	j	23005338 <Trap_Handler+0x74>
            MSG("Instruction access fault\r\n");
230053ca:	2300c537          	lui	a0,0x2300c
230053ce:	74850513          	addi	a0,a0,1864 # 2300c748 <af_pin_table+0x78>
230053d2:	c2ffd0ef          	jal	ra,23003000 <bflb_platform_printf>
    if (!isecall) {
230053d6:	b78d                	j	23005338 <Trap_Handler+0x74>
            MSG("Environment call from U-mode\r\n");
230053d8:	2300c537          	lui	a0,0x2300c
230053dc:	7f850513          	addi	a0,a0,2040 # 2300c7f8 <af_pin_table+0x128>
230053e0:	c21fd0ef          	jal	ra,23003000 <bflb_platform_printf>
            epc += 4;
230053e4:	0491                	addi	s1,s1,4
            write_csr(mepc, epc);
230053e6:	34149073          	csrw	mepc,s1
    if (!isecall) {
230053ea:	b7b9                	j	23005338 <Trap_Handler+0x74>
            MSG("Store/AMO address misaligned\r\n");
230053ec:	2300c537          	lui	a0,0x2300c
230053f0:	7bc50513          	addi	a0,a0,1980 # 2300c7bc <af_pin_table+0xec>
230053f4:	c0dfd0ef          	jal	ra,23003000 <bflb_platform_printf>
    if (!isecall) {
230053f8:	b781                	j	23005338 <Trap_Handler+0x74>

230053fa <Interrupt_Handler>:

void Interrupt_Handler(void)
{
230053fa:	7179                	addi	sp,sp,-48
    pFunc interruptFun;
    uint32_t num = 0;
    volatile uint32_t ulMEPC = 0UL, ulMCAUSE = 0UL;
230053fc:	cc02                	sw	zero,24(sp)
{
230053fe:	d606                	sw	ra,44(sp)
23005400:	d422                	sw	s0,40(sp)
    volatile uint32_t ulMEPC = 0UL, ulMCAUSE = 0UL;
23005402:	ce02                	sw	zero,28(sp)

    /* Store a few register values that might be useful when determining why this
    function was called. */
    __asm volatile("csrr %0, mepc"
23005404:	341027f3          	csrr	a5,mepc
23005408:	cc3e                	sw	a5,24(sp)
                   : "=r"(ulMEPC));
    __asm volatile("csrr %0, mcause"
2300540a:	342027f3          	csrr	a5,mcause
2300540e:	ce3e                	sw	a5,28(sp)
                   : "=r"(ulMCAUSE));

    if ((ulMCAUSE & 0x80000000) == 0) {
23005410:	47f2                	lw	a5,28(sp)
23005412:	0207d463          	bgez	a5,2300543a <Interrupt_Handler+0x40>
        /*Exception*/
        MSG("Exception should not be here\r\n");
    } else {
        num = ulMCAUSE & 0x3FF;
23005416:	4472                	lw	s0,28(sp)

        if (num < IRQn_LAST) {
23005418:	04f00793          	li	a5,79
        num = ulMCAUSE & 0x3FF;
2300541c:	3ff47593          	andi	a1,s0,1023
        if (num < IRQn_LAST) {
23005420:	02b7e663          	bltu	a5,a1,2300544c <Interrupt_Handler+0x52>
            interruptFun = __Interrupt_Handlers[num];
23005424:	00259793          	slli	a5,a1,0x2
23005428:	c5818713          	addi	a4,gp,-936 # 42016458 <__Interrupt_Handlers>
2300542c:	97ba                	add	a5,a5,a4
2300542e:	439c                	lw	a5,0(a5)

            if (NULL != interruptFun) {
23005430:	c79d                	beqz	a5,2300545e <Interrupt_Handler+0x64>
            }
        } else {
            MSG("Unexpected interrupt num:%d\r\n", (unsigned int)num);
        }
    }
}
23005432:	5422                	lw	s0,40(sp)
23005434:	50b2                	lw	ra,44(sp)
23005436:	6145                	addi	sp,sp,48
                interruptFun();
23005438:	8782                	jr	a5
}
2300543a:	5422                	lw	s0,40(sp)
2300543c:	50b2                	lw	ra,44(sp)
        MSG("Exception should not be here\r\n");
2300543e:	2300d537          	lui	a0,0x2300d
23005442:	84850513          	addi	a0,a0,-1976 # 2300c848 <af_pin_table+0x178>
}
23005446:	6145                	addi	sp,sp,48
        MSG("Exception should not be here\r\n");
23005448:	bb9fd06f          	j	23003000 <bflb_platform_printf>
}
2300544c:	5422                	lw	s0,40(sp)
2300544e:	50b2                	lw	ra,44(sp)
            MSG("Unexpected interrupt num:%d\r\n", (unsigned int)num);
23005450:	2300d537          	lui	a0,0x2300d
23005454:	8b450513          	addi	a0,a0,-1868 # 2300c8b4 <af_pin_table+0x1e4>
}
23005458:	6145                	addi	sp,sp,48
            MSG("Unexpected interrupt num:%d\r\n", (unsigned int)num);
2300545a:	ba7fd06f          	j	23003000 <bflb_platform_printf>
                MSG("Interrupt num:%d IRQHandler not installed\r\n", (unsigned int)num);
2300545e:	2300d537          	lui	a0,0x2300d
23005462:	86850513          	addi	a0,a0,-1944 # 2300c868 <af_pin_table+0x198>
23005466:	c62e                	sw	a1,12(sp)
                if (num >= IRQ_NUM_BASE) {
23005468:	3f047413          	andi	s0,s0,1008
                MSG("Interrupt num:%d IRQHandler not installed\r\n", (unsigned int)num);
2300546c:	b95fd0ef          	jal	ra,23003000 <bflb_platform_printf>
                if (num >= IRQ_NUM_BASE) {
23005470:	45b2                	lw	a1,12(sp)
23005472:	e011                	bnez	s0,23005476 <Interrupt_Handler+0x7c>
                while (1)
23005474:	a001                	j	23005474 <Interrupt_Handler+0x7a>
                    MSG("Peripheral Interrupt num:%d \r\n", (unsigned int)num - IRQ_NUM_BASE);
23005476:	2300d537          	lui	a0,0x2300d
2300547a:	15c1                	addi	a1,a1,-16
2300547c:	89450513          	addi	a0,a0,-1900 # 2300c894 <af_pin_table+0x1c4>
23005480:	b81fd0ef          	jal	ra,23003000 <bflb_platform_printf>
23005484:	bfc5                	j	23005474 <Interrupt_Handler+0x7a>

23005486 <Interrupt_Handler_Stub>:
{
    Trap_Handler();
}

void __IRQ Interrupt_Handler_Stub(void)
{
23005486:	7175                	addi	sp,sp,-144
23005488:	c706                	sw	ra,140(sp)
2300548a:	c516                	sw	t0,136(sp)
2300548c:	c31a                	sw	t1,132(sp)
2300548e:	c11e                	sw	t2,128(sp)
23005490:	deaa                	sw	a0,124(sp)
23005492:	dcae                	sw	a1,120(sp)
23005494:	dab2                	sw	a2,116(sp)
23005496:	d8b6                	sw	a3,112(sp)
23005498:	d6ba                	sw	a4,108(sp)
2300549a:	d4be                	sw	a5,104(sp)
2300549c:	d2c2                	sw	a6,100(sp)
2300549e:	d0c6                	sw	a7,96(sp)
230054a0:	cef2                	sw	t3,92(sp)
230054a2:	ccf6                	sw	t4,88(sp)
230054a4:	cafa                	sw	t5,84(sp)
230054a6:	c8fe                	sw	t6,80(sp)
230054a8:	e682                	fsw	ft0,76(sp)
230054aa:	e486                	fsw	ft1,72(sp)
230054ac:	e28a                	fsw	ft2,68(sp)
230054ae:	e08e                	fsw	ft3,64(sp)
230054b0:	fe12                	fsw	ft4,60(sp)
230054b2:	fc16                	fsw	ft5,56(sp)
230054b4:	fa1a                	fsw	ft6,52(sp)
230054b6:	f81e                	fsw	ft7,48(sp)
230054b8:	f62a                	fsw	fa0,44(sp)
230054ba:	f42e                	fsw	fa1,40(sp)
230054bc:	f232                	fsw	fa2,36(sp)
230054be:	f036                	fsw	fa3,32(sp)
230054c0:	ee3a                	fsw	fa4,28(sp)
230054c2:	ec3e                	fsw	fa5,24(sp)
230054c4:	ea42                	fsw	fa6,20(sp)
230054c6:	e846                	fsw	fa7,16(sp)
230054c8:	e672                	fsw	ft8,12(sp)
230054ca:	e476                	fsw	ft9,8(sp)
230054cc:	e27a                	fsw	ft10,4(sp)
230054ce:	e07e                	fsw	ft11,0(sp)
    Interrupt_Handler();
230054d0:	372d                	jal	230053fa <Interrupt_Handler>
}
230054d2:	40ba                	lw	ra,140(sp)
230054d4:	42aa                	lw	t0,136(sp)
230054d6:	431a                	lw	t1,132(sp)
230054d8:	438a                	lw	t2,128(sp)
230054da:	5576                	lw	a0,124(sp)
230054dc:	55e6                	lw	a1,120(sp)
230054de:	5656                	lw	a2,116(sp)
230054e0:	56c6                	lw	a3,112(sp)
230054e2:	5736                	lw	a4,108(sp)
230054e4:	57a6                	lw	a5,104(sp)
230054e6:	5816                	lw	a6,100(sp)
230054e8:	5886                	lw	a7,96(sp)
230054ea:	4e76                	lw	t3,92(sp)
230054ec:	4ee6                	lw	t4,88(sp)
230054ee:	4f56                	lw	t5,84(sp)
230054f0:	4fc6                	lw	t6,80(sp)
230054f2:	6036                	flw	ft0,76(sp)
230054f4:	60a6                	flw	ft1,72(sp)
230054f6:	6116                	flw	ft2,68(sp)
230054f8:	6186                	flw	ft3,64(sp)
230054fa:	7272                	flw	ft4,60(sp)
230054fc:	72e2                	flw	ft5,56(sp)
230054fe:	7352                	flw	ft6,52(sp)
23005500:	73c2                	flw	ft7,48(sp)
23005502:	7532                	flw	fa0,44(sp)
23005504:	75a2                	flw	fa1,40(sp)
23005506:	7612                	flw	fa2,36(sp)
23005508:	7682                	flw	fa3,32(sp)
2300550a:	6772                	flw	fa4,28(sp)
2300550c:	67e2                	flw	fa5,24(sp)
2300550e:	6852                	flw	fa6,20(sp)
23005510:	68c2                	flw	fa7,16(sp)
23005512:	6e32                	flw	ft8,12(sp)
23005514:	6ea2                	flw	ft9,8(sp)
23005516:	6f12                	flw	ft10,4(sp)
23005518:	6f82                	flw	ft11,0(sp)
2300551a:	6149                	addi	sp,sp,144
2300551c:	30200073          	mret
	...

23005540 <Trap_Handler_Stub>:
{
23005540:	7175                	addi	sp,sp,-144
23005542:	c706                	sw	ra,140(sp)
23005544:	c516                	sw	t0,136(sp)
23005546:	c31a                	sw	t1,132(sp)
23005548:	c11e                	sw	t2,128(sp)
2300554a:	deaa                	sw	a0,124(sp)
2300554c:	dcae                	sw	a1,120(sp)
2300554e:	dab2                	sw	a2,116(sp)
23005550:	d8b6                	sw	a3,112(sp)
23005552:	d6ba                	sw	a4,108(sp)
23005554:	d4be                	sw	a5,104(sp)
23005556:	d2c2                	sw	a6,100(sp)
23005558:	d0c6                	sw	a7,96(sp)
2300555a:	cef2                	sw	t3,92(sp)
2300555c:	ccf6                	sw	t4,88(sp)
2300555e:	cafa                	sw	t5,84(sp)
23005560:	c8fe                	sw	t6,80(sp)
23005562:	e682                	fsw	ft0,76(sp)
23005564:	e486                	fsw	ft1,72(sp)
23005566:	e28a                	fsw	ft2,68(sp)
23005568:	e08e                	fsw	ft3,64(sp)
2300556a:	fe12                	fsw	ft4,60(sp)
2300556c:	fc16                	fsw	ft5,56(sp)
2300556e:	fa1a                	fsw	ft6,52(sp)
23005570:	f81e                	fsw	ft7,48(sp)
23005572:	f62a                	fsw	fa0,44(sp)
23005574:	f42e                	fsw	fa1,40(sp)
23005576:	f232                	fsw	fa2,36(sp)
23005578:	f036                	fsw	fa3,32(sp)
2300557a:	ee3a                	fsw	fa4,28(sp)
2300557c:	ec3e                	fsw	fa5,24(sp)
2300557e:	ea42                	fsw	fa6,20(sp)
23005580:	e846                	fsw	fa7,16(sp)
23005582:	e672                	fsw	ft8,12(sp)
23005584:	e476                	fsw	ft9,8(sp)
23005586:	e27a                	fsw	ft10,4(sp)
23005588:	e07e                	fsw	ft11,0(sp)
    Trap_Handler();
2300558a:	d3bff0ef          	jal	ra,230052c4 <Trap_Handler>
}
2300558e:	40ba                	lw	ra,140(sp)
23005590:	42aa                	lw	t0,136(sp)
23005592:	431a                	lw	t1,132(sp)
23005594:	438a                	lw	t2,128(sp)
23005596:	5576                	lw	a0,124(sp)
23005598:	55e6                	lw	a1,120(sp)
2300559a:	5656                	lw	a2,116(sp)
2300559c:	56c6                	lw	a3,112(sp)
2300559e:	5736                	lw	a4,108(sp)
230055a0:	57a6                	lw	a5,104(sp)
230055a2:	5816                	lw	a6,100(sp)
230055a4:	5886                	lw	a7,96(sp)
230055a6:	4e76                	lw	t3,92(sp)
230055a8:	4ee6                	lw	t4,88(sp)
230055aa:	4f56                	lw	t5,84(sp)
230055ac:	4fc6                	lw	t6,80(sp)
230055ae:	6036                	flw	ft0,76(sp)
230055b0:	60a6                	flw	ft1,72(sp)
230055b2:	6116                	flw	ft2,68(sp)
230055b4:	6186                	flw	ft3,64(sp)
230055b6:	7272                	flw	ft4,60(sp)
230055b8:	72e2                	flw	ft5,56(sp)
230055ba:	7352                	flw	ft6,52(sp)
230055bc:	73c2                	flw	ft7,48(sp)
230055be:	7532                	flw	fa0,44(sp)
230055c0:	75a2                	flw	fa1,40(sp)
230055c2:	7612                	flw	fa2,36(sp)
230055c4:	7682                	flw	fa3,32(sp)
230055c6:	6772                	flw	fa4,28(sp)
230055c8:	67e2                	flw	fa5,24(sp)
230055ca:	6852                	flw	fa6,20(sp)
230055cc:	68c2                	flw	fa7,16(sp)
230055ce:	6e32                	flw	ft8,12(sp)
230055d0:	6ea2                	flw	ft9,8(sp)
230055d2:	6f12                	flw	ft10,4(sp)
230055d4:	6f82                	flw	ft11,0(sp)
230055d6:	6149                	addi	sp,sp,144
230055d8:	30200073          	mret
	...

230055fe <Interrupt_Handler_Register>:
    Interrupt_Handler();
}

void Interrupt_Handler_Register(IRQn_Type irq, pFunc interruptFun)
{
    if (irq < IRQn_LAST) {
230055fe:	04f00793          	li	a5,79
23005602:	00a7e763          	bltu	a5,a0,23005610 <Interrupt_Handler_Register+0x12>
        __Interrupt_Handlers[irq] = interruptFun;
23005606:	050a                	slli	a0,a0,0x2
23005608:	c5818793          	addi	a5,gp,-936 # 42016458 <__Interrupt_Handlers>
2300560c:	953e                	add	a0,a0,a5
2300560e:	c10c                	sw	a1,0(a0)
    }
}
23005610:	8082                	ret

23005612 <clic_enable_interrupt>:
{
}

void clic_enable_interrupt(uint32_t source)
{
    *(volatile uint8_t *)(CLIC_HART0_ADDR + CLIC_INTIE + source) = 1;
23005612:	028007b7          	lui	a5,0x2800
23005616:	40078793          	addi	a5,a5,1024 # 2800400 <StackSize+0x27ff400>
2300561a:	953e                	add	a0,a0,a5
2300561c:	4785                	li	a5,1
2300561e:	00f50023          	sb	a5,0(a0)
}
23005622:	8082                	ret

23005624 <clic_disable_interrupt>:

void clic_disable_interrupt(uint32_t source)
{
    *(volatile uint8_t *)(CLIC_HART0_ADDR + CLIC_INTIE + source) = 0;
23005624:	028007b7          	lui	a5,0x2800
23005628:	40078793          	addi	a5,a5,1024 # 2800400 <StackSize+0x27ff400>
2300562c:	953e                	add	a0,a0,a5
2300562e:	00050023          	sb	zero,0(a0)
}
23005632:	8082                	ret

23005634 <SystemInit>:
    HBN_BOR_CFG_Type borCfg = { 0 /* pu_bor */, 0 /* irq_bor_en */, 1 /* bor_vth */, 0 /* bor_sel */ };
    HBN_Set_BOR_Cfg(&borCfg);
}

void SystemInit(void)
{
23005634:	1101                	addi	sp,sp,-32
23005636:	ce06                	sw	ra,28(sp)
  \details Disables IRQ interrupts by clearing the IE-bit in the PSR.
  Can only be executed in Privileged modes.
 */
__ALWAYS_STATIC_INLINE void __disable_irq(void)
{
    __ASM volatile("csrc mstatus, 8");
23005638:	30047073          	csrci	mstatus,8
    uint8_t isInternalPsram = 0;

    /* global IRQ disable */
    __disable_irq();

    tmpVal = BL_RD_REG(PDS_BASE, PDS_INT);
2300563c:	4000e6b7          	lui	a3,0x4000e
23005640:	46dc                	lw	a5,12(a3)
    tmpVal |= (1 << 8);      /*mask pds wakeup*/
    tmpVal |= (1 << 10);     /*mask rf done*/
    tmpVal |= (1 << 11);     /*mask pll done*/
    tmpVal &= ~(0xff << 16); /*mask all pds wakeup source int*/
23005642:	ff010737          	lui	a4,0xff010
23005646:	177d                	addi	a4,a4,-1
23005648:	8ff9                	and	a5,a5,a4
2300564a:	6705                	lui	a4,0x1
2300564c:	d0070713          	addi	a4,a4,-768 # d00 <__heap_min_size+0x900>
23005650:	8fd9                	or	a5,a5,a4
    BL_WR_REG(PDS_BASE, PDS_INT, tmpVal);
23005652:	c6dc                	sw	a5,12(a3)

    /* GLB_Set_EM_Sel(GLB_EM_0KB); */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_SEAM_MISC);
23005654:	400007b7          	lui	a5,0x40000
23005658:	5ff8                	lw	a4,124(a5)
    BL_WR_REG(GLB_BASE, GLB_SEAM_MISC, tmpVal);

    /* Restore default setting*/
    /* GLB_UART_Sig_Swap_Set(UART_SIG_SWAP_NONE); */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_PARM);
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_UART_SWAP_SET, UART_SIG_SWAP_NONE);
2300565a:	f10006b7          	lui	a3,0xf1000
2300565e:	16fd                	addi	a3,a3,-1
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_EM_SEL, GLB_EM_0KB);
23005660:	9b41                	andi	a4,a4,-16
    BL_WR_REG(GLB_BASE, GLB_SEAM_MISC, tmpVal);
23005662:	dff8                	sw	a4,124(a5)
    tmpVal = BL_RD_REG(GLB_BASE, GLB_PARM);
23005664:	0807a703          	lw	a4,128(a5) # 40000080 <__dtcm_load_addr+0x1cff2104>
    BL_WR_REG(GLB_BASE, GLB_PARM, tmpVal);

    /* fix 57.6M */
    if (SystemCoreClockGet() == 57 * 6000 * 1000) {
23005668:	4000f637          	lui	a2,0x4000f
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_UART_SWAP_SET, UART_SIG_SWAP_NONE);
2300566c:	8f75                	and	a4,a4,a3
    BL_WR_REG(GLB_BASE, GLB_PARM, tmpVal);
2300566e:	08e7a023          	sw	a4,128(a5)
    if (SystemCoreClockGet() == 57 * 6000 * 1000) {
23005672:	10862703          	lw	a4,264(a2) # 4000f108 <__dtcm_load_addr+0x1d00118c>
23005676:	146287b7          	lui	a5,0x14628
2300567a:	18078793          	addi	a5,a5,384 # 14628180 <StackSize+0x14627180>
2300567e:	00f71863          	bne	a4,a5,2300568e <SystemInit+0x5a>
        SystemCoreClockSet(57.6 * 1000 * 1000)
23005682:	036ef7b7          	lui	a5,0x36ef
23005686:	80078793          	addi	a5,a5,-2048 # 36ee800 <StackSize+0x36ed800>
2300568a:	10f62423          	sw	a5,264(a2)

    /* CLear all interrupt */
    p = (uint32_t *)(CLIC_HART0_ADDR + CLIC_INTIE);

    for (i = 0; i < (IRQn_LAST + 3) / 4; i++) {
        p[i] = 0;
2300568e:	02800537          	lui	a0,0x2800
23005692:	05000613          	li	a2,80
23005696:	4581                	li	a1,0
23005698:	40050513          	addi	a0,a0,1024 # 2800400 <StackSize+0x27ff400>
2300569c:	be9fa0ef          	jal	ra,23000284 <memset>
    }

    p = (uint32_t *)(CLIC_HART0_ADDR + CLIC_INTIP);

    for (i = 0; i < (IRQn_LAST + 3) / 4; i++) {
        p[i] = 0;
230056a0:	05000613          	li	a2,80
230056a4:	4581                	li	a1,0
230056a6:	02800537          	lui	a0,0x2800
230056aa:	bdbfa0ef          	jal	ra,23000284 <memset>
    }

    /* SF io select from efuse value */
    tmpVal = BL_RD_WORD(0x40007074);
230056ae:	400077b7          	lui	a5,0x40007
230056b2:	5bf8                	lw	a4,116(a5)
    flashCfg = ((tmpVal >> 26) & 7);
    psramCfg = ((tmpVal >> 24) & 3);
    if (flashCfg == 1 || flashCfg == 2) {
230056b4:	4685                	li	a3,1
    flashCfg = ((tmpVal >> 26) & 7);
230056b6:	01a75793          	srli	a5,a4,0x1a
230056ba:	8b9d                	andi	a5,a5,7
    if (flashCfg == 1 || flashCfg == 2) {
230056bc:	17fd                	addi	a5,a5,-1
    psramCfg = ((tmpVal >> 24) & 3);
230056be:	8361                	srli	a4,a4,0x18
    if (flashCfg == 1 || flashCfg == 2) {
230056c0:	0ff7f793          	zext.b	a5,a5
    psramCfg = ((tmpVal >> 24) & 3);
230056c4:	8b0d                	andi	a4,a4,3
    if (flashCfg == 1 || flashCfg == 2) {
230056c6:	02f6f563          	bgeu	a3,a5,230056f0 <SystemInit+0xbc>
    if (psramCfg == 1) {
        isInternalPsram = 1;
    } else {
        isInternalPsram = 0;
    }
    tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_USE_PSRAM__IO);
230056ca:	400007b7          	lui	a5,0x40000
230056ce:	0887a783          	lw	a5,136(a5) # 40000088 <__dtcm_load_addr+0x1cff210c>
    if (isInternalFlash == 1 && isInternalPsram == 0) {
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CFG_GPIO_USE_PSRAM_IO, 0x3f);
    } else {
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CFG_GPIO_USE_PSRAM_IO, 0x00);
230056d2:	fc07f793          	andi	a5,a5,-64
    }
    BL_WR_REG(GLB_BASE, GLB_GPIO_USE_PSRAM__IO, tmpVal);
230056d6:	40000737          	lui	a4,0x40000
230056da:	08f72423          	sw	a5,136(a4) # 40000088 <__dtcm_load_addr+0x1cff210c>
    HBN_Set_BOR_Cfg(&borCfg);
230056de:	0068                	addi	a0,sp,12
    HBN_BOR_CFG_Type borCfg = { 0 /* pu_bor */, 0 /* irq_bor_en */, 1 /* bor_vth */, 0 /* bor_sel */ };
230056e0:	67c1                	lui	a5,0x10
230056e2:	c63e                	sw	a5,12(sp)
    HBN_Set_BOR_Cfg(&borCfg);
230056e4:	2e7d                	jal	23005aa2 <HBN_Set_BOR_Cfg>
    __ASM volatile("csrs mstatus, 8");
230056e6:	30046073          	csrsi	mstatus,8
#endif
    /* init bor for all platform */
    system_bor_init();
    /* global IRQ enable */
    __enable_irq();
}
230056ea:	40f2                	lw	ra,28(sp)
230056ec:	6105                	addi	sp,sp,32
230056ee:	8082                	ret
    if (psramCfg == 1) {
230056f0:	fcd70de3          	beq	a4,a3,230056ca <SystemInit+0x96>
    tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_USE_PSRAM__IO);
230056f4:	400007b7          	lui	a5,0x40000
230056f8:	0887a783          	lw	a5,136(a5) # 40000088 <__dtcm_load_addr+0x1cff210c>
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CFG_GPIO_USE_PSRAM_IO, 0x3f);
230056fc:	03f7e793          	ori	a5,a5,63
23005700:	bfd9                	j	230056d6 <SystemInit+0xa2>

23005702 <System_Post_Init>:

void System_Post_Init(void)
{
23005702:	1141                	addi	sp,sp,-16
23005704:	c606                	sw	ra,12(sp)
    PDS_Trim_RC32M();
23005706:	1f00f097          	auipc	ra,0x1f00f
2300570a:	290080e7          	jalr	656(ra) # 42014996 <PDS_Trim_RC32M>
    HBN_Trim_RC32K();
2300570e:	40b2                	lw	ra,12(sp)
23005710:	0141                	addi	sp,sp,16
    HBN_Trim_RC32K();
23005712:	1f00f317          	auipc	t1,0x1f00f
23005716:	28e30067          	jr	654(t1) # 420149a0 <HBN_Trim_RC32K>

2300571a <GLB_Set_I2S_CLK>:
{
    uint32_t tmpVal = 0;

    CHECK_PARAM(IS_GLB_I2S_OUT_REF_CLK_TYPE(outRef));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG1);
2300571a:	400007b7          	lui	a5,0x40000
2300571e:	43d8                	lw	a4,4(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_I2S_0_REF_CLK_OE, outRef);
23005720:	76f1                	lui	a3,0xffffc
23005722:	16fd                	addi	a3,a3,-1
23005724:	8f75                	and	a4,a4,a3
23005726:	05ba                	slli	a1,a1,0xe
23005728:	8dd9                	or	a1,a1,a4
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG1, tmpVal);
2300572a:	c3cc                	sw	a1,4(a5)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG1);
2300572c:	43dc                	lw	a5,4(a5)
    if (enable) {
2300572e:	c901                	beqz	a0,2300573e <GLB_Set_I2S_CLK+0x24>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_I2S0_CLK_EN);
23005730:	6709                	lui	a4,0x2
23005732:	8fd9                	or	a5,a5,a4
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_I2S0_CLK_EN);
    }
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG1, tmpVal);
23005734:	40000737          	lui	a4,0x40000
23005738:	c35c                	sw	a5,4(a4)

    return SUCCESS;
}
2300573a:	4501                	li	a0,0
2300573c:	8082                	ret
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_I2S0_CLK_EN);
2300573e:	7779                	lui	a4,0xffffe
23005740:	177d                	addi	a4,a4,-1
23005742:	8ff9                	and	a5,a5,a4
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG1, tmpVal);
23005744:	40000737          	lui	a4,0x40000
23005748:	c35c                	sw	a5,4(a4)
}
2300574a:	4501                	li	a0,0
2300574c:	8082                	ret

2300574e <GLB_Set_USB_CLK>:
*******************************************************************************/
BL_Err_Type GLB_Set_USB_CLK(uint8_t enable)
{
    uint32_t tmpVal = 0;

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG1);
2300574e:	400007b7          	lui	a5,0x40000
23005752:	43d8                	lw	a4,4(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_DLL_48M_DIV_EN, 1);
23005754:	20076713          	ori	a4,a4,512
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG1, tmpVal);
23005758:	c3d8                	sw	a4,4(a5)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG1);
2300575a:	43d8                	lw	a4,4(a5)
    if (enable) {
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_USB_CLK_EN);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_USB_CLK_EN);
2300575c:	eff77793          	andi	a5,a4,-257
    if (enable) {
23005760:	c119                	beqz	a0,23005766 <GLB_Set_USB_CLK+0x18>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_USB_CLK_EN);
23005762:	10076793          	ori	a5,a4,256
    }
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG1, tmpVal);
23005766:	40000737          	lui	a4,0x40000
2300576a:	c35c                	sw	a5,4(a4)

    return SUCCESS;
}
2300576c:	4501                	li	a0,0
2300576e:	8082                	ret

23005770 <GLB_Set_QDEC_CLK>:
{
    uint32_t tmpVal = 0;

    CHECK_PARAM(IS_GLB_QDEC_CLK_TYPE(clkSel));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG1);
23005770:	40000737          	lui	a4,0x40000
23005774:	435c                	lw	a5,4(a4)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_QDEC_CLK_SEL, clkSel);
23005776:	051e                	slli	a0,a0,0x7
23005778:	f607f793          	andi	a5,a5,-160
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_QDEC_CLK_DIV, div);
2300577c:	8fc9                	or	a5,a5,a0
2300577e:	8fcd                	or	a5,a5,a1
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG1, tmpVal);
23005780:	c35c                	sw	a5,4(a4)

    return SUCCESS;
}
23005782:	4501                	li	a0,0
23005784:	8082                	ret

23005786 <GLB_Set_UART_CLK>:
 *
 * @return SUCCESS or ERROR
 *
*******************************************************************************/
BL_Err_Type GLB_Set_UART_CLK(uint8_t enable, HBN_UART_CLK_Type clkSel, uint8_t div)
{
23005786:	1141                	addi	sp,sp,-16
23005788:	c422                	sw	s0,8(sp)

    CHECK_PARAM((div <= 0x7));
    CHECK_PARAM(IS_HBN_UART_CLK_TYPE(clkSel));

    /* disable UART clock first */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG2);
2300578a:	40000437          	lui	s0,0x40000
2300578e:	441c                	lw	a5,8(s0)
{
23005790:	c226                	sw	s1,4(sp)
23005792:	c606                	sw	ra,12(sp)
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_UART_CLK_EN);
23005794:	9bbd                	andi	a5,a5,-17
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG2, tmpVal);
23005796:	c41c                	sw	a5,8(s0)

    /* Set div */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG2);
23005798:	441c                	lw	a5,8(s0)
{
2300579a:	84aa                	mv	s1,a0
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_UART_CLK_DIV, div);
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG2, tmpVal);

    /* Select clock source for uart */
    HBN_Set_UART_CLK_Sel(clkSel);
2300579c:	852e                	mv	a0,a1
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_UART_CLK_DIV, div);
2300579e:	9be1                	andi	a5,a5,-8
230057a0:	8e5d                	or	a2,a2,a5
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG2, tmpVal);
230057a2:	c410                	sw	a2,8(s0)
    HBN_Set_UART_CLK_Sel(clkSel);
230057a4:	2c75                	jal	23005a60 <HBN_Set_UART_CLK_Sel>

    /* Set enable or disable */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG2);
230057a6:	4418                	lw	a4,8(s0)
    if (enable) {
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_UART_CLK_EN);
230057a8:	01076793          	ori	a5,a4,16
    if (enable) {
230057ac:	e099                	bnez	s1,230057b2 <GLB_Set_UART_CLK+0x2c>
230057ae:	fef77793          	andi	a5,a4,-17
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_UART_CLK_EN);
    }
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG2, tmpVal);

    return SUCCESS;
}
230057b2:	40b2                	lw	ra,12(sp)
230057b4:	4422                	lw	s0,8(sp)
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG2, tmpVal);
230057b6:	40000737          	lui	a4,0x40000
230057ba:	c71c                	sw	a5,8(a4)
}
230057bc:	4492                	lw	s1,4(sp)
230057be:	4501                	li	a0,0
230057c0:	0141                	addi	sp,sp,16
230057c2:	8082                	ret

230057c4 <GLB_Set_Chip_Out_0_CLK_Sel>:
{
    uint32_t tmpVal = 0;

    CHECK_PARAM(IS_GLB_CHIP_CLK_OUT_TYPE(clkSel));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
230057c4:	400006b7          	lui	a3,0x40000
230057c8:	46dc                	lw	a5,12(a3)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CHIP_CLK_OUT_0_SEL, clkSel);
230057ca:	d0000737          	lui	a4,0xd0000
230057ce:	177d                	addi	a4,a4,-1
230057d0:	8ff9                	and	a5,a5,a4
230057d2:	0572                	slli	a0,a0,0x1c
230057d4:	8d5d                	or	a0,a0,a5
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
230057d6:	c6c8                	sw	a0,12(a3)

    return SUCCESS;
}
230057d8:	4501                	li	a0,0
230057da:	8082                	ret

230057dc <GLB_Set_Chip_Out_1_CLK_Sel>:
{
    uint32_t tmpVal = 0;

    CHECK_PARAM(IS_GLB_CHIP_CLK_OUT_TYPE(clkSel));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
230057dc:	400007b7          	lui	a5,0x40000
230057e0:	47d8                	lw	a4,12(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CHIP_CLK_OUT_1_SEL, clkSel);
230057e2:	fff78693          	addi	a3,a5,-1 # 3fffffff <__dtcm_load_addr+0x1cff2083>
230057e6:	057a                	slli	a0,a0,0x1e
230057e8:	8f75                	and	a4,a4,a3
230057ea:	8d59                	or	a0,a0,a4
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
230057ec:	c7c8                	sw	a0,12(a5)

    return SUCCESS;
}
230057ee:	4501                	li	a0,0
230057f0:	8082                	ret

230057f2 <GLB_Set_I2C_CLK>:
*******************************************************************************/
BL_Err_Type GLB_Set_I2C_CLK(uint8_t enable, uint8_t div)
{
    uint32_t tmpVal = 0;

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
230057f2:	400007b7          	lui	a5,0x40000
230057f6:	47d8                	lw	a4,12(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_I2C_CLK_DIV, div);
230057f8:	ff0106b7          	lui	a3,0xff010
230057fc:	16fd                	addi	a3,a3,-1
230057fe:	8f75                	and	a4,a4,a3
23005800:	05c2                	slli	a1,a1,0x10
23005802:	8dd9                	or	a1,a1,a4
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
23005804:	c7cc                	sw	a1,12(a5)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
23005806:	47dc                	lw	a5,12(a5)
    if (enable) {
23005808:	c909                	beqz	a0,2300581a <GLB_Set_I2C_CLK+0x28>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_I2C_CLK_EN);
2300580a:	01000737          	lui	a4,0x1000
2300580e:	8fd9                	or	a5,a5,a4
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_I2C_CLK_EN);
    }
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
23005810:	40000737          	lui	a4,0x40000
23005814:	c75c                	sw	a5,12(a4)

    return SUCCESS;
}
23005816:	4501                	li	a0,0
23005818:	8082                	ret
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_I2C_CLK_EN);
2300581a:	ff000737          	lui	a4,0xff000
2300581e:	177d                	addi	a4,a4,-1
23005820:	8ff9                	and	a5,a5,a4
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
23005822:	40000737          	lui	a4,0x40000
23005826:	c75c                	sw	a5,12(a4)
}
23005828:	4501                	li	a0,0
2300582a:	8082                	ret

2300582c <GLB_Set_SPI_CLK>:
{
    uint32_t tmpVal = 0;

    CHECK_PARAM((div <= 0x1F));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
2300582c:	400007b7          	lui	a5,0x40000
23005830:	47d8                	lw	a4,12(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_SPI_CLK_DIV, div);
23005832:	9b01                	andi	a4,a4,-32
23005834:	8dd9                	or	a1,a1,a4
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
23005836:	c7cc                	sw	a1,12(a5)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG3);
23005838:	47d8                	lw	a4,12(a5)
    if (enable) {
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_SPI_CLK_EN);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_SPI_CLK_EN);
2300583a:	eff77793          	andi	a5,a4,-257
    if (enable) {
2300583e:	c119                	beqz	a0,23005844 <GLB_Set_SPI_CLK+0x18>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_SPI_CLK_EN);
23005840:	10076793          	ori	a5,a4,256
    }
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG3, tmpVal);
23005844:	40000737          	lui	a4,0x40000
23005848:	c75c                	sw	a5,12(a4)

    return SUCCESS;
}
2300584a:	4501                	li	a0,0
2300584c:	8082                	ret

2300584e <GLB_AHB_Slave1_Reset>:
*******************************************************************************/
BL_Err_Type GLB_AHB_Slave1_Reset(BL_AHB_Slave1_Type slave1)
{
    uint32_t tmpVal = 0;

    tmpVal = BL_RD_REG(GLB_BASE, GLB_SWRST_CFG1);
2300584e:	400007b7          	lui	a5,0x40000
23005852:	4bd4                	lw	a3,20(a5)
    tmpVal &= (~(1 << slave1));
23005854:	4705                	li	a4,1
23005856:	00a71533          	sll	a0,a4,a0
2300585a:	fff54713          	not	a4,a0
2300585e:	8ef9                	and	a3,a3,a4
    BL_WR_REG(GLB_BASE, GLB_SWRST_CFG1, tmpVal);
23005860:	cbd4                	sw	a3,20(a5)
    BL_DRV_DUMMY;
23005862:	0001                	nop
23005864:	0001                	nop
23005866:	0001                	nop
23005868:	0001                	nop
    tmpVal = BL_RD_REG(GLB_BASE, GLB_SWRST_CFG1);
2300586a:	4bd4                	lw	a3,20(a5)
    tmpVal |= (1 << slave1);
2300586c:	8d55                	or	a0,a0,a3
    BL_WR_REG(GLB_BASE, GLB_SWRST_CFG1, tmpVal);
2300586e:	cbc8                	sw	a0,20(a5)
    BL_DRV_DUMMY;
23005870:	0001                	nop
23005872:	0001                	nop
23005874:	0001                	nop
23005876:	0001                	nop
    tmpVal = BL_RD_REG(GLB_BASE, GLB_SWRST_CFG1);
23005878:	4bd4                	lw	a3,20(a5)
    tmpVal &= (~(1 << slave1));
    BL_WR_REG(GLB_BASE, GLB_SWRST_CFG1, tmpVal);

    return SUCCESS;
}
2300587a:	4501                	li	a0,0
    tmpVal &= (~(1 << slave1));
2300587c:	8f75                	and	a4,a4,a3
    BL_WR_REG(GLB_BASE, GLB_SWRST_CFG1, tmpVal);
2300587e:	cbd8                	sw	a4,20(a5)
}
23005880:	8082                	ret

23005882 <GLB_Set_MTimer_CLK>:

    CHECK_PARAM(IS_GLB_MTIMER_CLK_TYPE(clkSel));
    CHECK_PARAM((div <= 0x1FFFF));

    /* disable MTimer clock first */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CPU_CLK_CFG);
23005882:	40000737          	lui	a4,0x40000
23005886:	09072683          	lw	a3,144(a4) # 40000090 <__dtcm_load_addr+0x1cff2114>
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_CPU_RTC_EN);
2300588a:	fffc07b7          	lui	a5,0xfffc0
2300588e:	17fd                	addi	a5,a5,-1
23005890:	8efd                	and	a3,a3,a5
    BL_WR_REG(GLB_BASE, GLB_CPU_CLK_CFG, tmpVal);
23005892:	08d72823          	sw	a3,144(a4)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CPU_CLK_CFG);
23005896:	09072683          	lw	a3,144(a4)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CPU_RTC_SEL, clkSel);
2300589a:	fff80837          	lui	a6,0xfff80
2300589e:	187d                	addi	a6,a6,-1
230058a0:	0106f6b3          	and	a3,a3,a6
230058a4:	05ce                	slli	a1,a1,0x13
230058a6:	8dd5                	or	a1,a1,a3
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_CPU_RTC_DIV, div);
230058a8:	7681                	lui	a3,0xfffe0
230058aa:	8df5                	and	a1,a1,a3
230058ac:	8dd1                	or	a1,a1,a2
    BL_WR_REG(GLB_BASE, GLB_CPU_CLK_CFG, tmpVal);
230058ae:	08b72823          	sw	a1,144(a4)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_CPU_CLK_CFG);
230058b2:	09072703          	lw	a4,144(a4)
    if (enable) {
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_CPU_RTC_EN);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_CPU_RTC_EN);
230058b6:	8ff9                	and	a5,a5,a4
    if (enable) {
230058b8:	c501                	beqz	a0,230058c0 <GLB_Set_MTimer_CLK+0x3e>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_CPU_RTC_EN);
230058ba:	000407b7          	lui	a5,0x40
230058be:	8fd9                	or	a5,a5,a4
    }
    BL_WR_REG(GLB_BASE, GLB_CPU_CLK_CFG, tmpVal);
230058c0:	40000737          	lui	a4,0x40000
230058c4:	08f72823          	sw	a5,144(a4) # 40000090 <__dtcm_load_addr+0x1cff2114>

    return SUCCESS;
}
230058c8:	4501                	li	a0,0
230058ca:	8082                	ret

230058cc <GLB_Set_ADC_CLK>:
    uint32_t tmpVal;

    CHECK_PARAM(IS_GLB_ADC_CLK_TYPE(clkSel));

    /* disable ADC clock first */
    tmpVal = BL_RD_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL);
230058cc:	400007b7          	lui	a5,0x40000
230058d0:	0a47a703          	lw	a4,164(a5) # 400000a4 <__dtcm_load_addr+0x1cff2128>
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_GPADC_32M_DIV_EN);
    BL_WR_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL, tmpVal);

    tmpVal = BL_RD_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL);
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_GPADC_32M_CLK_DIV, div);
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_GPADC_32M_CLK_SEL, clkSel);
230058d4:	059e                	slli	a1,a1,0x7
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_GPADC_32M_DIV_EN);
230058d6:	eff77713          	andi	a4,a4,-257
    BL_WR_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL, tmpVal);
230058da:	0ae7a223          	sw	a4,164(a5)
    tmpVal = BL_RD_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL);
230058de:	0a47a703          	lw	a4,164(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_GPADC_32M_CLK_DIV, div);
230058e2:	fc077713          	andi	a4,a4,-64
230058e6:	8e59                	or	a2,a2,a4
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_GPADC_32M_CLK_SEL, clkSel);
230058e8:	f7f67613          	andi	a2,a2,-129
230058ec:	8dd1                	or	a1,a1,a2
    BL_WR_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL, tmpVal);
230058ee:	0ab7a223          	sw	a1,164(a5)

    tmpVal = BL_RD_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL);
230058f2:	0a47a703          	lw	a4,164(a5)
    if (enable) {
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_GPADC_32M_DIV_EN);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_GPADC_32M_DIV_EN);
230058f6:	eff77793          	andi	a5,a4,-257
    if (enable) {
230058fa:	c119                	beqz	a0,23005900 <GLB_Set_ADC_CLK+0x34>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_GPADC_32M_DIV_EN);
230058fc:	10076793          	ori	a5,a4,256
    }
    BL_WR_REG(GLB_BASE, GLB_GPADC_32M_SRC_CTRL, tmpVal);
23005900:	40000737          	lui	a4,0x40000
23005904:	0af72223          	sw	a5,164(a4) # 400000a4 <__dtcm_load_addr+0x1cff2128>

    return SUCCESS;
}
23005908:	4501                	li	a0,0
2300590a:	8082                	ret

2300590c <GLB_Set_DAC_CLK>:
{
    uint32_t tmpVal;

    CHECK_PARAM(IS_GLB_DAC_CLK_TYPE(clkSel));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_DIG32K_WAKEUP_CTRL);
2300590c:	40000837          	lui	a6,0x40000
23005910:	0a882703          	lw	a4,168(a6) # 400000a8 <__dtcm_load_addr+0x1cff212c>
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_DIG_512K_EN);
    BL_WR_REG(GLB_BASE, GLB_DIG32K_WAKEUP_CTRL, tmpVal);

    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_DIG_512K_COMP);

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_DIG_CLK_SRC_SEL, clkSel);
23005914:	cd0007b7          	lui	a5,0xcd000
23005918:	17fd                	addi	a5,a5,-1
2300591a:	8ff9                	and	a5,a5,a4
2300591c:	05f2                	slli	a1,a1,0x1c
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_DIG_512K_EN);
2300591e:	ff0006b7          	lui	a3,0xff000
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_DIG_CLK_SRC_SEL, clkSel);
23005922:	8ddd                	or	a1,a1,a5
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_DIG_512K_EN);
23005924:	16fd                	addi	a3,a3,-1

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_DIG_512K_DIV, div);
23005926:	ff8107b7          	lui	a5,0xff810
    tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_DIG_512K_EN);
2300592a:	8f75                	and	a4,a4,a3
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_DIG_512K_DIV, div);
2300592c:	17fd                	addi	a5,a5,-1
2300592e:	8dfd                	and	a1,a1,a5
23005930:	0642                	slli	a2,a2,0x10
    BL_WR_REG(GLB_BASE, GLB_DIG32K_WAKEUP_CTRL, tmpVal);
23005932:	0ae82423          	sw	a4,168(a6)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_DIG_512K_DIV, div);
23005936:	8dd1                	or	a1,a1,a2

    if (enable) {
23005938:	c501                	beqz	a0,23005940 <GLB_Set_DAC_CLK+0x34>
        tmpVal = BL_SET_REG_BIT(tmpVal, GLB_DIG_512K_EN);
2300593a:	010007b7          	lui	a5,0x1000
2300593e:	8ddd                	or	a1,a1,a5
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_DIG_512K_EN);
    }

    BL_WR_REG(GLB_BASE, GLB_DIG32K_WAKEUP_CTRL, tmpVal);
23005940:	400007b7          	lui	a5,0x40000
23005944:	0ab7a423          	sw	a1,168(a5) # 400000a8 <__dtcm_load_addr+0x1cff212c>

    return SUCCESS;
}
23005948:	4501                	li	a0,0
2300594a:	8082                	ret

2300594c <GLB_UART_Fun_Sel>:
    uint32_t tmpVal = 0;

    CHECK_PARAM(IS_GLB_UART_SIG_TYPE(sig));
    CHECK_PARAM(IS_GLB_UART_SIG_FUN_TYPE(fun));

    tmpVal = BL_RD_REG(GLB_BASE, GLB_UART_SIG_SEL_0);
2300594c:	40000737          	lui	a4,0x40000
23005950:	0c072683          	lw	a3,192(a4) # 400000c0 <__dtcm_load_addr+0x1cff2144>
    sig_pos = (sig * 4);
23005954:	050a                	slli	a0,a0,0x2
    /* Clear original val */
    tmpVal &= (~(0xf << sig_pos));
23005956:	47bd                	li	a5,15
23005958:	00a797b3          	sll	a5,a5,a0
2300595c:	fff7c793          	not	a5,a5
    /* Set new value */
    tmpVal |= (fun << sig_pos);
23005960:	00a595b3          	sll	a1,a1,a0
    tmpVal &= (~(0xf << sig_pos));
23005964:	8ff5                	and	a5,a5,a3
    tmpVal |= (fun << sig_pos);
23005966:	8fcd                	or	a5,a5,a1
    BL_WR_REG(GLB_BASE, GLB_UART_SIG_SEL_0, tmpVal);
23005968:	0cf72023          	sw	a5,192(a4)

    return SUCCESS;
}
2300596c:	4501                	li	a0,0
2300596e:	8082                	ret

23005970 <GLB_GPIO_IntMask>:
*******************************************************************************/
BL_Err_Type GLB_GPIO_IntMask(GLB_GPIO_Type gpioPin, BL_Mask_Type intMask)
{
    uint32_t tmpVal;

    if (gpioPin < 32) {
23005970:	47fd                	li	a5,31
23005972:	02a7e263          	bltu	a5,a0,23005996 <GLB_GPIO_IntMask+0x26>
        /* GPIO0 ~ GPIO31 */
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MASK1);
23005976:	400007b7          	lui	a5,0x40000
2300597a:	1a07a683          	lw	a3,416(a5) # 400001a0 <__dtcm_load_addr+0x1cff2224>
        if (intMask == MASK) {
            tmpVal = tmpVal | (1 << gpioPin);
2300597e:	4705                	li	a4,1
23005980:	00a71533          	sll	a0,a4,a0
        } else {
            tmpVal = tmpVal & ~(1 << gpioPin);
23005984:	fff54793          	not	a5,a0
23005988:	8ff5                	and	a5,a5,a3
        if (intMask == MASK) {
2300598a:	00e58863          	beq	a1,a4,2300599a <GLB_GPIO_IntMask+0x2a>
        }
        BL_WR_REG(GLB_BASE, GLB_GPIO_INT_MASK1, tmpVal);
2300598e:	40000737          	lui	a4,0x40000
23005992:	1af72023          	sw	a5,416(a4) # 400001a0 <__dtcm_load_addr+0x1cff2224>
    }

    return SUCCESS;
}
23005996:	4501                	li	a0,0
23005998:	8082                	ret
            tmpVal = tmpVal | (1 << gpioPin);
2300599a:	00d567b3          	or	a5,a0,a3
2300599e:	bfc5                	j	2300598e <GLB_GPIO_IntMask+0x1e>

230059a0 <GLB_Set_GPIO_IntMod>:

    if (gpioPin < GLB_GPIO_PIN_10) {
        /* GPIO0 ~ GPIO9 */
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET1);
        tmpGpioPin = gpioPin;
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
230059a0:	058a                	slli	a1,a1,0x2
    if (gpioPin < GLB_GPIO_PIN_10) {
230059a2:	47a5                	li	a5,9
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
230059a4:	8dd1                	or	a1,a1,a2
    if (gpioPin < GLB_GPIO_PIN_10) {
230059a6:	02a7e663          	bltu	a5,a0,230059d2 <GLB_Set_GPIO_IntMod+0x32>
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET1);
230059aa:	40000737          	lui	a4,0x40000
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
230059ae:	00151793          	slli	a5,a0,0x1
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET1);
230059b2:	1c072683          	lw	a3,448(a4) # 400001c0 <__dtcm_load_addr+0x1cff2244>
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
230059b6:	953e                	add	a0,a0,a5
230059b8:	479d                	li	a5,7
230059ba:	00a797b3          	sll	a5,a5,a0
230059be:	fff7c793          	not	a5,a5
230059c2:	8ff5                	and	a5,a5,a3
230059c4:	00a59533          	sll	a0,a1,a0
230059c8:	8d5d                	or	a0,a0,a5
        BL_WR_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET1, tmpVal);
230059ca:	1ca72023          	sw	a0,448(a4)
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
        BL_WR_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET4, tmpVal);
    }

    return SUCCESS;
}
230059ce:	4501                	li	a0,0
230059d0:	8082                	ret
    } else if (gpioPin < GLB_GPIO_PIN_20) {
230059d2:	47cd                	li	a5,19
230059d4:	02a7e863          	bltu	a5,a0,23005a04 <GLB_Set_GPIO_IntMod+0x64>
        tmpGpioPin = gpioPin - GLB_GPIO_PIN_10;
230059d8:	1559                	addi	a0,a0,-10
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET2);
230059da:	40000737          	lui	a4,0x40000
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
230059de:	00151793          	slli	a5,a0,0x1
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET2);
230059e2:	1c472683          	lw	a3,452(a4) # 400001c4 <__dtcm_load_addr+0x1cff2248>
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
230059e6:	953e                	add	a0,a0,a5
230059e8:	479d                	li	a5,7
230059ea:	00a797b3          	sll	a5,a5,a0
230059ee:	fff7c793          	not	a5,a5
230059f2:	8ff5                	and	a5,a5,a3
230059f4:	00a59533          	sll	a0,a1,a0
230059f8:	00f565b3          	or	a1,a0,a5
        BL_WR_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET2, tmpVal);
230059fc:	1cb72223          	sw	a1,452(a4)
}
23005a00:	4501                	li	a0,0
23005a02:	8082                	ret
    } else if (gpioPin < GLB_GPIO_PIN_30) {
23005a04:	47f5                	li	a5,29
23005a06:	02a7e863          	bltu	a5,a0,23005a36 <GLB_Set_GPIO_IntMod+0x96>
        tmpGpioPin = gpioPin - GLB_GPIO_PIN_20;
23005a0a:	1531                	addi	a0,a0,-20
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET3);
23005a0c:	40000737          	lui	a4,0x40000
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
23005a10:	00151793          	slli	a5,a0,0x1
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET3);
23005a14:	1c872683          	lw	a3,456(a4) # 400001c8 <__dtcm_load_addr+0x1cff224c>
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
23005a18:	953e                	add	a0,a0,a5
23005a1a:	479d                	li	a5,7
23005a1c:	00a797b3          	sll	a5,a5,a0
23005a20:	fff7c793          	not	a5,a5
23005a24:	8ff5                	and	a5,a5,a3
23005a26:	00a59533          	sll	a0,a1,a0
23005a2a:	00f565b3          	or	a1,a0,a5
        BL_WR_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET3, tmpVal);
23005a2e:	1cb72423          	sw	a1,456(a4)
}
23005a32:	4501                	li	a0,0
23005a34:	8082                	ret
        tmpGpioPin = gpioPin - GLB_GPIO_PIN_30;
23005a36:	1509                	addi	a0,a0,-30
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET4);
23005a38:	400006b7          	lui	a3,0x40000
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
23005a3c:	00151713          	slli	a4,a0,0x1
23005a40:	953a                	add	a0,a0,a4
        tmpVal = BL_RD_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET4);
23005a42:	1cc6a603          	lw	a2,460(a3) # 400001cc <__dtcm_load_addr+0x1cff2250>
        tmpVal = (tmpVal & ~(0x7 << (3 * tmpGpioPin))) | (((intCtlMod << 2) | intTrgMod) << (3 * tmpGpioPin));
23005a46:	479d                	li	a5,7
23005a48:	00a797b3          	sll	a5,a5,a0
23005a4c:	fff7c793          	not	a5,a5
23005a50:	8ff1                	and	a5,a5,a2
23005a52:	00a595b3          	sll	a1,a1,a0
23005a56:	8ddd                	or	a1,a1,a5
        BL_WR_REG(GLB_BASE, GLB_GPIO_INT_MODE_SET4, tmpVal);
23005a58:	1cb6a623          	sw	a1,460(a3)
}
23005a5c:	4501                	li	a0,0
23005a5e:	8082                	ret

23005a60 <HBN_Set_UART_CLK_Sel>:
{
    uint32_t tmpVal;

    CHECK_PARAM(IS_HBN_UART_CLK_TYPE(clkSel));

    tmpVal = BL_RD_REG(HBN_BASE, HBN_GLB);
23005a60:	4000f737          	lui	a4,0x4000f
23005a64:	5b1c                	lw	a5,48(a4)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_UART_CLK_SEL, clkSel);
23005a66:	050a                	slli	a0,a0,0x2
23005a68:	9bed                	andi	a5,a5,-5
23005a6a:	8d5d                	or	a0,a0,a5
    BL_WR_REG(HBN_BASE, HBN_GLB, tmpVal);
23005a6c:	db08                	sw	a0,48(a4)

    return SUCCESS;
}
23005a6e:	4501                	li	a0,0
23005a70:	8082                	ret

23005a72 <HBN_Set_XCLK_CLK_Sel>:
    uint32_t tmpVal;
    uint32_t tmpVal2;

    CHECK_PARAM(IS_HBN_XCLK_CLK_TYPE(xClk));

    tmpVal = BL_RD_REG(HBN_BASE, HBN_GLB);
23005a72:	4000f7b7          	lui	a5,0x4000f
23005a76:	5b9c                	lw	a5,48(a5)
    tmpVal2 = BL_GET_REG_BITS_VAL(tmpVal, HBN_ROOT_CLK_SEL);

    switch (xClk) {
23005a78:	c11d                	beqz	a0,23005a9e <HBN_Set_XCLK_CLK_Sel+0x2c>
23005a7a:	4705                	li	a4,1
23005a7c:	00e51463          	bne	a0,a4,23005a84 <HBN_Set_XCLK_CLK_Sel+0x12>

        default:
            break;
    }

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_ROOT_CLK_SEL, tmpVal2);
23005a80:	0017e793          	ori	a5,a5,1
    BL_WR_REG(HBN_BASE, HBN_GLB, tmpVal);
23005a84:	4000f737          	lui	a4,0x4000f
23005a88:	db1c                	sw	a5,48(a4)
    HBN_CLK_SET_DUMMY_WAIT;
23005a8a:	0001                	nop
23005a8c:	0001                	nop
23005a8e:	0001                	nop
23005a90:	0001                	nop
23005a92:	0001                	nop
23005a94:	0001                	nop
23005a96:	0001                	nop
23005a98:	0001                	nop

    return SUCCESS;
}
23005a9a:	4501                	li	a0,0
23005a9c:	8082                	ret
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_ROOT_CLK_SEL, tmpVal2);
23005a9e:	9bf9                	andi	a5,a5,-2
            break;
23005aa0:	b7d5                	j	23005a84 <HBN_Set_XCLK_CLK_Sel+0x12>

23005aa2 <HBN_Set_BOR_Cfg>:
*******************************************************************************/
BL_Err_Type HBN_Set_BOR_Cfg(HBN_BOR_CFG_Type *cfg)
{
    uint32_t tmpVal = 0;

    if (cfg->enableBorInt) {
23005aa2:	00154783          	lbu	a5,1(a0) # 2800001 <StackSize+0x27ff001>
23005aa6:	c3b9                	beqz	a5,23005aec <HBN_Set_BOR_Cfg+0x4a>
    tmpVal = BL_RD_REG(HBN_BASE, HBN_IRQ_MODE);
23005aa8:	4000f737          	lui	a4,0x4000f
23005aac:	4b5c                	lw	a5,20(a4)
    tmpVal = BL_SET_REG_BIT(tmpVal, HBN_IRQ_BOR_EN);
23005aae:	000406b7          	lui	a3,0x40
23005ab2:	8fd5                	or	a5,a5,a3
    BL_WR_REG(HBN_BASE, HBN_IRQ_MODE, tmpVal);
23005ab4:	cb5c                	sw	a5,20(a4)
        HBN_Enable_BOR_IRQ();
    } else {
        HBN_Disable_BOR_IRQ();
    }

    tmpVal = BL_RD_REG(HBN_BASE, HBN_MISC);
23005ab6:	4000f7b7          	lui	a5,0x4000f
23005aba:	57d8                	lw	a4,44(a5)

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_BOR_VTH, cfg->borThreshold);
23005abc:	00254783          	lbu	a5,2(a0)

    if (cfg->enablePorInBor) {
23005ac0:	00354683          	lbu	a3,3(a0)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_BOR_VTH, cfg->borThreshold);
23005ac4:	9b75                	andi	a4,a4,-3
23005ac6:	0786                	slli	a5,a5,0x1
23005ac8:	8fd9                	or	a5,a5,a4
        tmpVal = BL_SET_REG_BIT(tmpVal, HBN_BOR_SEL);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, HBN_BOR_SEL);
23005aca:	ffe7f713          	andi	a4,a5,-2
    if (cfg->enablePorInBor) {
23005ace:	c299                	beqz	a3,23005ad4 <HBN_Set_BOR_Cfg+0x32>
        tmpVal = BL_SET_REG_BIT(tmpVal, HBN_BOR_SEL);
23005ad0:	0017e713          	ori	a4,a5,1
    }

    if (cfg->enableBor) {
23005ad4:	00054683          	lbu	a3,0(a0)
        tmpVal = BL_SET_REG_BIT(tmpVal, HBN_PU_BOR);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, HBN_PU_BOR);
23005ad8:	ffb77793          	andi	a5,a4,-5
    if (cfg->enableBor) {
23005adc:	c299                	beqz	a3,23005ae2 <HBN_Set_BOR_Cfg+0x40>
        tmpVal = BL_SET_REG_BIT(tmpVal, HBN_PU_BOR);
23005ade:	00476793          	ori	a5,a4,4
    }

    BL_WR_REG(HBN_BASE, HBN_MISC, tmpVal);
23005ae2:	4000f737          	lui	a4,0x4000f
23005ae6:	d75c                	sw	a5,44(a4)

    return SUCCESS;
}
23005ae8:	4501                	li	a0,0
23005aea:	8082                	ret
    tmpVal = BL_RD_REG(HBN_BASE, HBN_IRQ_MODE);
23005aec:	4000f6b7          	lui	a3,0x4000f
23005af0:	4adc                	lw	a5,20(a3)
    tmpVal = BL_CLR_REG_BIT(tmpVal, HBN_IRQ_BOR_EN);
23005af2:	fffc0737          	lui	a4,0xfffc0
23005af6:	177d                	addi	a4,a4,-1
23005af8:	8ff9                	and	a5,a5,a4
    BL_WR_REG(HBN_BASE, HBN_IRQ_MODE, tmpVal);
23005afa:	cadc                	sw	a5,20(a3)
    return SUCCESS;
23005afc:	bf6d                	j	23005ab6 <HBN_Set_BOR_Cfg+0x14>

23005afe <UART_Init>:
    CHECK_PARAM(IS_UART_DATABITS_TYPE(uartCfg->dataBits));
    CHECK_PARAM(IS_UART_STOPBITS_TYPE(uartCfg->stopBits));
    CHECK_PARAM(IS_UART_BYTEBITINVERSE_TYPE(uartCfg->byteBitInverse));

    /* Cal the baud rate divisor */
    fraction = uartCfg->uartClk * 10 / uartCfg->baudRate % 10;
23005afe:	4198                	lw	a4,0(a1)
23005b00:	41d0                	lw	a2,4(a1)
23005b02:	4829                	li	a6,10
23005b04:	00271793          	slli	a5,a4,0x2
23005b08:	97ba                	add	a5,a5,a4
23005b0a:	0786                	slli	a5,a5,0x1
23005b0c:	02c7d7b3          	divu	a5,a5,a2
    uint32_t UARTx = uartAddr[uartId];
23005b10:	00251693          	slli	a3,a0,0x2
23005b14:	2300d537          	lui	a0,0x2300d
23005b18:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005b1c:	9536                	add	a0,a0,a3
23005b1e:	4114                	lw	a3,0(a0)

    /* Configure parity type */
    tmpValTxCfg = BL_RD_REG(UARTx, UART_UTX_CONFIG);
    tmpValRxCfg = BL_RD_REG(UARTx, UART_URX_CONFIG);

    switch (uartCfg->parity) {
23005b20:	4505                	li	a0,1
    fraction = uartCfg->uartClk * 10 / uartCfg->baudRate % 10;
23005b22:	0307f7b3          	remu	a5,a5,a6
    baudRateDivisor = uartCfg->uartClk / uartCfg->baudRate;
23005b26:	02c75733          	divu	a4,a4,a2
    BL_WR_REG(UARTx, UART_BIT_PRD, ((baudRateDivisor - 1) << 0x10) | ((baudRateDivisor - 1) & 0xFFFF));
23005b2a:	0057b793          	sltiu	a5,a5,5
23005b2e:	8f1d                	sub	a4,a4,a5
23005b30:	01071793          	slli	a5,a4,0x10
23005b34:	0742                	slli	a4,a4,0x10
23005b36:	8341                	srli	a4,a4,0x10
23005b38:	8f5d                	or	a4,a4,a5
23005b3a:	c698                	sw	a4,8(a3)
    switch (uartCfg->parity) {
23005b3c:	00a5c783          	lbu	a5,10(a1)
    tmpValTxCfg = BL_RD_REG(UARTx, UART_UTX_CONFIG);
23005b40:	4298                	lw	a4,0(a3)
    tmpValRxCfg = BL_RD_REG(UARTx, UART_URX_CONFIG);
23005b42:	0046ae03          	lw	t3,4(a3) # 4000f004 <__dtcm_load_addr+0x1d001088>
    switch (uartCfg->parity) {
23005b46:	0ca78663          	beq	a5,a0,23005c12 <UART_Init+0x114>
23005b4a:	4609                	li	a2,2
23005b4c:	0ac78a63          	beq	a5,a2,23005c00 <UART_Init+0x102>
23005b50:	c7c5                	beqz	a5,23005bf8 <UART_Init+0xfa>
        default:
            break;
    }

    /* Configure data bits */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_D, (uartCfg->dataBits + 4));
23005b52:	0085c783          	lbu	a5,8(a1)
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_BIT_CNT_D, (uartCfg->dataBits + 4));

    /* Configure tx stop bits */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_P, uartCfg->stopBits);
23005b56:	0095c803          	lbu	a6,9(a1)
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_D, (uartCfg->dataBits + 4));
23005b5a:	8ff77713          	andi	a4,a4,-1793
23005b5e:	0791                	addi	a5,a5,4
23005b60:	07a2                	slli	a5,a5,0x8
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_P, uartCfg->stopBits);
23005b62:	7679                	lui	a2,0xffffe

    /* Configure tx cts flow control function */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_CTS_EN, uartCfg->ctsFlowControl);
23005b64:	00b5c883          	lbu	a7,11(a1)
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_D, (uartCfg->dataBits + 4));
23005b68:	8f5d                	or	a4,a4,a5
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_P, uartCfg->stopBits);
23005b6a:	7ff60613          	addi	a2,a2,2047 # ffffe7ff <__HeapLimit+0xbdfce7ff>
23005b6e:	8f71                	and	a4,a4,a2
23005b70:	082e                	slli	a6,a6,0xb

    /* Configure rx input de-glitch function */
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_DEG_EN, uartCfg->rxDeglitch);

    /* Configure tx lin mode function */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_LIN_EN, uartCfg->txLinMode);
23005b72:	00f5c503          	lbu	a0,15(a1)
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_P, uartCfg->stopBits);
23005b76:	00e86733          	or	a4,a6,a4
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_CTS_EN, uartCfg->ctsFlowControl);
23005b7a:	ffd77813          	andi	a6,a4,-3
23005b7e:	00189713          	slli	a4,a7,0x1
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_DEG_EN, uartCfg->rxDeglitch);
23005b82:	00c5c603          	lbu	a2,12(a1)
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_CTS_EN, uartCfg->ctsFlowControl);
23005b86:	01076733          	or	a4,a4,a6
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_LIN_EN, uartCfg->txLinMode);
23005b8a:	ff777813          	andi	a6,a4,-9
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_BIT_CNT_D, (uartCfg->dataBits + 4));
23005b8e:	8ffe7e13          	andi	t3,t3,-1793
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_LIN_EN, uartCfg->txLinMode);
23005b92:	00351713          	slli	a4,a0,0x3
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_DEG_EN, uartCfg->rxDeglitch);
23005b96:	757d                	lui	a0,0xfffff
23005b98:	7ff50513          	addi	a0,a0,2047 # fffff7ff <__HeapLimit+0xbdfcf7ff>
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_BIT_CNT_D, (uartCfg->dataBits + 4));
23005b9c:	01c7e7b3          	or	a5,a5,t3

    /* Configure rx lin mode function */
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_LIN_EN, uartCfg->rxLinMode);

    /* Set tx break bit count for lin protocol */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_B, uartCfg->txBreakBitCnt);
23005ba0:	0115c303          	lbu	t1,17(a1)
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_DEG_EN, uartCfg->rxDeglitch);
23005ba4:	8fe9                	and	a5,a5,a0
23005ba6:	062e                	slli	a2,a2,0xb
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_LIN_EN, uartCfg->rxLinMode);
23005ba8:	0105c883          	lbu	a7,16(a1)
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_DEG_EN, uartCfg->rxDeglitch);
23005bac:	8fd1                	or	a5,a5,a2
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_B, uartCfg->txBreakBitCnt);
23005bae:	7649                	lui	a2,0xffff2
23005bb0:	167d                	addi	a2,a2,-1
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_LIN_EN, uartCfg->txLinMode);
23005bb2:	01076733          	or	a4,a4,a6
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_BIT_CNT_B, uartCfg->txBreakBitCnt);
23005bb6:	8f71                	and	a4,a4,a2
23005bb8:	00d31513          	slli	a0,t1,0xd
23005bbc:	8f49                	or	a4,a4,a0
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_LIN_EN, uartCfg->rxLinMode);
23005bbe:	00389613          	slli	a2,a7,0x3
23005bc2:	9bdd                	andi	a5,a5,-9

    /* Write back */
    BL_WR_REG(UARTx, UART_UTX_CONFIG, tmpValTxCfg);
23005bc4:	c298                	sw	a4,0(a3)
    tmpValRxCfg = BL_SET_REG_BITS_VAL(tmpValRxCfg, UART_CR_URX_LIN_EN, uartCfg->rxLinMode);
23005bc6:	8fd1                	or	a5,a5,a2
    BL_WR_REG(UARTx, UART_URX_CONFIG, tmpValRxCfg);
23005bc8:	c2dc                	sw	a5,4(a3)

    /* Configure LSB-first or MSB-first */
    tmpValTxCfg = BL_RD_REG(UARTx, UART_DATA_CONFIG);
23005bca:	46d8                	lw	a4,12(a3)

    if (UART_MSB_FIRST == uartCfg->byteBitInverse) {
23005bcc:	0125c503          	lbu	a0,18(a1)
23005bd0:	4605                	li	a2,1
        tmpValTxCfg = BL_SET_REG_BIT(tmpValTxCfg, UART_CR_UART_BIT_INV);
    } else {
        tmpValTxCfg = BL_CLR_REG_BIT(tmpValTxCfg, UART_CR_UART_BIT_INV);
23005bd2:	ffe77793          	andi	a5,a4,-2
    if (UART_MSB_FIRST == uartCfg->byteBitInverse) {
23005bd6:	00c51463          	bne	a0,a2,23005bde <UART_Init+0xe0>
        tmpValTxCfg = BL_SET_REG_BIT(tmpValTxCfg, UART_CR_UART_BIT_INV);
23005bda:	00176793          	ori	a5,a4,1
    }

    BL_WR_REG(UARTx, UART_DATA_CONFIG, tmpValTxCfg);
23005bde:	c6dc                	sw	a5,12(a3)

    tmpValTxCfg = BL_RD_REG(UARTx, UART_SW_MODE);
23005be0:	4edc                	lw	a5,28(a3)
    /* Configure rx rts output SW control mode */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_URX_RTS_SW_MODE, uartCfg->rtsSoftwareControl);
23005be2:	00d5c603          	lbu	a2,13(a1)
    /* Configure tx output SW control mode */
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_TXD_SW_MODE, uartCfg->txSoftwareControl);
23005be6:	00e5c703          	lbu	a4,14(a1)
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_URX_RTS_SW_MODE, uartCfg->rtsSoftwareControl);
23005bea:	9be9                	andi	a5,a5,-6
23005bec:	060a                	slli	a2,a2,0x2
    tmpValTxCfg = BL_SET_REG_BITS_VAL(tmpValTxCfg, UART_CR_UTX_TXD_SW_MODE, uartCfg->txSoftwareControl);
23005bee:	8fd1                	or	a5,a5,a2
23005bf0:	8fd9                	or	a5,a5,a4
    BL_WR_REG(UARTx, UART_SW_MODE, tmpValTxCfg);
23005bf2:	cedc                	sw	a5,28(a3)
#ifndef BFLB_USE_HAL_DRIVER
    Interrupt_Handler_Register(UART0_IRQn, UART0_IRQHandler);
    Interrupt_Handler_Register(UART1_IRQn, UART1_IRQHandler);
#endif
    return SUCCESS;
}
23005bf4:	4501                	li	a0,0
23005bf6:	8082                	ret
            tmpValTxCfg = BL_CLR_REG_BIT(tmpValTxCfg, UART_CR_UTX_PRT_EN);
23005bf8:	9b3d                	andi	a4,a4,-17
            tmpValRxCfg = BL_CLR_REG_BIT(tmpValRxCfg, UART_CR_URX_PRT_EN);
23005bfa:	fefe7e13          	andi	t3,t3,-17
            break;
23005bfe:	bf91                	j	23005b52 <UART_Init+0x54>
            tmpValTxCfg = BL_CLR_REG_BIT(tmpValTxCfg, UART_CR_UTX_PRT_SEL);
23005c00:	fdf77713          	andi	a4,a4,-33
23005c04:	fdfe7e13          	andi	t3,t3,-33
23005c08:	01076713          	ori	a4,a4,16
            tmpValRxCfg = BL_CLR_REG_BIT(tmpValRxCfg, UART_CR_URX_PRT_SEL);
23005c0c:	010e6e13          	ori	t3,t3,16
            break;
23005c10:	b789                	j	23005b52 <UART_Init+0x54>
            tmpValTxCfg = BL_SET_REG_BIT(tmpValTxCfg, UART_CR_UTX_PRT_SEL);
23005c12:	03076713          	ori	a4,a4,48
            tmpValRxCfg = BL_SET_REG_BIT(tmpValRxCfg, UART_CR_URX_PRT_SEL);
23005c16:	030e6e13          	ori	t3,t3,48
            break;
23005c1a:	bf25                	j	23005b52 <UART_Init+0x54>

23005c1c <UART_FifoConfig>:
 *
*******************************************************************************/
BL_Err_Type UART_FifoConfig(UART_ID_Type uartId, UART_FifoCfg_Type *fifoCfg)
{
    uint32_t tmpVal = 0;
    uint32_t UARTx = uartAddr[uartId];
23005c1c:	00251793          	slli	a5,a0,0x2
23005c20:	2300d537          	lui	a0,0x2300d
23005c24:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005c28:	953e                	add	a0,a0,a5
23005c2a:	4114                	lw	a3,0(a0)
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Deal with uart fifo configure register */
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_1);
    /* Configure dma tx fifo threshold */
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_TX_FIFO_TH, fifoCfg->txFifoDmaThreshold);
23005c2c:	0005c783          	lbu	a5,0(a1)
23005c30:	ff810537          	lui	a0,0xff810
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_1);
23005c34:	0846a603          	lw	a2,132(a3)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_TX_FIFO_TH, fifoCfg->txFifoDmaThreshold);
23005c38:	157d                	addi	a0,a0,-1
    /* Configure dma rx fifo threshold */
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_RX_FIFO_TH, fifoCfg->rxFifoDmaThreshold);
23005c3a:	0015c703          	lbu	a4,1(a1)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_TX_FIFO_TH, fifoCfg->txFifoDmaThreshold);
23005c3e:	8e69                	and	a2,a2,a0
23005c40:	07c2                	slli	a5,a5,0x10
23005c42:	8fd1                	or	a5,a5,a2
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_RX_FIFO_TH, fifoCfg->rxFifoDmaThreshold);
23005c44:	81000637          	lui	a2,0x81000
23005c48:	167d                	addi	a2,a2,-1
23005c4a:	8ff1                	and	a5,a5,a2
23005c4c:	0762                	slli	a4,a4,0x18
23005c4e:	8fd9                	or	a5,a5,a4
    /* Write back */
    BL_WR_REG(UARTx, UART_FIFO_CONFIG_1, tmpVal);
23005c50:	08f6a223          	sw	a5,132(a3)

    /* Enable or disable uart fifo dma function */
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_0);
23005c54:	0806a703          	lw	a4,128(a3)

    if (ENABLE == fifoCfg->txFifoDmaEnable) {
23005c58:	0025c503          	lbu	a0,2(a1)
23005c5c:	4605                	li	a2,1
        tmpVal = BL_SET_REG_BIT(tmpVal, UART_DMA_TX_EN);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, UART_DMA_TX_EN);
23005c5e:	ffe77793          	andi	a5,a4,-2
    if (ENABLE == fifoCfg->txFifoDmaEnable) {
23005c62:	00c51463          	bne	a0,a2,23005c6a <UART_FifoConfig+0x4e>
        tmpVal = BL_SET_REG_BIT(tmpVal, UART_DMA_TX_EN);
23005c66:	00176793          	ori	a5,a4,1
    }

    if (ENABLE == fifoCfg->rxFifoDmaEnable) {
23005c6a:	0035c583          	lbu	a1,3(a1)
23005c6e:	4605                	li	a2,1
        tmpVal = BL_SET_REG_BIT(tmpVal, UART_DMA_RX_EN);
    } else {
        tmpVal = BL_CLR_REG_BIT(tmpVal, UART_DMA_RX_EN);
23005c70:	ffd7f713          	andi	a4,a5,-3
    if (ENABLE == fifoCfg->rxFifoDmaEnable) {
23005c74:	00c59463          	bne	a1,a2,23005c7c <UART_FifoConfig+0x60>
        tmpVal = BL_SET_REG_BIT(tmpVal, UART_DMA_RX_EN);
23005c78:	0027e713          	ori	a4,a5,2
    }

    BL_WR_REG(UARTx, UART_FIFO_CONFIG_0, tmpVal);
23005c7c:	08e6a023          	sw	a4,128(a3)

    return SUCCESS;
}
23005c80:	4501                	li	a0,0
23005c82:	8082                	ret

23005c84 <UART_Enable>:
 *
*******************************************************************************/
BL_Err_Type UART_Enable(UART_ID_Type uartId, UART_Direction_Type direct)
{
    uint32_t tmpVal = 0;
    uint32_t UARTx = uartAddr[uartId];
23005c84:	00251793          	slli	a5,a0,0x2
23005c88:	2300d537          	lui	a0,0x2300d
23005c8c:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005c90:	953e                	add	a0,a0,a5

    /* Check the parameters */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));
    CHECK_PARAM(IS_UART_DIRECTION_TYPE(direct));

    if (direct == UART_TX || direct == UART_TXRX) {
23005c92:	0fd5f713          	andi	a4,a1,253
    uint32_t UARTx = uartAddr[uartId];
23005c96:	411c                	lw	a5,0(a0)
    if (direct == UART_TX || direct == UART_TXRX) {
23005c98:	e709                	bnez	a4,23005ca2 <UART_Enable+0x1e>
        /* Enable UART tx unit */
        tmpVal = BL_RD_REG(UARTx, UART_UTX_CONFIG);
23005c9a:	4398                	lw	a4,0(a5)
        BL_WR_REG(UARTx, UART_UTX_CONFIG, BL_SET_REG_BIT(tmpVal, UART_CR_UTX_EN));
23005c9c:	00176713          	ori	a4,a4,1
23005ca0:	c398                	sw	a4,0(a5)
    }

    if (direct == UART_RX || direct == UART_TXRX) {
23005ca2:	15fd                	addi	a1,a1,-1
23005ca4:	0ff5f593          	zext.b	a1,a1
23005ca8:	4705                	li	a4,1
23005caa:	00b76663          	bltu	a4,a1,23005cb6 <UART_Enable+0x32>
        /* Enable UART rx unit */
        tmpVal = BL_RD_REG(UARTx, UART_URX_CONFIG);
23005cae:	43d8                	lw	a4,4(a5)
        BL_WR_REG(UARTx, UART_URX_CONFIG, BL_SET_REG_BIT(tmpVal, UART_CR_URX_EN));
23005cb0:	00176713          	ori	a4,a4,1
23005cb4:	c3d8                	sw	a4,4(a5)
    }

    return SUCCESS;
}
23005cb6:	4501                	li	a0,0
23005cb8:	8082                	ret

23005cba <UART_Disable>:
 *
*******************************************************************************/
BL_Err_Type UART_Disable(UART_ID_Type uartId, UART_Direction_Type direct)
{
    uint32_t tmpVal = 0;
    uint32_t UARTx = uartAddr[uartId];
23005cba:	00251793          	slli	a5,a0,0x2
23005cbe:	2300d537          	lui	a0,0x2300d
23005cc2:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005cc6:	953e                	add	a0,a0,a5

    /* Check the parameters */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));
    CHECK_PARAM(IS_UART_DIRECTION_TYPE(direct));

    if (direct == UART_TX || direct == UART_TXRX) {
23005cc8:	0fd5f713          	andi	a4,a1,253
    uint32_t UARTx = uartAddr[uartId];
23005ccc:	411c                	lw	a5,0(a0)
    if (direct == UART_TX || direct == UART_TXRX) {
23005cce:	e701                	bnez	a4,23005cd6 <UART_Disable+0x1c>
        /* Disable UART tx unit */
        tmpVal = BL_RD_REG(UARTx, UART_UTX_CONFIG);
23005cd0:	4398                	lw	a4,0(a5)
        BL_WR_REG(UARTx, UART_UTX_CONFIG, BL_CLR_REG_BIT(tmpVal, UART_CR_UTX_EN));
23005cd2:	9b79                	andi	a4,a4,-2
23005cd4:	c398                	sw	a4,0(a5)
    }

    if (direct == UART_RX || direct == UART_TXRX) {
23005cd6:	15fd                	addi	a1,a1,-1
23005cd8:	0ff5f593          	zext.b	a1,a1
23005cdc:	4705                	li	a4,1
23005cde:	00b76563          	bltu	a4,a1,23005ce8 <UART_Disable+0x2e>
        /* Disable UART rx unit */
        tmpVal = BL_RD_REG(UARTx, UART_URX_CONFIG);
23005ce2:	43d8                	lw	a4,4(a5)
        BL_WR_REG(UARTx, UART_URX_CONFIG, BL_CLR_REG_BIT(tmpVal, UART_CR_URX_EN));
23005ce4:	9b79                	andi	a4,a4,-2
23005ce6:	c3d8                	sw	a4,4(a5)
    }

    return SUCCESS;
}
23005ce8:	4501                	li	a0,0
23005cea:	8082                	ret

23005cec <UART_SetRxTimeoutValue>:
 * @return SUCCESS
 *
*******************************************************************************/
BL_Err_Type UART_SetRxTimeoutValue(UART_ID_Type uartId, uint8_t time)
{
    uint32_t UARTx = uartAddr[uartId];
23005cec:	00251793          	slli	a5,a0,0x2
23005cf0:	2300d537          	lui	a0,0x2300d
23005cf4:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005cf8:	953e                	add	a0,a0,a5

    /* Check the parameters */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Set time-out value */
    tmpVal = BL_RD_REG(UARTx, UART_URX_RTO_TIMER);
23005cfa:	4118                	lw	a4,0(a0)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_CR_URX_RTO_VALUE, time - 1);
23005cfc:	15fd                	addi	a1,a1,-1
    BL_WR_REG(UARTx, UART_URX_RTO_TIMER, tmpVal);

    return SUCCESS;
}
23005cfe:	4501                	li	a0,0
    tmpVal = BL_RD_REG(UARTx, UART_URX_RTO_TIMER);
23005d00:	4f1c                	lw	a5,24(a4)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_CR_URX_RTO_VALUE, time - 1);
23005d02:	f007f793          	andi	a5,a5,-256
23005d06:	8ddd                	or	a1,a1,a5
    BL_WR_REG(UARTx, UART_URX_RTO_TIMER, tmpVal);
23005d08:	cf0c                	sw	a1,24(a4)
}
23005d0a:	8082                	ret

23005d0c <UART_SetDeglitchCount>:
 * @return SUCCESS
 *
*******************************************************************************/
BL_Err_Type UART_SetDeglitchCount(UART_ID_Type uartId, uint8_t deglitchCnt)
{
    uint32_t UARTx = uartAddr[uartId];
23005d0c:	00251793          	slli	a5,a0,0x2
23005d10:	2300d537          	lui	a0,0x2300d
23005d14:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005d18:	953e                	add	a0,a0,a5

    /* Check the parameters */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Set count value */
    tmpVal = BL_RD_REG(UARTx, UART_URX_CONFIG);
23005d1a:	4114                	lw	a3,0(a0)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_CR_URX_DEG_CNT, deglitchCnt);
23005d1c:	7745                	lui	a4,0xffff1
23005d1e:	177d                	addi	a4,a4,-1
    tmpVal = BL_RD_REG(UARTx, UART_URX_CONFIG);
23005d20:	42dc                	lw	a5,4(a3)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_CR_URX_DEG_CNT, deglitchCnt);
23005d22:	05b2                	slli	a1,a1,0xc
    BL_WR_REG(UARTx, UART_URX_CONFIG, tmpVal);

    return SUCCESS;
}
23005d24:	4501                	li	a0,0
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, UART_CR_URX_DEG_CNT, deglitchCnt);
23005d26:	8ff9                	and	a5,a5,a4
23005d28:	8ddd                	or	a1,a1,a5
    BL_WR_REG(UARTx, UART_URX_CONFIG, tmpVal);
23005d2a:	c2cc                	sw	a1,4(a3)
}
23005d2c:	8082                	ret

23005d2e <UART_TxFreeRun>:
 *
*******************************************************************************/
BL_Err_Type UART_TxFreeRun(UART_ID_Type uartId, BL_Fun_Type txFreeRun)
{
    uint32_t tmpVal = 0;
    uint32_t UARTx = uartAddr[uartId];
23005d2e:	00251793          	slli	a5,a0,0x2
23005d32:	2300d537          	lui	a0,0x2300d
23005d36:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005d3a:	953e                	add	a0,a0,a5

    /* Check the parameters */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Enable or disable tx free run mode */
    tmpVal = BL_RD_REG(UARTx, UART_UTX_CONFIG);
23005d3c:	4118                	lw	a4,0(a0)

    if (ENABLE == txFreeRun) {
23005d3e:	4685                	li	a3,1
    tmpVal = BL_RD_REG(UARTx, UART_UTX_CONFIG);
23005d40:	431c                	lw	a5,0(a4)
    if (ENABLE == txFreeRun) {
23005d42:	00d58663          	beq	a1,a3,23005d4e <UART_TxFreeRun+0x20>
        BL_WR_REG(UARTx, UART_UTX_CONFIG, BL_SET_REG_BIT(tmpVal, UART_CR_UTX_FRM_EN));
    } else {
        BL_WR_REG(UARTx, UART_UTX_CONFIG, BL_CLR_REG_BIT(tmpVal, UART_CR_UTX_FRM_EN));
23005d46:	9bed                	andi	a5,a5,-5
23005d48:	c31c                	sw	a5,0(a4)
    }

    return SUCCESS;
}
23005d4a:	4501                	li	a0,0
23005d4c:	8082                	ret
        BL_WR_REG(UARTx, UART_UTX_CONFIG, BL_SET_REG_BIT(tmpVal, UART_CR_UTX_FRM_EN));
23005d4e:	0047e793          	ori	a5,a5,4
23005d52:	c31c                	sw	a5,0(a4)
}
23005d54:	4501                	li	a0,0
23005d56:	8082                	ret

23005d58 <UART_TxFifoClear>:
 *
*******************************************************************************/
BL_Err_Type UART_TxFifoClear(UART_ID_Type uartId)
{
    uint32_t tmpVal = 0;
    uint32_t UARTx = uartAddr[uartId];
23005d58:	00251793          	slli	a5,a0,0x2
23005d5c:	2300d537          	lui	a0,0x2300d
23005d60:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005d64:	953e                	add	a0,a0,a5

    /* Check the parameter */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Clear tx fifo */
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_0);
23005d66:	4118                	lw	a4,0(a0)
    BL_WR_REG(UARTx, UART_FIFO_CONFIG_0, BL_SET_REG_BIT(tmpVal, UART_TX_FIFO_CLR));

    return SUCCESS;
}
23005d68:	4501                	li	a0,0
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_0);
23005d6a:	08072783          	lw	a5,128(a4) # ffff1080 <__HeapLimit+0xbdfc1080>
    BL_WR_REG(UARTx, UART_FIFO_CONFIG_0, BL_SET_REG_BIT(tmpVal, UART_TX_FIFO_CLR));
23005d6e:	0047e793          	ori	a5,a5,4
23005d72:	08f72023          	sw	a5,128(a4)
}
23005d76:	8082                	ret

23005d78 <UART_RxFifoClear>:
 *
*******************************************************************************/
BL_Err_Type UART_RxFifoClear(UART_ID_Type uartId)
{
    uint32_t tmpVal = 0;
    uint32_t UARTx = uartAddr[uartId];
23005d78:	00251793          	slli	a5,a0,0x2
23005d7c:	2300d537          	lui	a0,0x2300d
23005d80:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005d84:	953e                	add	a0,a0,a5

    /* Check the parameter */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Clear rx fifo */
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_0);
23005d86:	4118                	lw	a4,0(a0)
    BL_WR_REG(UARTx, UART_FIFO_CONFIG_0, BL_SET_REG_BIT(tmpVal, UART_RX_FIFO_CLR));

    return SUCCESS;
}
23005d88:	4501                	li	a0,0
    tmpVal = BL_RD_REG(UARTx, UART_FIFO_CONFIG_0);
23005d8a:	08072783          	lw	a5,128(a4)
    BL_WR_REG(UARTx, UART_FIFO_CONFIG_0, BL_SET_REG_BIT(tmpVal, UART_RX_FIFO_CLR));
23005d8e:	0087e793          	ori	a5,a5,8
23005d92:	08f72023          	sw	a5,128(a4)
}
23005d96:	8082                	ret

23005d98 <UART_IntMask>:
 *
*******************************************************************************/
BL_Err_Type UART_IntMask(UART_ID_Type uartId, UART_INT_Type intType, BL_Mask_Type intMask)
{
    uint32_t tmpVal;
    uint32_t UARTx = uartAddr[uartId];
23005d98:	00251793          	slli	a5,a0,0x2
23005d9c:	2300d537          	lui	a0,0x2300d
23005da0:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005da4:	953e                	add	a0,a0,a5
    /* Check the parameters */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));
    CHECK_PARAM(IS_UART_INT_TYPE(intType));
    CHECK_PARAM(IS_BL_MASK_TYPE(intMask));

    tmpVal = BL_RD_REG(UARTx, UART_INT_MASK);
23005da6:	4118                	lw	a4,0(a0)

    /* Mask or unmask certain or all interrupt */
    if (UART_INT_ALL == intType) {
23005da8:	47a5                	li	a5,9
    tmpVal = BL_RD_REG(UARTx, UART_INT_MASK);
23005daa:	5354                	lw	a3,36(a4)
    if (UART_INT_ALL == intType) {
23005dac:	02f58263          	beq	a1,a5,23005dd0 <UART_IntMask+0x38>
        } else {
            tmpVal &= 0;
        }
    } else {
        if (MASK == intMask) {
            tmpVal |= 1 << intType;
23005db0:	4505                	li	a0,1
23005db2:	00b515b3          	sll	a1,a0,a1
        } else {
            tmpVal &= ~(1 << intType);
23005db6:	fff5c793          	not	a5,a1
23005dba:	8ff5                	and	a5,a5,a3
        if (MASK == intMask) {
23005dbc:	00a60563          	beq	a2,a0,23005dc6 <UART_IntMask+0x2e>
        }
    }

    /* Write back */
    BL_WR_REG(UARTx, UART_INT_MASK, tmpVal);
23005dc0:	d35c                	sw	a5,36(a4)

    return SUCCESS;
}
23005dc2:	4501                	li	a0,0
23005dc4:	8082                	ret
            tmpVal |= 1 << intType;
23005dc6:	00d5e7b3          	or	a5,a1,a3
    BL_WR_REG(UARTx, UART_INT_MASK, tmpVal);
23005dca:	d35c                	sw	a5,36(a4)
}
23005dcc:	4501                	li	a0,0
23005dce:	8082                	ret
        if (MASK == intMask) {
23005dd0:	4585                	li	a1,1
            tmpVal &= 0;
23005dd2:	4781                	li	a5,0
        if (MASK == intMask) {
23005dd4:	feb616e3          	bne	a2,a1,23005dc0 <UART_IntMask+0x28>
            tmpVal |= 0x1ff;
23005dd8:	1ff6e793          	ori	a5,a3,511
    BL_WR_REG(UARTx, UART_INT_MASK, tmpVal);
23005ddc:	d35c                	sw	a5,36(a4)
}
23005dde:	4501                	li	a0,0
23005de0:	8082                	ret

23005de2 <UART_SendData>:
 *
*******************************************************************************/
BL_Err_Type UART_SendData(UART_ID_Type uartId, uint8_t *data, uint32_t len)
{
    uint32_t txLen = 0;
    uint32_t UARTx = uartAddr[uartId];
23005de2:	00251793          	slli	a5,a0,0x2
23005de6:	2300d537          	lui	a0,0x2300d
23005dea:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005dee:	953e                	add	a0,a0,a5
23005df0:	00052883          	lw	a7,0(a0)

    /* Check the parameter */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    /* Send data */
    while (txLen < len) {
23005df4:	ca1d                	beqz	a2,23005e2a <UART_SendData+0x48>
    uint32_t timeoutCnt = UART_TX_TIMEOUT_COUNT;
23005df6:	00027737          	lui	a4,0x27
    uint32_t UARTx = uartAddr[uartId];

    /* Check the parameter */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    return BL_GET_REG_BITS_VAL(BL_RD_REG(UARTx, UART_FIFO_CONFIG_1), UART_TX_FIFO_CNT);
23005dfa:	08488813          	addi	a6,a7,132 # 1000084 <StackSize+0xfff084>
    uint32_t timeoutCnt = UART_TX_TIMEOUT_COUNT;
23005dfe:	10070713          	addi	a4,a4,256 # 27100 <StackSize+0x26100>
    uint32_t txLen = 0;
23005e02:	4681                	li	a3,0
            timeoutCnt = UART_TX_TIMEOUT_COUNT;
23005e04:	00027337          	lui	t1,0x27
    return BL_GET_REG_BITS_VAL(BL_RD_REG(UARTx, UART_FIFO_CONFIG_1), UART_TX_FIFO_CNT);
23005e08:	00082783          	lw	a5,0(a6)
            BL_WR_BYTE(UARTx + UART_FIFO_WDATA_OFFSET, data[txLen++]);
23005e0c:	00d58533          	add	a0,a1,a3
            timeoutCnt--;
23005e10:	177d                	addi	a4,a4,-1
        if (UART_GetTxFifoCount(uartId) > 0) {
23005e12:	0ff7f793          	zext.b	a5,a5
23005e16:	cf81                	beqz	a5,23005e2e <UART_SendData+0x4c>
            BL_WR_BYTE(UARTx + UART_FIFO_WDATA_OFFSET, data[txLen++]);
23005e18:	00054783          	lbu	a5,0(a0)
23005e1c:	0685                	addi	a3,a3,1
            timeoutCnt = UART_TX_TIMEOUT_COUNT;
23005e1e:	10030713          	addi	a4,t1,256 # 27100 <StackSize+0x26100>
            BL_WR_BYTE(UARTx + UART_FIFO_WDATA_OFFSET, data[txLen++]);
23005e22:	08f88423          	sb	a5,136(a7)
    while (txLen < len) {
23005e26:	fec6e1e3          	bltu	a3,a2,23005e08 <UART_SendData+0x26>
    return SUCCESS;
23005e2a:	4501                	li	a0,0
23005e2c:	8082                	ret
            if (timeoutCnt == 0) {
23005e2e:	ff65                	bnez	a4,23005e26 <UART_SendData+0x44>
                return TIMEOUT;
23005e30:	4509                	li	a0,2
}
23005e32:	8082                	ret

23005e34 <UART_ReceiveData>:
    uint32_t UARTx = uartAddr[uartId];
23005e34:	2300d7b7          	lui	a5,0x2300d
23005e38:	050a                	slli	a0,a0,0x2
23005e3a:	8d478793          	addi	a5,a5,-1836 # 2300c8d4 <uartAddr>
23005e3e:	97aa                	add	a5,a5,a0
{
23005e40:	8532                	mv	a0,a2
    uint32_t UARTx = uartAddr[uartId];
23005e42:	4390                	lw	a2,0(a5)
    while (rxLen < maxLen && UART_GetRxFifoCount(uartId) > 0) {
23005e44:	c50d                	beqz	a0,23005e6e <UART_ReceiveData+0x3a>
    uint32_t UARTx = uartAddr[uartId];

    /* Check the parameter */
    CHECK_PARAM(IS_UART_ID_TYPE(uartId));

    return BL_GET_REG_BITS_VAL(BL_RD_REG(UARTx, UART_FIFO_CONFIG_1), UART_RX_FIFO_CNT);
23005e46:	08460813          	addi	a6,a2,132 # 81000084 <__HeapLimit+0x3efd0084>
    uint32_t rxLen = 0;
23005e4a:	4701                	li	a4,0
23005e4c:	a811                	j	23005e60 <UART_ReceiveData+0x2c>
        data[rxLen++] = BL_RD_BYTE(UARTx + UART_FIFO_RDATA_OFFSET);
23005e4e:	08c64683          	lbu	a3,140(a2)
23005e52:	0705                	addi	a4,a4,1
23005e54:	00e587b3          	add	a5,a1,a4
23005e58:	fed78fa3          	sb	a3,-1(a5)
    while (rxLen < maxLen && UART_GetRxFifoCount(uartId) > 0) {
23005e5c:	00e50963          	beq	a0,a4,23005e6e <UART_ReceiveData+0x3a>
    return BL_GET_REG_BITS_VAL(BL_RD_REG(UARTx, UART_FIFO_CONFIG_1), UART_RX_FIFO_CNT);
23005e60:	00082783          	lw	a5,0(a6)
23005e64:	83a1                	srli	a5,a5,0x8
    while (rxLen < maxLen && UART_GetRxFifoCount(uartId) > 0) {
23005e66:	0ff7f793          	zext.b	a5,a5
23005e6a:	f3f5                	bnez	a5,23005e4e <UART_ReceiveData+0x1a>
23005e6c:	853a                	mv	a0,a4
}
23005e6e:	8082                	ret

23005e70 <UART_GetTxFifoCount>:
    uint32_t UARTx = uartAddr[uartId];
23005e70:	00251793          	slli	a5,a0,0x2
23005e74:	2300d537          	lui	a0,0x2300d
23005e78:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005e7c:	953e                	add	a0,a0,a5
    return BL_GET_REG_BITS_VAL(BL_RD_REG(UARTx, UART_FIFO_CONFIG_1), UART_TX_FIFO_CNT);
23005e7e:	411c                	lw	a5,0(a0)
23005e80:	0847a503          	lw	a0,132(a5)
}
23005e84:	0ff57513          	zext.b	a0,a0
23005e88:	8082                	ret

23005e8a <UART_GetRxFifoCount>:
    uint32_t UARTx = uartAddr[uartId];
23005e8a:	00251793          	slli	a5,a0,0x2
23005e8e:	2300d537          	lui	a0,0x2300d
23005e92:	8d450513          	addi	a0,a0,-1836 # 2300c8d4 <uartAddr>
23005e96:	953e                	add	a0,a0,a5
    return BL_GET_REG_BITS_VAL(BL_RD_REG(UARTx, UART_FIFO_CONFIG_1), UART_RX_FIFO_CNT);
23005e98:	411c                	lw	a5,0(a0)
23005e9a:	0847a503          	lw	a0,132(a5)
23005e9e:	8121                	srli	a0,a0,0x8
}
23005ea0:	0ff57513          	zext.b	a0,a0
23005ea4:	8082                	ret

23005ea6 <USB_Clr_EPx_STALL.part.0>:
    uint32_t tmpVal = 0;

    if (epId == EP_ID0) {
        return SUCCESS;
    } else {
        switch (epId) {
23005ea6:	4791                	li	a5,4
23005ea8:	08f50063          	beq	a0,a5,23005f28 <USB_Clr_EPx_STALL.part.0+0x82>
23005eac:	02a7e263          	bltu	a5,a0,23005ed0 <USB_Clr_EPx_STALL.part.0+0x2a>
23005eb0:	4789                	li	a5,2
23005eb2:	08f50563          	beq	a0,a5,23005f3c <USB_Clr_EPx_STALL.part.0+0x96>
23005eb6:	478d                	li	a5,3
23005eb8:	02f51c63          	bne	a0,a5,23005ef0 <USB_Clr_EPx_STALL.part.0+0x4a>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP2_STALL);
                BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
                break;

            case EP_ID3:
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
23005ebc:	4000e6b7          	lui	a3,0x4000e
23005ec0:	8486a783          	lw	a5,-1976(a3) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP3_STALL);
23005ec4:	7741                	lui	a4,0xffff0
23005ec6:	177d                	addi	a4,a4,-1
23005ec8:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
23005eca:	84f6a423          	sw	a5,-1976(a3)
                break;
23005ece:	8082                	ret
        switch (epId) {
23005ed0:	4799                	li	a5,6
23005ed2:	06f50f63          	beq	a0,a5,23005f50 <USB_Clr_EPx_STALL.part.0+0xaa>
23005ed6:	479d                	li	a5,7
23005ed8:	02f51963          	bne	a0,a5,23005f0a <USB_Clr_EPx_STALL.part.0+0x64>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP6_STALL);
                BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
                break;

            case EP_ID7:
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
23005edc:	4000e6b7          	lui	a3,0x4000e
23005ee0:	8586a783          	lw	a5,-1960(a3) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP7_STALL);
23005ee4:	7741                	lui	a4,0xffff0
23005ee6:	177d                	addi	a4,a4,-1
23005ee8:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
23005eea:	84f6ac23          	sw	a5,-1960(a3)
                break;
        }
    }

    return SUCCESS;
}
23005eee:	8082                	ret
        switch (epId) {
23005ef0:	4785                	li	a5,1
23005ef2:	02f51963          	bne	a0,a5,23005f24 <USB_Clr_EPx_STALL.part.0+0x7e>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
23005ef6:	4000e6b7          	lui	a3,0x4000e
23005efa:	8406a783          	lw	a5,-1984(a3) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP1_STALL);
23005efe:	7741                	lui	a4,0xffff0
23005f00:	177d                	addi	a4,a4,-1
23005f02:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
23005f04:	84f6a023          	sw	a5,-1984(a3)
                break;
23005f08:	8082                	ret
        switch (epId) {
23005f0a:	4795                	li	a5,5
23005f0c:	00f51d63          	bne	a0,a5,23005f26 <USB_Clr_EPx_STALL.part.0+0x80>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
23005f10:	4000e6b7          	lui	a3,0x4000e
23005f14:	8506a783          	lw	a5,-1968(a3) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP5_STALL);
23005f18:	7741                	lui	a4,0xffff0
23005f1a:	177d                	addi	a4,a4,-1
23005f1c:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
23005f1e:	84f6a823          	sw	a5,-1968(a3)
                break;
23005f22:	8082                	ret
23005f24:	8082                	ret
23005f26:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
23005f28:	4000e6b7          	lui	a3,0x4000e
23005f2c:	84c6a783          	lw	a5,-1972(a3) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23005f30:	7741                	lui	a4,0xffff0
23005f32:	177d                	addi	a4,a4,-1
23005f34:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23005f36:	84f6a623          	sw	a5,-1972(a3)
                break;
23005f3a:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
23005f3c:	4000e6b7          	lui	a3,0x4000e
23005f40:	8446a783          	lw	a5,-1980(a3) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP2_STALL);
23005f44:	7741                	lui	a4,0xffff0
23005f46:	177d                	addi	a4,a4,-1
23005f48:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
23005f4a:	84f6a223          	sw	a5,-1980(a3)
                break;
23005f4e:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
23005f50:	4000e6b7          	lui	a3,0x4000e
23005f54:	8546a783          	lw	a5,-1964(a3) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP6_STALL);
23005f58:	7741                	lui	a4,0xffff0
23005f5a:	177d                	addi	a4,a4,-1
23005f5c:	8ff9                	and	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
23005f5e:	84f6aa23          	sw	a5,-1964(a3)
                break;
23005f62:	8082                	ret

23005f64 <USB_Enable>:
    tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23005f64:	4000e737          	lui	a4,0x4000e
23005f68:	80072783          	lw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
}
23005f6c:	4501                	li	a0,0
    tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EN);
23005f6e:	0017e793          	ori	a5,a5,1
    BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23005f72:	80f72023          	sw	a5,-2048(a4)
}
23005f76:	8082                	ret

23005f78 <USB_Disable>:
    tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23005f78:	4000e737          	lui	a4,0x4000e
23005f7c:	80072783          	lw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
}
23005f80:	4501                	li	a0,0
    tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_USB_EN);
23005f82:	9bf9                	andi	a5,a5,-2
    BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23005f84:	80f72023          	sw	a5,-2048(a4)
}
23005f88:	8082                	ret

23005f8a <USB_Set_Config>:
    tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23005f8a:	4000e7b7          	lui	a5,0x4000e
23005f8e:	8007a703          	lw	a4,-2048(a5) # 4000d800 <__dtcm_load_addr+0x1cfff884>
    tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_USB_EN);
23005f92:	9b79                	andi	a4,a4,-2
    BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23005f94:	80e7a023          	sw	a4,-2048(a5)
    tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23005f98:	8007a603          	lw	a2,-2048(a5)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_ROM_DCT_EN, usbCfg->RomBaseDescriptorUsed);
23005f9c:	0055c683          	lbu	a3,5(a1)
    if (usbCfg->SoftwareCtrl == ENABLE) {
23005fa0:	0045c803          	lbu	a6,4(a1)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_ROM_DCT_EN, usbCfg->RomBaseDescriptorUsed);
23005fa4:	eef67793          	andi	a5,a2,-273
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_ROM_DCT_EN, usbCfg->RomBaseDescriptorUsed);
23005fa8:	0692                	slli	a3,a3,0x4
    if (usbCfg->SoftwareCtrl == ENABLE) {
23005faa:	4705                	li	a4,1
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_ROM_DCT_EN, usbCfg->RomBaseDescriptorUsed);
23005fac:	8fd5                	or	a5,a5,a3
    if (usbCfg->SoftwareCtrl == ENABLE) {
23005fae:	04e81863          	bne	a6,a4,23005ffe <USB_Set_Config+0x74>
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_ADDR, usbCfg->DeviceAddress);
23005fb2:	0035c703          	lbu	a4,3(a1)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_IN, usbCfg->EnumInEn);
23005fb6:	7841                	lui	a6,0xffff0
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_SIZE, usbCfg->EnumMaxPacketSize);
23005fb8:	0025c783          	lbu	a5,2(a1)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_IN, usbCfg->EnumInEn);
23005fbc:	1ff80813          	addi	a6,a6,511 # ffff01ff <__HeapLimit+0xbdfc01ff>
23005fc0:	01067633          	and	a2,a2,a6
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_ADDR, usbCfg->DeviceAddress);
23005fc4:	0726                	slli	a4,a4,0x9
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_IN, usbCfg->EnumInEn);
23005fc6:	ff010837          	lui	a6,0xff010
23005fca:	8f51                	or	a4,a4,a2
23005fcc:	187d                	addi	a6,a6,-1
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_SIZE, usbCfg->EnumMaxPacketSize);
23005fce:	07c2                	slli	a5,a5,0x10
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_IN, usbCfg->EnumInEn);
23005fd0:	01077733          	and	a4,a4,a6
23005fd4:	0015c603          	lbu	a2,1(a1)
23005fd8:	8f5d                	or	a4,a4,a5
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_OUT, usbCfg->EnumOutEn);
23005fda:	0005c783          	lbu	a5,0(a1)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_IN, usbCfg->EnumInEn);
23005fde:	fe0005b7          	lui	a1,0xfe000
23005fe2:	15fd                	addi	a1,a1,-1
23005fe4:	8f6d                	and	a4,a4,a1
23005fe6:	0666                	slli	a2,a2,0x19
23005fe8:	10076713          	ori	a4,a4,256
23005fec:	8f51                	or	a4,a4,a2
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_NACK_OUT, usbCfg->EnumOutEn);
23005fee:	fc000637          	lui	a2,0xfc000
23005ff2:	167d                	addi	a2,a2,-1
23005ff4:	8f71                	and	a4,a4,a2
23005ff6:	07ea                	slli	a5,a5,0x1a
23005ff8:	8fd9                	or	a5,a5,a4
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_ROM_DCT_EN, usbCfg->RomBaseDescriptorUsed);
23005ffa:	9bbd                	andi	a5,a5,-17
23005ffc:	8fd5                	or	a5,a5,a3
    BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23005ffe:	4000e737          	lui	a4,0x4000e
23006002:	80f72023          	sw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
    tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23006006:	80072783          	lw	a5,-2048(a4)
    if (enable) {
2300600a:	c119                	beqz	a0,23006010 <USB_Set_Config+0x86>
        tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EN);
2300600c:	0017e793          	ori	a5,a5,1
    BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23006010:	4000e737          	lui	a4,0x4000e
23006014:	80f72023          	sw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
}
23006018:	4501                	li	a0,0
2300601a:	8082                	ret

2300601c <USB_Set_Device_Addr>:
    tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
2300601c:	4000e6b7          	lui	a3,0x4000e
23006020:	8006a783          	lw	a5,-2048(a3) # 4000d800 <__dtcm_load_addr+0x1cfff884>
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_ADDR, addr);
23006024:	7741                	lui	a4,0xffff0
23006026:	1ff70713          	addi	a4,a4,511 # ffff01ff <__HeapLimit+0xbdfc01ff>
2300602a:	8ff9                	and	a5,a5,a4
2300602c:	0526                	slli	a0,a0,0x9
2300602e:	8d5d                	or	a0,a0,a5
    BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23006030:	80a6a023          	sw	a0,-2048(a3)
}
23006034:	4501                	li	a0,0
23006036:	8082                	ret

23006038 <USB_Set_EPx_Xfer_Size>:
    if (epId == EP_ID0) {
23006038:	e105                	bnez	a0,23006058 <USB_Set_EPx_Xfer_Size+0x20>
        tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
2300603a:	4000e637          	lui	a2,0x4000e
2300603e:	80062703          	lw	a4,-2048(a2) # 4000d800 <__dtcm_load_addr+0x1cfff884>
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_USB_EP0_SW_SIZE, size);
23006042:	ff0106b7          	lui	a3,0xff010
23006046:	16fd                	addi	a3,a3,-1
23006048:	8f75                	and	a4,a4,a3
2300604a:	01059793          	slli	a5,a1,0x10
2300604e:	8fd9                	or	a5,a5,a4
        BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
23006050:	80f62023          	sw	a5,-2048(a2)
}
23006054:	4501                	li	a0,0
23006056:	8082                	ret
        switch (epId) {
23006058:	4791                	li	a5,4
2300605a:	0af50263          	beq	a0,a5,230060fe <USB_Set_EPx_Xfer_Size+0xc6>
2300605e:	02a7e263          	bltu	a5,a0,23006082 <USB_Set_EPx_Xfer_Size+0x4a>
23006062:	4789                	li	a5,2
23006064:	06f50963          	beq	a0,a5,230060d6 <USB_Set_EPx_Xfer_Size+0x9e>
23006068:	478d                	li	a5,3
2300606a:	02f51c63          	bne	a0,a5,230060a2 <USB_Set_EPx_Xfer_Size+0x6a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
2300606e:	4000e737          	lui	a4,0x4000e
23006072:	84872783          	lw	a5,-1976(a4) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_SIZE, size);
23006076:	8007f793          	andi	a5,a5,-2048
2300607a:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
2300607c:	84f72423          	sw	a5,-1976(a4)
                break;
23006080:	bfd1                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>
        switch (epId) {
23006082:	4799                	li	a5,6
23006084:	06f50363          	beq	a0,a5,230060ea <USB_Set_EPx_Xfer_Size+0xb2>
23006088:	479d                	li	a5,7
2300608a:	02f51963          	bne	a0,a5,230060bc <USB_Set_EPx_Xfer_Size+0x84>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
2300608e:	4000e737          	lui	a4,0x4000e
23006092:	85872783          	lw	a5,-1960(a4) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_SIZE, size);
23006096:	8007f793          	andi	a5,a5,-2048
2300609a:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
2300609c:	84f72c23          	sw	a5,-1960(a4)
                break;
230060a0:	bf55                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>
        switch (epId) {
230060a2:	4785                	li	a5,1
230060a4:	faf518e3          	bne	a0,a5,23006054 <USB_Set_EPx_Xfer_Size+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
230060a8:	4000e737          	lui	a4,0x4000e
230060ac:	84072783          	lw	a5,-1984(a4) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_SIZE, size);
230060b0:	8007f793          	andi	a5,a5,-2048
230060b4:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
230060b6:	84f72023          	sw	a5,-1984(a4)
                break;
230060ba:	bf69                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>
        switch (epId) {
230060bc:	4795                	li	a5,5
230060be:	f8f51be3          	bne	a0,a5,23006054 <USB_Set_EPx_Xfer_Size+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
230060c2:	4000e737          	lui	a4,0x4000e
230060c6:	85072783          	lw	a5,-1968(a4) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_SIZE, size);
230060ca:	8007f793          	andi	a5,a5,-2048
230060ce:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
230060d0:	84f72823          	sw	a5,-1968(a4)
                break;
230060d4:	b741                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
230060d6:	4000e737          	lui	a4,0x4000e
230060da:	84472783          	lw	a5,-1980(a4) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_SIZE, size);
230060de:	8007f793          	andi	a5,a5,-2048
230060e2:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
230060e4:	84f72223          	sw	a5,-1980(a4)
                break;
230060e8:	b7b5                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
230060ea:	4000e737          	lui	a4,0x4000e
230060ee:	85472783          	lw	a5,-1964(a4) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_SIZE, size);
230060f2:	8007f793          	andi	a5,a5,-2048
230060f6:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
230060f8:	84f72a23          	sw	a5,-1964(a4)
                break;
230060fc:	bfa1                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
230060fe:	4000e737          	lui	a4,0x4000e
23006102:	84c72783          	lw	a5,-1972(a4) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_SIZE, size);
23006106:	8007f793          	andi	a5,a5,-2048
2300610a:	8fcd                	or	a5,a5,a1
                BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
2300610c:	84f72623          	sw	a5,-1972(a4)
                break;
23006110:	b791                	j	23006054 <USB_Set_EPx_Xfer_Size+0x1c>

23006112 <USB_Set_EPx_Rdy>:
    if (epId == EP_ID0) {
23006112:	e105                	bnez	a0,23006132 <USB_Set_EPx_Rdy+0x20>
        tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23006114:	4000e6b7          	lui	a3,0x4000e
23006118:	8006a783          	lw	a5,-2048(a3) # 4000d800 <__dtcm_load_addr+0x1cfff884>
        tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_USB_EP0_SW_STALL);
2300611c:	ff000737          	lui	a4,0xff000
23006120:	177d                	addi	a4,a4,-1
23006122:	8ff9                	and	a5,a5,a4
23006124:	0e000737          	lui	a4,0xe000
23006128:	8fd9                	or	a5,a5,a4
        BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
2300612a:	80f6a023          	sw	a5,-2048(a3)
}
2300612e:	4501                	li	a0,0
23006130:	8082                	ret
        switch (epId) {
23006132:	4791                	li	a5,4
23006134:	0cf50463          	beq	a0,a5,230061fc <USB_Set_EPx_Rdy+0xea>
23006138:	02a7e563          	bltu	a5,a0,23006162 <USB_Set_EPx_Rdy+0x50>
2300613c:	4789                	li	a5,2
2300613e:	08f50563          	beq	a0,a5,230061c8 <USB_Set_EPx_Rdy+0xb6>
23006142:	478d                	li	a5,3
23006144:	04f51263          	bne	a0,a5,23006188 <USB_Set_EPx_Rdy+0x76>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
23006148:	4000e6b7          	lui	a3,0x4000e
2300614c:	8486a783          	lw	a5,-1976(a3) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP3_STALL);
23006150:	7741                	lui	a4,0xffff0
23006152:	177d                	addi	a4,a4,-1
23006154:	8ff9                	and	a5,a5,a4
23006156:	00060737          	lui	a4,0x60
2300615a:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
2300615c:	84f6a423          	sw	a5,-1976(a3)
                break;
23006160:	b7f9                	j	2300612e <USB_Set_EPx_Rdy+0x1c>
        switch (epId) {
23006162:	4799                	li	a5,6
23006164:	06f50f63          	beq	a0,a5,230061e2 <USB_Set_EPx_Rdy+0xd0>
23006168:	479d                	li	a5,7
2300616a:	02f51f63          	bne	a0,a5,230061a8 <USB_Set_EPx_Rdy+0x96>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
2300616e:	4000e6b7          	lui	a3,0x4000e
23006172:	8586a783          	lw	a5,-1960(a3) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP7_STALL);
23006176:	7741                	lui	a4,0xffff0
23006178:	177d                	addi	a4,a4,-1
2300617a:	8ff9                	and	a5,a5,a4
2300617c:	00060737          	lui	a4,0x60
23006180:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
23006182:	84f6ac23          	sw	a5,-1960(a3)
                break;
23006186:	b765                	j	2300612e <USB_Set_EPx_Rdy+0x1c>
        switch (epId) {
23006188:	4785                	li	a5,1
2300618a:	faf512e3          	bne	a0,a5,2300612e <USB_Set_EPx_Rdy+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
2300618e:	4000e6b7          	lui	a3,0x4000e
23006192:	8406a783          	lw	a5,-1984(a3) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP1_STALL);
23006196:	7741                	lui	a4,0xffff0
23006198:	177d                	addi	a4,a4,-1
2300619a:	8ff9                	and	a5,a5,a4
2300619c:	00060737          	lui	a4,0x60
230061a0:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
230061a2:	84f6a023          	sw	a5,-1984(a3)
                break;
230061a6:	b761                	j	2300612e <USB_Set_EPx_Rdy+0x1c>
        switch (epId) {
230061a8:	4795                	li	a5,5
230061aa:	f8f512e3          	bne	a0,a5,2300612e <USB_Set_EPx_Rdy+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
230061ae:	4000e6b7          	lui	a3,0x4000e
230061b2:	8506a783          	lw	a5,-1968(a3) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP5_STALL);
230061b6:	7741                	lui	a4,0xffff0
230061b8:	177d                	addi	a4,a4,-1
230061ba:	8ff9                	and	a5,a5,a4
230061bc:	00060737          	lui	a4,0x60
230061c0:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
230061c2:	84f6a823          	sw	a5,-1968(a3)
                break;
230061c6:	b7a5                	j	2300612e <USB_Set_EPx_Rdy+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
230061c8:	4000e6b7          	lui	a3,0x4000e
230061cc:	8446a783          	lw	a5,-1980(a3) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP2_STALL);
230061d0:	7741                	lui	a4,0xffff0
230061d2:	177d                	addi	a4,a4,-1
230061d4:	8ff9                	and	a5,a5,a4
230061d6:	00060737          	lui	a4,0x60
230061da:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
230061dc:	84f6a223          	sw	a5,-1980(a3)
                break;
230061e0:	b7b9                	j	2300612e <USB_Set_EPx_Rdy+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
230061e2:	4000e6b7          	lui	a3,0x4000e
230061e6:	8546a783          	lw	a5,-1964(a3) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP6_STALL);
230061ea:	7741                	lui	a4,0xffff0
230061ec:	177d                	addi	a4,a4,-1
230061ee:	8ff9                	and	a5,a5,a4
230061f0:	00060737          	lui	a4,0x60
230061f4:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
230061f6:	84f6aa23          	sw	a5,-1964(a3)
                break;
230061fa:	bf15                	j	2300612e <USB_Set_EPx_Rdy+0x1c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
230061fc:	4000e6b7          	lui	a3,0x4000e
23006200:	84c6a783          	lw	a5,-1972(a3) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23006204:	7741                	lui	a4,0xffff0
23006206:	177d                	addi	a4,a4,-1
23006208:	8ff9                	and	a5,a5,a4
2300620a:	00060737          	lui	a4,0x60
2300620e:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23006210:	84f6a623          	sw	a5,-1972(a3)
                break;
23006214:	bf29                	j	2300612e <USB_Set_EPx_Rdy+0x1c>

23006216 <USB_Is_EPx_RDY_Free>:
    if (epId == EP_ID0) {
23006216:	e911                	bnez	a0,2300622a <USB_Is_EPx_RDY_Free+0x14>
        tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
23006218:	4000e7b7          	lui	a5,0x4000e
2300621c:	8007a503          	lw	a0,-2048(a5) # 4000d800 <__dtcm_load_addr+0x1cfff884>
        tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_USB_EP0_SW_RDY);
23006220:	8171                	srli	a0,a0,0x1c
    return tmpVal ? RESET : SET;
23006222:	fff54513          	not	a0,a0
23006226:	8905                	andi	a0,a0,1
23006228:	8082                	ret
        switch (epId) {
2300622a:	4791                	li	a5,4
2300622c:	08f50e63          	beq	a0,a5,230062c8 <USB_Is_EPx_RDY_Free+0xb2>
23006230:	02a7e163          	bltu	a5,a0,23006252 <USB_Is_EPx_RDY_Free+0x3c>
23006234:	4789                	li	a5,2
23006236:	06f50e63          	beq	a0,a5,230062b2 <USB_Is_EPx_RDY_Free+0x9c>
2300623a:	478d                	li	a5,3
2300623c:	02f51a63          	bne	a0,a5,23006270 <USB_Is_EPx_RDY_Free+0x5a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
23006240:	4000e7b7          	lui	a5,0x4000e
23006244:	8487a503          	lw	a0,-1976(a5) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP3_RDY);
23006248:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
2300624a:	fff54513          	not	a0,a0
2300624e:	8905                	andi	a0,a0,1
                break;
23006250:	8082                	ret
        switch (epId) {
23006252:	4799                	li	a5,6
23006254:	04f50663          	beq	a0,a5,230062a0 <USB_Is_EPx_RDY_Free+0x8a>
23006258:	479d                	li	a5,7
2300625a:	02f51763          	bne	a0,a5,23006288 <USB_Is_EPx_RDY_Free+0x72>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
2300625e:	4000e7b7          	lui	a5,0x4000e
23006262:	8587a503          	lw	a0,-1960(a5) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP7_RDY);
23006266:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
23006268:	fff54513          	not	a0,a0
2300626c:	8905                	andi	a0,a0,1
}
2300626e:	8082                	ret
        switch (epId) {
23006270:	4785                	li	a5,1
23006272:	04f51963          	bne	a0,a5,230062c4 <USB_Is_EPx_RDY_Free+0xae>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
23006276:	4000e7b7          	lui	a5,0x4000e
2300627a:	8407a503          	lw	a0,-1984(a5) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP1_RDY);
2300627e:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
23006280:	fff54513          	not	a0,a0
23006284:	8905                	andi	a0,a0,1
                break;
23006286:	8082                	ret
        switch (epId) {
23006288:	4795                	li	a5,5
2300628a:	02f51d63          	bne	a0,a5,230062c4 <USB_Is_EPx_RDY_Free+0xae>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
2300628e:	4000e7b7          	lui	a5,0x4000e
23006292:	8507a503          	lw	a0,-1968(a5) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP5_RDY);
23006296:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
23006298:	fff54513          	not	a0,a0
2300629c:	8905                	andi	a0,a0,1
                break;
2300629e:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
230062a0:	4000e7b7          	lui	a5,0x4000e
230062a4:	8547a503          	lw	a0,-1964(a5) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP6_RDY);
230062a8:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
230062aa:	fff54513          	not	a0,a0
230062ae:	8905                	andi	a0,a0,1
                break;
230062b0:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
230062b2:	4000e7b7          	lui	a5,0x4000e
230062b6:	8447a503          	lw	a0,-1980(a5) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP2_RDY);
230062ba:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
230062bc:	fff54513          	not	a0,a0
230062c0:	8905                	andi	a0,a0,1
                break;
230062c2:	8082                	ret
        switch (epId) {
230062c4:	4505                	li	a0,1
230062c6:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
230062c8:	4000e7b7          	lui	a5,0x4000e
230062cc:	84c7a503          	lw	a0,-1972(a5) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
                tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_STS_EP4_RDY);
230062d0:	814d                	srli	a0,a0,0x13
    return tmpVal ? RESET : SET;
230062d2:	fff54513          	not	a0,a0
230062d6:	8905                	andi	a0,a0,1
                break;
230062d8:	8082                	ret

230062da <USB_Set_EPx_STALL>:
    if (epId == EP_ID0) {
230062da:	ed01                	bnez	a0,230062f2 <USB_Set_EPx_STALL+0x18>
        tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
230062dc:	4000e737          	lui	a4,0x4000e
230062e0:	80072783          	lw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
        tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EP0_SW_STALL);
230062e4:	010006b7          	lui	a3,0x1000
230062e8:	8fd5                	or	a5,a5,a3
        BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
230062ea:	80f72023          	sw	a5,-2048(a4)
}
230062ee:	4501                	li	a0,0
230062f0:	8082                	ret
        switch (epId) {
230062f2:	4791                	li	a5,4
230062f4:	08f50c63          	beq	a0,a5,2300638c <USB_Set_EPx_STALL+0xb2>
230062f8:	02a7e163          	bltu	a5,a0,2300631a <USB_Set_EPx_STALL+0x40>
230062fc:	4789                	li	a5,2
230062fe:	06f50563          	beq	a0,a5,23006368 <USB_Set_EPx_STALL+0x8e>
23006302:	478d                	li	a5,3
23006304:	02f51a63          	bne	a0,a5,23006338 <USB_Set_EPx_STALL+0x5e>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
23006308:	4000e737          	lui	a4,0x4000e
2300630c:	84872783          	lw	a5,-1976(a4) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP3_STALL);
23006310:	66c1                	lui	a3,0x10
23006312:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
23006314:	84f72423          	sw	a5,-1976(a4)
                break;
23006318:	bfd9                	j	230062ee <USB_Set_EPx_STALL+0x14>
        switch (epId) {
2300631a:	4799                	li	a5,6
2300631c:	04f50f63          	beq	a0,a5,2300637a <USB_Set_EPx_STALL+0xa0>
23006320:	479d                	li	a5,7
23006322:	02f51763          	bne	a0,a5,23006350 <USB_Set_EPx_STALL+0x76>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
23006326:	4000e737          	lui	a4,0x4000e
2300632a:	85872783          	lw	a5,-1960(a4) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP7_STALL);
2300632e:	66c1                	lui	a3,0x10
23006330:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
23006332:	84f72c23          	sw	a5,-1960(a4)
                break;
23006336:	bf65                	j	230062ee <USB_Set_EPx_STALL+0x14>
        switch (epId) {
23006338:	4785                	li	a5,1
2300633a:	faf51ae3          	bne	a0,a5,230062ee <USB_Set_EPx_STALL+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
2300633e:	4000e737          	lui	a4,0x4000e
23006342:	84072783          	lw	a5,-1984(a4) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP1_STALL);
23006346:	66c1                	lui	a3,0x10
23006348:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
2300634a:	84f72023          	sw	a5,-1984(a4)
                break;
2300634e:	b745                	j	230062ee <USB_Set_EPx_STALL+0x14>
        switch (epId) {
23006350:	4795                	li	a5,5
23006352:	f8f51ee3          	bne	a0,a5,230062ee <USB_Set_EPx_STALL+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
23006356:	4000e737          	lui	a4,0x4000e
2300635a:	85072783          	lw	a5,-1968(a4) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP5_STALL);
2300635e:	66c1                	lui	a3,0x10
23006360:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
23006362:	84f72823          	sw	a5,-1968(a4)
                break;
23006366:	b761                	j	230062ee <USB_Set_EPx_STALL+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
23006368:	4000e737          	lui	a4,0x4000e
2300636c:	84472783          	lw	a5,-1980(a4) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP2_STALL);
23006370:	66c1                	lui	a3,0x10
23006372:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
23006374:	84f72223          	sw	a5,-1980(a4)
                break;
23006378:	bf9d                	j	230062ee <USB_Set_EPx_STALL+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
2300637a:	4000e737          	lui	a4,0x4000e
2300637e:	85472783          	lw	a5,-1964(a4) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP6_STALL);
23006382:	66c1                	lui	a3,0x10
23006384:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
23006386:	84f72a23          	sw	a5,-1964(a4)
                break;
2300638a:	b795                	j	230062ee <USB_Set_EPx_STALL+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
2300638c:	4000e737          	lui	a4,0x4000e
23006390:	84c72783          	lw	a5,-1972(a4) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23006394:	66c1                	lui	a3,0x10
23006396:	8fd5                	or	a5,a5,a3
                BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23006398:	84f72623          	sw	a5,-1972(a4)
                break;
2300639c:	bf89                	j	230062ee <USB_Set_EPx_STALL+0x14>

2300639e <USB_Set_EPx_Busy>:

BL_Err_Type USB_Set_EPx_Busy(USB_EP_ID epId)
{
    uint32_t tmpVal = 0;

    if (epId == EP_ID0) {
2300639e:	ed01                	bnez	a0,230063b6 <USB_Set_EPx_Busy+0x18>
        tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
230063a0:	4000e737          	lui	a4,0x4000e
230063a4:	80072783          	lw	a5,-2048(a4) # 4000d800 <__dtcm_load_addr+0x1cfff884>
        tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EP0_SW_NACK_IN);
        tmpVal = BL_SET_REG_BIT(tmpVal, USB_CR_USB_EP0_SW_NACK_OUT);
230063a8:	060006b7          	lui	a3,0x6000
230063ac:	8fd5                	or	a5,a5,a3
        BL_WR_REG(USB_BASE, USB_CONFIG, tmpVal);
230063ae:	80f72023          	sw	a5,-2048(a4)
                break;
        }
    }

    return SUCCESS;
}
230063b2:	4501                	li	a0,0
230063b4:	8082                	ret
        switch (epId) {
230063b6:	4791                	li	a5,4
230063b8:	0cf50463          	beq	a0,a5,23006480 <USB_Set_EPx_Busy+0xe2>
230063bc:	02a7e563          	bltu	a5,a0,230063e6 <USB_Set_EPx_Busy+0x48>
230063c0:	4789                	li	a5,2
230063c2:	08f50563          	beq	a0,a5,2300644c <USB_Set_EPx_Busy+0xae>
230063c6:	478d                	li	a5,3
230063c8:	04f51263          	bne	a0,a5,2300640c <USB_Set_EPx_Busy+0x6e>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
230063cc:	4000e6b7          	lui	a3,0x4000e
230063d0:	8486a783          	lw	a5,-1976(a3) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP3_STALL);
230063d4:	7741                	lui	a4,0xffff0
230063d6:	177d                	addi	a4,a4,-1
230063d8:	8ff9                	and	a5,a5,a4
230063da:	00020737          	lui	a4,0x20
230063de:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
230063e0:	84f6a423          	sw	a5,-1976(a3)
                break;
230063e4:	b7f9                	j	230063b2 <USB_Set_EPx_Busy+0x14>
        switch (epId) {
230063e6:	4799                	li	a5,6
230063e8:	06f50f63          	beq	a0,a5,23006466 <USB_Set_EPx_Busy+0xc8>
230063ec:	479d                	li	a5,7
230063ee:	02f51f63          	bne	a0,a5,2300642c <USB_Set_EPx_Busy+0x8e>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
230063f2:	4000e6b7          	lui	a3,0x4000e
230063f6:	8586a783          	lw	a5,-1960(a3) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP7_STALL);
230063fa:	7741                	lui	a4,0xffff0
230063fc:	177d                	addi	a4,a4,-1
230063fe:	8ff9                	and	a5,a5,a4
23006400:	00020737          	lui	a4,0x20
23006404:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
23006406:	84f6ac23          	sw	a5,-1960(a3)
                break;
2300640a:	b765                	j	230063b2 <USB_Set_EPx_Busy+0x14>
        switch (epId) {
2300640c:	4785                	li	a5,1
2300640e:	faf512e3          	bne	a0,a5,230063b2 <USB_Set_EPx_Busy+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
23006412:	4000e6b7          	lui	a3,0x4000e
23006416:	8406a783          	lw	a5,-1984(a3) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP1_STALL);
2300641a:	7741                	lui	a4,0xffff0
2300641c:	177d                	addi	a4,a4,-1
2300641e:	8ff9                	and	a5,a5,a4
23006420:	00020737          	lui	a4,0x20
23006424:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
23006426:	84f6a023          	sw	a5,-1984(a3)
                break;
2300642a:	b761                	j	230063b2 <USB_Set_EPx_Busy+0x14>
        switch (epId) {
2300642c:	4795                	li	a5,5
2300642e:	f8f512e3          	bne	a0,a5,230063b2 <USB_Set_EPx_Busy+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
23006432:	4000e6b7          	lui	a3,0x4000e
23006436:	8506a783          	lw	a5,-1968(a3) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP5_STALL);
2300643a:	7741                	lui	a4,0xffff0
2300643c:	177d                	addi	a4,a4,-1
2300643e:	8ff9                	and	a5,a5,a4
23006440:	00020737          	lui	a4,0x20
23006444:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
23006446:	84f6a823          	sw	a5,-1968(a3)
                break;
2300644a:	b7a5                	j	230063b2 <USB_Set_EPx_Busy+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
2300644c:	4000e6b7          	lui	a3,0x4000e
23006450:	8446a783          	lw	a5,-1980(a3) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP2_STALL);
23006454:	7741                	lui	a4,0xffff0
23006456:	177d                	addi	a4,a4,-1
23006458:	8ff9                	and	a5,a5,a4
2300645a:	00020737          	lui	a4,0x20
2300645e:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
23006460:	84f6a223          	sw	a5,-1980(a3)
                break;
23006464:	b7b9                	j	230063b2 <USB_Set_EPx_Busy+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
23006466:	4000e6b7          	lui	a3,0x4000e
2300646a:	8546a783          	lw	a5,-1964(a3) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP6_STALL);
2300646e:	7741                	lui	a4,0xffff0
23006470:	177d                	addi	a4,a4,-1
23006472:	8ff9                	and	a5,a5,a4
23006474:	00020737          	lui	a4,0x20
23006478:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
2300647a:	84f6aa23          	sw	a5,-1964(a3)
                break;
2300647e:	bf15                	j	230063b2 <USB_Set_EPx_Busy+0x14>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
23006480:	4000e6b7          	lui	a3,0x4000e
23006484:	84c6a783          	lw	a5,-1972(a3) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_CR_EP4_STALL);
23006488:	7741                	lui	a4,0xffff0
2300648a:	177d                	addi	a4,a4,-1
2300648c:	8ff9                	and	a5,a5,a4
2300648e:	00020737          	lui	a4,0x20
23006492:	8fd9                	or	a5,a5,a4
                BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23006494:	84f6a623          	sw	a5,-1972(a3)
                break;
23006498:	bf29                	j	230063b2 <USB_Set_EPx_Busy+0x14>

2300649a <USB_Set_EPx_Status>:

BL_Err_Type USB_Set_EPx_Status(USB_EP_ID epId, USB_EP_STATUS_Type sts)
{
2300649a:	1141                	addi	sp,sp,-16
2300649c:	c606                	sw	ra,12(sp)
    switch (sts) {
2300649e:	4709                	li	a4,2
230064a0:	02e58a63          	beq	a1,a4,230064d4 <USB_Set_EPx_Status+0x3a>
230064a4:	00b76863          	bltu	a4,a1,230064b4 <USB_Set_EPx_Status+0x1a>
230064a8:	c185                	beqz	a1,230064c8 <USB_Set_EPx_Status+0x2e>
        case USB_EP_STATUS_ACK:
            USB_Set_EPx_Rdy(epId);
            break;

        case USB_EP_STATUS_NACK:
            USB_Set_EPx_Busy(epId);
230064aa:	3dd5                	jal	2300639e <USB_Set_EPx_Busy>
        default:
            break;
    }

    return SUCCESS;
}
230064ac:	40b2                	lw	ra,12(sp)
230064ae:	4501                	li	a0,0
230064b0:	0141                	addi	sp,sp,16
230064b2:	8082                	ret
    switch (sts) {
230064b4:	470d                	li	a4,3
230064b6:	fee59be3          	bne	a1,a4,230064ac <USB_Set_EPx_Status+0x12>
    if (epId == EP_ID0) {
230064ba:	d96d                	beqz	a0,230064ac <USB_Set_EPx_Status+0x12>
230064bc:	9ebff0ef          	jal	ra,23005ea6 <USB_Clr_EPx_STALL.part.0>
}
230064c0:	40b2                	lw	ra,12(sp)
230064c2:	4501                	li	a0,0
230064c4:	0141                	addi	sp,sp,16
230064c6:	8082                	ret
            USB_Set_EPx_Rdy(epId);
230064c8:	c4bff0ef          	jal	ra,23006112 <USB_Set_EPx_Rdy>
}
230064cc:	40b2                	lw	ra,12(sp)
230064ce:	4501                	li	a0,0
230064d0:	0141                	addi	sp,sp,16
230064d2:	8082                	ret
            USB_Set_EPx_STALL(epId);
230064d4:	3519                	jal	230062da <USB_Set_EPx_STALL>
}
230064d6:	40b2                	lw	ra,12(sp)
230064d8:	4501                	li	a0,0
230064da:	0141                	addi	sp,sp,16
230064dc:	8082                	ret

230064de <USB_Get_EPx_Status>:

USB_EP_STATUS_Type USB_Get_EPx_Status(USB_EP_ID epId)
{
    uint32_t tmpVal = 0;

    if (epId == EP_ID0) {
230064de:	ed01                	bnez	a0,230064f6 <USB_Get_EPx_Status+0x18>
        tmpVal = BL_RD_REG(USB_BASE, USB_CONFIG);
230064e0:	4000e7b7          	lui	a5,0x4000e
230064e4:	8007a783          	lw	a5,-2048(a5) # 4000d800 <__dtcm_load_addr+0x1cfff884>

        switch ((tmpVal >> 24) & 0x7) {
230064e8:	471d                	li	a4,7
230064ea:	450d                	li	a0,3
230064ec:	83e1                	srli	a5,a5,0x18
230064ee:	8b9d                	andi	a5,a5,7
230064f0:	06e79963          	bne	a5,a4,23006562 <USB_Get_EPx_Status+0x84>
                break;
        }
    }

    return USB_EP_STATUS_NSTALL;
}
230064f4:	8082                	ret
        switch (epId) {
230064f6:	4791                	li	a5,4
230064f8:	0af50463          	beq	a0,a5,230065a0 <USB_Get_EPx_Status+0xc2>
230064fc:	00a7ef63          	bltu	a5,a0,2300651a <USB_Get_EPx_Status+0x3c>
23006500:	4789                	li	a5,2
23006502:	06f50863          	beq	a0,a5,23006572 <USB_Get_EPx_Status+0x94>
23006506:	478d                	li	a5,3
23006508:	02f51663          	bne	a0,a5,23006534 <USB_Get_EPx_Status+0x56>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
2300650c:	4000e7b7          	lui	a5,0x4000e
23006510:	8487a783          	lw	a5,-1976(a5) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
        switch ((tmpVal >> 14) & 0x3) {
23006514:	83b9                	srli	a5,a5,0xe
23006516:	8b8d                	andi	a5,a5,3
                break;
23006518:	a089                	j	2300655a <USB_Get_EPx_Status+0x7c>
        switch (epId) {
2300651a:	4799                	li	a5,6
2300651c:	06f50263          	beq	a0,a5,23006580 <USB_Get_EPx_Status+0xa2>
23006520:	479d                	li	a5,7
23006522:	02f51363          	bne	a0,a5,23006548 <USB_Get_EPx_Status+0x6a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
23006526:	4000e7b7          	lui	a5,0x4000e
2300652a:	8587a783          	lw	a5,-1960(a5) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
        switch ((tmpVal >> 14) & 0x3) {
2300652e:	83b9                	srli	a5,a5,0xe
23006530:	8b8d                	andi	a5,a5,3
                break;
23006532:	a025                	j	2300655a <USB_Get_EPx_Status+0x7c>
        switch (epId) {
23006534:	4785                	li	a5,1
23006536:	04f51c63          	bne	a0,a5,2300658e <USB_Get_EPx_Status+0xb0>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
2300653a:	4000e7b7          	lui	a5,0x4000e
2300653e:	8407a783          	lw	a5,-1984(a5) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
        switch ((tmpVal >> 14) & 0x3) {
23006542:	83b9                	srli	a5,a5,0xe
23006544:	8b8d                	andi	a5,a5,3
                break;
23006546:	a811                	j	2300655a <USB_Get_EPx_Status+0x7c>
        switch (epId) {
23006548:	4795                	li	a5,5
2300654a:	04f51263          	bne	a0,a5,2300658e <USB_Get_EPx_Status+0xb0>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
2300654e:	4000e7b7          	lui	a5,0x4000e
23006552:	8507a783          	lw	a5,-1968(a5) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
        switch ((tmpVal >> 14) & 0x3) {
23006556:	83b9                	srli	a5,a5,0xe
23006558:	8b8d                	andi	a5,a5,3
        switch ((tmpVal >> 24) & 0x7) {
2300655a:	450d                	li	a0,3
2300655c:	02a79a63          	bne	a5,a0,23006590 <USB_Get_EPx_Status+0xb2>
}
23006560:	8082                	ret
23006562:	2300d737          	lui	a4,0x2300d
23006566:	8dc70713          	addi	a4,a4,-1828 # 2300c8dc <CSWTCH.19>
2300656a:	97ba                	add	a5,a5,a4
2300656c:	0007c503          	lbu	a0,0(a5)
23006570:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
23006572:	4000e7b7          	lui	a5,0x4000e
23006576:	8447a783          	lw	a5,-1980(a5) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
        switch ((tmpVal >> 14) & 0x3) {
2300657a:	83b9                	srli	a5,a5,0xe
2300657c:	8b8d                	andi	a5,a5,3
                break;
2300657e:	bff1                	j	2300655a <USB_Get_EPx_Status+0x7c>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
23006580:	4000e7b7          	lui	a5,0x4000e
23006584:	8547a783          	lw	a5,-1964(a5) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
        switch ((tmpVal >> 14) & 0x3) {
23006588:	83b9                	srli	a5,a5,0xe
2300658a:	8b8d                	andi	a5,a5,3
                break;
2300658c:	b7f9                	j	2300655a <USB_Get_EPx_Status+0x7c>
        switch (epId) {
2300658e:	4781                	li	a5,0
23006590:	2300d737          	lui	a4,0x2300d
23006594:	43c70713          	addi	a4,a4,1084 # 2300d43c <CSWTCH.20>
23006598:	97ba                	add	a5,a5,a4
2300659a:	0007c503          	lbu	a0,0(a5)
}
2300659e:	8082                	ret
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
230065a0:	4000e7b7          	lui	a5,0x4000e
230065a4:	84c7a783          	lw	a5,-1972(a5) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
        switch ((tmpVal >> 14) & 0x3) {
230065a8:	83b9                	srli	a5,a5,0xe
230065aa:	8b8d                	andi	a5,a5,3
                break;
230065ac:	b77d                	j	2300655a <USB_Get_EPx_Status+0x7c>

230065ae <USB_IntEn>:

BL_Err_Type USB_IntEn(USB_INT_Type intType, uint8_t enable)
{
    uint32_t tmpVal = 0;

    if (USB_INT_ALL == intType) {
230065ae:	02000793          	li	a5,32
230065b2:	02f50563          	beq	a0,a5,230065dc <USB_IntEn+0x2e>
        }

        return SUCCESS;
    }

    tmpVal = BL_RD_REG(USB_BASE, USB_INT_EN);
230065b6:	4000e7b7          	lui	a5,0x4000e
230065ba:	8207a703          	lw	a4,-2016(a5) # 4000d820 <__dtcm_load_addr+0x1cfff8a4>

    if (enable) {
        tmpVal |= (1 << intType);
230065be:	4785                	li	a5,1
230065c0:	00a79533          	sll	a0,a5,a0
    if (enable) {
230065c4:	e991                	bnez	a1,230065d8 <USB_IntEn+0x2a>
    } else {
        tmpVal &= ~(1 << intType);
230065c6:	fff54513          	not	a0,a0
230065ca:	8d79                	and	a0,a0,a4
    }

    BL_WR_REG(USB_BASE, USB_INT_EN, tmpVal);
230065cc:	4000e7b7          	lui	a5,0x4000e
230065d0:	82a7a023          	sw	a0,-2016(a5) # 4000d820 <__dtcm_load_addr+0x1cfff8a4>

    return SUCCESS;
}
230065d4:	4501                	li	a0,0
230065d6:	8082                	ret
        tmpVal |= (1 << intType);
230065d8:	8d59                	or	a0,a0,a4
230065da:	bfcd                	j	230065cc <USB_IntEn+0x1e>
            BL_WR_REG(USB_BASE, USB_INT_EN, USB_INT_TYPE_ALL);
230065dc:	4000e737          	lui	a4,0x4000e
        if (enable) {
230065e0:	c981                	beqz	a1,230065f0 <USB_IntEn+0x42>
            BL_WR_REG(USB_BASE, USB_INT_EN, USB_INT_TYPE_ALL);
230065e2:	f90007b7          	lui	a5,0xf9000
230065e6:	17ed                	addi	a5,a5,-5
230065e8:	82f72023          	sw	a5,-2016(a4) # 4000d820 <__dtcm_load_addr+0x1cfff8a4>
}
230065ec:	4501                	li	a0,0
230065ee:	8082                	ret
            BL_WR_REG(USB_BASE, USB_INT_EN, ~USB_INT_TYPE_ALL);
230065f0:	070007b7          	lui	a5,0x7000
230065f4:	0791                	addi	a5,a5,4
230065f6:	82f72023          	sw	a5,-2016(a4)
}
230065fa:	4501                	li	a0,0
230065fc:	8082                	ret

230065fe <USB_IntMask>:

BL_Err_Type USB_IntMask(USB_INT_Type intType, BL_Mask_Type intMask)
{
    uint32_t tmpVal = 0;

    if (USB_INT_ALL == intType) {
230065fe:	02000793          	li	a5,32
23006602:	02f50563          	beq	a0,a5,2300662c <USB_IntMask+0x2e>
        }

        return SUCCESS;
    }

    tmpVal = BL_RD_REG(USB_BASE, USB_INT_MASK);
23006606:	4000e7b7          	lui	a5,0x4000e
2300660a:	8287a703          	lw	a4,-2008(a5) # 4000d828 <__dtcm_load_addr+0x1cfff8ac>

    if (intMask != UNMASK) {
        tmpVal |= (1 << intType);
2300660e:	4785                	li	a5,1
23006610:	00a79533          	sll	a0,a5,a0
    if (intMask != UNMASK) {
23006614:	e991                	bnez	a1,23006628 <USB_IntMask+0x2a>
    } else {
        tmpVal &= ~(1 << intType);
23006616:	fff54513          	not	a0,a0
2300661a:	8d79                	and	a0,a0,a4
    }

    BL_WR_REG(USB_BASE, USB_INT_MASK, tmpVal);
2300661c:	4000e7b7          	lui	a5,0x4000e
23006620:	82a7a423          	sw	a0,-2008(a5) # 4000d828 <__dtcm_load_addr+0x1cfff8ac>

    return SUCCESS;
}
23006624:	4501                	li	a0,0
23006626:	8082                	ret
        tmpVal |= (1 << intType);
23006628:	8d59                	or	a0,a0,a4
2300662a:	bfcd                	j	2300661c <USB_IntMask+0x1e>
            BL_WR_REG(USB_BASE, USB_INT_MASK, USB_INT_TYPE_ALL);
2300662c:	4000e737          	lui	a4,0x4000e
        if (intMask != UNMASK) {
23006630:	c981                	beqz	a1,23006640 <USB_IntMask+0x42>
            BL_WR_REG(USB_BASE, USB_INT_MASK, USB_INT_TYPE_ALL);
23006632:	f90007b7          	lui	a5,0xf9000
23006636:	17ed                	addi	a5,a5,-5
23006638:	82f72423          	sw	a5,-2008(a4) # 4000d828 <__dtcm_load_addr+0x1cfff8ac>
}
2300663c:	4501                	li	a0,0
2300663e:	8082                	ret
            BL_WR_REG(USB_BASE, USB_INT_MASK, ~USB_INT_TYPE_ALL);
23006640:	070007b7          	lui	a5,0x7000
23006644:	0791                	addi	a5,a5,4
23006646:	82f72423          	sw	a5,-2008(a4)
}
2300664a:	4501                	li	a0,0
2300664c:	8082                	ret

2300664e <USB_Get_IntStatus>:

BL_Sts_Type USB_Get_IntStatus(USB_INT_Type intType)
{
    if (USB_INT_ALL == intType) {
2300664e:	02000793          	li	a5,32
23006652:	00f50d63          	beq	a0,a5,2300666c <USB_Get_IntStatus+0x1e>
        return BL_RD_REG(USB_BASE, USB_INT_STS) ? SET : RESET;
    }

    return ((BL_RD_REG(USB_BASE, USB_INT_STS) & (1 << intType))) ? SET : RESET;
23006656:	4000e7b7          	lui	a5,0x4000e
2300665a:	8247a703          	lw	a4,-2012(a5) # 4000d824 <__dtcm_load_addr+0x1cfff8a8>
2300665e:	4785                	li	a5,1
23006660:	00a79533          	sll	a0,a5,a0
23006664:	8d79                	and	a0,a0,a4
23006666:	00a03533          	snez	a0,a0
}
2300666a:	8082                	ret
        return BL_RD_REG(USB_BASE, USB_INT_STS) ? SET : RESET;
2300666c:	4000e7b7          	lui	a5,0x4000e
23006670:	8247a503          	lw	a0,-2012(a5) # 4000d824 <__dtcm_load_addr+0x1cfff8a8>
23006674:	00a03533          	snez	a0,a0
23006678:	8082                	ret

2300667a <USB_Clr_IntStatus>:

BL_Err_Type USB_Clr_IntStatus(USB_INT_Type intType)
{
    uint32_t tmpVal = 0;

    if (USB_INT_ALL == intType) {
2300667a:	02000793          	li	a5,32
        BL_WR_REG(USB_BASE, USB_INT_CLEAR, USB_INT_TYPE_ALL);
2300667e:	4000e737          	lui	a4,0x4000e
    if (USB_INT_ALL == intType) {
23006682:	00f50c63          	beq	a0,a5,2300669a <USB_Clr_IntStatus+0x20>

        return SUCCESS;
    }

    tmpVal = BL_RD_REG(USB_BASE, USB_INT_CLEAR);
23006686:	82c72683          	lw	a3,-2004(a4) # 4000d82c <__dtcm_load_addr+0x1cfff8b0>
    tmpVal |= (1 << intType);
2300668a:	4785                	li	a5,1
2300668c:	00a79533          	sll	a0,a5,a0
23006690:	8d55                	or	a0,a0,a3
    BL_WR_REG(USB_BASE, USB_INT_CLEAR, tmpVal);
23006692:	82a72623          	sw	a0,-2004(a4)

    return SUCCESS;
}
23006696:	4501                	li	a0,0
23006698:	8082                	ret
        BL_WR_REG(USB_BASE, USB_INT_CLEAR, USB_INT_TYPE_ALL);
2300669a:	f90007b7          	lui	a5,0xf9000
2300669e:	17ed                	addi	a5,a5,-5
230066a0:	82f72623          	sw	a5,-2004(a4)
}
230066a4:	4501                	li	a0,0
230066a6:	8082                	ret

230066a8 <USB_Set_EPx_Config>:

BL_Err_Type USB_Set_EPx_Config(USB_EP_ID epId, EP_Config_Type *epCfg)
{
    uint32_t tmpVal = 0;

    if (epId == EP_ID0) {
230066a8:	10050163          	beqz	a0,230067aa <USB_Set_EPx_Config+0x102>
        return ERROR;
    }

    switch (epId) {
230066ac:	4791                	li	a5,4
230066ae:	16f50463          	beq	a0,a5,23006816 <USB_Set_EPx_Config+0x16e>
230066b2:	04a7e263          	bltu	a5,a0,230066f6 <USB_Set_EPx_Config+0x4e>
230066b6:	4789                	li	a5,2
230066b8:	0ef50b63          	beq	a0,a5,230067ae <USB_Set_EPx_Config+0x106>
230066bc:	478d                	li	a5,3
230066be:	0af51963          	bne	a0,a5,23006770 <USB_Set_EPx_Config+0xc8>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_SIZE, epCfg->EPMaxPacketSize);
            BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
            break;

        case EP_ID3:
            tmpVal = BL_RD_REG(USB_BASE, USB_EP3_CONFIG);
230066c2:	4000e837          	lui	a6,0x4000e
230066c6:	84882783          	lw	a5,-1976(a6) # 4000d848 <__dtcm_load_addr+0x1cfff8cc>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_TYPE, epCfg->type);
230066ca:	0035c703          	lbu	a4,3(a1) # fe000003 <__HeapLimit+0xbbfd0003>
230066ce:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_DIR, epCfg->dir);
230066d0:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_TYPE, epCfg->type);
230066d4:	157d                	addi	a0,a0,-1
230066d6:	8d7d                	and	a0,a0,a5
230066d8:	00d71793          	slli	a5,a4,0xd
230066dc:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_SIZE, epCfg->EPMaxPacketSize);
230066e0:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_DIR, epCfg->dir);
230066e4:	77f9                	lui	a5,0xffffe
230066e6:	062e                	slli	a2,a2,0xb
230066e8:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP3_SIZE, epCfg->EPMaxPacketSize);
230066ea:	8fd1                	or	a5,a5,a2
230066ec:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP3_CONFIG, tmpVal);
230066ee:	84f82423          	sw	a5,-1976(a6)

        default:
            break;
    }

    return SUCCESS;
230066f2:	4501                	li	a0,0
            break;
230066f4:	8082                	ret
    switch (epId) {
230066f6:	4799                	li	a5,6
230066f8:	0ef50563          	beq	a0,a5,230067e2 <USB_Set_EPx_Config+0x13a>
230066fc:	479d                	li	a5,7
230066fe:	02f51c63          	bne	a0,a5,23006736 <USB_Set_EPx_Config+0x8e>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP7_CONFIG);
23006702:	4000e837          	lui	a6,0x4000e
23006706:	85882783          	lw	a5,-1960(a6) # 4000d858 <__dtcm_load_addr+0x1cfff8dc>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_TYPE, epCfg->type);
2300670a:	0035c703          	lbu	a4,3(a1)
2300670e:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_DIR, epCfg->dir);
23006710:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_TYPE, epCfg->type);
23006714:	157d                	addi	a0,a0,-1
23006716:	8d7d                	and	a0,a0,a5
23006718:	00d71793          	slli	a5,a4,0xd
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_SIZE, epCfg->EPMaxPacketSize);
2300671c:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_TYPE, epCfg->type);
23006720:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_DIR, epCfg->dir);
23006724:	77f9                	lui	a5,0xffffe
23006726:	062e                	slli	a2,a2,0xb
23006728:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP7_SIZE, epCfg->EPMaxPacketSize);
2300672a:	8fd1                	or	a5,a5,a2
2300672c:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP7_CONFIG, tmpVal);
2300672e:	84f82c23          	sw	a5,-1960(a6)
    return SUCCESS;
23006732:	4501                	li	a0,0
            break;
23006734:	8082                	ret
    switch (epId) {
23006736:	4795                	li	a5,5
23006738:	fef51de3          	bne	a0,a5,23006732 <USB_Set_EPx_Config+0x8a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP5_CONFIG);
2300673c:	4000e837          	lui	a6,0x4000e
23006740:	85082783          	lw	a5,-1968(a6) # 4000d850 <__dtcm_load_addr+0x1cfff8d4>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_TYPE, epCfg->type);
23006744:	0035c703          	lbu	a4,3(a1)
23006748:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_DIR, epCfg->dir);
2300674a:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_TYPE, epCfg->type);
2300674e:	157d                	addi	a0,a0,-1
23006750:	8d7d                	and	a0,a0,a5
23006752:	00d71793          	slli	a5,a4,0xd
23006756:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_SIZE, epCfg->EPMaxPacketSize);
2300675a:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_DIR, epCfg->dir);
2300675e:	77f9                	lui	a5,0xffffe
23006760:	062e                	slli	a2,a2,0xb
23006762:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP5_SIZE, epCfg->EPMaxPacketSize);
23006764:	8fd1                	or	a5,a5,a2
23006766:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP5_CONFIG, tmpVal);
23006768:	84f82823          	sw	a5,-1968(a6)
    return SUCCESS;
2300676c:	4501                	li	a0,0
            break;
2300676e:	8082                	ret
    switch (epId) {
23006770:	4785                	li	a5,1
23006772:	fcf510e3          	bne	a0,a5,23006732 <USB_Set_EPx_Config+0x8a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP1_CONFIG);
23006776:	4000e837          	lui	a6,0x4000e
2300677a:	84082783          	lw	a5,-1984(a6) # 4000d840 <__dtcm_load_addr+0x1cfff8c4>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_TYPE, epCfg->type);
2300677e:	0035c703          	lbu	a4,3(a1)
23006782:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_DIR, epCfg->dir);
23006784:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_TYPE, epCfg->type);
23006788:	157d                	addi	a0,a0,-1
2300678a:	8d7d                	and	a0,a0,a5
2300678c:	00d71793          	slli	a5,a4,0xd
23006790:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_SIZE, epCfg->EPMaxPacketSize);
23006794:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_DIR, epCfg->dir);
23006798:	77f9                	lui	a5,0xffffe
2300679a:	062e                	slli	a2,a2,0xb
2300679c:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP1_SIZE, epCfg->EPMaxPacketSize);
2300679e:	8fd1                	or	a5,a5,a2
230067a0:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP1_CONFIG, tmpVal);
230067a2:	84f82023          	sw	a5,-1984(a6)
    return SUCCESS;
230067a6:	4501                	li	a0,0
            break;
230067a8:	8082                	ret
        return ERROR;
230067aa:	4505                	li	a0,1
}
230067ac:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_CONFIG);
230067ae:	4000e837          	lui	a6,0x4000e
230067b2:	84482783          	lw	a5,-1980(a6) # 4000d844 <__dtcm_load_addr+0x1cfff8c8>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_TYPE, epCfg->type);
230067b6:	0035c703          	lbu	a4,3(a1)
230067ba:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_DIR, epCfg->dir);
230067bc:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_TYPE, epCfg->type);
230067c0:	157d                	addi	a0,a0,-1
230067c2:	8d7d                	and	a0,a0,a5
230067c4:	00d71793          	slli	a5,a4,0xd
230067c8:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_SIZE, epCfg->EPMaxPacketSize);
230067cc:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_DIR, epCfg->dir);
230067d0:	77f9                	lui	a5,0xffffe
230067d2:	062e                	slli	a2,a2,0xb
230067d4:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP2_SIZE, epCfg->EPMaxPacketSize);
230067d6:	8fd1                	or	a5,a5,a2
230067d8:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP2_CONFIG, tmpVal);
230067da:	84f82223          	sw	a5,-1980(a6)
    return SUCCESS;
230067de:	4501                	li	a0,0
            break;
230067e0:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP6_CONFIG);
230067e2:	4000e837          	lui	a6,0x4000e
230067e6:	85482783          	lw	a5,-1964(a6) # 4000d854 <__dtcm_load_addr+0x1cfff8d8>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_TYPE, epCfg->type);
230067ea:	0035c703          	lbu	a4,3(a1)
230067ee:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_DIR, epCfg->dir);
230067f0:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_TYPE, epCfg->type);
230067f4:	157d                	addi	a0,a0,-1
230067f6:	8d7d                	and	a0,a0,a5
230067f8:	00d71793          	slli	a5,a4,0xd
230067fc:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_SIZE, epCfg->EPMaxPacketSize);
23006800:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_DIR, epCfg->dir);
23006804:	77f9                	lui	a5,0xffffe
23006806:	062e                	slli	a2,a2,0xb
23006808:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP6_SIZE, epCfg->EPMaxPacketSize);
2300680a:	8fd1                	or	a5,a5,a2
2300680c:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP6_CONFIG, tmpVal);
2300680e:	84f82a23          	sw	a5,-1964(a6)
    return SUCCESS;
23006812:	4501                	li	a0,0
            break;
23006814:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP4_CONFIG);
23006816:	4000e837          	lui	a6,0x4000e
2300681a:	84c82783          	lw	a5,-1972(a6) # 4000d84c <__dtcm_load_addr+0x1cfff8d0>
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_TYPE, epCfg->type);
2300681e:	0035c703          	lbu	a4,3(a1)
23006822:	7549                	lui	a0,0xffff2
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_DIR, epCfg->dir);
23006824:	0025c603          	lbu	a2,2(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_TYPE, epCfg->type);
23006828:	157d                	addi	a0,a0,-1
2300682a:	8d7d                	and	a0,a0,a5
2300682c:	00d71793          	slli	a5,a4,0xd
23006830:	00a7e733          	or	a4,a5,a0
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_SIZE, epCfg->EPMaxPacketSize);
23006834:	0005d683          	lhu	a3,0(a1)
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_DIR, epCfg->dir);
23006838:	77f9                	lui	a5,0xffffe
2300683a:	062e                	slli	a2,a2,0xb
2300683c:	8ff9                	and	a5,a5,a4
            tmpVal = BL_SET_REG_BITS_VAL(tmpVal, USB_CR_EP4_SIZE, epCfg->EPMaxPacketSize);
2300683e:	8fd1                	or	a5,a5,a2
23006840:	8fd5                	or	a5,a5,a3
            BL_WR_REG(USB_BASE, USB_EP4_CONFIG, tmpVal);
23006842:	84f82623          	sw	a5,-1972(a6)
    return SUCCESS;
23006846:	4501                	li	a0,0
            break;
23006848:	8082                	ret

2300684a <USB_Set_EPx_TX_DMA_Interface_Config>:

BL_Err_Type USB_Set_EPx_TX_DMA_Interface_Config(USB_EP_ID epId, BL_Fun_Type newState)
{
    uint32_t tmpVal = 0;

    if (newState == ENABLE) {
2300684a:	4785                	li	a5,1
2300684c:	06f58a63          	beq	a1,a5,230068c0 <USB_Set_EPx_TX_DMA_Interface_Config+0x76>

            default:
                break;
        }
    } else {
        switch (epId) {
23006850:	4711                	li	a4,4
23006852:	10e50263          	beq	a0,a4,23006956 <USB_Set_EPx_TX_DMA_Interface_Config+0x10c>
23006856:	02a76c63          	bltu	a4,a0,2300688e <USB_Set_EPx_TX_DMA_Interface_Config+0x44>
2300685a:	4709                	li	a4,2
2300685c:	10e50563          	beq	a0,a4,23006966 <USB_Set_EPx_TX_DMA_Interface_Config+0x11c>
23006860:	470d                	li	a4,3
23006862:	00e51b63          	bne	a0,a4,23006878 <USB_Set_EPx_TX_DMA_Interface_Config+0x2e>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP2_DMA_TX_EN);
                BL_WR_REG(USB_BASE, USB_EP2_FIFO_CONFIG, tmpVal);
                break;

            case EP_ID3:
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_FIFO_CONFIG);
23006866:	4000e737          	lui	a4,0x4000e
2300686a:	93072783          	lw	a5,-1744(a4) # 4000d930 <__dtcm_load_addr+0x1cfff9b4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP3_DMA_TX_EN);
2300686e:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP3_FIFO_CONFIG, tmpVal);
23006870:	92f72823          	sw	a5,-1744(a4)
                break;
        }
    }

    return SUCCESS;
}
23006874:	4501                	li	a0,0
23006876:	8082                	ret
        switch (epId) {
23006878:	cd5d                	beqz	a0,23006936 <USB_Set_EPx_TX_DMA_Interface_Config+0xec>
2300687a:	fef51de3          	bne	a0,a5,23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_FIFO_CONFIG);
2300687e:	4000e737          	lui	a4,0x4000e
23006882:	91072783          	lw	a5,-1776(a4) # 4000d910 <__dtcm_load_addr+0x1cfff994>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP1_DMA_TX_EN);
23006886:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP1_FIFO_CONFIG, tmpVal);
23006888:	90f72823          	sw	a5,-1776(a4)
                break;
2300688c:	b7e5                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
        switch (epId) {
2300688e:	4799                	li	a5,6
23006890:	0af50b63          	beq	a0,a5,23006946 <USB_Set_EPx_TX_DMA_Interface_Config+0xfc>
23006894:	479d                	li	a5,7
23006896:	00f51a63          	bne	a0,a5,230068aa <USB_Set_EPx_TX_DMA_Interface_Config+0x60>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_FIFO_CONFIG);
2300689a:	4000e737          	lui	a4,0x4000e
2300689e:	97072783          	lw	a5,-1680(a4) # 4000d970 <__dtcm_load_addr+0x1cfff9f4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP7_DMA_TX_EN);
230068a2:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP7_FIFO_CONFIG, tmpVal);
230068a4:	96f72823          	sw	a5,-1680(a4)
                break;
230068a8:	b7f1                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
        switch (epId) {
230068aa:	4795                	li	a5,5
230068ac:	fcf514e3          	bne	a0,a5,23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_FIFO_CONFIG);
230068b0:	4000e737          	lui	a4,0x4000e
230068b4:	95072783          	lw	a5,-1712(a4) # 4000d950 <__dtcm_load_addr+0x1cfff9d4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP5_DMA_TX_EN);
230068b8:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP5_FIFO_CONFIG, tmpVal);
230068ba:	94f72823          	sw	a5,-1712(a4)
                break;
230068be:	bf5d                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
        switch (epId) {
230068c0:	4791                	li	a5,4
230068c2:	0cf50c63          	beq	a0,a5,2300699a <USB_Set_EPx_TX_DMA_Interface_Config+0x150>
230068c6:	02a7ed63          	bltu	a5,a0,23006900 <USB_Set_EPx_TX_DMA_Interface_Config+0xb6>
230068ca:	4789                	li	a5,2
230068cc:	0ef50063          	beq	a0,a5,230069ac <USB_Set_EPx_TX_DMA_Interface_Config+0x162>
230068d0:	478d                	li	a5,3
230068d2:	00f51b63          	bne	a0,a5,230068e8 <USB_Set_EPx_TX_DMA_Interface_Config+0x9e>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_FIFO_CONFIG);
230068d6:	4000e737          	lui	a4,0x4000e
230068da:	93072783          	lw	a5,-1744(a4) # 4000d930 <__dtcm_load_addr+0x1cfff9b4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP3_DMA_TX_EN);
230068de:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP3_FIFO_CONFIG, tmpVal);
230068e2:	92f72823          	sw	a5,-1744(a4)
                break;
230068e6:	b779                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
        switch (epId) {
230068e8:	c559                	beqz	a0,23006976 <USB_Set_EPx_TX_DMA_Interface_Config+0x12c>
230068ea:	f8b515e3          	bne	a0,a1,23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_FIFO_CONFIG);
230068ee:	4000e737          	lui	a4,0x4000e
230068f2:	91072783          	lw	a5,-1776(a4) # 4000d910 <__dtcm_load_addr+0x1cfff994>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP1_DMA_TX_EN);
230068f6:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP1_FIFO_CONFIG, tmpVal);
230068fa:	90f72823          	sw	a5,-1776(a4)
                break;
230068fe:	bf9d                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006900:	4799                	li	a5,6
23006902:	08f50363          	beq	a0,a5,23006988 <USB_Set_EPx_TX_DMA_Interface_Config+0x13e>
23006906:	479d                	li	a5,7
23006908:	00f51b63          	bne	a0,a5,2300691e <USB_Set_EPx_TX_DMA_Interface_Config+0xd4>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_FIFO_CONFIG);
2300690c:	4000e737          	lui	a4,0x4000e
23006910:	97072783          	lw	a5,-1680(a4) # 4000d970 <__dtcm_load_addr+0x1cfff9f4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP7_DMA_TX_EN);
23006914:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP7_FIFO_CONFIG, tmpVal);
23006918:	96f72823          	sw	a5,-1680(a4)
                break;
2300691c:	bfa1                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
        switch (epId) {
2300691e:	4795                	li	a5,5
23006920:	f4f51ae3          	bne	a0,a5,23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_FIFO_CONFIG);
23006924:	4000e737          	lui	a4,0x4000e
23006928:	95072783          	lw	a5,-1712(a4) # 4000d950 <__dtcm_load_addr+0x1cfff9d4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP5_DMA_TX_EN);
2300692c:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP5_FIFO_CONFIG, tmpVal);
23006930:	94f72823          	sw	a5,-1712(a4)
                break;
23006934:	b781                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP0_FIFO_CONFIG);
23006936:	4000e737          	lui	a4,0x4000e
2300693a:	90072783          	lw	a5,-1792(a4) # 4000d900 <__dtcm_load_addr+0x1cfff984>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP0_DMA_TX_EN);
2300693e:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP0_FIFO_CONFIG, tmpVal);
23006940:	90f72023          	sw	a5,-1792(a4)
                break;
23006944:	bf05                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_FIFO_CONFIG);
23006946:	4000e737          	lui	a4,0x4000e
2300694a:	96072783          	lw	a5,-1696(a4) # 4000d960 <__dtcm_load_addr+0x1cfff9e4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP6_DMA_TX_EN);
2300694e:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP6_FIFO_CONFIG, tmpVal);
23006950:	96f72023          	sw	a5,-1696(a4)
                break;
23006954:	b705                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_FIFO_CONFIG);
23006956:	4000e737          	lui	a4,0x4000e
2300695a:	94072783          	lw	a5,-1728(a4) # 4000d940 <__dtcm_load_addr+0x1cfff9c4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP4_DMA_TX_EN);
2300695e:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP4_FIFO_CONFIG, tmpVal);
23006960:	94f72023          	sw	a5,-1728(a4)
                break;
23006964:	bf01                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_CONFIG);
23006966:	4000e737          	lui	a4,0x4000e
2300696a:	92072783          	lw	a5,-1760(a4) # 4000d920 <__dtcm_load_addr+0x1cfff9a4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP2_DMA_TX_EN);
2300696e:	9bf9                	andi	a5,a5,-2
                BL_WR_REG(USB_BASE, USB_EP2_FIFO_CONFIG, tmpVal);
23006970:	92f72023          	sw	a5,-1760(a4)
                break;
23006974:	b701                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP0_FIFO_CONFIG);
23006976:	4000e737          	lui	a4,0x4000e
2300697a:	90072783          	lw	a5,-1792(a4) # 4000d900 <__dtcm_load_addr+0x1cfff984>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP0_DMA_TX_EN);
2300697e:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP0_FIFO_CONFIG, tmpVal);
23006982:	90f72023          	sw	a5,-1792(a4)
                break;
23006986:	b5fd                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_FIFO_CONFIG);
23006988:	4000e737          	lui	a4,0x4000e
2300698c:	96072783          	lw	a5,-1696(a4) # 4000d960 <__dtcm_load_addr+0x1cfff9e4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP6_DMA_TX_EN);
23006990:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP6_FIFO_CONFIG, tmpVal);
23006994:	96f72023          	sw	a5,-1696(a4)
                break;
23006998:	bdf1                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_FIFO_CONFIG);
2300699a:	4000e737          	lui	a4,0x4000e
2300699e:	94072783          	lw	a5,-1728(a4) # 4000d940 <__dtcm_load_addr+0x1cfff9c4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP4_DMA_TX_EN);
230069a2:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP4_FIFO_CONFIG, tmpVal);
230069a6:	94f72023          	sw	a5,-1728(a4)
                break;
230069aa:	b5e9                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_CONFIG);
230069ac:	4000e737          	lui	a4,0x4000e
230069b0:	92072783          	lw	a5,-1760(a4) # 4000d920 <__dtcm_load_addr+0x1cfff9a4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP2_DMA_TX_EN);
230069b4:	0017e793          	ori	a5,a5,1
                BL_WR_REG(USB_BASE, USB_EP2_FIFO_CONFIG, tmpVal);
230069b8:	92f72023          	sw	a5,-1760(a4)
                break;
230069bc:	bd65                	j	23006874 <USB_Set_EPx_TX_DMA_Interface_Config+0x2a>

230069be <USB_Set_EPx_RX_DMA_Interface_Config>:

BL_Err_Type USB_Set_EPx_RX_DMA_Interface_Config(USB_EP_ID epId, BL_Fun_Type newState)
{
    uint32_t tmpVal = 0;

    if (newState == ENABLE) {
230069be:	4785                	li	a5,1
230069c0:	06f58a63          	beq	a1,a5,23006a34 <USB_Set_EPx_RX_DMA_Interface_Config+0x76>

            default:
                break;
        }
    } else {
        switch (epId) {
230069c4:	4711                	li	a4,4
230069c6:	10e50263          	beq	a0,a4,23006aca <USB_Set_EPx_RX_DMA_Interface_Config+0x10c>
230069ca:	02a76c63          	bltu	a4,a0,23006a02 <USB_Set_EPx_RX_DMA_Interface_Config+0x44>
230069ce:	4709                	li	a4,2
230069d0:	10e50563          	beq	a0,a4,23006ada <USB_Set_EPx_RX_DMA_Interface_Config+0x11c>
230069d4:	470d                	li	a4,3
230069d6:	00e51b63          	bne	a0,a4,230069ec <USB_Set_EPx_RX_DMA_Interface_Config+0x2e>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP2_DMA_RX_EN);
                BL_WR_REG(USB_BASE, USB_EP2_FIFO_CONFIG, tmpVal);
                break;

            case EP_ID3:
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_FIFO_CONFIG);
230069da:	4000e737          	lui	a4,0x4000e
230069de:	93072783          	lw	a5,-1744(a4) # 4000d930 <__dtcm_load_addr+0x1cfff9b4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP3_DMA_RX_EN);
230069e2:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP3_FIFO_CONFIG, tmpVal);
230069e4:	92f72823          	sw	a5,-1744(a4)
                break;
        }
    }

    return SUCCESS;
}
230069e8:	4501                	li	a0,0
230069ea:	8082                	ret
        switch (epId) {
230069ec:	cd5d                	beqz	a0,23006aaa <USB_Set_EPx_RX_DMA_Interface_Config+0xec>
230069ee:	fef51de3          	bne	a0,a5,230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_FIFO_CONFIG);
230069f2:	4000e737          	lui	a4,0x4000e
230069f6:	91072783          	lw	a5,-1776(a4) # 4000d910 <__dtcm_load_addr+0x1cfff994>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP1_DMA_RX_EN);
230069fa:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP1_FIFO_CONFIG, tmpVal);
230069fc:	90f72823          	sw	a5,-1776(a4)
                break;
23006a00:	b7e5                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006a02:	4799                	li	a5,6
23006a04:	0af50b63          	beq	a0,a5,23006aba <USB_Set_EPx_RX_DMA_Interface_Config+0xfc>
23006a08:	479d                	li	a5,7
23006a0a:	00f51a63          	bne	a0,a5,23006a1e <USB_Set_EPx_RX_DMA_Interface_Config+0x60>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_FIFO_CONFIG);
23006a0e:	4000e737          	lui	a4,0x4000e
23006a12:	97072783          	lw	a5,-1680(a4) # 4000d970 <__dtcm_load_addr+0x1cfff9f4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP7_DMA_RX_EN);
23006a16:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP7_FIFO_CONFIG, tmpVal);
23006a18:	96f72823          	sw	a5,-1680(a4)
                break;
23006a1c:	b7f1                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006a1e:	4795                	li	a5,5
23006a20:	fcf514e3          	bne	a0,a5,230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_FIFO_CONFIG);
23006a24:	4000e737          	lui	a4,0x4000e
23006a28:	95072783          	lw	a5,-1712(a4) # 4000d950 <__dtcm_load_addr+0x1cfff9d4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP5_DMA_RX_EN);
23006a2c:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP5_FIFO_CONFIG, tmpVal);
23006a2e:	94f72823          	sw	a5,-1712(a4)
                break;
23006a32:	bf5d                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006a34:	4791                	li	a5,4
23006a36:	0cf50c63          	beq	a0,a5,23006b0e <USB_Set_EPx_RX_DMA_Interface_Config+0x150>
23006a3a:	02a7ed63          	bltu	a5,a0,23006a74 <USB_Set_EPx_RX_DMA_Interface_Config+0xb6>
23006a3e:	4789                	li	a5,2
23006a40:	0ef50063          	beq	a0,a5,23006b20 <USB_Set_EPx_RX_DMA_Interface_Config+0x162>
23006a44:	478d                	li	a5,3
23006a46:	00f51b63          	bne	a0,a5,23006a5c <USB_Set_EPx_RX_DMA_Interface_Config+0x9e>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP3_FIFO_CONFIG);
23006a4a:	4000e737          	lui	a4,0x4000e
23006a4e:	93072783          	lw	a5,-1744(a4) # 4000d930 <__dtcm_load_addr+0x1cfff9b4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP3_DMA_RX_EN);
23006a52:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP3_FIFO_CONFIG, tmpVal);
23006a56:	92f72823          	sw	a5,-1744(a4)
                break;
23006a5a:	b779                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006a5c:	c559                	beqz	a0,23006aea <USB_Set_EPx_RX_DMA_Interface_Config+0x12c>
23006a5e:	f8b515e3          	bne	a0,a1,230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP1_FIFO_CONFIG);
23006a62:	4000e737          	lui	a4,0x4000e
23006a66:	91072783          	lw	a5,-1776(a4) # 4000d910 <__dtcm_load_addr+0x1cfff994>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP1_DMA_RX_EN);
23006a6a:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP1_FIFO_CONFIG, tmpVal);
23006a6e:	90f72823          	sw	a5,-1776(a4)
                break;
23006a72:	bf9d                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006a74:	4799                	li	a5,6
23006a76:	08f50363          	beq	a0,a5,23006afc <USB_Set_EPx_RX_DMA_Interface_Config+0x13e>
23006a7a:	479d                	li	a5,7
23006a7c:	00f51b63          	bne	a0,a5,23006a92 <USB_Set_EPx_RX_DMA_Interface_Config+0xd4>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP7_FIFO_CONFIG);
23006a80:	4000e737          	lui	a4,0x4000e
23006a84:	97072783          	lw	a5,-1680(a4) # 4000d970 <__dtcm_load_addr+0x1cfff9f4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP7_DMA_RX_EN);
23006a88:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP7_FIFO_CONFIG, tmpVal);
23006a8c:	96f72823          	sw	a5,-1680(a4)
                break;
23006a90:	bfa1                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
        switch (epId) {
23006a92:	4795                	li	a5,5
23006a94:	f4f51ae3          	bne	a0,a5,230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP5_FIFO_CONFIG);
23006a98:	4000e737          	lui	a4,0x4000e
23006a9c:	95072783          	lw	a5,-1712(a4) # 4000d950 <__dtcm_load_addr+0x1cfff9d4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP5_DMA_RX_EN);
23006aa0:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP5_FIFO_CONFIG, tmpVal);
23006aa4:	94f72823          	sw	a5,-1712(a4)
                break;
23006aa8:	b781                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP0_FIFO_CONFIG);
23006aaa:	4000e737          	lui	a4,0x4000e
23006aae:	90072783          	lw	a5,-1792(a4) # 4000d900 <__dtcm_load_addr+0x1cfff984>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP0_DMA_RX_EN);
23006ab2:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP0_FIFO_CONFIG, tmpVal);
23006ab4:	90f72023          	sw	a5,-1792(a4)
                break;
23006ab8:	bf05                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_FIFO_CONFIG);
23006aba:	4000e737          	lui	a4,0x4000e
23006abe:	96072783          	lw	a5,-1696(a4) # 4000d960 <__dtcm_load_addr+0x1cfff9e4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP6_DMA_RX_EN);
23006ac2:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP6_FIFO_CONFIG, tmpVal);
23006ac4:	96f72023          	sw	a5,-1696(a4)
                break;
23006ac8:	b705                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_FIFO_CONFIG);
23006aca:	4000e737          	lui	a4,0x4000e
23006ace:	94072783          	lw	a5,-1728(a4) # 4000d940 <__dtcm_load_addr+0x1cfff9c4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP4_DMA_RX_EN);
23006ad2:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP4_FIFO_CONFIG, tmpVal);
23006ad4:	94f72023          	sw	a5,-1728(a4)
                break;
23006ad8:	bf01                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_CONFIG);
23006ada:	4000e737          	lui	a4,0x4000e
23006ade:	92072783          	lw	a5,-1760(a4) # 4000d920 <__dtcm_load_addr+0x1cfff9a4>
                tmpVal = BL_CLR_REG_BIT(tmpVal, USB_EP2_DMA_RX_EN);
23006ae2:	9bf5                	andi	a5,a5,-3
                BL_WR_REG(USB_BASE, USB_EP2_FIFO_CONFIG, tmpVal);
23006ae4:	92f72023          	sw	a5,-1760(a4)
                break;
23006ae8:	b701                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP0_FIFO_CONFIG);
23006aea:	4000e737          	lui	a4,0x4000e
23006aee:	90072783          	lw	a5,-1792(a4) # 4000d900 <__dtcm_load_addr+0x1cfff984>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP0_DMA_RX_EN);
23006af2:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP0_FIFO_CONFIG, tmpVal);
23006af6:	90f72023          	sw	a5,-1792(a4)
                break;
23006afa:	b5fd                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP6_FIFO_CONFIG);
23006afc:	4000e737          	lui	a4,0x4000e
23006b00:	96072783          	lw	a5,-1696(a4) # 4000d960 <__dtcm_load_addr+0x1cfff9e4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP6_DMA_RX_EN);
23006b04:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP6_FIFO_CONFIG, tmpVal);
23006b08:	96f72023          	sw	a5,-1696(a4)
                break;
23006b0c:	bdf1                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP4_FIFO_CONFIG);
23006b0e:	4000e737          	lui	a4,0x4000e
23006b12:	94072783          	lw	a5,-1728(a4) # 4000d940 <__dtcm_load_addr+0x1cfff9c4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP4_DMA_RX_EN);
23006b16:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP4_FIFO_CONFIG, tmpVal);
23006b1a:	94f72023          	sw	a5,-1728(a4)
                break;
23006b1e:	b5e9                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>
                tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_CONFIG);
23006b20:	4000e737          	lui	a4,0x4000e
23006b24:	92072783          	lw	a5,-1760(a4) # 4000d920 <__dtcm_load_addr+0x1cfff9a4>
                tmpVal = BL_SET_REG_BIT(tmpVal, USB_EP2_DMA_RX_EN);
23006b28:	0027e793          	ori	a5,a5,2
                BL_WR_REG(USB_BASE, USB_EP2_FIFO_CONFIG, tmpVal);
23006b2c:	92f72023          	sw	a5,-1760(a4)
                break;
23006b30:	bd65                	j	230069e8 <USB_Set_EPx_RX_DMA_Interface_Config+0x2a>

23006b32 <USB_Get_EPx_TX_FIFO_CNT>:

uint16_t USB_Get_EPx_TX_FIFO_CNT(USB_EP_ID epId)
{
    uint32_t tmpVal = 0;

    switch (epId) {
23006b32:	4791                	li	a5,4
23006b34:	06f50363          	beq	a0,a5,23006b9a <USB_Get_EPx_TX_FIFO_CNT+0x68>
23006b38:	00a7ef63          	bltu	a5,a0,23006b56 <USB_Get_EPx_TX_FIFO_CNT+0x24>
23006b3c:	4789                	li	a5,2
23006b3e:	06f50563          	beq	a0,a5,23006ba8 <USB_Get_EPx_TX_FIFO_CNT+0x76>
23006b42:	478d                	li	a5,3
23006b44:	02f51663          	bne	a0,a5,23006b70 <USB_Get_EPx_TX_FIFO_CNT+0x3e>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_STATUS);
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP2_TX_FIFO_CNT);
            break;

        case EP_ID3:
            tmpVal = BL_RD_REG(USB_BASE, USB_EP3_FIFO_STATUS);
23006b48:	4000e7b7          	lui	a5,0x4000e
23006b4c:	9347a503          	lw	a0,-1740(a5) # 4000d934 <__dtcm_load_addr+0x1cfff9b8>
        default:
            tmpVal = 0;
            break;
    }

    return tmpVal;
23006b50:	07f57513          	andi	a0,a0,127
            break;
23006b54:	8082                	ret
    switch (epId) {
23006b56:	4799                	li	a5,6
23006b58:	04f50f63          	beq	a0,a5,23006bb6 <USB_Get_EPx_TX_FIFO_CNT+0x84>
23006b5c:	479d                	li	a5,7
23006b5e:	02f51463          	bne	a0,a5,23006b86 <USB_Get_EPx_TX_FIFO_CNT+0x54>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP7_FIFO_STATUS);
23006b62:	4000e7b7          	lui	a5,0x4000e
23006b66:	9747a503          	lw	a0,-1676(a5) # 4000d974 <__dtcm_load_addr+0x1cfff9f8>
    return tmpVal;
23006b6a:	07f57513          	andi	a0,a0,127
}
23006b6e:	8082                	ret
    switch (epId) {
23006b70:	c931                	beqz	a0,23006bc4 <USB_Get_EPx_TX_FIFO_CNT+0x92>
23006b72:	4785                	li	a5,1
23006b74:	04f51f63          	bne	a0,a5,23006bd2 <USB_Get_EPx_TX_FIFO_CNT+0xa0>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP1_FIFO_STATUS);
23006b78:	4000e7b7          	lui	a5,0x4000e
23006b7c:	9147a503          	lw	a0,-1772(a5) # 4000d914 <__dtcm_load_addr+0x1cfff998>
    return tmpVal;
23006b80:	07f57513          	andi	a0,a0,127
            break;
23006b84:	8082                	ret
    switch (epId) {
23006b86:	4795                	li	a5,5
23006b88:	04f51563          	bne	a0,a5,23006bd2 <USB_Get_EPx_TX_FIFO_CNT+0xa0>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP5_FIFO_STATUS);
23006b8c:	4000e7b7          	lui	a5,0x4000e
23006b90:	9547a503          	lw	a0,-1708(a5) # 4000d954 <__dtcm_load_addr+0x1cfff9d8>
    return tmpVal;
23006b94:	07f57513          	andi	a0,a0,127
            break;
23006b98:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP4_FIFO_STATUS);
23006b9a:	4000e7b7          	lui	a5,0x4000e
23006b9e:	9447a503          	lw	a0,-1724(a5) # 4000d944 <__dtcm_load_addr+0x1cfff9c8>
    return tmpVal;
23006ba2:	07f57513          	andi	a0,a0,127
            break;
23006ba6:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_STATUS);
23006ba8:	4000e7b7          	lui	a5,0x4000e
23006bac:	9247a503          	lw	a0,-1756(a5) # 4000d924 <__dtcm_load_addr+0x1cfff9a8>
    return tmpVal;
23006bb0:	07f57513          	andi	a0,a0,127
            break;
23006bb4:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP6_FIFO_STATUS);
23006bb6:	4000e7b7          	lui	a5,0x4000e
23006bba:	9647a503          	lw	a0,-1692(a5) # 4000d964 <__dtcm_load_addr+0x1cfff9e8>
    return tmpVal;
23006bbe:	07f57513          	andi	a0,a0,127
            break;
23006bc2:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP0_FIFO_STATUS);
23006bc4:	4000e7b7          	lui	a5,0x4000e
23006bc8:	9047a503          	lw	a0,-1788(a5) # 4000d904 <__dtcm_load_addr+0x1cfff988>
    return tmpVal;
23006bcc:	07f57513          	andi	a0,a0,127
            break;
23006bd0:	8082                	ret
    switch (epId) {
23006bd2:	4501                	li	a0,0
23006bd4:	8082                	ret

23006bd6 <USB_Get_EPx_RX_FIFO_CNT>:

uint16_t USB_Get_EPx_RX_FIFO_CNT(USB_EP_ID epId)
{
    uint32_t tmpVal = 0;

    switch (epId) {
23006bd6:	4791                	li	a5,4
23006bd8:	06f50763          	beq	a0,a5,23006c46 <USB_Get_EPx_RX_FIFO_CNT+0x70>
23006bdc:	02a7e063          	bltu	a5,a0,23006bfc <USB_Get_EPx_RX_FIFO_CNT+0x26>
23006be0:	4789                	li	a5,2
23006be2:	06f50a63          	beq	a0,a5,23006c56 <USB_Get_EPx_RX_FIFO_CNT+0x80>
23006be6:	478d                	li	a5,3
23006be8:	02f51863          	bne	a0,a5,23006c18 <USB_Get_EPx_RX_FIFO_CNT+0x42>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_STATUS);
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP2_RX_FIFO_CNT);
            break;

        case EP_ID3:
            tmpVal = BL_RD_REG(USB_BASE, USB_EP3_FIFO_STATUS);
23006bec:	4000e7b7          	lui	a5,0x4000e
23006bf0:	9347a503          	lw	a0,-1740(a5) # 4000d934 <__dtcm_load_addr+0x1cfff9b8>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP3_RX_FIFO_CNT);
23006bf4:	8141                	srli	a0,a0,0x10
        default:
            tmpVal = 0;
            break;
    }

    return tmpVal;
23006bf6:	07f57513          	andi	a0,a0,127
            break;
23006bfa:	8082                	ret
    switch (epId) {
23006bfc:	4799                	li	a5,6
23006bfe:	06f50463          	beq	a0,a5,23006c66 <USB_Get_EPx_RX_FIFO_CNT+0x90>
23006c02:	479d                	li	a5,7
23006c04:	02f51663          	bne	a0,a5,23006c30 <USB_Get_EPx_RX_FIFO_CNT+0x5a>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP7_FIFO_STATUS);
23006c08:	4000e7b7          	lui	a5,0x4000e
23006c0c:	9747a503          	lw	a0,-1676(a5) # 4000d974 <__dtcm_load_addr+0x1cfff9f8>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP7_RX_FIFO_CNT);
23006c10:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c12:	07f57513          	andi	a0,a0,127
}
23006c16:	8082                	ret
    switch (epId) {
23006c18:	cd39                	beqz	a0,23006c76 <USB_Get_EPx_RX_FIFO_CNT+0xa0>
23006c1a:	4785                	li	a5,1
23006c1c:	06f51563          	bne	a0,a5,23006c86 <USB_Get_EPx_RX_FIFO_CNT+0xb0>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP1_FIFO_STATUS);
23006c20:	4000e7b7          	lui	a5,0x4000e
23006c24:	9147a503          	lw	a0,-1772(a5) # 4000d914 <__dtcm_load_addr+0x1cfff998>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP1_RX_FIFO_CNT);
23006c28:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c2a:	07f57513          	andi	a0,a0,127
            break;
23006c2e:	8082                	ret
    switch (epId) {
23006c30:	4795                	li	a5,5
23006c32:	04f51a63          	bne	a0,a5,23006c86 <USB_Get_EPx_RX_FIFO_CNT+0xb0>
            tmpVal = BL_RD_REG(USB_BASE, USB_EP5_FIFO_STATUS);
23006c36:	4000e7b7          	lui	a5,0x4000e
23006c3a:	9547a503          	lw	a0,-1708(a5) # 4000d954 <__dtcm_load_addr+0x1cfff9d8>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP5_RX_FIFO_CNT);
23006c3e:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c40:	07f57513          	andi	a0,a0,127
            break;
23006c44:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP4_FIFO_STATUS);
23006c46:	4000e7b7          	lui	a5,0x4000e
23006c4a:	9447a503          	lw	a0,-1724(a5) # 4000d944 <__dtcm_load_addr+0x1cfff9c8>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP4_RX_FIFO_CNT);
23006c4e:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c50:	07f57513          	andi	a0,a0,127
            break;
23006c54:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP2_FIFO_STATUS);
23006c56:	4000e7b7          	lui	a5,0x4000e
23006c5a:	9247a503          	lw	a0,-1756(a5) # 4000d924 <__dtcm_load_addr+0x1cfff9a8>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP2_RX_FIFO_CNT);
23006c5e:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c60:	07f57513          	andi	a0,a0,127
            break;
23006c64:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP6_FIFO_STATUS);
23006c66:	4000e7b7          	lui	a5,0x4000e
23006c6a:	9647a503          	lw	a0,-1692(a5) # 4000d964 <__dtcm_load_addr+0x1cfff9e8>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP6_RX_FIFO_CNT);
23006c6e:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c70:	07f57513          	andi	a0,a0,127
            break;
23006c74:	8082                	ret
            tmpVal = BL_RD_REG(USB_BASE, USB_EP0_FIFO_STATUS);
23006c76:	4000e7b7          	lui	a5,0x4000e
23006c7a:	9047a503          	lw	a0,-1788(a5) # 4000d904 <__dtcm_load_addr+0x1cfff988>
            tmpVal = BL_GET_REG_BITS_VAL(tmpVal, USB_EP0_RX_FIFO_CNT);
23006c7e:	8141                	srli	a0,a0,0x10
    return tmpVal;
23006c80:	07f57513          	andi	a0,a0,127
            break;
23006c84:	8082                	ret
    switch (epId) {
23006c86:	4501                	li	a0,0
23006c88:	8082                	ret

23006c8a <dma_reload>:
 * @param dst_addr
 * @param transfer_size
 * @return int
 */
int dma_reload(struct device *dev, uint32_t src_addr, uint32_t dst_addr, uint32_t transfer_size)
{
23006c8a:	7139                	addi	sp,sp,-64
23006c8c:	da26                	sw	s1,52(sp)
23006c8e:	d84a                	sw	s2,48(sp)
23006c90:	d64e                	sw	s3,44(sp)
23006c92:	d452                	sw	s4,40(sp)
23006c94:	de06                	sw	ra,60(sp)
23006c96:	dc22                	sw	s0,56(sp)
23006c98:	d256                	sw	s5,36(sp)
23006c9a:	d05a                	sw	s6,32(sp)
23006c9c:	ce5e                	sw	s7,28(sp)
23006c9e:	cc62                	sw	s8,24(sp)
23006ca0:	ca66                	sw	s9,20(sp)
23006ca2:	c86a                	sw	s10,16(sp)
23006ca4:	c66e                	sw	s11,12(sp)
23006ca6:	8a2a                	mv	s4,a0
    dma_control_data_t dma_ctrl_cfg;
    bool intr = false;

    dma_device_t *dma_device = (dma_device_t *)dev;

    DMA_Channel_Disable(dma_device->ch);
23006ca8:	03d54503          	lbu	a0,61(a0) # ffff203d <__HeapLimit+0xbdfc203d>
{
23006cac:	84b6                	mv	s1,a3
23006cae:	892e                	mv	s2,a1
23006cb0:	89b2                	mv	s3,a2
    DMA_Channel_Disable(dma_device->ch);
23006cb2:	2a95                	jal	23006e26 <DMA_Channel_Disable>

    if (transfer_size == 0) {
        return 0;
23006cb4:	4501                	li	a0,0
    if (transfer_size == 0) {
23006cb6:	c899                	beqz	s1,23006ccc <dma_reload+0x42>
    }

    switch (dma_device->src_width) {
23006cb8:	04ca4783          	lbu	a5,76(s4)
23006cbc:	4705                	li	a4,1
23006cbe:	14e78963          	beq	a5,a4,23006e10 <dma_reload+0x186>
23006cc2:	4709                	li	a4,2
23006cc4:	12e78f63          	beq	a5,a4,23006e02 <dma_reload+0x178>
23006cc8:	5575                	li	a0,-3
23006cca:	c385                	beqz	a5,23006cea <dma_reload+0x60>
    } else {
        return -2;
    }
#endif
    return 0;
}
23006ccc:	50f2                	lw	ra,60(sp)
23006cce:	5462                	lw	s0,56(sp)
23006cd0:	54d2                	lw	s1,52(sp)
23006cd2:	5942                	lw	s2,48(sp)
23006cd4:	59b2                	lw	s3,44(sp)
23006cd6:	5a22                	lw	s4,40(sp)
23006cd8:	5a92                	lw	s5,36(sp)
23006cda:	5b02                	lw	s6,32(sp)
23006cdc:	4bf2                	lw	s7,28(sp)
23006cde:	4c62                	lw	s8,24(sp)
23006ce0:	4cd2                	lw	s9,20(sp)
23006ce2:	4d42                	lw	s10,16(sp)
23006ce4:	4db2                	lw	s11,12(sp)
23006ce6:	6121                	addi	sp,sp,64
23006ce8:	8082                	ret
    switch (dma_device->src_width) {
23006cea:	6a85                	lui	s5,0x1
23006cec:	1afd                	addi	s5,s5,-1
    malloc_count = actual_transfer_len / 4095;
23006cee:	6d85                	lui	s11,0x1
23006cf0:	fffd8d13          	addi	s10,s11,-1 # fff <__heap_min_size+0xbff>
    remain_len = actual_transfer_len % 4095;
23006cf4:	03a4fc33          	remu	s8,s1,s10
    dma_ctrl_cfg = (dma_control_data_t)(BL_RD_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_CONTROL));
23006cf8:	03ca4703          	lbu	a4,60(s4)
23006cfc:	03da4783          	lbu	a5,61(s4)
    intr = dma_device->intr;
23006d00:	04ea4b03          	lbu	s6,78(s4)
    dma_ctrl_cfg = (dma_control_data_t)(BL_RD_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_CONTROL));
23006d04:	070e                	slli	a4,a4,0x3
23006d06:	973e                	add	a4,a4,a5
23006d08:	2300d7b7          	lui	a5,0x2300d
23006d0c:	8e478b93          	addi	s7,a5,-1820 # 2300c8e4 <dma_channel_base>
23006d10:	070a                	slli	a4,a4,0x2
23006d12:	975e                	add	a4,a4,s7
23006d14:	431c                	lw	a5,0(a4)
    dma_device->lli_cfg = (dma_lli_ctrl_t *)realloc(dma_device->lli_cfg, sizeof(dma_lli_ctrl_t) * malloc_count);
23006d16:	050a2503          	lw	a0,80(s4)
    intr = dma_device->intr;
23006d1a:	01603b33          	snez	s6,s6
    dma_ctrl_cfg = (dma_control_data_t)(BL_RD_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_CONTROL));
23006d1e:	47c0                	lw	s0,12(a5)
    malloc_count = actual_transfer_len / 4095;
23006d20:	03a4dcb3          	divu	s9,s1,s10
    if (remain_len) {
23006d24:	0a0c0c63          	beqz	s8,23006ddc <dma_reload+0x152>
        malloc_count++;
23006d28:	001c8493          	addi	s1,s9,1
    dma_device->lli_cfg = (dma_lli_ctrl_t *)realloc(dma_device->lli_cfg, sizeof(dma_lli_ctrl_t) * malloc_count);
23006d2c:	00449593          	slli	a1,s1,0x4
23006d30:	4fb000ef          	jal	ra,23007a2a <realloc>
23006d34:	04aa2823          	sw	a0,80(s4)
23006d38:	862a                	mv	a2,a0
    if (dma_device->lli_cfg) {
23006d3a:	c565                	beqz	a0,23006e22 <dma_reload+0x198>
        dma_ctrl_cfg.bits.TransferSize = 4095;
23006d3c:	7ffff7b7          	lui	a5,0x7ffff
23006d40:	8c7d                	and	s0,s0,a5
23006d42:	01a46433          	or	s0,s0,s10
                    dma_ctrl_cfg.bits.TransferSize = remain_len;
23006d46:	014c1813          	slli	a6,s8,0x14
                dma_ctrl_cfg.bits.I = intr;
23006d4a:	800005b7          	lui	a1,0x80000
            if (i == malloc_count - 1) {
23006d4e:	87b2                	mv	a5,a2
23006d50:	4701                	li	a4,0
            if (dma_ctrl_cfg.bits.SI) {
23006d52:	040008b7          	lui	a7,0x4000
            if (dma_ctrl_cfg.bits.DI) {
23006d56:	08000537          	lui	a0,0x8000
                dma_ctrl_cfg.bits.I = intr;
23006d5a:	0b7e                	slli	s6,s6,0x1f
23006d5c:	fff5c593          	not	a1,a1
                if (dma_device->transfer_mode == DMA_LLI_CYCLE_MODE) {
23006d60:	4305                	li	t1,1
                    dma_ctrl_cfg.bits.TransferSize = remain_len;
23006d62:	01485813          	srli	a6,a6,0x14
23006d66:	7e7d                	lui	t3,0xfffff
            dma_device->lli_cfg[i].src_addr = src_addr;
23006d68:	0127a023          	sw	s2,0(a5) # 7ffff000 <__HeapLimit+0x3dfcf000>
            dma_device->lli_cfg[i].dst_addr = dst_addr;
23006d6c:	0137a223          	sw	s3,4(a5)
            dma_device->lli_cfg[i].nextlli = 0;
23006d70:	0007a423          	sw	zero,8(a5)
            if (dma_ctrl_cfg.bits.SI) {
23006d74:	011476b3          	and	a3,s0,a7
23006d78:	c291                	beqz	a3,23006d7c <dma_reload+0xf2>
                src_addr += actual_transfer_offset;
23006d7a:	9956                	add	s2,s2,s5
            if (dma_ctrl_cfg.bits.DI) {
23006d7c:	00a476b3          	and	a3,s0,a0
23006d80:	c291                	beqz	a3,23006d84 <dma_reload+0xfa>
                dst_addr += actual_transfer_offset;
23006d82:	99d6                	add	s3,s3,s5
            if (i == malloc_count - 1) {
23006d84:	03970d63          	beq	a4,s9,23006dbe <dma_reload+0x134>
            if (i) {
23006d88:	c319                	beqz	a4,23006d8e <dma_reload+0x104>
                dma_device->lli_cfg[i - 1].nextlli = (uint32_t)&dma_device->lli_cfg[i];
23006d8a:	fef7ac23          	sw	a5,-8(a5)
            dma_device->lli_cfg[i].cfg = dma_ctrl_cfg;
23006d8e:	c7c0                	sw	s0,12(a5)
        for (uint32_t i = 0; i < malloc_count; i++) {
23006d90:	0705                	addi	a4,a4,1
23006d92:	07c1                	addi	a5,a5,16
23006d94:	fc976ae3          	bltu	a4,s1,23006d68 <dma_reload+0xde>
        BL_WR_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_SRCADDR, dma_device->lli_cfg[0].src_addr);
23006d98:	03ca4783          	lbu	a5,60(s4)
23006d9c:	03da4683          	lbu	a3,61(s4)
23006da0:	4218                	lw	a4,0(a2)
23006da2:	078e                	slli	a5,a5,0x3
23006da4:	97b6                	add	a5,a5,a3
23006da6:	078a                	slli	a5,a5,0x2
23006da8:	97de                	add	a5,a5,s7
23006daa:	439c                	lw	a5,0(a5)
    return 0;
23006dac:	4501                	li	a0,0
        BL_WR_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_SRCADDR, dma_device->lli_cfg[0].src_addr);
23006dae:	c398                	sw	a4,0(a5)
        BL_WR_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_DSTADDR, dma_device->lli_cfg[0].dst_addr);
23006db0:	4258                	lw	a4,4(a2)
23006db2:	c3d8                	sw	a4,4(a5)
        BL_WR_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_LLI, dma_device->lli_cfg[0].nextlli);
23006db4:	4618                	lw	a4,8(a2)
23006db6:	c798                	sw	a4,8(a5)
        BL_WR_REG(dma_channel_base[dma_device->id][dma_device->ch], DMA_CONTROL, dma_device->lli_cfg[0].cfg.WORD);
23006db8:	4658                	lw	a4,12(a2)
23006dba:	c7d8                	sw	a4,12(a5)
    return 0;
23006dbc:	bf01                	j	23006ccc <dma_reload+0x42>
                if (remain_len) {
23006dbe:	000c0663          	beqz	s8,23006dca <dma_reload+0x140>
                    dma_ctrl_cfg.bits.TransferSize = remain_len;
23006dc2:	01c47433          	and	s0,s0,t3
23006dc6:	01046433          	or	s0,s0,a6
                if (dma_device->transfer_mode == DMA_LLI_CYCLE_MODE) {
23006dca:	03ea4683          	lbu	a3,62(s4)
                dma_ctrl_cfg.bits.I = intr;
23006dce:	8c6d                	and	s0,s0,a1
23006dd0:	01646433          	or	s0,s0,s6
                if (dma_device->transfer_mode == DMA_LLI_CYCLE_MODE) {
23006dd4:	fa669ae3          	bne	a3,t1,23006d88 <dma_reload+0xfe>
                    dma_device->lli_cfg[i].nextlli = (uint32_t)&dma_device->lli_cfg[0];
23006dd8:	c790                	sw	a2,8(a5)
23006dda:	b77d                	j	23006d88 <dma_reload+0xfe>
    dma_device->lli_cfg = (dma_lli_ctrl_t *)realloc(dma_device->lli_cfg, sizeof(dma_lli_ctrl_t) * malloc_count);
23006ddc:	004c9593          	slli	a1,s9,0x4
23006de0:	44b000ef          	jal	ra,23007a2a <realloc>
23006de4:	04aa2823          	sw	a0,80(s4)
23006de8:	862a                	mv	a2,a0
    if (dma_device->lli_cfg) {
23006dea:	cd05                	beqz	a0,23006e22 <dma_reload+0x198>
        dma_ctrl_cfg.bits.TransferSize = 4095;
23006dec:	7ffff7b7          	lui	a5,0x7ffff
23006df0:	8c7d                	and	s0,s0,a5
        for (uint32_t i = 0; i < malloc_count; i++) {
23006df2:	1df9                	addi	s11,s11,-2
        dma_ctrl_cfg.bits.TransferSize = 4095;
23006df4:	01a46433          	or	s0,s0,s10
        for (uint32_t i = 0; i < malloc_count; i++) {
23006df8:	fa9df0e3          	bgeu	s11,s1,23006d98 <dma_reload+0x10e>
    malloc_count = actual_transfer_len / 4095;
23006dfc:	84e6                	mv	s1,s9
            if (i == malloc_count - 1) {
23006dfe:	1cfd                	addi	s9,s9,-1
23006e00:	b799                	j	23006d46 <dma_reload+0xbc>
            if (transfer_size % 4) {
23006e02:	0034f793          	andi	a5,s1,3
23006e06:	ef81                	bnez	a5,23006e1e <dma_reload+0x194>
            actual_transfer_offset = 4095 << 2;
23006e08:	6a91                	lui	s5,0x4
            actual_transfer_len = transfer_size >> 2;
23006e0a:	8089                	srli	s1,s1,0x2
            actual_transfer_offset = 4095 << 2;
23006e0c:	1af1                	addi	s5,s5,-4
            break;
23006e0e:	b5c5                	j	23006cee <dma_reload+0x64>
            if (transfer_size % 2) {
23006e10:	0014f793          	andi	a5,s1,1
23006e14:	e789                	bnez	a5,23006e1e <dma_reload+0x194>
            actual_transfer_offset = 4095 << 1;
23006e16:	6a89                	lui	s5,0x2
            actual_transfer_len = transfer_size >> 1;
23006e18:	8085                	srli	s1,s1,0x1
            actual_transfer_offset = 4095 << 1;
23006e1a:	1af9                	addi	s5,s5,-2
            break;
23006e1c:	bdc9                	j	23006cee <dma_reload+0x64>
                return -1;
23006e1e:	557d                	li	a0,-1
23006e20:	b575                	j	23006ccc <dma_reload+0x42>
        return -2;
23006e22:	5579                	li	a0,-2
23006e24:	b565                	j	23006ccc <dma_reload+0x42>

23006e26 <DMA_Channel_Disable>:
    uint32_t DMAChs = DMA_Get_Channel(ch);

    /* Check the parameters */
    CHECK_PARAM(IS_DMA_CHAN_TYPE(ch));

    tmpVal = BL_RD_REG(DMAChs, DMA_CONFIG);
23006e26:	4000c7b7          	lui	a5,0x4000c
23006e2a:	11078793          	addi	a5,a5,272 # 4000c110 <__dtcm_load_addr+0x1cffe194>
    uint32_t DMAChs = DMA_Get_Channel(ch);
23006e2e:	0522                	slli	a0,a0,0x8
    tmpVal = BL_RD_REG(DMAChs, DMA_CONFIG);
23006e30:	953e                	add	a0,a0,a5
23006e32:	411c                	lw	a5,0(a0)
    tmpVal = BL_CLR_REG_BIT(tmpVal, DMA_E);
23006e34:	9bf9                	andi	a5,a5,-2
    BL_WR_REG(DMAChs, DMA_CONFIG, tmpVal);
23006e36:	c11c                	sw	a5,0(a0)
}
23006e38:	8082                	ret

23006e3a <malloc>:
23006e3a:	85aa                	mv	a1,a0
23006e3c:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23006e40:	c62fc06f          	j	230032a2 <_malloc_r>

23006e44 <free>:
23006e44:	85aa                	mv	a1,a0
23006e46:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23006e4a:	ccafc06f          	j	23003314 <_free_r>

23006e4e <memcpy>:
23006e4e:	00a5c7b3          	xor	a5,a1,a0
23006e52:	8b8d                	andi	a5,a5,3
23006e54:	00c506b3          	add	a3,a0,a2
23006e58:	e781                	bnez	a5,23006e60 <memcpy+0x12>
23006e5a:	478d                	li	a5,3
23006e5c:	00c7ee63          	bltu	a5,a2,23006e78 <memcpy+0x2a>
23006e60:	87aa                	mv	a5,a0
23006e62:	06d57163          	bgeu	a0,a3,23006ec4 <memcpy+0x76>
23006e66:	0005c703          	lbu	a4,0(a1) # 80000000 <__HeapLimit+0x3dfd0000>
23006e6a:	0785                	addi	a5,a5,1
23006e6c:	0585                	addi	a1,a1,1
23006e6e:	fee78fa3          	sb	a4,-1(a5)
23006e72:	fed7eae3          	bltu	a5,a3,23006e66 <memcpy+0x18>
23006e76:	8082                	ret
23006e78:	00357713          	andi	a4,a0,3
23006e7c:	87aa                	mv	a5,a0
23006e7e:	cb11                	beqz	a4,23006e92 <memcpy+0x44>
23006e80:	0005c703          	lbu	a4,0(a1)
23006e84:	0785                	addi	a5,a5,1
23006e86:	0585                	addi	a1,a1,1
23006e88:	fee78fa3          	sb	a4,-1(a5)
23006e8c:	0037f713          	andi	a4,a5,3
23006e90:	b7fd                	j	23006e7e <memcpy+0x30>
23006e92:	ffc6f713          	andi	a4,a3,-4
23006e96:	40f70833          	sub	a6,a4,a5
23006e9a:	02000613          	li	a2,32
23006e9e:	03064463          	blt	a2,a6,23006ec6 <memcpy+0x78>
23006ea2:	882e                	mv	a6,a1
23006ea4:	863e                	mv	a2,a5
23006ea6:	06e66b63          	bltu	a2,a4,23006f1c <memcpy+0xce>
23006eaa:	ffd78813          	addi	a6,a5,-3
23006eae:	4601                	li	a2,0
23006eb0:	01076663          	bltu	a4,a6,23006ebc <memcpy+0x6e>
23006eb4:	070d                	addi	a4,a4,3
23006eb6:	8f1d                	sub	a4,a4,a5
23006eb8:	ffc77613          	andi	a2,a4,-4
23006ebc:	97b2                	add	a5,a5,a2
23006ebe:	95b2                	add	a1,a1,a2
23006ec0:	fad7e3e3          	bltu	a5,a3,23006e66 <memcpy+0x18>
23006ec4:	8082                	ret
23006ec6:	0005a383          	lw	t2,0(a1)
23006eca:	0045a283          	lw	t0,4(a1)
23006ece:	0085af83          	lw	t6,8(a1)
23006ed2:	00c5af03          	lw	t5,12(a1)
23006ed6:	0105ae83          	lw	t4,16(a1)
23006eda:	0145ae03          	lw	t3,20(a1)
23006ede:	0185a303          	lw	t1,24(a1)
23006ee2:	01c5a883          	lw	a7,28(a1)
23006ee6:	0077a023          	sw	t2,0(a5)
23006eea:	0057a223          	sw	t0,4(a5)
23006eee:	0205a803          	lw	a6,32(a1)
23006ef2:	01f7a423          	sw	t6,8(a5)
23006ef6:	01e7a623          	sw	t5,12(a5)
23006efa:	01d7a823          	sw	t4,16(a5)
23006efe:	01c7aa23          	sw	t3,20(a5)
23006f02:	0067ac23          	sw	t1,24(a5)
23006f06:	0117ae23          	sw	a7,28(a5)
23006f0a:	02478793          	addi	a5,a5,36
23006f0e:	02458593          	addi	a1,a1,36
23006f12:	ff07ae23          	sw	a6,-4(a5)
23006f16:	40f70833          	sub	a6,a4,a5
23006f1a:	b751                	j	23006e9e <memcpy+0x50>
23006f1c:	00082883          	lw	a7,0(a6)
23006f20:	0611                	addi	a2,a2,4
23006f22:	0811                	addi	a6,a6,4
23006f24:	ff162e23          	sw	a7,-4(a2)
23006f28:	bfbd                	j	23006ea6 <memcpy+0x58>

23006f2a <__cvt>:
23006f2a:	7179                	addi	sp,sp,-48
23006f2c:	d422                	sw	s0,40(sp)
23006f2e:	d04a                	sw	s2,32(sp)
23006f30:	cc52                	sw	s4,24(sp)
23006f32:	ca56                	sw	s5,20(sp)
23006f34:	c85a                	sw	s6,16(sp)
23006f36:	d606                	sw	ra,44(sp)
23006f38:	d226                	sw	s1,36(sp)
23006f3a:	ce4e                	sw	s3,28(sp)
23006f3c:	8b3a                	mv	s6,a4
23006f3e:	8a2e                	mv	s4,a1
23006f40:	8432                	mv	s0,a2
23006f42:	8936                	mv	s2,a3
23006f44:	8ac2                	mv	s5,a6
23006f46:	4701                	li	a4,0
23006f48:	00065863          	bgez	a2,23006f58 <__cvt+0x2e>
23006f4c:	80000737          	lui	a4,0x80000
23006f50:	00c74433          	xor	s0,a4,a2
23006f54:	02d00713          	li	a4,45
23006f58:	00e78023          	sb	a4,0(a5)
23006f5c:	fdf8f493          	andi	s1,a7,-33
23006f60:	04600793          	li	a5,70
23006f64:	468d                	li	a3,3
23006f66:	00f48863          	beq	s1,a5,23006f76 <__cvt+0x4c>
23006f6a:	04500793          	li	a5,69
23006f6e:	4689                	li	a3,2
23006f70:	00f49363          	bne	s1,a5,23006f76 <__cvt+0x4c>
23006f74:	0905                	addi	s2,s2,1
23006f76:	87d6                	mv	a5,s5
23006f78:	00c10893          	addi	a7,sp,12
23006f7c:	00810813          	addi	a6,sp,8
23006f80:	874a                	mv	a4,s2
23006f82:	85d2                	mv	a1,s4
23006f84:	8622                	mv	a2,s0
23006f86:	633000ef          	jal	ra,23007db8 <_dtoa_r>
23006f8a:	04700793          	li	a5,71
23006f8e:	89aa                	mv	s3,a0
23006f90:	00f49563          	bne	s1,a5,23006f9a <__cvt+0x70>
23006f94:	001b7613          	andi	a2,s6,1
23006f98:	ca29                	beqz	a2,23006fea <__cvt+0xc0>
23006f9a:	04600793          	li	a5,70
23006f9e:	01298b33          	add	s6,s3,s2
23006fa2:	02f49763          	bne	s1,a5,23006fd0 <__cvt+0xa6>
23006fa6:	0009c703          	lbu	a4,0(s3)
23006faa:	03000793          	li	a5,48
23006fae:	00f71e63          	bne	a4,a5,23006fca <__cvt+0xa0>
23006fb2:	4601                	li	a2,0
23006fb4:	4681                	li	a3,0
23006fb6:	8552                	mv	a0,s4
23006fb8:	85a2                	mv	a1,s0
23006fba:	e42fa0ef          	jal	ra,230015fc <__eqdf2>
23006fbe:	c511                	beqz	a0,23006fca <__cvt+0xa0>
23006fc0:	4605                	li	a2,1
23006fc2:	412606b3          	sub	a3,a2,s2
23006fc6:	00daa023          	sw	a3,0(s5) # 2000 <StackSize+0x1000>
23006fca:	000aa783          	lw	a5,0(s5)
23006fce:	9b3e                	add	s6,s6,a5
23006fd0:	4601                	li	a2,0
23006fd2:	4681                	li	a3,0
23006fd4:	8552                	mv	a0,s4
23006fd6:	85a2                	mv	a1,s0
23006fd8:	e24fa0ef          	jal	ra,230015fc <__eqdf2>
23006fdc:	e111                	bnez	a0,23006fe0 <__cvt+0xb6>
23006fde:	c65a                	sw	s6,12(sp)
23006fe0:	03000713          	li	a4,48
23006fe4:	47b2                	lw	a5,12(sp)
23006fe6:	0367e263          	bltu	a5,s6,2300700a <__cvt+0xe0>
23006fea:	47b2                	lw	a5,12(sp)
23006fec:	5742                	lw	a4,48(sp)
23006fee:	50b2                	lw	ra,44(sp)
23006ff0:	5422                	lw	s0,40(sp)
23006ff2:	413787b3          	sub	a5,a5,s3
23006ff6:	c31c                	sw	a5,0(a4)
23006ff8:	5492                	lw	s1,36(sp)
23006ffa:	5902                	lw	s2,32(sp)
23006ffc:	4a62                	lw	s4,24(sp)
23006ffe:	4ad2                	lw	s5,20(sp)
23007000:	4b42                	lw	s6,16(sp)
23007002:	854e                	mv	a0,s3
23007004:	49f2                	lw	s3,28(sp)
23007006:	6145                	addi	sp,sp,48
23007008:	8082                	ret
2300700a:	00178693          	addi	a3,a5,1
2300700e:	c636                	sw	a3,12(sp)
23007010:	00e78023          	sb	a4,0(a5)
23007014:	bfc1                	j	23006fe4 <__cvt+0xba>

23007016 <__exponent>:
23007016:	00c50023          	sb	a2,0(a0) # 8000000 <StackSize+0x7fff000>
2300701a:	00250793          	addi	a5,a0,2
2300701e:	02b00713          	li	a4,43
23007022:	0005d663          	bgez	a1,2300702e <__exponent+0x18>
23007026:	40b005b3          	neg	a1,a1
2300702a:	02d00713          	li	a4,45
2300702e:	00e500a3          	sb	a4,1(a0)
23007032:	4725                	li	a4,9
23007034:	06b75263          	bge	a4,a1,23007098 <__exponent+0x82>
23007038:	1141                	addi	sp,sp,-16
2300703a:	00f10713          	addi	a4,sp,15
2300703e:	883a                	mv	a6,a4
23007040:	48a9                	li	a7,10
23007042:	06300313          	li	t1,99
23007046:	0315e633          	rem	a2,a1,a7
2300704a:	86ba                	mv	a3,a4
2300704c:	177d                	addi	a4,a4,-1
2300704e:	03060613          	addi	a2,a2,48
23007052:	fec68fa3          	sb	a2,-1(a3)
23007056:	862e                	mv	a2,a1
23007058:	0315c5b3          	div	a1,a1,a7
2300705c:	fec345e3          	blt	t1,a2,23007046 <__exponent+0x30>
23007060:	ffe68893          	addi	a7,a3,-2
23007064:	03058593          	addi	a1,a1,48
23007068:	feb70fa3          	sb	a1,-1(a4) # 7fffffff <__HeapLimit+0x3dfcffff>
2300706c:	863e                	mv	a2,a5
2300706e:	8746                	mv	a4,a7
23007070:	01076d63          	bltu	a4,a6,2300708a <__exponent+0x74>
23007074:	4701                	li	a4,0
23007076:	01186563          	bltu	a6,a7,23007080 <__exponent+0x6a>
2300707a:	01110713          	addi	a4,sp,17
2300707e:	8f15                	sub	a4,a4,a3
23007080:	97ba                	add	a5,a5,a4
23007082:	40a78533          	sub	a0,a5,a0
23007086:	0141                	addi	sp,sp,16
23007088:	8082                	ret
2300708a:	00074583          	lbu	a1,0(a4)
2300708e:	0705                	addi	a4,a4,1
23007090:	0605                	addi	a2,a2,1
23007092:	feb60fa3          	sb	a1,-1(a2)
23007096:	bfe9                	j	23007070 <__exponent+0x5a>
23007098:	03000793          	li	a5,48
2300709c:	00f50123          	sb	a5,2(a0)
230070a0:	03058593          	addi	a1,a1,48
230070a4:	00450793          	addi	a5,a0,4
230070a8:	00b501a3          	sb	a1,3(a0)
230070ac:	40a78533          	sub	a0,a5,a0
230070b0:	8082                	ret

230070b2 <_printf_float>:
230070b2:	7119                	addi	sp,sp,-128
230070b4:	de86                	sw	ra,124(sp)
230070b6:	dca2                	sw	s0,120(sp)
230070b8:	daa6                	sw	s1,116(sp)
230070ba:	842e                	mv	s0,a1
230070bc:	d8ca                	sw	s2,112(sp)
230070be:	d6ce                	sw	s3,108(sp)
230070c0:	d4d2                	sw	s4,104(sp)
230070c2:	d2d6                	sw	s5,100(sp)
230070c4:	8a3a                	mv	s4,a4
230070c6:	d0da                	sw	s6,96(sp)
230070c8:	cede                	sw	s7,92(sp)
230070ca:	cce2                	sw	s8,88(sp)
230070cc:	8932                	mv	s2,a2
230070ce:	89b6                	mv	s3,a3
230070d0:	cae6                	sw	s9,84(sp)
230070d2:	c8ea                	sw	s10,80(sp)
230070d4:	c6ee                	sw	s11,76(sp)
230070d6:	84aa                	mv	s1,a0
230070d8:	51b010ef          	jal	ra,23008df2 <_localeconv_r>
230070dc:	00052c03          	lw	s8,0(a0)
230070e0:	8562                	mv	a0,s8
230070e2:	155000ef          	jal	ra,23007a36 <strlen>
230070e6:	00042b03          	lw	s6,0(s0) # 40000000 <__dtcm_load_addr+0x1cff2084>
230070ea:	dc02                	sw	zero,56(sp)
230070ec:	01844a83          	lbu	s5,24(s0)
230070f0:	100b7713          	andi	a4,s6,256
230070f4:	000a2783          	lw	a5,0(s4)
230070f8:	8baa                	mv	s7,a0
230070fa:	cb79                	beqz	a4,230071d0 <_printf_float+0x11e>
230070fc:	00478713          	addi	a4,a5,4
23007100:	00ea2023          	sw	a4,0(s4)
23007104:	439c                	lw	a5,0(a5)
23007106:	1008                	addi	a0,sp,32
23007108:	4398                	lw	a4,0(a5)
2300710a:	d03a                	sw	a4,32(sp)
2300710c:	43d8                	lw	a4,4(a5)
2300710e:	d23a                	sw	a4,36(sp)
23007110:	4798                	lw	a4,8(a5)
23007112:	d43a                	sw	a4,40(sp)
23007114:	47dc                	lw	a5,12(a5)
23007116:	d63e                	sw	a5,44(sp)
23007118:	f26fb0ef          	jal	ra,2300283e <__trunctfdf2>
2300711c:	c428                	sw	a0,72(s0)
2300711e:	c46c                	sw	a1,76(s0)
23007120:	04c42a03          	lw	s4,76(s0)
23007124:	00006717          	auipc	a4,0x6
23007128:	31c70713          	addi	a4,a4,796 # 2300d440 <CSWTCH.20+0x4>
2300712c:	04842c83          	lw	s9,72(s0)
23007130:	00072d03          	lw	s10,0(a4)
23007134:	00472d83          	lw	s11,4(a4)
23007138:	001a1793          	slli	a5,s4,0x1
2300713c:	8385                	srli	a5,a5,0x1
2300713e:	866a                	mv	a2,s10
23007140:	86ee                	mv	a3,s11
23007142:	8566                	mv	a0,s9
23007144:	85be                	mv	a1,a5
23007146:	ce3e                	sw	a5,28(sp)
23007148:	d04fb0ef          	jal	ra,2300264c <__unorddf2>
2300714c:	ed49                	bnez	a0,230071e6 <_printf_float+0x134>
2300714e:	47f2                	lw	a5,28(sp)
23007150:	866a                	mv	a2,s10
23007152:	86ee                	mv	a3,s11
23007154:	8566                	mv	a0,s9
23007156:	85be                	mv	a1,a5
23007158:	df6fa0ef          	jal	ra,2300174e <__ledf2>
2300715c:	08a05563          	blez	a0,230071e6 <_printf_float+0x134>
23007160:	4601                	li	a2,0
23007162:	4681                	li	a3,0
23007164:	8566                	mv	a0,s9
23007166:	85d2                	mv	a1,s4
23007168:	de6fa0ef          	jal	ra,2300174e <__ledf2>
2300716c:	00055663          	bgez	a0,23007178 <_printf_float+0xc6>
23007170:	02d00793          	li	a5,45
23007174:	04f401a3          	sb	a5,67(s0)
23007178:	04700793          	li	a5,71
2300717c:	00005a17          	auipc	s4,0x5
23007180:	788a0a13          	addi	s4,s4,1928 # 2300c904 <dma_channel_base+0x20>
23007184:	0157f663          	bgeu	a5,s5,23007190 <_printf_float+0xde>
23007188:	00005a17          	auipc	s4,0x5
2300718c:	780a0a13          	addi	s4,s4,1920 # 2300c908 <dma_channel_base+0x24>
23007190:	ffbb7b13          	andi	s6,s6,-5
23007194:	478d                	li	a5,3
23007196:	01642023          	sw	s6,0(s0)
2300719a:	c81c                	sw	a5,16(s0)
2300719c:	4b01                	li	s6,0
2300719e:	874e                	mv	a4,s3
230071a0:	86ca                	mv	a3,s2
230071a2:	1870                	addi	a2,sp,60
230071a4:	85a2                	mv	a1,s0
230071a6:	8526                	mv	a0,s1
230071a8:	26c5                	jal	23007588 <_printf_common>
230071aa:	5cfd                	li	s9,-1
230071ac:	17951463          	bne	a0,s9,23007314 <_printf_float+0x262>
230071b0:	557d                	li	a0,-1
230071b2:	50f6                	lw	ra,124(sp)
230071b4:	5466                	lw	s0,120(sp)
230071b6:	54d6                	lw	s1,116(sp)
230071b8:	5946                	lw	s2,112(sp)
230071ba:	59b6                	lw	s3,108(sp)
230071bc:	5a26                	lw	s4,104(sp)
230071be:	5a96                	lw	s5,100(sp)
230071c0:	5b06                	lw	s6,96(sp)
230071c2:	4bf6                	lw	s7,92(sp)
230071c4:	4c66                	lw	s8,88(sp)
230071c6:	4cd6                	lw	s9,84(sp)
230071c8:	4d46                	lw	s10,80(sp)
230071ca:	4db6                	lw	s11,76(sp)
230071cc:	6109                	addi	sp,sp,128
230071ce:	8082                	ret
230071d0:	079d                	addi	a5,a5,7
230071d2:	9be1                	andi	a5,a5,-8
230071d4:	00878713          	addi	a4,a5,8
230071d8:	00ea2023          	sw	a4,0(s4)
230071dc:	4398                	lw	a4,0(a5)
230071de:	43dc                	lw	a5,4(a5)
230071e0:	c438                	sw	a4,72(s0)
230071e2:	c47c                	sw	a5,76(s0)
230071e4:	bf35                	j	23007120 <_printf_float+0x6e>
230071e6:	8666                	mv	a2,s9
230071e8:	86d2                	mv	a3,s4
230071ea:	8566                	mv	a0,s9
230071ec:	85d2                	mv	a1,s4
230071ee:	c5efb0ef          	jal	ra,2300264c <__unorddf2>
230071f2:	c505                	beqz	a0,2300721a <_printf_float+0x168>
230071f4:	000a5663          	bgez	s4,23007200 <_printf_float+0x14e>
230071f8:	02d00793          	li	a5,45
230071fc:	04f401a3          	sb	a5,67(s0)
23007200:	04700793          	li	a5,71
23007204:	00005a17          	auipc	s4,0x5
23007208:	708a0a13          	addi	s4,s4,1800 # 2300c90c <dma_channel_base+0x28>
2300720c:	f957f2e3          	bgeu	a5,s5,23007190 <_printf_float+0xde>
23007210:	00005a17          	auipc	s4,0x5
23007214:	700a0a13          	addi	s4,s4,1792 # 2300c910 <dma_channel_base+0x2c>
23007218:	bfa5                	j	23007190 <_printf_float+0xde>
2300721a:	405c                	lw	a5,4(s0)
2300721c:	577d                	li	a4,-1
2300721e:	0dfafd13          	andi	s10,s5,223
23007222:	08e79463          	bne	a5,a4,230072aa <_printf_float+0x1f8>
23007226:	4799                	li	a5,6
23007228:	c05c                	sw	a5,4(s0)
2300722a:	4054                	lw	a3,4(s0)
2300722c:	400b6713          	ori	a4,s6,1024
23007230:	183c                	addi	a5,sp,56
23007232:	c03e                	sw	a5,0(sp)
23007234:	8652                	mv	a2,s4
23007236:	03310793          	addi	a5,sp,51
2300723a:	85e6                	mv	a1,s9
2300723c:	c018                	sw	a4,0(s0)
2300723e:	c202                	sw	zero,4(sp)
23007240:	88d6                	mv	a7,s5
23007242:	03410813          	addi	a6,sp,52
23007246:	8526                	mv	a0,s1
23007248:	ce3ff0ef          	jal	ra,23006f2a <__cvt>
2300724c:	04700793          	li	a5,71
23007250:	55d2                	lw	a1,52(sp)
23007252:	8a2a                	mv	s4,a0
23007254:	00fd1b63          	bne	s10,a5,2300726a <_printf_float+0x1b8>
23007258:	57f5                	li	a5,-3
2300725a:	00f5c563          	blt	a1,a5,23007264 <_printf_float+0x1b2>
2300725e:	405c                	lw	a5,4(s0)
23007260:	08b7d763          	bge	a5,a1,230072ee <_printf_float+0x23c>
23007264:	1af9                	addi	s5,s5,-2
23007266:	0ffafa93          	zext.b	s5,s5
2300726a:	06500793          	li	a5,101
2300726e:	0557e563          	bltu	a5,s5,230072b8 <_printf_float+0x206>
23007272:	15fd                	addi	a1,a1,-1
23007274:	8656                	mv	a2,s5
23007276:	05040513          	addi	a0,s0,80
2300727a:	da2e                	sw	a1,52(sp)
2300727c:	3b69                	jal	23007016 <__exponent>
2300727e:	5762                	lw	a4,56(sp)
23007280:	4685                	li	a3,1
23007282:	8b2a                	mv	s6,a0
23007284:	00a707b3          	add	a5,a4,a0
23007288:	c81c                	sw	a5,16(s0)
2300728a:	00e6c563          	blt	a3,a4,23007294 <_printf_float+0x1e2>
2300728e:	4018                	lw	a4,0(s0)
23007290:	8b05                	andi	a4,a4,1
23007292:	c319                	beqz	a4,23007298 <_printf_float+0x1e6>
23007294:	0785                	addi	a5,a5,1
23007296:	c81c                	sw	a5,16(s0)
23007298:	03314783          	lbu	a5,51(sp)
2300729c:	f00781e3          	beqz	a5,2300719e <_printf_float+0xec>
230072a0:	02d00793          	li	a5,45
230072a4:	04f401a3          	sb	a5,67(s0)
230072a8:	bddd                	j	2300719e <_printf_float+0xec>
230072aa:	04700713          	li	a4,71
230072ae:	f6ed1ee3          	bne	s10,a4,2300722a <_printf_float+0x178>
230072b2:	ffa5                	bnez	a5,2300722a <_printf_float+0x178>
230072b4:	4785                	li	a5,1
230072b6:	bf8d                	j	23007228 <_printf_float+0x176>
230072b8:	06600793          	li	a5,102
230072bc:	02fa9b63          	bne	s5,a5,230072f2 <_printf_float+0x240>
230072c0:	405c                	lw	a5,4(s0)
230072c2:	00b05b63          	blez	a1,230072d8 <_printf_float+0x226>
230072c6:	c80c                	sw	a1,16(s0)
230072c8:	e781                	bnez	a5,230072d0 <_printf_float+0x21e>
230072ca:	4018                	lw	a4,0(s0)
230072cc:	8b05                	andi	a4,a4,1
230072ce:	cf09                	beqz	a4,230072e8 <_printf_float+0x236>
230072d0:	0785                	addi	a5,a5,1
230072d2:	97ae                	add	a5,a5,a1
230072d4:	c81c                	sw	a5,16(s0)
230072d6:	a809                	j	230072e8 <_printf_float+0x236>
230072d8:	e789                	bnez	a5,230072e2 <_printf_float+0x230>
230072da:	4018                	lw	a4,0(s0)
230072dc:	4685                	li	a3,1
230072de:	8b05                	andi	a4,a4,1
230072e0:	c319                	beqz	a4,230072e6 <_printf_float+0x234>
230072e2:	00278693          	addi	a3,a5,2
230072e6:	c814                	sw	a3,16(s0)
230072e8:	cc2c                	sw	a1,88(s0)
230072ea:	4b01                	li	s6,0
230072ec:	b775                	j	23007298 <_printf_float+0x1e6>
230072ee:	06700a93          	li	s5,103
230072f2:	57e2                	lw	a5,56(sp)
230072f4:	00f5c963          	blt	a1,a5,23007306 <_printf_float+0x254>
230072f8:	401c                	lw	a5,0(s0)
230072fa:	c80c                	sw	a1,16(s0)
230072fc:	8b85                	andi	a5,a5,1
230072fe:	d7ed                	beqz	a5,230072e8 <_printf_float+0x236>
23007300:	00158793          	addi	a5,a1,1
23007304:	bfc1                	j	230072d4 <_printf_float+0x222>
23007306:	4705                	li	a4,1
23007308:	00b04463          	bgtz	a1,23007310 <_printf_float+0x25e>
2300730c:	4709                	li	a4,2
2300730e:	8f0d                	sub	a4,a4,a1
23007310:	97ba                	add	a5,a5,a4
23007312:	b7c9                	j	230072d4 <_printf_float+0x222>
23007314:	401c                	lw	a5,0(s0)
23007316:	4007f713          	andi	a4,a5,1024
2300731a:	e315                	bnez	a4,2300733e <_printf_float+0x28c>
2300731c:	4814                	lw	a3,16(s0)
2300731e:	8652                	mv	a2,s4
23007320:	85ca                	mv	a1,s2
23007322:	8526                	mv	a0,s1
23007324:	9982                	jalr	s3
23007326:	e99505e3          	beq	a0,s9,230071b0 <_printf_float+0xfe>
2300732a:	401c                	lw	a5,0(s0)
2300732c:	8b89                	andi	a5,a5,2
2300732e:	24079863          	bnez	a5,2300757e <_printf_float+0x4cc>
23007332:	57f2                	lw	a5,60(sp)
23007334:	4448                	lw	a0,12(s0)
23007336:	e6f55ee3          	bge	a0,a5,230071b2 <_printf_float+0x100>
2300733a:	853e                	mv	a0,a5
2300733c:	bd9d                	j	230071b2 <_printf_float+0x100>
2300733e:	06500713          	li	a4,101
23007342:	19577d63          	bgeu	a4,s5,230074dc <_printf_float+0x42a>
23007346:	4428                	lw	a0,72(s0)
23007348:	446c                	lw	a1,76(s0)
2300734a:	4601                	li	a2,0
2300734c:	4681                	li	a3,0
2300734e:	aaefa0ef          	jal	ra,230015fc <__eqdf2>
23007352:	e939                	bnez	a0,230073a8 <_printf_float+0x2f6>
23007354:	4685                	li	a3,1
23007356:	00005617          	auipc	a2,0x5
2300735a:	5be60613          	addi	a2,a2,1470 # 2300c914 <dma_channel_base+0x30>
2300735e:	85ca                	mv	a1,s2
23007360:	8526                	mv	a0,s1
23007362:	9982                	jalr	s3
23007364:	e59506e3          	beq	a0,s9,230071b0 <_printf_float+0xfe>
23007368:	5752                	lw	a4,52(sp)
2300736a:	57e2                	lw	a5,56(sp)
2300736c:	00f74563          	blt	a4,a5,23007376 <_printf_float+0x2c4>
23007370:	401c                	lw	a5,0(s0)
23007372:	8b85                	andi	a5,a5,1
23007374:	dbdd                	beqz	a5,2300732a <_printf_float+0x278>
23007376:	86de                	mv	a3,s7
23007378:	8662                	mv	a2,s8
2300737a:	85ca                	mv	a1,s2
2300737c:	8526                	mv	a0,s1
2300737e:	9982                	jalr	s3
23007380:	57fd                	li	a5,-1
23007382:	e2f507e3          	beq	a0,a5,230071b0 <_printf_float+0xfe>
23007386:	4a01                	li	s4,0
23007388:	01a40a93          	addi	s5,s0,26
2300738c:	5b7d                	li	s6,-1
2300738e:	57e2                	lw	a5,56(sp)
23007390:	17fd                	addi	a5,a5,-1
23007392:	f8fa5ce3          	bge	s4,a5,2300732a <_printf_float+0x278>
23007396:	4685                	li	a3,1
23007398:	8656                	mv	a2,s5
2300739a:	85ca                	mv	a1,s2
2300739c:	8526                	mv	a0,s1
2300739e:	9982                	jalr	s3
230073a0:	e16508e3          	beq	a0,s6,230071b0 <_printf_float+0xfe>
230073a4:	0a05                	addi	s4,s4,1
230073a6:	b7e5                	j	2300738e <_printf_float+0x2dc>
230073a8:	57d2                	lw	a5,52(sp)
230073aa:	06f04663          	bgtz	a5,23007416 <_printf_float+0x364>
230073ae:	4685                	li	a3,1
230073b0:	00005617          	auipc	a2,0x5
230073b4:	56460613          	addi	a2,a2,1380 # 2300c914 <dma_channel_base+0x30>
230073b8:	85ca                	mv	a1,s2
230073ba:	8526                	mv	a0,s1
230073bc:	9982                	jalr	s3
230073be:	df9509e3          	beq	a0,s9,230071b0 <_printf_float+0xfe>
230073c2:	57d2                	lw	a5,52(sp)
230073c4:	5762                	lw	a4,56(sp)
230073c6:	8fd9                	or	a5,a5,a4
230073c8:	e781                	bnez	a5,230073d0 <_printf_float+0x31e>
230073ca:	401c                	lw	a5,0(s0)
230073cc:	8b85                	andi	a5,a5,1
230073ce:	dfb1                	beqz	a5,2300732a <_printf_float+0x278>
230073d0:	86de                	mv	a3,s7
230073d2:	8662                	mv	a2,s8
230073d4:	85ca                	mv	a1,s2
230073d6:	8526                	mv	a0,s1
230073d8:	9982                	jalr	s3
230073da:	57fd                	li	a5,-1
230073dc:	dcf50ae3          	beq	a0,a5,230071b0 <_printf_float+0xfe>
230073e0:	4a81                	li	s5,0
230073e2:	01a40b13          	addi	s6,s0,26
230073e6:	5bfd                	li	s7,-1
230073e8:	57d2                	lw	a5,52(sp)
230073ea:	40f007b3          	neg	a5,a5
230073ee:	00facb63          	blt	s5,a5,23007404 <_printf_float+0x352>
230073f2:	56e2                	lw	a3,56(sp)
230073f4:	8652                	mv	a2,s4
230073f6:	85ca                	mv	a1,s2
230073f8:	8526                	mv	a0,s1
230073fa:	9982                	jalr	s3
230073fc:	57fd                	li	a5,-1
230073fe:	f2f516e3          	bne	a0,a5,2300732a <_printf_float+0x278>
23007402:	b37d                	j	230071b0 <_printf_float+0xfe>
23007404:	4685                	li	a3,1
23007406:	865a                	mv	a2,s6
23007408:	85ca                	mv	a1,s2
2300740a:	8526                	mv	a0,s1
2300740c:	9982                	jalr	s3
2300740e:	db7501e3          	beq	a0,s7,230071b0 <_printf_float+0xfe>
23007412:	0a85                	addi	s5,s5,1
23007414:	bfd1                	j	230073e8 <_printf_float+0x336>
23007416:	4c3c                	lw	a5,88(s0)
23007418:	5ae2                	lw	s5,56(sp)
2300741a:	0157d363          	bge	a5,s5,23007420 <_printf_float+0x36e>
2300741e:	8abe                	mv	s5,a5
23007420:	07504963          	bgtz	s5,23007492 <_printf_float+0x3e0>
23007424:	4b01                	li	s6,0
23007426:	01a40d13          	addi	s10,s0,26
2300742a:	5dfd                	li	s11,-1
2300742c:	05842c83          	lw	s9,88(s0)
23007430:	87d6                	mv	a5,s5
23007432:	000ad363          	bgez	s5,23007438 <_printf_float+0x386>
23007436:	4781                	li	a5,0
23007438:	40fc87b3          	sub	a5,s9,a5
2300743c:	06fb4463          	blt	s6,a5,230074a4 <_printf_float+0x3f2>
23007440:	5752                	lw	a4,52(sp)
23007442:	57e2                	lw	a5,56(sp)
23007444:	06f74963          	blt	a4,a5,230074b6 <_printf_float+0x404>
23007448:	401c                	lw	a5,0(s0)
2300744a:	8b85                	andi	a5,a5,1
2300744c:	e7ad                	bnez	a5,230074b6 <_printf_float+0x404>
2300744e:	5ae2                	lw	s5,56(sp)
23007450:	5752                	lw	a4,52(sp)
23007452:	419a87b3          	sub	a5,s5,s9
23007456:	40ea8ab3          	sub	s5,s5,a4
2300745a:	0157d363          	bge	a5,s5,23007460 <_printf_float+0x3ae>
2300745e:	8abe                	mv	s5,a5
23007460:	07504463          	bgtz	s5,230074c8 <_printf_float+0x416>
23007464:	4a01                	li	s4,0
23007466:	01a40b13          	addi	s6,s0,26
2300746a:	5bfd                	li	s7,-1
2300746c:	5752                	lw	a4,52(sp)
2300746e:	57e2                	lw	a5,56(sp)
23007470:	8f99                	sub	a5,a5,a4
23007472:	8756                	mv	a4,s5
23007474:	000ad363          	bgez	s5,2300747a <_printf_float+0x3c8>
23007478:	4701                	li	a4,0
2300747a:	8f99                	sub	a5,a5,a4
2300747c:	eafa57e3          	bge	s4,a5,2300732a <_printf_float+0x278>
23007480:	4685                	li	a3,1
23007482:	865a                	mv	a2,s6
23007484:	85ca                	mv	a1,s2
23007486:	8526                	mv	a0,s1
23007488:	9982                	jalr	s3
2300748a:	d37503e3          	beq	a0,s7,230071b0 <_printf_float+0xfe>
2300748e:	0a05                	addi	s4,s4,1
23007490:	bff1                	j	2300746c <_printf_float+0x3ba>
23007492:	86d6                	mv	a3,s5
23007494:	8652                	mv	a2,s4
23007496:	85ca                	mv	a1,s2
23007498:	8526                	mv	a0,s1
2300749a:	9982                	jalr	s3
2300749c:	57fd                	li	a5,-1
2300749e:	f8f513e3          	bne	a0,a5,23007424 <_printf_float+0x372>
230074a2:	b339                	j	230071b0 <_printf_float+0xfe>
230074a4:	4685                	li	a3,1
230074a6:	866a                	mv	a2,s10
230074a8:	85ca                	mv	a1,s2
230074aa:	8526                	mv	a0,s1
230074ac:	9982                	jalr	s3
230074ae:	d1b501e3          	beq	a0,s11,230071b0 <_printf_float+0xfe>
230074b2:	0b05                	addi	s6,s6,1
230074b4:	bfa5                	j	2300742c <_printf_float+0x37a>
230074b6:	86de                	mv	a3,s7
230074b8:	8662                	mv	a2,s8
230074ba:	85ca                	mv	a1,s2
230074bc:	8526                	mv	a0,s1
230074be:	9982                	jalr	s3
230074c0:	57fd                	li	a5,-1
230074c2:	f8f516e3          	bne	a0,a5,2300744e <_printf_float+0x39c>
230074c6:	b1ed                	j	230071b0 <_printf_float+0xfe>
230074c8:	86d6                	mv	a3,s5
230074ca:	019a0633          	add	a2,s4,s9
230074ce:	85ca                	mv	a1,s2
230074d0:	8526                	mv	a0,s1
230074d2:	9982                	jalr	s3
230074d4:	57fd                	li	a5,-1
230074d6:	f8f517e3          	bne	a0,a5,23007464 <_printf_float+0x3b2>
230074da:	b9d9                	j	230071b0 <_printf_float+0xfe>
230074dc:	56e2                	lw	a3,56(sp)
230074de:	4705                	li	a4,1
230074e0:	00d74463          	blt	a4,a3,230074e8 <_printf_float+0x436>
230074e4:	8b85                	andi	a5,a5,1
230074e6:	c7b5                	beqz	a5,23007552 <_printf_float+0x4a0>
230074e8:	4685                	li	a3,1
230074ea:	8652                	mv	a2,s4
230074ec:	85ca                	mv	a1,s2
230074ee:	8526                	mv	a0,s1
230074f0:	9982                	jalr	s3
230074f2:	5afd                	li	s5,-1
230074f4:	cb550ee3          	beq	a0,s5,230071b0 <_printf_float+0xfe>
230074f8:	86de                	mv	a3,s7
230074fa:	8662                	mv	a2,s8
230074fc:	85ca                	mv	a1,s2
230074fe:	8526                	mv	a0,s1
23007500:	9982                	jalr	s3
23007502:	cb5507e3          	beq	a0,s5,230071b0 <_printf_float+0xfe>
23007506:	4428                	lw	a0,72(s0)
23007508:	446c                	lw	a1,76(s0)
2300750a:	4601                	li	a2,0
2300750c:	4681                	li	a3,0
2300750e:	8eefa0ef          	jal	ra,230015fc <__eqdf2>
23007512:	c91d                	beqz	a0,23007548 <_printf_float+0x496>
23007514:	56e2                	lw	a3,56(sp)
23007516:	001a0613          	addi	a2,s4,1
2300751a:	85ca                	mv	a1,s2
2300751c:	16fd                	addi	a3,a3,-1
2300751e:	8526                	mv	a0,s1
23007520:	9982                	jalr	s3
23007522:	c95507e3          	beq	a0,s5,230071b0 <_printf_float+0xfe>
23007526:	86da                	mv	a3,s6
23007528:	05040613          	addi	a2,s0,80
2300752c:	b5e9                	j	230073f6 <_printf_float+0x344>
2300752e:	4685                	li	a3,1
23007530:	8656                	mv	a2,s5
23007532:	85ca                	mv	a1,s2
23007534:	8526                	mv	a0,s1
23007536:	9982                	jalr	s3
23007538:	c7750ce3          	beq	a0,s7,230071b0 <_printf_float+0xfe>
2300753c:	0a05                	addi	s4,s4,1
2300753e:	57e2                	lw	a5,56(sp)
23007540:	17fd                	addi	a5,a5,-1
23007542:	fefa46e3          	blt	s4,a5,2300752e <_printf_float+0x47c>
23007546:	b7c5                	j	23007526 <_printf_float+0x474>
23007548:	4a01                	li	s4,0
2300754a:	01a40a93          	addi	s5,s0,26
2300754e:	5bfd                	li	s7,-1
23007550:	b7fd                	j	2300753e <_printf_float+0x48c>
23007552:	4685                	li	a3,1
23007554:	8652                	mv	a2,s4
23007556:	85ca                	mv	a1,s2
23007558:	8526                	mv	a0,s1
2300755a:	9982                	jalr	s3
2300755c:	fd9515e3          	bne	a0,s9,23007526 <_printf_float+0x474>
23007560:	b981                	j	230071b0 <_printf_float+0xfe>
23007562:	4685                	li	a3,1
23007564:	8656                	mv	a2,s5
23007566:	85ca                	mv	a1,s2
23007568:	8526                	mv	a0,s1
2300756a:	9982                	jalr	s3
2300756c:	c56502e3          	beq	a0,s6,230071b0 <_printf_float+0xfe>
23007570:	0a05                	addi	s4,s4,1
23007572:	445c                	lw	a5,12(s0)
23007574:	5772                	lw	a4,60(sp)
23007576:	8f99                	sub	a5,a5,a4
23007578:	fefa45e3          	blt	s4,a5,23007562 <_printf_float+0x4b0>
2300757c:	bb5d                	j	23007332 <_printf_float+0x280>
2300757e:	4a01                	li	s4,0
23007580:	01940a93          	addi	s5,s0,25
23007584:	5b7d                	li	s6,-1
23007586:	b7f5                	j	23007572 <_printf_float+0x4c0>

23007588 <_printf_common>:
23007588:	7179                	addi	sp,sp,-48
2300758a:	cc52                	sw	s4,24(sp)
2300758c:	499c                	lw	a5,16(a1)
2300758e:	8a3a                	mv	s4,a4
23007590:	4598                	lw	a4,8(a1)
23007592:	d422                	sw	s0,40(sp)
23007594:	d226                	sw	s1,36(sp)
23007596:	ce4e                	sw	s3,28(sp)
23007598:	ca56                	sw	s5,20(sp)
2300759a:	d606                	sw	ra,44(sp)
2300759c:	d04a                	sw	s2,32(sp)
2300759e:	c85a                	sw	s6,16(sp)
230075a0:	c65e                	sw	s7,12(sp)
230075a2:	89aa                	mv	s3,a0
230075a4:	842e                	mv	s0,a1
230075a6:	84b2                	mv	s1,a2
230075a8:	8ab6                	mv	s5,a3
230075aa:	00e7d363          	bge	a5,a4,230075b0 <_printf_common+0x28>
230075ae:	87ba                	mv	a5,a4
230075b0:	c09c                	sw	a5,0(s1)
230075b2:	04344703          	lbu	a4,67(s0)
230075b6:	c319                	beqz	a4,230075bc <_printf_common+0x34>
230075b8:	0785                	addi	a5,a5,1
230075ba:	c09c                	sw	a5,0(s1)
230075bc:	401c                	lw	a5,0(s0)
230075be:	0207f793          	andi	a5,a5,32
230075c2:	c781                	beqz	a5,230075ca <_printf_common+0x42>
230075c4:	409c                	lw	a5,0(s1)
230075c6:	0789                	addi	a5,a5,2
230075c8:	c09c                	sw	a5,0(s1)
230075ca:	00042903          	lw	s2,0(s0)
230075ce:	00697913          	andi	s2,s2,6
230075d2:	00091a63          	bnez	s2,230075e6 <_printf_common+0x5e>
230075d6:	01940b13          	addi	s6,s0,25
230075da:	5bfd                	li	s7,-1
230075dc:	445c                	lw	a5,12(s0)
230075de:	4098                	lw	a4,0(s1)
230075e0:	8f99                	sub	a5,a5,a4
230075e2:	04f94c63          	blt	s2,a5,2300763a <_printf_common+0xb2>
230075e6:	04344783          	lbu	a5,67(s0)
230075ea:	00f036b3          	snez	a3,a5
230075ee:	401c                	lw	a5,0(s0)
230075f0:	0207f793          	andi	a5,a5,32
230075f4:	eba5                	bnez	a5,23007664 <_printf_common+0xdc>
230075f6:	04340613          	addi	a2,s0,67
230075fa:	85d6                	mv	a1,s5
230075fc:	854e                	mv	a0,s3
230075fe:	9a02                	jalr	s4
23007600:	57fd                	li	a5,-1
23007602:	04f50363          	beq	a0,a5,23007648 <_printf_common+0xc0>
23007606:	401c                	lw	a5,0(s0)
23007608:	4611                	li	a2,4
2300760a:	4098                	lw	a4,0(s1)
2300760c:	8b99                	andi	a5,a5,6
2300760e:	4454                	lw	a3,12(s0)
23007610:	4481                	li	s1,0
23007612:	00c79763          	bne	a5,a2,23007620 <_printf_common+0x98>
23007616:	40e684b3          	sub	s1,a3,a4
2300761a:	0004d363          	bgez	s1,23007620 <_printf_common+0x98>
2300761e:	4481                	li	s1,0
23007620:	441c                	lw	a5,8(s0)
23007622:	4818                	lw	a4,16(s0)
23007624:	00f75463          	bge	a4,a5,2300762c <_printf_common+0xa4>
23007628:	8f99                	sub	a5,a5,a4
2300762a:	94be                	add	s1,s1,a5
2300762c:	4901                	li	s2,0
2300762e:	0469                	addi	s0,s0,26
23007630:	5b7d                	li	s6,-1
23007632:	05249863          	bne	s1,s2,23007682 <_printf_common+0xfa>
23007636:	4501                	li	a0,0
23007638:	a809                	j	2300764a <_printf_common+0xc2>
2300763a:	4685                	li	a3,1
2300763c:	865a                	mv	a2,s6
2300763e:	85d6                	mv	a1,s5
23007640:	854e                	mv	a0,s3
23007642:	9a02                	jalr	s4
23007644:	01751e63          	bne	a0,s7,23007660 <_printf_common+0xd8>
23007648:	557d                	li	a0,-1
2300764a:	50b2                	lw	ra,44(sp)
2300764c:	5422                	lw	s0,40(sp)
2300764e:	5492                	lw	s1,36(sp)
23007650:	5902                	lw	s2,32(sp)
23007652:	49f2                	lw	s3,28(sp)
23007654:	4a62                	lw	s4,24(sp)
23007656:	4ad2                	lw	s5,20(sp)
23007658:	4b42                	lw	s6,16(sp)
2300765a:	4bb2                	lw	s7,12(sp)
2300765c:	6145                	addi	sp,sp,48
2300765e:	8082                	ret
23007660:	0905                	addi	s2,s2,1
23007662:	bfad                	j	230075dc <_printf_common+0x54>
23007664:	00d40733          	add	a4,s0,a3
23007668:	03000613          	li	a2,48
2300766c:	04c701a3          	sb	a2,67(a4)
23007670:	04544703          	lbu	a4,69(s0)
23007674:	00168793          	addi	a5,a3,1
23007678:	97a2                	add	a5,a5,s0
2300767a:	0689                	addi	a3,a3,2
2300767c:	04e781a3          	sb	a4,67(a5)
23007680:	bf9d                	j	230075f6 <_printf_common+0x6e>
23007682:	4685                	li	a3,1
23007684:	8622                	mv	a2,s0
23007686:	85d6                	mv	a1,s5
23007688:	854e                	mv	a0,s3
2300768a:	9a02                	jalr	s4
2300768c:	fb650ee3          	beq	a0,s6,23007648 <_printf_common+0xc0>
23007690:	0905                	addi	s2,s2,1
23007692:	b745                	j	23007632 <_printf_common+0xaa>

23007694 <_printf_i>:
23007694:	7179                	addi	sp,sp,-48
23007696:	d422                	sw	s0,40(sp)
23007698:	d226                	sw	s1,36(sp)
2300769a:	d04a                	sw	s2,32(sp)
2300769c:	ce4e                	sw	s3,28(sp)
2300769e:	d606                	sw	ra,44(sp)
230076a0:	cc52                	sw	s4,24(sp)
230076a2:	ca56                	sw	s5,20(sp)
230076a4:	c85a                	sw	s6,16(sp)
230076a6:	0185c803          	lbu	a6,24(a1)
230076aa:	07800793          	li	a5,120
230076ae:	84aa                	mv	s1,a0
230076b0:	842e                	mv	s0,a1
230076b2:	8932                	mv	s2,a2
230076b4:	89b6                	mv	s3,a3
230076b6:	0107ee63          	bltu	a5,a6,230076d2 <_printf_i+0x3e>
230076ba:	06200793          	li	a5,98
230076be:	04358693          	addi	a3,a1,67
230076c2:	0107ed63          	bltu	a5,a6,230076dc <_printf_i+0x48>
230076c6:	1c080663          	beqz	a6,23007892 <_printf_i+0x1fe>
230076ca:	05800793          	li	a5,88
230076ce:	12f80b63          	beq	a6,a5,23007804 <_printf_i+0x170>
230076d2:	04240a93          	addi	s5,s0,66
230076d6:	05040123          	sb	a6,66(s0)
230076da:	a815                	j	2300770e <_printf_i+0x7a>
230076dc:	f9d80793          	addi	a5,a6,-99
230076e0:	0ff7f793          	zext.b	a5,a5
230076e4:	4655                	li	a2,21
230076e6:	fef666e3          	bltu	a2,a5,230076d2 <_printf_i+0x3e>
230076ea:	00005617          	auipc	a2,0x5
230076ee:	25660613          	addi	a2,a2,598 # 2300c940 <dma_channel_base+0x5c>
230076f2:	078a                	slli	a5,a5,0x2
230076f4:	97b2                	add	a5,a5,a2
230076f6:	439c                	lw	a5,0(a5)
230076f8:	97b2                	add	a5,a5,a2
230076fa:	8782                	jr	a5
230076fc:	431c                	lw	a5,0(a4)
230076fe:	04258a93          	addi	s5,a1,66
23007702:	00478693          	addi	a3,a5,4
23007706:	439c                	lw	a5,0(a5)
23007708:	c314                	sw	a3,0(a4)
2300770a:	04f58123          	sb	a5,66(a1)
2300770e:	4785                	li	a5,1
23007710:	a26d                	j	230078ba <_printf_i+0x226>
23007712:	419c                	lw	a5,0(a1)
23007714:	4308                	lw	a0,0(a4)
23007716:	0807f613          	andi	a2,a5,128
2300771a:	00450593          	addi	a1,a0,4
2300771e:	c20d                	beqz	a2,23007740 <_printf_i+0xac>
23007720:	411c                	lw	a5,0(a0)
23007722:	c30c                	sw	a1,0(a4)
23007724:	0007d863          	bgez	a5,23007734 <_printf_i+0xa0>
23007728:	02d00713          	li	a4,45
2300772c:	40f007b3          	neg	a5,a5
23007730:	04e401a3          	sb	a4,67(s0)
23007734:	00005617          	auipc	a2,0x5
23007738:	1e460613          	addi	a2,a2,484 # 2300c918 <dma_channel_base+0x34>
2300773c:	4829                	li	a6,10
2300773e:	a0a1                	j	23007786 <_printf_i+0xf2>
23007740:	0407f613          	andi	a2,a5,64
23007744:	411c                	lw	a5,0(a0)
23007746:	c30c                	sw	a1,0(a4)
23007748:	de71                	beqz	a2,23007724 <_printf_i+0x90>
2300774a:	07c2                	slli	a5,a5,0x10
2300774c:	87c1                	srai	a5,a5,0x10
2300774e:	bfd9                	j	23007724 <_printf_i+0x90>
23007750:	4190                	lw	a2,0(a1)
23007752:	431c                	lw	a5,0(a4)
23007754:	08067513          	andi	a0,a2,128
23007758:	00478593          	addi	a1,a5,4
2300775c:	c501                	beqz	a0,23007764 <_printf_i+0xd0>
2300775e:	c30c                	sw	a1,0(a4)
23007760:	439c                	lw	a5,0(a5)
23007762:	a039                	j	23007770 <_printf_i+0xdc>
23007764:	04067613          	andi	a2,a2,64
23007768:	c30c                	sw	a1,0(a4)
2300776a:	da7d                	beqz	a2,23007760 <_printf_i+0xcc>
2300776c:	0007d783          	lhu	a5,0(a5)
23007770:	06f00713          	li	a4,111
23007774:	00005617          	auipc	a2,0x5
23007778:	1a460613          	addi	a2,a2,420 # 2300c918 <dma_channel_base+0x34>
2300777c:	0ee80563          	beq	a6,a4,23007866 <_printf_i+0x1d2>
23007780:	4829                	li	a6,10
23007782:	040401a3          	sb	zero,67(s0)
23007786:	4058                	lw	a4,4(s0)
23007788:	c418                	sw	a4,8(s0)
2300778a:	00074563          	bltz	a4,23007794 <_printf_i+0x100>
2300778e:	400c                	lw	a1,0(s0)
23007790:	99ed                	andi	a1,a1,-5
23007792:	c00c                	sw	a1,0(s0)
23007794:	e399                	bnez	a5,2300779a <_printf_i+0x106>
23007796:	8ab6                	mv	s5,a3
23007798:	cf19                	beqz	a4,230077b6 <_printf_i+0x122>
2300779a:	8ab6                	mv	s5,a3
2300779c:	0307f733          	remu	a4,a5,a6
230077a0:	1afd                	addi	s5,s5,-1
230077a2:	9732                	add	a4,a4,a2
230077a4:	00074703          	lbu	a4,0(a4)
230077a8:	00ea8023          	sb	a4,0(s5)
230077ac:	873e                	mv	a4,a5
230077ae:	0307d7b3          	divu	a5,a5,a6
230077b2:	ff0775e3          	bgeu	a4,a6,2300779c <_printf_i+0x108>
230077b6:	47a1                	li	a5,8
230077b8:	00f81e63          	bne	a6,a5,230077d4 <_printf_i+0x140>
230077bc:	401c                	lw	a5,0(s0)
230077be:	8b85                	andi	a5,a5,1
230077c0:	cb91                	beqz	a5,230077d4 <_printf_i+0x140>
230077c2:	4058                	lw	a4,4(s0)
230077c4:	481c                	lw	a5,16(s0)
230077c6:	00e7c763          	blt	a5,a4,230077d4 <_printf_i+0x140>
230077ca:	03000793          	li	a5,48
230077ce:	fefa8fa3          	sb	a5,-1(s5)
230077d2:	1afd                	addi	s5,s5,-1
230077d4:	415686b3          	sub	a3,a3,s5
230077d8:	c814                	sw	a3,16(s0)
230077da:	874e                	mv	a4,s3
230077dc:	86ca                	mv	a3,s2
230077de:	0070                	addi	a2,sp,12
230077e0:	85a2                	mv	a1,s0
230077e2:	8526                	mv	a0,s1
230077e4:	da5ff0ef          	jal	ra,23007588 <_printf_common>
230077e8:	5a7d                	li	s4,-1
230077ea:	0d451c63          	bne	a0,s4,230078c2 <_printf_i+0x22e>
230077ee:	557d                	li	a0,-1
230077f0:	50b2                	lw	ra,44(sp)
230077f2:	5422                	lw	s0,40(sp)
230077f4:	5492                	lw	s1,36(sp)
230077f6:	5902                	lw	s2,32(sp)
230077f8:	49f2                	lw	s3,28(sp)
230077fa:	4a62                	lw	s4,24(sp)
230077fc:	4ad2                	lw	s5,20(sp)
230077fe:	4b42                	lw	s6,16(sp)
23007800:	6145                	addi	sp,sp,48
23007802:	8082                	ret
23007804:	050582a3          	sb	a6,69(a1)
23007808:	00005617          	auipc	a2,0x5
2300780c:	11060613          	addi	a2,a2,272 # 2300c918 <dma_channel_base+0x34>
23007810:	400c                	lw	a1,0(s0)
23007812:	4308                	lw	a0,0(a4)
23007814:	0805f813          	andi	a6,a1,128
23007818:	411c                	lw	a5,0(a0)
2300781a:	0511                	addi	a0,a0,4
2300781c:	02080d63          	beqz	a6,23007856 <_printf_i+0x1c2>
23007820:	c308                	sw	a0,0(a4)
23007822:	0015f713          	andi	a4,a1,1
23007826:	c701                	beqz	a4,2300782e <_printf_i+0x19a>
23007828:	0205e593          	ori	a1,a1,32
2300782c:	c00c                	sw	a1,0(s0)
2300782e:	4841                	li	a6,16
23007830:	fba9                	bnez	a5,23007782 <_printf_i+0xee>
23007832:	4018                	lw	a4,0(s0)
23007834:	fdf77713          	andi	a4,a4,-33
23007838:	c018                	sw	a4,0(s0)
2300783a:	b7a1                	j	23007782 <_printf_i+0xee>
2300783c:	419c                	lw	a5,0(a1)
2300783e:	0207e793          	ori	a5,a5,32
23007842:	c19c                	sw	a5,0(a1)
23007844:	07800793          	li	a5,120
23007848:	04f402a3          	sb	a5,69(s0)
2300784c:	00005617          	auipc	a2,0x5
23007850:	0e060613          	addi	a2,a2,224 # 2300c92c <dma_channel_base+0x48>
23007854:	bf75                	j	23007810 <_printf_i+0x17c>
23007856:	0405f813          	andi	a6,a1,64
2300785a:	c308                	sw	a0,0(a4)
2300785c:	fc0803e3          	beqz	a6,23007822 <_printf_i+0x18e>
23007860:	07c2                	slli	a5,a5,0x10
23007862:	83c1                	srli	a5,a5,0x10
23007864:	bf7d                	j	23007822 <_printf_i+0x18e>
23007866:	4821                	li	a6,8
23007868:	bf29                	j	23007782 <_printf_i+0xee>
2300786a:	4190                	lw	a2,0(a1)
2300786c:	431c                	lw	a5,0(a4)
2300786e:	49cc                	lw	a1,20(a1)
23007870:	08067813          	andi	a6,a2,128
23007874:	00478513          	addi	a0,a5,4
23007878:	00080663          	beqz	a6,23007884 <_printf_i+0x1f0>
2300787c:	c308                	sw	a0,0(a4)
2300787e:	439c                	lw	a5,0(a5)
23007880:	c38c                	sw	a1,0(a5)
23007882:	a801                	j	23007892 <_printf_i+0x1fe>
23007884:	c308                	sw	a0,0(a4)
23007886:	04067613          	andi	a2,a2,64
2300788a:	439c                	lw	a5,0(a5)
2300788c:	da75                	beqz	a2,23007880 <_printf_i+0x1ec>
2300788e:	00b79023          	sh	a1,0(a5)
23007892:	00042823          	sw	zero,16(s0)
23007896:	8ab6                	mv	s5,a3
23007898:	b789                	j	230077da <_printf_i+0x146>
2300789a:	431c                	lw	a5,0(a4)
2300789c:	41d0                	lw	a2,4(a1)
2300789e:	4581                	li	a1,0
230078a0:	00478693          	addi	a3,a5,4
230078a4:	c314                	sw	a3,0(a4)
230078a6:	0007aa83          	lw	s5,0(a5)
230078aa:	8556                	mv	a0,s5
230078ac:	684010ef          	jal	ra,23008f30 <memchr>
230078b0:	c501                	beqz	a0,230078b8 <_printf_i+0x224>
230078b2:	41550533          	sub	a0,a0,s5
230078b6:	c048                	sw	a0,4(s0)
230078b8:	405c                	lw	a5,4(s0)
230078ba:	c81c                	sw	a5,16(s0)
230078bc:	040401a3          	sb	zero,67(s0)
230078c0:	bf29                	j	230077da <_printf_i+0x146>
230078c2:	4814                	lw	a3,16(s0)
230078c4:	8656                	mv	a2,s5
230078c6:	85ca                	mv	a1,s2
230078c8:	8526                	mv	a0,s1
230078ca:	9982                	jalr	s3
230078cc:	f34501e3          	beq	a0,s4,230077ee <_printf_i+0x15a>
230078d0:	401c                	lw	a5,0(s0)
230078d2:	8b89                	andi	a5,a5,2
230078d4:	e78d                	bnez	a5,230078fe <_printf_i+0x26a>
230078d6:	47b2                	lw	a5,12(sp)
230078d8:	4448                	lw	a0,12(s0)
230078da:	f0f55be3          	bge	a0,a5,230077f0 <_printf_i+0x15c>
230078de:	853e                	mv	a0,a5
230078e0:	bf01                	j	230077f0 <_printf_i+0x15c>
230078e2:	4685                	li	a3,1
230078e4:	8656                	mv	a2,s5
230078e6:	85ca                	mv	a1,s2
230078e8:	8526                	mv	a0,s1
230078ea:	9982                	jalr	s3
230078ec:	f16501e3          	beq	a0,s6,230077ee <_printf_i+0x15a>
230078f0:	0a05                	addi	s4,s4,1
230078f2:	445c                	lw	a5,12(s0)
230078f4:	4732                	lw	a4,12(sp)
230078f6:	8f99                	sub	a5,a5,a4
230078f8:	fefa45e3          	blt	s4,a5,230078e2 <_printf_i+0x24e>
230078fc:	bfe9                	j	230078d6 <_printf_i+0x242>
230078fe:	4a01                	li	s4,0
23007900:	01940a93          	addi	s5,s0,25
23007904:	5b7d                	li	s6,-1
23007906:	b7f5                	j	230078f2 <_printf_i+0x25e>

23007908 <iprintf>:
23007908:	715d                	addi	sp,sp,-80
2300790a:	d422                	sw	s0,40(sp)
2300790c:	d606                	sw	ra,44(sp)
2300790e:	842a                	mv	s0,a0
23007910:	da2e                	sw	a1,52(sp)
23007912:	dc32                	sw	a2,56(sp)
23007914:	de36                	sw	a3,60(sp)
23007916:	c0ba                	sw	a4,64(sp)
23007918:	c2be                	sw	a5,68(sp)
2300791a:	c4c2                	sw	a6,72(sp)
2300791c:	c6c6                	sw	a7,76(sp)
2300791e:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23007922:	c519                	beqz	a0,23007930 <iprintf+0x28>
23007924:	4d1c                	lw	a5,24(a0)
23007926:	e789                	bnez	a5,23007930 <iprintf+0x28>
23007928:	c62a                	sw	a0,12(sp)
2300792a:	34c010ef          	jal	ra,23008c76 <__sinit>
2300792e:	4532                	lw	a0,12(sp)
23007930:	450c                	lw	a1,8(a0)
23007932:	1854                	addi	a3,sp,52
23007934:	8622                	mv	a2,s0
23007936:	ce36                	sw	a3,28(sp)
23007938:	280020ef          	jal	ra,23009bb8 <_vfiprintf_r>
2300793c:	50b2                	lw	ra,44(sp)
2300793e:	5422                	lw	s0,40(sp)
23007940:	6161                	addi	sp,sp,80
23007942:	8082                	ret

23007944 <_puts_r>:
23007944:	1101                	addi	sp,sp,-32
23007946:	ca26                	sw	s1,20(sp)
23007948:	c84a                	sw	s2,16(sp)
2300794a:	ce06                	sw	ra,28(sp)
2300794c:	cc22                	sw	s0,24(sp)
2300794e:	c64e                	sw	s3,12(sp)
23007950:	c452                	sw	s4,8(sp)
23007952:	84aa                	mv	s1,a0
23007954:	892e                	mv	s2,a1
23007956:	c509                	beqz	a0,23007960 <_puts_r+0x1c>
23007958:	4d1c                	lw	a5,24(a0)
2300795a:	e399                	bnez	a5,23007960 <_puts_r+0x1c>
2300795c:	31a010ef          	jal	ra,23008c76 <__sinit>
23007960:	4c9c                	lw	a5,24(s1)
23007962:	4480                	lw	s0,8(s1)
23007964:	e781                	bnez	a5,2300796c <_puts_r+0x28>
23007966:	8526                	mv	a0,s1
23007968:	30e010ef          	jal	ra,23008c76 <__sinit>
2300796c:	00005797          	auipc	a5,0x5
23007970:	14078793          	addi	a5,a5,320 # 2300caac <__sf_fake_stdin>
23007974:	02f41c63          	bne	s0,a5,230079ac <_puts_r+0x68>
23007978:	40c0                	lw	s0,4(s1)
2300797a:	00c45783          	lhu	a5,12(s0)
2300797e:	8ba1                	andi	a5,a5,8
23007980:	c7b1                	beqz	a5,230079cc <_puts_r+0x88>
23007982:	481c                	lw	a5,16(s0)
23007984:	c7a1                	beqz	a5,230079cc <_puts_r+0x88>
23007986:	59fd                	li	s3,-1
23007988:	4a29                	li	s4,10
2300798a:	441c                	lw	a5,8(s0)
2300798c:	00094583          	lbu	a1,0(s2)
23007990:	17fd                	addi	a5,a5,-1
23007992:	e9b1                	bnez	a1,230079e6 <_puts_r+0xa2>
23007994:	c41c                	sw	a5,8(s0)
23007996:	0607de63          	bgez	a5,23007a12 <_puts_r+0xce>
2300799a:	8622                	mv	a2,s0
2300799c:	45a9                	li	a1,10
2300799e:	8526                	mv	a0,s1
230079a0:	2a29                	jal	23007aba <__swbuf_r>
230079a2:	57fd                	li	a5,-1
230079a4:	02f50863          	beq	a0,a5,230079d4 <_puts_r+0x90>
230079a8:	4529                	li	a0,10
230079aa:	a035                	j	230079d6 <_puts_r+0x92>
230079ac:	00005797          	auipc	a5,0x5
230079b0:	12078793          	addi	a5,a5,288 # 2300cacc <__sf_fake_stdout>
230079b4:	00f41463          	bne	s0,a5,230079bc <_puts_r+0x78>
230079b8:	4480                	lw	s0,8(s1)
230079ba:	b7c1                	j	2300797a <_puts_r+0x36>
230079bc:	00005797          	auipc	a5,0x5
230079c0:	0d078793          	addi	a5,a5,208 # 2300ca8c <__sf_fake_stderr>
230079c4:	faf41be3          	bne	s0,a5,2300797a <_puts_r+0x36>
230079c8:	44c0                	lw	s0,12(s1)
230079ca:	bf45                	j	2300797a <_puts_r+0x36>
230079cc:	85a2                	mv	a1,s0
230079ce:	8526                	mv	a0,s1
230079d0:	2a45                	jal	23007b80 <__swsetup_r>
230079d2:	d955                	beqz	a0,23007986 <_puts_r+0x42>
230079d4:	557d                	li	a0,-1
230079d6:	40f2                	lw	ra,28(sp)
230079d8:	4462                	lw	s0,24(sp)
230079da:	44d2                	lw	s1,20(sp)
230079dc:	4942                	lw	s2,16(sp)
230079de:	49b2                	lw	s3,12(sp)
230079e0:	4a22                	lw	s4,8(sp)
230079e2:	6105                	addi	sp,sp,32
230079e4:	8082                	ret
230079e6:	c41c                	sw	a5,8(s0)
230079e8:	0905                	addi	s2,s2,1
230079ea:	0007d763          	bgez	a5,230079f8 <_puts_r+0xb4>
230079ee:	4c18                	lw	a4,24(s0)
230079f0:	00e7cb63          	blt	a5,a4,23007a06 <_puts_r+0xc2>
230079f4:	01458963          	beq	a1,s4,23007a06 <_puts_r+0xc2>
230079f8:	401c                	lw	a5,0(s0)
230079fa:	00178713          	addi	a4,a5,1
230079fe:	c018                	sw	a4,0(s0)
23007a00:	00b78023          	sb	a1,0(a5)
23007a04:	b759                	j	2300798a <_puts_r+0x46>
23007a06:	8622                	mv	a2,s0
23007a08:	8526                	mv	a0,s1
23007a0a:	2845                	jal	23007aba <__swbuf_r>
23007a0c:	f7351fe3          	bne	a0,s3,2300798a <_puts_r+0x46>
23007a10:	b7d1                	j	230079d4 <_puts_r+0x90>
23007a12:	401c                	lw	a5,0(s0)
23007a14:	00178713          	addi	a4,a5,1
23007a18:	c018                	sw	a4,0(s0)
23007a1a:	4729                	li	a4,10
23007a1c:	00e78023          	sb	a4,0(a5)
23007a20:	b761                	j	230079a8 <_puts_r+0x64>

23007a22 <puts>:
23007a22:	85aa                	mv	a1,a0
23007a24:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23007a28:	bf31                	j	23007944 <_puts_r>

23007a2a <realloc>:
23007a2a:	862e                	mv	a2,a1
23007a2c:	85aa                	mv	a1,a0
23007a2e:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23007a32:	897fb06f          	j	230032c8 <_realloc_r>

23007a36 <strlen>:
23007a36:	87aa                	mv	a5,a0
23007a38:	0007c703          	lbu	a4,0(a5)
23007a3c:	0785                	addi	a5,a5,1
23007a3e:	ff6d                	bnez	a4,23007a38 <strlen+0x2>
23007a40:	40a78533          	sub	a0,a5,a0
23007a44:	157d                	addi	a0,a0,-1
23007a46:	8082                	ret

23007a48 <_vsniprintf_r>:
23007a48:	7119                	addi	sp,sp,-128
23007a4a:	dca2                	sw	s0,120(sp)
23007a4c:	daa6                	sw	s1,116(sp)
23007a4e:	de86                	sw	ra,124(sp)
23007a50:	d8ca                	sw	s2,112(sp)
23007a52:	84aa                	mv	s1,a0
23007a54:	8432                	mv	s0,a2
23007a56:	00065c63          	bgez	a2,23007a6e <_vsniprintf_r+0x26>
23007a5a:	08b00793          	li	a5,139
23007a5e:	c11c                	sw	a5,0(a0)
23007a60:	557d                	li	a0,-1
23007a62:	50f6                	lw	ra,124(sp)
23007a64:	5466                	lw	s0,120(sp)
23007a66:	54d6                	lw	s1,116(sp)
23007a68:	5946                	lw	s2,112(sp)
23007a6a:	6109                	addi	sp,sp,128
23007a6c:	8082                	ret
23007a6e:	20800793          	li	a5,520
23007a72:	00f11a23          	sh	a5,20(sp)
23007a76:	c42e                	sw	a1,8(sp)
23007a78:	cc2e                	sw	a1,24(sp)
23007a7a:	8636                	mv	a2,a3
23007a7c:	4781                	li	a5,0
23007a7e:	86ba                	mv	a3,a4
23007a80:	c019                	beqz	s0,23007a86 <_vsniprintf_r+0x3e>
23007a82:	fff40793          	addi	a5,s0,-1
23007a86:	597d                	li	s2,-1
23007a88:	002c                	addi	a1,sp,8
23007a8a:	8526                	mv	a0,s1
23007a8c:	c83e                	sw	a5,16(sp)
23007a8e:	ce3e                	sw	a5,28(sp)
23007a90:	01211b23          	sh	s2,22(sp)
23007a94:	63b010ef          	jal	ra,230098ce <_svfiprintf_r>
23007a98:	01255563          	bge	a0,s2,23007aa2 <_vsniprintf_r+0x5a>
23007a9c:	08b00793          	li	a5,139
23007aa0:	c09c                	sw	a5,0(s1)
23007aa2:	d061                	beqz	s0,23007a62 <_vsniprintf_r+0x1a>
23007aa4:	47a2                	lw	a5,8(sp)
23007aa6:	00078023          	sb	zero,0(a5)
23007aaa:	bf65                	j	23007a62 <_vsniprintf_r+0x1a>

23007aac <vsniprintf>:
23007aac:	8736                	mv	a4,a3
23007aae:	86b2                	mv	a3,a2
23007ab0:	862e                	mv	a2,a1
23007ab2:	85aa                	mv	a1,a0
23007ab4:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23007ab8:	bf41                	j	23007a48 <_vsniprintf_r>

23007aba <__swbuf_r>:
23007aba:	1101                	addi	sp,sp,-32
23007abc:	cc22                	sw	s0,24(sp)
23007abe:	ca26                	sw	s1,20(sp)
23007ac0:	c84a                	sw	s2,16(sp)
23007ac2:	ce06                	sw	ra,28(sp)
23007ac4:	c64e                	sw	s3,12(sp)
23007ac6:	84aa                	mv	s1,a0
23007ac8:	892e                	mv	s2,a1
23007aca:	8432                	mv	s0,a2
23007acc:	c509                	beqz	a0,23007ad6 <__swbuf_r+0x1c>
23007ace:	4d1c                	lw	a5,24(a0)
23007ad0:	e399                	bnez	a5,23007ad6 <__swbuf_r+0x1c>
23007ad2:	1a4010ef          	jal	ra,23008c76 <__sinit>
23007ad6:	00005797          	auipc	a5,0x5
23007ada:	fd678793          	addi	a5,a5,-42 # 2300caac <__sf_fake_stdin>
23007ade:	06f41b63          	bne	s0,a5,23007b54 <__swbuf_r+0x9a>
23007ae2:	40c0                	lw	s0,4(s1)
23007ae4:	4c1c                	lw	a5,24(s0)
23007ae6:	c41c                	sw	a5,8(s0)
23007ae8:	00c45783          	lhu	a5,12(s0)
23007aec:	8ba1                	andi	a5,a5,8
23007aee:	c3d9                	beqz	a5,23007b74 <__swbuf_r+0xba>
23007af0:	481c                	lw	a5,16(s0)
23007af2:	c3c9                	beqz	a5,23007b74 <__swbuf_r+0xba>
23007af4:	481c                	lw	a5,16(s0)
23007af6:	4008                	lw	a0,0(s0)
23007af8:	0ff97993          	zext.b	s3,s2
23007afc:	0ff97913          	zext.b	s2,s2
23007b00:	8d1d                	sub	a0,a0,a5
23007b02:	485c                	lw	a5,20(s0)
23007b04:	00f54763          	blt	a0,a5,23007b12 <__swbuf_r+0x58>
23007b08:	85a2                	mv	a1,s0
23007b0a:	8526                	mv	a0,s1
23007b0c:	048010ef          	jal	ra,23008b54 <_fflush_r>
23007b10:	e535                	bnez	a0,23007b7c <__swbuf_r+0xc2>
23007b12:	441c                	lw	a5,8(s0)
23007b14:	0505                	addi	a0,a0,1
23007b16:	17fd                	addi	a5,a5,-1
23007b18:	c41c                	sw	a5,8(s0)
23007b1a:	401c                	lw	a5,0(s0)
23007b1c:	00178713          	addi	a4,a5,1
23007b20:	c018                	sw	a4,0(s0)
23007b22:	01378023          	sb	s3,0(a5)
23007b26:	485c                	lw	a5,20(s0)
23007b28:	00a78963          	beq	a5,a0,23007b3a <__swbuf_r+0x80>
23007b2c:	00c45783          	lhu	a5,12(s0)
23007b30:	8b85                	andi	a5,a5,1
23007b32:	cb89                	beqz	a5,23007b44 <__swbuf_r+0x8a>
23007b34:	47a9                	li	a5,10
23007b36:	00f91763          	bne	s2,a5,23007b44 <__swbuf_r+0x8a>
23007b3a:	85a2                	mv	a1,s0
23007b3c:	8526                	mv	a0,s1
23007b3e:	016010ef          	jal	ra,23008b54 <_fflush_r>
23007b42:	ed0d                	bnez	a0,23007b7c <__swbuf_r+0xc2>
23007b44:	40f2                	lw	ra,28(sp)
23007b46:	4462                	lw	s0,24(sp)
23007b48:	44d2                	lw	s1,20(sp)
23007b4a:	49b2                	lw	s3,12(sp)
23007b4c:	854a                	mv	a0,s2
23007b4e:	4942                	lw	s2,16(sp)
23007b50:	6105                	addi	sp,sp,32
23007b52:	8082                	ret
23007b54:	00005797          	auipc	a5,0x5
23007b58:	f7878793          	addi	a5,a5,-136 # 2300cacc <__sf_fake_stdout>
23007b5c:	00f41463          	bne	s0,a5,23007b64 <__swbuf_r+0xaa>
23007b60:	4480                	lw	s0,8(s1)
23007b62:	b749                	j	23007ae4 <__swbuf_r+0x2a>
23007b64:	00005797          	auipc	a5,0x5
23007b68:	f2878793          	addi	a5,a5,-216 # 2300ca8c <__sf_fake_stderr>
23007b6c:	f6f41ce3          	bne	s0,a5,23007ae4 <__swbuf_r+0x2a>
23007b70:	44c0                	lw	s0,12(s1)
23007b72:	bf8d                	j	23007ae4 <__swbuf_r+0x2a>
23007b74:	85a2                	mv	a1,s0
23007b76:	8526                	mv	a0,s1
23007b78:	2021                	jal	23007b80 <__swsetup_r>
23007b7a:	dd2d                	beqz	a0,23007af4 <__swbuf_r+0x3a>
23007b7c:	597d                	li	s2,-1
23007b7e:	b7d9                	j	23007b44 <__swbuf_r+0x8a>

23007b80 <__swsetup_r>:
23007b80:	1141                	addi	sp,sp,-16
23007b82:	c422                	sw	s0,8(sp)
23007b84:	c226                	sw	s1,4(sp)
23007b86:	c04a                	sw	s2,0(sp)
23007b88:	c606                	sw	ra,12(sp)
23007b8a:	a8c1a483          	lw	s1,-1396(gp) # 4201628c <_impure_ptr>
23007b8e:	892a                	mv	s2,a0
23007b90:	842e                	mv	s0,a1
23007b92:	c491                	beqz	s1,23007b9e <__swsetup_r+0x1e>
23007b94:	4c9c                	lw	a5,24(s1)
23007b96:	e781                	bnez	a5,23007b9e <__swsetup_r+0x1e>
23007b98:	8526                	mv	a0,s1
23007b9a:	0dc010ef          	jal	ra,23008c76 <__sinit>
23007b9e:	00005797          	auipc	a5,0x5
23007ba2:	f0e78793          	addi	a5,a5,-242 # 2300caac <__sf_fake_stdin>
23007ba6:	02f41763          	bne	s0,a5,23007bd4 <__swsetup_r+0x54>
23007baa:	40c0                	lw	s0,4(s1)
23007bac:	00c41783          	lh	a5,12(s0)
23007bb0:	01079713          	slli	a4,a5,0x10
23007bb4:	0087f693          	andi	a3,a5,8
23007bb8:	8341                	srli	a4,a4,0x10
23007bba:	eab5                	bnez	a3,23007c2e <__swsetup_r+0xae>
23007bbc:	01077693          	andi	a3,a4,16
23007bc0:	ea95                	bnez	a3,23007bf4 <__swsetup_r+0x74>
23007bc2:	4725                	li	a4,9
23007bc4:	00e92023          	sw	a4,0(s2)
23007bc8:	0407e793          	ori	a5,a5,64
23007bcc:	00f41623          	sh	a5,12(s0)
23007bd0:	557d                	li	a0,-1
23007bd2:	a045                	j	23007c72 <__swsetup_r+0xf2>
23007bd4:	00005797          	auipc	a5,0x5
23007bd8:	ef878793          	addi	a5,a5,-264 # 2300cacc <__sf_fake_stdout>
23007bdc:	00f41463          	bne	s0,a5,23007be4 <__swsetup_r+0x64>
23007be0:	4480                	lw	s0,8(s1)
23007be2:	b7e9                	j	23007bac <__swsetup_r+0x2c>
23007be4:	00005797          	auipc	a5,0x5
23007be8:	ea878793          	addi	a5,a5,-344 # 2300ca8c <__sf_fake_stderr>
23007bec:	fcf410e3          	bne	s0,a5,23007bac <__swsetup_r+0x2c>
23007bf0:	44c0                	lw	s0,12(s1)
23007bf2:	bf6d                	j	23007bac <__swsetup_r+0x2c>
23007bf4:	8b11                	andi	a4,a4,4
23007bf6:	c715                	beqz	a4,23007c22 <__swsetup_r+0xa2>
23007bf8:	584c                	lw	a1,52(s0)
23007bfa:	c991                	beqz	a1,23007c0e <__swsetup_r+0x8e>
23007bfc:	04440793          	addi	a5,s0,68
23007c00:	00f58563          	beq	a1,a5,23007c0a <__swsetup_r+0x8a>
23007c04:	854a                	mv	a0,s2
23007c06:	f0efb0ef          	jal	ra,23003314 <_free_r>
23007c0a:	02042a23          	sw	zero,52(s0)
23007c0e:	00c45783          	lhu	a5,12(s0)
23007c12:	00042223          	sw	zero,4(s0)
23007c16:	fdb7f793          	andi	a5,a5,-37
23007c1a:	00f41623          	sh	a5,12(s0)
23007c1e:	481c                	lw	a5,16(s0)
23007c20:	c01c                	sw	a5,0(s0)
23007c22:	00c45783          	lhu	a5,12(s0)
23007c26:	0087e793          	ori	a5,a5,8
23007c2a:	00f41623          	sh	a5,12(s0)
23007c2e:	481c                	lw	a5,16(s0)
23007c30:	ef89                	bnez	a5,23007c4a <__swsetup_r+0xca>
23007c32:	00c45783          	lhu	a5,12(s0)
23007c36:	20000713          	li	a4,512
23007c3a:	2807f793          	andi	a5,a5,640
23007c3e:	00e78663          	beq	a5,a4,23007c4a <__swsetup_r+0xca>
23007c42:	85a2                	mv	a1,s0
23007c44:	854a                	mv	a0,s2
23007c46:	20e010ef          	jal	ra,23008e54 <__smakebuf_r>
23007c4a:	00c41783          	lh	a5,12(s0)
23007c4e:	01079713          	slli	a4,a5,0x10
23007c52:	0017f693          	andi	a3,a5,1
23007c56:	8341                	srli	a4,a4,0x10
23007c58:	c29d                	beqz	a3,23007c7e <__swsetup_r+0xfe>
23007c5a:	4854                	lw	a3,20(s0)
23007c5c:	00042423          	sw	zero,8(s0)
23007c60:	40d006b3          	neg	a3,a3
23007c64:	cc14                	sw	a3,24(s0)
23007c66:	4814                	lw	a3,16(s0)
23007c68:	4501                	li	a0,0
23007c6a:	e681                	bnez	a3,23007c72 <__swsetup_r+0xf2>
23007c6c:	08077713          	andi	a4,a4,128
23007c70:	ff21                	bnez	a4,23007bc8 <__swsetup_r+0x48>
23007c72:	40b2                	lw	ra,12(sp)
23007c74:	4422                	lw	s0,8(sp)
23007c76:	4492                	lw	s1,4(sp)
23007c78:	4902                	lw	s2,0(sp)
23007c7a:	0141                	addi	sp,sp,16
23007c7c:	8082                	ret
23007c7e:	00277693          	andi	a3,a4,2
23007c82:	4601                	li	a2,0
23007c84:	e291                	bnez	a3,23007c88 <__swsetup_r+0x108>
23007c86:	4850                	lw	a2,20(s0)
23007c88:	c410                	sw	a2,8(s0)
23007c8a:	bff1                	j	23007c66 <__swsetup_r+0xe6>

23007c8c <quorem>:
23007c8c:	1101                	addi	sp,sp,-32
23007c8e:	cc22                	sw	s0,24(sp)
23007c90:	491c                	lw	a5,16(a0)
23007c92:	4980                	lw	s0,16(a1)
23007c94:	ce06                	sw	ra,28(sp)
23007c96:	ca26                	sw	s1,20(sp)
23007c98:	c84a                	sw	s2,16(sp)
23007c9a:	c64e                	sw	s3,12(sp)
23007c9c:	c452                	sw	s4,8(sp)
23007c9e:	c256                	sw	s5,4(sp)
23007ca0:	1087ca63          	blt	a5,s0,23007db4 <quorem+0x128>
23007ca4:	147d                	addi	s0,s0,-1
23007ca6:	00241613          	slli	a2,s0,0x2
23007caa:	01458a13          	addi	s4,a1,20
23007cae:	00ca0ab3          	add	s5,s4,a2
23007cb2:	01450993          	addi	s3,a0,20
23007cb6:	000aa783          	lw	a5,0(s5)
23007cba:	964e                	add	a2,a2,s3
23007cbc:	4218                	lw	a4,0(a2)
23007cbe:	0785                	addi	a5,a5,1
23007cc0:	892a                	mv	s2,a0
23007cc2:	02f754b3          	divu	s1,a4,a5
23007cc6:	06f76263          	bltu	a4,a5,23007d2a <quorem+0x9e>
23007cca:	6541                	lui	a0,0x10
23007ccc:	8852                	mv	a6,s4
23007cce:	88ce                	mv	a7,s3
23007cd0:	4301                	li	t1,0
23007cd2:	4e01                	li	t3,0
23007cd4:	157d                	addi	a0,a0,-1
23007cd6:	00082683          	lw	a3,0(a6)
23007cda:	0891                	addi	a7,a7,4
23007cdc:	0811                	addi	a6,a6,4
23007cde:	00a6f7b3          	and	a5,a3,a0
23007ce2:	82c1                	srli	a3,a3,0x10
23007ce4:	029787b3          	mul	a5,a5,s1
23007ce8:	029686b3          	mul	a3,a3,s1
23007cec:	979a                	add	a5,a5,t1
23007cee:	0107d713          	srli	a4,a5,0x10
23007cf2:	8fe9                	and	a5,a5,a0
23007cf4:	40fe07b3          	sub	a5,t3,a5
23007cf8:	96ba                	add	a3,a3,a4
23007cfa:	ffc8a703          	lw	a4,-4(a7) # 3fffffc <StackSize+0x3ffeffc>
23007cfe:	0106d313          	srli	t1,a3,0x10
23007d02:	8ee9                	and	a3,a3,a0
23007d04:	00a77e33          	and	t3,a4,a0
23007d08:	97f2                	add	a5,a5,t3
23007d0a:	8341                	srli	a4,a4,0x10
23007d0c:	8f15                	sub	a4,a4,a3
23007d0e:	4107d693          	srai	a3,a5,0x10
23007d12:	9736                	add	a4,a4,a3
23007d14:	41075e13          	srai	t3,a4,0x10
23007d18:	8fe9                	and	a5,a5,a0
23007d1a:	0742                	slli	a4,a4,0x10
23007d1c:	8fd9                	or	a5,a5,a4
23007d1e:	fef8ae23          	sw	a5,-4(a7)
23007d22:	fb0afae3          	bgeu	s5,a6,23007cd6 <quorem+0x4a>
23007d26:	421c                	lw	a5,0(a2)
23007d28:	c7bd                	beqz	a5,23007d96 <quorem+0x10a>
23007d2a:	854a                	mv	a0,s2
23007d2c:	035010ef          	jal	ra,23009560 <__mcmp>
23007d30:	04054663          	bltz	a0,23007d7c <quorem+0xf0>
23007d34:	66c1                	lui	a3,0x10
23007d36:	0485                	addi	s1,s1,1
23007d38:	864e                	mv	a2,s3
23007d3a:	4581                	li	a1,0
23007d3c:	16fd                	addi	a3,a3,-1
23007d3e:	000a2503          	lw	a0,0(s4)
23007d42:	421c                	lw	a5,0(a2)
23007d44:	0611                	addi	a2,a2,4
23007d46:	00d57733          	and	a4,a0,a3
23007d4a:	8d99                	sub	a1,a1,a4
23007d4c:	00d7f733          	and	a4,a5,a3
23007d50:	972e                	add	a4,a4,a1
23007d52:	83c1                	srli	a5,a5,0x10
23007d54:	8141                	srli	a0,a0,0x10
23007d56:	41075593          	srai	a1,a4,0x10
23007d5a:	8f89                	sub	a5,a5,a0
23007d5c:	97ae                	add	a5,a5,a1
23007d5e:	4107d593          	srai	a1,a5,0x10
23007d62:	8f75                	and	a4,a4,a3
23007d64:	07c2                	slli	a5,a5,0x10
23007d66:	8fd9                	or	a5,a5,a4
23007d68:	0a11                	addi	s4,s4,4
23007d6a:	fef62e23          	sw	a5,-4(a2)
23007d6e:	fd4af8e3          	bgeu	s5,s4,23007d3e <quorem+0xb2>
23007d72:	00241793          	slli	a5,s0,0x2
23007d76:	97ce                	add	a5,a5,s3
23007d78:	4398                	lw	a4,0(a5)
23007d7a:	c71d                	beqz	a4,23007da8 <quorem+0x11c>
23007d7c:	8526                	mv	a0,s1
23007d7e:	40f2                	lw	ra,28(sp)
23007d80:	4462                	lw	s0,24(sp)
23007d82:	44d2                	lw	s1,20(sp)
23007d84:	4942                	lw	s2,16(sp)
23007d86:	49b2                	lw	s3,12(sp)
23007d88:	4a22                	lw	s4,8(sp)
23007d8a:	4a92                	lw	s5,4(sp)
23007d8c:	6105                	addi	sp,sp,32
23007d8e:	8082                	ret
23007d90:	421c                	lw	a5,0(a2)
23007d92:	e789                	bnez	a5,23007d9c <quorem+0x110>
23007d94:	147d                	addi	s0,s0,-1
23007d96:	1671                	addi	a2,a2,-4
23007d98:	fec9ece3          	bltu	s3,a2,23007d90 <quorem+0x104>
23007d9c:	00892823          	sw	s0,16(s2)
23007da0:	b769                	j	23007d2a <quorem+0x9e>
23007da2:	4398                	lw	a4,0(a5)
23007da4:	e709                	bnez	a4,23007dae <quorem+0x122>
23007da6:	147d                	addi	s0,s0,-1
23007da8:	17f1                	addi	a5,a5,-4
23007daa:	fef9ece3          	bltu	s3,a5,23007da2 <quorem+0x116>
23007dae:	00892823          	sw	s0,16(s2)
23007db2:	b7e9                	j	23007d7c <quorem+0xf0>
23007db4:	4501                	li	a0,0
23007db6:	b7e1                	j	23007d7e <quorem+0xf2>

23007db8 <_dtoa_r>:
23007db8:	7135                	addi	sp,sp,-160
23007dba:	dc3e                	sw	a5,56(sp)
23007dbc:	515c                	lw	a5,36(a0)
23007dbe:	cd22                	sw	s0,152(sp)
23007dc0:	cb26                	sw	s1,148(sp)
23007dc2:	c94a                	sw	s2,144(sp)
23007dc4:	c74e                	sw	s3,140(sp)
23007dc6:	c356                	sw	s5,132(sp)
23007dc8:	c15a                	sw	s6,128(sp)
23007dca:	cf06                	sw	ra,156(sp)
23007dcc:	c552                	sw	s4,136(sp)
23007dce:	dede                	sw	s7,124(sp)
23007dd0:	dce2                	sw	s8,120(sp)
23007dd2:	dae6                	sw	s9,116(sp)
23007dd4:	d8ea                	sw	s10,112(sp)
23007dd6:	d6ee                	sw	s11,108(sp)
23007dd8:	ca36                	sw	a3,20(sp)
23007dda:	d03a                	sw	a4,32(sp)
23007ddc:	d246                	sw	a7,36(sp)
23007dde:	84aa                	mv	s1,a0
23007de0:	8aae                	mv	s5,a1
23007de2:	8432                	mv	s0,a2
23007de4:	8942                	mv	s2,a6
23007de6:	89ae                	mv	s3,a1
23007de8:	8b32                	mv	s6,a2
23007dea:	eb9d                	bnez	a5,23007e20 <_dtoa_r+0x68>
23007dec:	4541                	li	a0,16
23007dee:	84cff0ef          	jal	ra,23006e3a <malloc>
23007df2:	d0c8                	sw	a0,36(s1)
23007df4:	ed11                	bnez	a0,23007e10 <_dtoa_r+0x58>
23007df6:	00005697          	auipc	a3,0x5
23007dfa:	bb268693          	addi	a3,a3,-1102 # 2300c9a8 <dma_channel_base+0xc4>
23007dfe:	4601                	li	a2,0
23007e00:	0ea00593          	li	a1,234
23007e04:	00005517          	auipc	a0,0x5
23007e08:	bbc50513          	addi	a0,a0,-1092 # 2300c9c0 <dma_channel_base+0xdc>
23007e0c:	130020ef          	jal	ra,23009f3c <__assert_func>
23007e10:	00052223          	sw	zero,4(a0)
23007e14:	00052423          	sw	zero,8(a0)
23007e18:	00052023          	sw	zero,0(a0)
23007e1c:	00052623          	sw	zero,12(a0)
23007e20:	50dc                	lw	a5,36(s1)
23007e22:	438c                	lw	a1,0(a5)
23007e24:	cd89                	beqz	a1,23007e3e <_dtoa_r+0x86>
23007e26:	43d8                	lw	a4,4(a5)
23007e28:	4785                	li	a5,1
23007e2a:	8526                	mv	a0,s1
23007e2c:	00e797b3          	sll	a5,a5,a4
23007e30:	c59c                	sw	a5,8(a1)
23007e32:	c1d8                	sw	a4,4(a1)
23007e34:	1c4010ef          	jal	ra,23008ff8 <_Bfree>
23007e38:	50dc                	lw	a5,36(s1)
23007e3a:	0007a023          	sw	zero,0(a5)
23007e3e:	04045263          	bgez	s0,23007e82 <_dtoa_r+0xca>
23007e42:	4785                	li	a5,1
23007e44:	0406                	slli	s0,s0,0x1
23007e46:	00f92023          	sw	a5,0(s2)
23007e4a:	00145b13          	srli	s6,s0,0x1
23007e4e:	7ff007b7          	lui	a5,0x7ff00
23007e52:	00fb7733          	and	a4,s6,a5
23007e56:	06f71463          	bne	a4,a5,23007ebe <_dtoa_r+0x106>
23007e5a:	5762                	lw	a4,56(sp)
23007e5c:	6789                	lui	a5,0x2
23007e5e:	0b32                	slli	s6,s6,0xc
23007e60:	70f78793          	addi	a5,a5,1807 # 270f <StackSize+0x170f>
23007e64:	00cb5b13          	srli	s6,s6,0xc
23007e68:	c31c                	sw	a5,0(a4)
23007e6a:	015b6ab3          	or	s5,s6,s5
23007e6e:	340a82e3          	beqz	s5,230089b2 <_dtoa_r+0xbfa>
23007e72:	5792                	lw	a5,36(sp)
23007e74:	eb91                	bnez	a5,23007e88 <_dtoa_r+0xd0>
23007e76:	00005797          	auipc	a5,0x5
23007e7a:	b2e78793          	addi	a5,a5,-1234 # 2300c9a4 <dma_channel_base+0xc0>
23007e7e:	c63e                	sw	a5,12(sp)
23007e80:	a839                	j	23007e9e <_dtoa_r+0xe6>
23007e82:	00092023          	sw	zero,0(s2)
23007e86:	b7e1                	j	23007e4e <_dtoa_r+0x96>
23007e88:	00005797          	auipc	a5,0x5
23007e8c:	b1c78793          	addi	a5,a5,-1252 # 2300c9a4 <dma_channel_base+0xc0>
23007e90:	c63e                	sw	a5,12(sp)
23007e92:	00005797          	auipc	a5,0x5
23007e96:	b1578793          	addi	a5,a5,-1259 # 2300c9a7 <dma_channel_base+0xc3>
23007e9a:	5712                	lw	a4,36(sp)
23007e9c:	c31c                	sw	a5,0(a4)
23007e9e:	40fa                	lw	ra,156(sp)
23007ea0:	446a                	lw	s0,152(sp)
23007ea2:	4532                	lw	a0,12(sp)
23007ea4:	44da                	lw	s1,148(sp)
23007ea6:	494a                	lw	s2,144(sp)
23007ea8:	49ba                	lw	s3,140(sp)
23007eaa:	4a2a                	lw	s4,136(sp)
23007eac:	4a9a                	lw	s5,132(sp)
23007eae:	4b0a                	lw	s6,128(sp)
23007eb0:	5bf6                	lw	s7,124(sp)
23007eb2:	5c66                	lw	s8,120(sp)
23007eb4:	5cd6                	lw	s9,116(sp)
23007eb6:	5d46                	lw	s10,112(sp)
23007eb8:	5db6                	lw	s11,108(sp)
23007eba:	610d                	addi	sp,sp,160
23007ebc:	8082                	ret
23007ebe:	4601                	li	a2,0
23007ec0:	4681                	li	a3,0
23007ec2:	8556                	mv	a0,s5
23007ec4:	85da                	mv	a1,s6
23007ec6:	d656                	sw	s5,44(sp)
23007ec8:	d85a                	sw	s6,48(sp)
23007eca:	f32f90ef          	jal	ra,230015fc <__eqdf2>
23007ece:	e105                	bnez	a0,23007eee <_dtoa_r+0x136>
23007ed0:	5762                	lw	a4,56(sp)
23007ed2:	4785                	li	a5,1
23007ed4:	c31c                	sw	a5,0(a4)
23007ed6:	00005797          	auipc	a5,0x5
23007eda:	a3e78793          	addi	a5,a5,-1474 # 2300c914 <dma_channel_base+0x30>
23007ede:	c63e                	sw	a5,12(sp)
23007ee0:	5792                	lw	a5,36(sp)
23007ee2:	dfd5                	beqz	a5,23007e9e <_dtoa_r+0xe6>
23007ee4:	00005797          	auipc	a5,0x5
23007ee8:	a3178793          	addi	a5,a5,-1487 # 2300c915 <dma_channel_base+0x31>
23007eec:	b77d                	j	23007e9a <_dtoa_r+0xe2>
23007eee:	08b8                	addi	a4,sp,88
23007ef0:	08f4                	addi	a3,sp,92
23007ef2:	865a                	mv	a2,s6
23007ef4:	85d6                	mv	a1,s5
23007ef6:	8526                	mv	a0,s1
23007ef8:	014b5913          	srli	s2,s6,0x14
23007efc:	7f8010ef          	jal	ra,230096f4 <__d2b>
23007f00:	7ff97913          	andi	s2,s2,2047
23007f04:	4a66                	lw	s4,88(sp)
23007f06:	842a                	mv	s0,a0
23007f08:	12090663          	beqz	s2,23008034 <_dtoa_r+0x27c>
23007f0c:	57c2                	lw	a5,48(sp)
23007f0e:	5532                	lw	a0,44(sp)
23007f10:	c0190913          	addi	s2,s2,-1023
23007f14:	00c79593          	slli	a1,a5,0xc
23007f18:	81b1                	srli	a1,a1,0xc
23007f1a:	3ff007b7          	lui	a5,0x3ff00
23007f1e:	8ddd                	or	a1,a1,a5
23007f20:	c082                	sw	zero,64(sp)
23007f22:	00005797          	auipc	a5,0x5
23007f26:	52678793          	addi	a5,a5,1318 # 2300d448 <CSWTCH.20+0xc>
23007f2a:	4390                	lw	a2,0(a5)
23007f2c:	43d4                	lw	a3,4(a5)
23007f2e:	e6bf90ef          	jal	ra,23001d98 <__subdf3>
23007f32:	00005797          	auipc	a5,0x5
23007f36:	51e78793          	addi	a5,a5,1310 # 2300d450 <CSWTCH.20+0x14>
23007f3a:	4390                	lw	a2,0(a5)
23007f3c:	43d4                	lw	a3,4(a5)
23007f3e:	8bff90ef          	jal	ra,230017fc <__muldf3>
23007f42:	00005797          	auipc	a5,0x5
23007f46:	51678793          	addi	a5,a5,1302 # 2300d458 <CSWTCH.20+0x1c>
23007f4a:	4390                	lw	a2,0(a5)
23007f4c:	43d4                	lw	a3,4(a5)
23007f4e:	f7af80ef          	jal	ra,230006c8 <__adddf3>
23007f52:	8baa                	mv	s7,a0
23007f54:	854a                	mv	a0,s2
23007f56:	8aae                	mv	s5,a1
23007f58:	833fa0ef          	jal	ra,2300278a <__floatsidf>
23007f5c:	00005797          	auipc	a5,0x5
23007f60:	50478793          	addi	a5,a5,1284 # 2300d460 <CSWTCH.20+0x24>
23007f64:	4390                	lw	a2,0(a5)
23007f66:	43d4                	lw	a3,4(a5)
23007f68:	895f90ef          	jal	ra,230017fc <__muldf3>
23007f6c:	862a                	mv	a2,a0
23007f6e:	86ae                	mv	a3,a1
23007f70:	855e                	mv	a0,s7
23007f72:	85d6                	mv	a1,s5
23007f74:	f54f80ef          	jal	ra,230006c8 <__adddf3>
23007f78:	8baa                	mv	s7,a0
23007f7a:	8aae                	mv	s5,a1
23007f7c:	f4afa0ef          	jal	ra,230026c6 <__fixdfsi>
23007f80:	8daa                	mv	s11,a0
23007f82:	4601                	li	a2,0
23007f84:	4681                	li	a3,0
23007f86:	855e                	mv	a0,s7
23007f88:	85d6                	mv	a1,s5
23007f8a:	fc4f90ef          	jal	ra,2300174e <__ledf2>
23007f8e:	00055b63          	bgez	a0,23007fa4 <_dtoa_r+0x1ec>
23007f92:	856e                	mv	a0,s11
23007f94:	ff6fa0ef          	jal	ra,2300278a <__floatsidf>
23007f98:	865e                	mv	a2,s7
23007f9a:	86d6                	mv	a3,s5
23007f9c:	e60f90ef          	jal	ra,230015fc <__eqdf2>
23007fa0:	c111                	beqz	a0,23007fa4 <_dtoa_r+0x1ec>
23007fa2:	1dfd                	addi	s11,s11,-1
23007fa4:	4705                	li	a4,1
23007fa6:	47d9                	li	a5,22
23007fa8:	da3a                	sw	a4,52(sp)
23007faa:	03b7e363          	bltu	a5,s11,23007fd0 <_dtoa_r+0x218>
23007fae:	003d9713          	slli	a4,s11,0x3
23007fb2:	00005797          	auipc	a5,0x5
23007fb6:	c2e78793          	addi	a5,a5,-978 # 2300cbe0 <__mprec_tens>
23007fba:	97ba                	add	a5,a5,a4
23007fbc:	4390                	lw	a2,0(a5)
23007fbe:	43d4                	lw	a3,4(a5)
23007fc0:	5532                	lw	a0,44(sp)
23007fc2:	55c2                	lw	a1,48(sp)
23007fc4:	f8af90ef          	jal	ra,2300174e <__ledf2>
23007fc8:	00055363          	bgez	a0,23007fce <_dtoa_r+0x216>
23007fcc:	1dfd                	addi	s11,s11,-1
23007fce:	da02                	sw	zero,52(sp)
23007fd0:	412a0933          	sub	s2,s4,s2
23007fd4:	fff90c13          	addi	s8,s2,-1
23007fd8:	4b81                	li	s7,0
23007fda:	000c5663          	bgez	s8,23007fe6 <_dtoa_r+0x22e>
23007fde:	4b85                	li	s7,1
23007fe0:	412b8bb3          	sub	s7,s7,s2
23007fe4:	4c01                	li	s8,0
23007fe6:	080dc863          	bltz	s11,23008076 <_dtoa_r+0x2be>
23007fea:	9c6e                	add	s8,s8,s11
23007fec:	d46e                	sw	s11,40(sp)
23007fee:	4c81                	li	s9,0
23007ff0:	4752                	lw	a4,20(sp)
23007ff2:	47a5                	li	a5,9
23007ff4:	0ee7e563          	bltu	a5,a4,230080de <_dtoa_r+0x326>
23007ff8:	4795                	li	a5,5
23007ffa:	4905                	li	s2,1
23007ffc:	00e7d663          	bge	a5,a4,23008008 <_dtoa_r+0x250>
23008000:	ffc70793          	addi	a5,a4,-4
23008004:	ca3e                	sw	a5,20(sp)
23008006:	4901                	li	s2,0
23008008:	4752                	lw	a4,20(sp)
2300800a:	4791                	li	a5,4
2300800c:	06f70b63          	beq	a4,a5,23008082 <_dtoa_r+0x2ca>
23008010:	4795                	li	a5,5
23008012:	0af70a63          	beq	a4,a5,230080c6 <_dtoa_r+0x30e>
23008016:	4789                	li	a5,2
23008018:	0af70563          	beq	a4,a5,230080c2 <_dtoa_r+0x30a>
2300801c:	478d                	li	a5,3
2300801e:	ce02                	sw	zero,28(sp)
23008020:	0af70563          	beq	a4,a5,230080ca <_dtoa_r+0x312>
23008024:	4785                	li	a5,1
23008026:	ce3e                	sw	a5,28(sp)
23008028:	57fd                	li	a5,-1
2300802a:	c83e                	sw	a5,16(sp)
2300802c:	5d7d                	li	s10,-1
2300802e:	47c9                	li	a5,18
23008030:	d002                	sw	zero,32(sp)
23008032:	a095                	j	23008096 <_dtoa_r+0x2de>
23008034:	4976                	lw	s2,92(sp)
23008036:	02000793          	li	a5,32
2300803a:	9952                	add	s2,s2,s4
2300803c:	43290593          	addi	a1,s2,1074
23008040:	02b7d663          	bge	a5,a1,2300806c <_dtoa_r+0x2b4>
23008044:	04000513          	li	a0,64
23008048:	8d0d                	sub	a0,a0,a1
2300804a:	41290593          	addi	a1,s2,1042
2300804e:	00ab1533          	sll	a0,s6,a0
23008052:	00badab3          	srl	s5,s5,a1
23008056:	01556533          	or	a0,a0,s5
2300805a:	f96fa0ef          	jal	ra,230027f0 <__floatunsidf>
2300805e:	fe1007b7          	lui	a5,0xfe100
23008062:	95be                	add	a1,a1,a5
23008064:	4785                	li	a5,1
23008066:	197d                	addi	s2,s2,-1
23008068:	c0be                	sw	a5,64(sp)
2300806a:	bd65                	j	23007f22 <_dtoa_r+0x16a>
2300806c:	40b78533          	sub	a0,a5,a1
23008070:	00aa9533          	sll	a0,s5,a0
23008074:	b7dd                	j	2300805a <_dtoa_r+0x2a2>
23008076:	41bb8bb3          	sub	s7,s7,s11
2300807a:	41b00cb3          	neg	s9,s11
2300807e:	d402                	sw	zero,40(sp)
23008080:	bf85                	j	23007ff0 <_dtoa_r+0x238>
23008082:	4785                	li	a5,1
23008084:	ce3e                	sw	a5,28(sp)
23008086:	5782                	lw	a5,32(sp)
23008088:	04f04e63          	bgtz	a5,230080e4 <_dtoa_r+0x32c>
2300808c:	4785                	li	a5,1
2300808e:	4705                	li	a4,1
23008090:	c83e                	sw	a5,16(sp)
23008092:	4d05                	li	s10,1
23008094:	d03a                	sw	a4,32(sp)
23008096:	50d4                	lw	a3,36(s1)
23008098:	4711                	li	a4,4
2300809a:	0006a223          	sw	zero,4(a3)
2300809e:	01470613          	addi	a2,a4,20
230080a2:	42cc                	lw	a1,4(a3)
230080a4:	04c7f463          	bgeu	a5,a2,230080ec <_dtoa_r+0x334>
230080a8:	8526                	mv	a0,s1
230080aa:	6a1000ef          	jal	ra,23008f4a <_Balloc>
230080ae:	c62a                	sw	a0,12(sp)
230080b0:	e131                	bnez	a0,230080f4 <_dtoa_r+0x33c>
230080b2:	00005697          	auipc	a3,0x5
230080b6:	9c668693          	addi	a3,a3,-1594 # 2300ca78 <dma_channel_base+0x194>
230080ba:	4601                	li	a2,0
230080bc:	1aa00593          	li	a1,426
230080c0:	b391                	j	23007e04 <_dtoa_r+0x4c>
230080c2:	ce02                	sw	zero,28(sp)
230080c4:	b7c9                	j	23008086 <_dtoa_r+0x2ce>
230080c6:	4785                	li	a5,1
230080c8:	ce3e                	sw	a5,28(sp)
230080ca:	5782                	lw	a5,32(sp)
230080cc:	97ee                	add	a5,a5,s11
230080ce:	c83e                	sw	a5,16(sp)
230080d0:	00178d13          	addi	s10,a5,1 # fe100001 <__HeapLimit+0xbc0d0001>
230080d4:	87ea                	mv	a5,s10
230080d6:	fda040e3          	bgtz	s10,23008096 <_dtoa_r+0x2de>
230080da:	4785                	li	a5,1
230080dc:	bf6d                	j	23008096 <_dtoa_r+0x2de>
230080de:	4905                	li	s2,1
230080e0:	ca02                	sw	zero,20(sp)
230080e2:	b789                	j	23008024 <_dtoa_r+0x26c>
230080e4:	5782                	lw	a5,32(sp)
230080e6:	c83e                	sw	a5,16(sp)
230080e8:	8d3e                	mv	s10,a5
230080ea:	b775                	j	23008096 <_dtoa_r+0x2de>
230080ec:	0585                	addi	a1,a1,1
230080ee:	c2cc                	sw	a1,4(a3)
230080f0:	0706                	slli	a4,a4,0x1
230080f2:	b775                	j	2300809e <_dtoa_r+0x2e6>
230080f4:	50dc                	lw	a5,36(s1)
230080f6:	4732                	lw	a4,12(sp)
230080f8:	c398                	sw	a4,0(a5)
230080fa:	47b9                	li	a5,14
230080fc:	13a7e863          	bltu	a5,s10,2300822c <_dtoa_r+0x474>
23008100:	12090663          	beqz	s2,2300822c <_dtoa_r+0x474>
23008104:	1bb05a63          	blez	s11,230082b8 <_dtoa_r+0x500>
23008108:	00fdf713          	andi	a4,s11,15
2300810c:	00371793          	slli	a5,a4,0x3
23008110:	00005717          	auipc	a4,0x5
23008114:	ad070713          	addi	a4,a4,-1328 # 2300cbe0 <__mprec_tens>
23008118:	973e                	add	a4,a4,a5
2300811a:	404dd913          	srai	s2,s11,0x4
2300811e:	431c                	lw	a5,0(a4)
23008120:	00472a83          	lw	s5,4(a4)
23008124:	01097713          	andi	a4,s2,16
23008128:	4a09                	li	s4,2
2300812a:	c315                	beqz	a4,2300814e <_dtoa_r+0x396>
2300812c:	00005717          	auipc	a4,0x5
23008130:	a8c70713          	addi	a4,a4,-1396 # 2300cbb8 <__mprec_bigtens>
23008134:	5310                	lw	a2,32(a4)
23008136:	5354                	lw	a3,36(a4)
23008138:	5532                	lw	a0,44(sp)
2300813a:	55c2                	lw	a1,48(sp)
2300813c:	cc3e                	sw	a5,24(sp)
2300813e:	00f97913          	andi	s2,s2,15
23008142:	e31f80ef          	jal	ra,23000f72 <__divdf3>
23008146:	47e2                	lw	a5,24(sp)
23008148:	89aa                	mv	s3,a0
2300814a:	8b2e                	mv	s6,a1
2300814c:	4a0d                	li	s4,3
2300814e:	00005717          	auipc	a4,0x5
23008152:	a6a70713          	addi	a4,a4,-1430 # 2300cbb8 <__mprec_bigtens>
23008156:	12091f63          	bnez	s2,23008294 <_dtoa_r+0x4dc>
2300815a:	854e                	mv	a0,s3
2300815c:	863e                	mv	a2,a5
2300815e:	86d6                	mv	a3,s5
23008160:	85da                	mv	a1,s6
23008162:	e11f80ef          	jal	ra,23000f72 <__divdf3>
23008166:	89aa                	mv	s3,a0
23008168:	8b2e                	mv	s6,a1
2300816a:	57d2                	lw	a5,52(sp)
2300816c:	1a078b63          	beqz	a5,23008322 <_dtoa_r+0x56a>
23008170:	00005797          	auipc	a5,0x5
23008174:	2f878793          	addi	a5,a5,760 # 2300d468 <CSWTCH.20+0x2c>
23008178:	4390                	lw	a2,0(a5)
2300817a:	43d4                	lw	a3,4(a5)
2300817c:	854e                	mv	a0,s3
2300817e:	85da                	mv	a1,s6
23008180:	dcef90ef          	jal	ra,2300174e <__ledf2>
23008184:	18055f63          	bgez	a0,23008322 <_dtoa_r+0x56a>
23008188:	1a0d0063          	beqz	s10,23008328 <_dtoa_r+0x570>
2300818c:	47c2                	lw	a5,16(sp)
2300818e:	08f05d63          	blez	a5,23008228 <_dtoa_r+0x470>
23008192:	fffd8793          	addi	a5,s11,-1
23008196:	cc3e                	sw	a5,24(sp)
23008198:	00005797          	auipc	a5,0x5
2300819c:	2d878793          	addi	a5,a5,728 # 2300d470 <CSWTCH.20+0x34>
230081a0:	4390                	lw	a2,0(a5)
230081a2:	43d4                	lw	a3,4(a5)
230081a4:	854e                	mv	a0,s3
230081a6:	85da                	mv	a1,s6
230081a8:	e54f90ef          	jal	ra,230017fc <__muldf3>
230081ac:	4842                	lw	a6,16(sp)
230081ae:	89aa                	mv	s3,a0
230081b0:	8b2e                	mv	s6,a1
230081b2:	0a05                	addi	s4,s4,1
230081b4:	8552                	mv	a0,s4
230081b6:	c4c2                	sw	a6,72(sp)
230081b8:	de5a                	sw	s6,60(sp)
230081ba:	c2ce                	sw	s3,68(sp)
230081bc:	dcefa0ef          	jal	ra,2300278a <__floatsidf>
230081c0:	86da                	mv	a3,s6
230081c2:	864e                	mv	a2,s3
230081c4:	e38f90ef          	jal	ra,230017fc <__muldf3>
230081c8:	00005697          	auipc	a3,0x5
230081cc:	2b068693          	addi	a3,a3,688 # 2300d478 <CSWTCH.20+0x3c>
230081d0:	4290                	lw	a2,0(a3)
230081d2:	42d4                	lw	a3,4(a3)
230081d4:	895a                	mv	s2,s6
230081d6:	8ace                	mv	s5,s3
230081d8:	cf0f80ef          	jal	ra,230006c8 <__adddf3>
230081dc:	4826                	lw	a6,72(sp)
230081de:	fcc008b7          	lui	a7,0xfcc00
230081e2:	8b2a                	mv	s6,a0
230081e4:	00b88a33          	add	s4,a7,a1
230081e8:	14081363          	bnez	a6,2300832e <_dtoa_r+0x576>
230081ec:	00005697          	auipc	a3,0x5
230081f0:	29468693          	addi	a3,a3,660 # 2300d480 <CSWTCH.20+0x44>
230081f4:	4290                	lw	a2,0(a3)
230081f6:	42d4                	lw	a3,4(a3)
230081f8:	854e                	mv	a0,s3
230081fa:	85ca                	mv	a1,s2
230081fc:	b9df90ef          	jal	ra,23001d98 <__subdf3>
23008200:	865a                	mv	a2,s6
23008202:	86d2                	mv	a3,s4
23008204:	89aa                	mv	s3,a0
23008206:	892e                	mv	s2,a1
23008208:	c98f90ef          	jal	ra,230016a0 <__gedf2>
2300820c:	5aa04b63          	bgtz	a0,230087c2 <_dtoa_r+0xa0a>
23008210:	800007b7          	lui	a5,0x80000
23008214:	0147c7b3          	xor	a5,a5,s4
23008218:	865a                	mv	a2,s6
2300821a:	86be                	mv	a3,a5
2300821c:	854e                	mv	a0,s3
2300821e:	85ca                	mv	a1,s2
23008220:	d2ef90ef          	jal	ra,2300174e <__ledf2>
23008224:	58054c63          	bltz	a0,230087bc <_dtoa_r+0xa04>
23008228:	59b2                	lw	s3,44(sp)
2300822a:	5b42                	lw	s6,48(sp)
2300822c:	47f6                	lw	a5,92(sp)
2300822e:	3607c863          	bltz	a5,2300859e <_dtoa_r+0x7e6>
23008232:	4739                	li	a4,14
23008234:	37b74563          	blt	a4,s11,2300859e <_dtoa_r+0x7e6>
23008238:	003d9713          	slli	a4,s11,0x3
2300823c:	00005797          	auipc	a5,0x5
23008240:	9a478793          	addi	a5,a5,-1628 # 2300cbe0 <__mprec_tens>
23008244:	97ba                	add	a5,a5,a4
23008246:	0007aa03          	lw	s4,0(a5)
2300824a:	0047aa83          	lw	s5,4(a5)
2300824e:	5782                	lw	a5,32(sp)
23008250:	2607d163          	bgez	a5,230084b2 <_dtoa_r+0x6fa>
23008254:	25a04f63          	bgtz	s10,230084b2 <_dtoa_r+0x6fa>
23008258:	560d1263          	bnez	s10,230087bc <_dtoa_r+0xa04>
2300825c:	00005797          	auipc	a5,0x5
23008260:	22478793          	addi	a5,a5,548 # 2300d480 <CSWTCH.20+0x44>
23008264:	4390                	lw	a2,0(a5)
23008266:	43d4                	lw	a3,4(a5)
23008268:	8552                	mv	a0,s4
2300826a:	85d6                	mv	a1,s5
2300826c:	d90f90ef          	jal	ra,230017fc <__muldf3>
23008270:	864e                	mv	a2,s3
23008272:	86da                	mv	a3,s6
23008274:	c2cf90ef          	jal	ra,230016a0 <__gedf2>
23008278:	4a01                	li	s4,0
2300827a:	4901                	li	s2,0
2300827c:	50055863          	bgez	a0,2300878c <_dtoa_r+0x9d4>
23008280:	47b2                	lw	a5,12(sp)
23008282:	4732                	lw	a4,12(sp)
23008284:	0d85                	addi	s11,s11,1
23008286:	00178993          	addi	s3,a5,1
2300828a:	03100793          	li	a5,49
2300828e:	00f70023          	sb	a5,0(a4)
23008292:	a309                	j	23008794 <_dtoa_r+0x9dc>
23008294:	00197693          	andi	a3,s2,1
23008298:	ce81                	beqz	a3,230082b0 <_dtoa_r+0x4f8>
2300829a:	4310                	lw	a2,0(a4)
2300829c:	4354                	lw	a3,4(a4)
2300829e:	853e                	mv	a0,a5
230082a0:	85d6                	mv	a1,s5
230082a2:	cc3a                	sw	a4,24(sp)
230082a4:	d58f90ef          	jal	ra,230017fc <__muldf3>
230082a8:	4762                	lw	a4,24(sp)
230082aa:	0a05                	addi	s4,s4,1
230082ac:	87aa                	mv	a5,a0
230082ae:	8aae                	mv	s5,a1
230082b0:	40195913          	srai	s2,s2,0x1
230082b4:	0721                	addi	a4,a4,8
230082b6:	b545                	j	23008156 <_dtoa_r+0x39e>
230082b8:	4a09                	li	s4,2
230082ba:	ea0d88e3          	beqz	s11,2300816a <_dtoa_r+0x3b2>
230082be:	41b00933          	neg	s2,s11
230082c2:	00f97793          	andi	a5,s2,15
230082c6:	00379713          	slli	a4,a5,0x3
230082ca:	00005797          	auipc	a5,0x5
230082ce:	91678793          	addi	a5,a5,-1770 # 2300cbe0 <__mprec_tens>
230082d2:	97ba                	add	a5,a5,a4
230082d4:	4390                	lw	a2,0(a5)
230082d6:	43d4                	lw	a3,4(a5)
230082d8:	5532                	lw	a0,44(sp)
230082da:	55c2                	lw	a1,48(sp)
230082dc:	40495913          	srai	s2,s2,0x4
230082e0:	00005a97          	auipc	s5,0x5
230082e4:	8d8a8a93          	addi	s5,s5,-1832 # 2300cbb8 <__mprec_bigtens>
230082e8:	d14f90ef          	jal	ra,230017fc <__muldf3>
230082ec:	87aa                	mv	a5,a0
230082ee:	89aa                	mv	s3,a0
230082f0:	8b2e                	mv	s6,a1
230082f2:	4701                	li	a4,0
230082f4:	00091663          	bnez	s2,23008300 <_dtoa_r+0x548>
230082f8:	e60709e3          	beqz	a4,2300816a <_dtoa_r+0x3b2>
230082fc:	89be                	mv	s3,a5
230082fe:	b5ad                	j	23008168 <_dtoa_r+0x3b0>
23008300:	00197693          	andi	a3,s2,1
23008304:	ca99                	beqz	a3,2300831a <_dtoa_r+0x562>
23008306:	000aa603          	lw	a2,0(s5)
2300830a:	004aa683          	lw	a3,4(s5)
2300830e:	853e                	mv	a0,a5
23008310:	0a05                	addi	s4,s4,1
23008312:	ceaf90ef          	jal	ra,230017fc <__muldf3>
23008316:	87aa                	mv	a5,a0
23008318:	4705                	li	a4,1
2300831a:	40195913          	srai	s2,s2,0x1
2300831e:	0aa1                	addi	s5,s5,8
23008320:	bfd1                	j	230082f4 <_dtoa_r+0x53c>
23008322:	cc6e                	sw	s11,24(sp)
23008324:	886a                	mv	a6,s10
23008326:	b579                	j	230081b4 <_dtoa_r+0x3fc>
23008328:	cc6e                	sw	s11,24(sp)
2300832a:	4801                	li	a6,0
2300832c:	b561                	j	230081b4 <_dtoa_r+0x3fc>
2300832e:	fff80793          	addi	a5,a6,-1
23008332:	00379713          	slli	a4,a5,0x3
23008336:	00005797          	auipc	a5,0x5
2300833a:	8aa78793          	addi	a5,a5,-1878 # 2300cbe0 <__mprec_tens>
2300833e:	97ba                	add	a5,a5,a4
23008340:	4390                	lw	a2,0(a5)
23008342:	43d4                	lw	a3,4(a5)
23008344:	47b2                	lw	a5,12(sp)
23008346:	97c2                	add	a5,a5,a6
23008348:	de3e                	sw	a5,60(sp)
2300834a:	47f2                	lw	a5,28(sp)
2300834c:	cbc5                	beqz	a5,230083fc <_dtoa_r+0x644>
2300834e:	00005797          	auipc	a5,0x5
23008352:	13a78793          	addi	a5,a5,314 # 2300d488 <CSWTCH.20+0x4c>
23008356:	43cc                	lw	a1,4(a5)
23008358:	c2aa                	sw	a0,68(sp)
2300835a:	4388                	lw	a0,0(a5)
2300835c:	c17f80ef          	jal	ra,23000f72 <__divdf3>
23008360:	865a                	mv	a2,s6
23008362:	86d2                	mv	a3,s4
23008364:	a35f90ef          	jal	ra,23001d98 <__subdf3>
23008368:	49b2                	lw	s3,12(sp)
2300836a:	8a2a                	mv	s4,a0
2300836c:	8b2e                	mv	s6,a1
2300836e:	85ca                	mv	a1,s2
23008370:	8556                	mv	a0,s5
23008372:	b54fa0ef          	jal	ra,230026c6 <__fixdfsi>
23008376:	c2aa                	sw	a0,68(sp)
23008378:	c12fa0ef          	jal	ra,2300278a <__floatsidf>
2300837c:	862a                	mv	a2,a0
2300837e:	86ae                	mv	a3,a1
23008380:	8556                	mv	a0,s5
23008382:	85ca                	mv	a1,s2
23008384:	a15f90ef          	jal	ra,23001d98 <__subdf3>
23008388:	4796                	lw	a5,68(sp)
2300838a:	0985                	addi	s3,s3,1
2300838c:	8652                	mv	a2,s4
2300838e:	03078793          	addi	a5,a5,48
23008392:	fef98fa3          	sb	a5,-1(s3)
23008396:	86da                	mv	a3,s6
23008398:	892a                	mv	s2,a0
2300839a:	8aae                	mv	s5,a1
2300839c:	bb2f90ef          	jal	ra,2300174e <__ledf2>
230083a0:	0e054c63          	bltz	a0,23008498 <_dtoa_r+0x6e0>
230083a4:	00005797          	auipc	a5,0x5
230083a8:	0c478793          	addi	a5,a5,196 # 2300d468 <CSWTCH.20+0x2c>
230083ac:	4388                	lw	a0,0(a5)
230083ae:	43cc                	lw	a1,4(a5)
230083b0:	864a                	mv	a2,s2
230083b2:	86d6                	mv	a3,s5
230083b4:	9e5f90ef          	jal	ra,23001d98 <__subdf3>
230083b8:	8652                	mv	a2,s4
230083ba:	86da                	mv	a3,s6
230083bc:	b92f90ef          	jal	ra,2300174e <__ledf2>
230083c0:	18054763          	bltz	a0,2300854e <_dtoa_r+0x796>
230083c4:	57f2                	lw	a5,60(sp)
230083c6:	e6f981e3          	beq	s3,a5,23008228 <_dtoa_r+0x470>
230083ca:	00005797          	auipc	a5,0x5
230083ce:	0a678793          	addi	a5,a5,166 # 2300d470 <CSWTCH.20+0x34>
230083d2:	4390                	lw	a2,0(a5)
230083d4:	43d4                	lw	a3,4(a5)
230083d6:	8552                	mv	a0,s4
230083d8:	85da                	mv	a1,s6
230083da:	c22f90ef          	jal	ra,230017fc <__muldf3>
230083de:	00005797          	auipc	a5,0x5
230083e2:	09278793          	addi	a5,a5,146 # 2300d470 <CSWTCH.20+0x34>
230083e6:	4390                	lw	a2,0(a5)
230083e8:	43d4                	lw	a3,4(a5)
230083ea:	8a2a                	mv	s4,a0
230083ec:	8b2e                	mv	s6,a1
230083ee:	854a                	mv	a0,s2
230083f0:	85d6                	mv	a1,s5
230083f2:	c0af90ef          	jal	ra,230017fc <__muldf3>
230083f6:	8aaa                	mv	s5,a0
230083f8:	892e                	mv	s2,a1
230083fa:	bf95                	j	2300836e <_dtoa_r+0x5b6>
230083fc:	85d2                	mv	a1,s4
230083fe:	bfef90ef          	jal	ra,230017fc <__muldf3>
23008402:	57f2                	lw	a5,60(sp)
23008404:	49b2                	lw	s3,12(sp)
23008406:	c4aa                	sw	a0,72(sp)
23008408:	8b2e                	mv	s6,a1
2300840a:	c2be                	sw	a5,68(sp)
2300840c:	85ca                	mv	a1,s2
2300840e:	8556                	mv	a0,s5
23008410:	ab6fa0ef          	jal	ra,230026c6 <__fixdfsi>
23008414:	c6aa                	sw	a0,76(sp)
23008416:	b74fa0ef          	jal	ra,2300278a <__floatsidf>
2300841a:	862a                	mv	a2,a0
2300841c:	86ae                	mv	a3,a1
2300841e:	8556                	mv	a0,s5
23008420:	85ca                	mv	a1,s2
23008422:	977f90ef          	jal	ra,23001d98 <__subdf3>
23008426:	47b6                	lw	a5,76(sp)
23008428:	0985                	addi	s3,s3,1
2300842a:	8a2a                	mv	s4,a0
2300842c:	03078793          	addi	a5,a5,48
23008430:	fef98fa3          	sb	a5,-1(s3)
23008434:	57f2                	lw	a5,60(sp)
23008436:	892e                	mv	s2,a1
23008438:	06f99263          	bne	s3,a5,2300849c <_dtoa_r+0x6e4>
2300843c:	00005a97          	auipc	s5,0x5
23008440:	04ca8a93          	addi	s5,s5,76 # 2300d488 <CSWTCH.20+0x4c>
23008444:	000aa603          	lw	a2,0(s5)
23008448:	004aa683          	lw	a3,4(s5)
2300844c:	4526                	lw	a0,72(sp)
2300844e:	85da                	mv	a1,s6
23008450:	a78f80ef          	jal	ra,230006c8 <__adddf3>
23008454:	862a                	mv	a2,a0
23008456:	86ae                	mv	a3,a1
23008458:	8552                	mv	a0,s4
2300845a:	85ca                	mv	a1,s2
2300845c:	a44f90ef          	jal	ra,230016a0 <__gedf2>
23008460:	0ea04763          	bgtz	a0,2300854e <_dtoa_r+0x796>
23008464:	4626                	lw	a2,72(sp)
23008466:	000aa503          	lw	a0,0(s5)
2300846a:	004aa583          	lw	a1,4(s5)
2300846e:	86da                	mv	a3,s6
23008470:	929f90ef          	jal	ra,23001d98 <__subdf3>
23008474:	862a                	mv	a2,a0
23008476:	86ae                	mv	a3,a1
23008478:	8552                	mv	a0,s4
2300847a:	85ca                	mv	a1,s2
2300847c:	ad2f90ef          	jal	ra,2300174e <__ledf2>
23008480:	da0554e3          	bgez	a0,23008228 <_dtoa_r+0x470>
23008484:	03000793          	li	a5,48
23008488:	4996                	lw	s3,68(sp)
2300848a:	fff98713          	addi	a4,s3,-1
2300848e:	c2ba                	sw	a4,68(sp)
23008490:	fff9c703          	lbu	a4,-1(s3)
23008494:	fef70ae3          	beq	a4,a5,23008488 <_dtoa_r+0x6d0>
23008498:	4de2                	lw	s11,24(sp)
2300849a:	a849                	j	2300852c <_dtoa_r+0x774>
2300849c:	00005797          	auipc	a5,0x5
230084a0:	fd478793          	addi	a5,a5,-44 # 2300d470 <CSWTCH.20+0x34>
230084a4:	4390                	lw	a2,0(a5)
230084a6:	43d4                	lw	a3,4(a5)
230084a8:	b54f90ef          	jal	ra,230017fc <__muldf3>
230084ac:	8aaa                	mv	s5,a0
230084ae:	892e                	mv	s2,a1
230084b0:	bfb1                	j	2300840c <_dtoa_r+0x654>
230084b2:	47b2                	lw	a5,12(sp)
230084b4:	8c5a                	mv	s8,s6
230084b6:	8cce                	mv	s9,s3
230084b8:	00178b13          	addi	s6,a5,1
230084bc:	9d3e                	add	s10,s10,a5
230084be:	00005b97          	auipc	s7,0x5
230084c2:	fb2b8b93          	addi	s7,s7,-78 # 2300d470 <CSWTCH.20+0x34>
230084c6:	8652                	mv	a2,s4
230084c8:	86d6                	mv	a3,s5
230084ca:	8566                	mv	a0,s9
230084cc:	85e2                	mv	a1,s8
230084ce:	aa5f80ef          	jal	ra,23000f72 <__divdf3>
230084d2:	9f4fa0ef          	jal	ra,230026c6 <__fixdfsi>
230084d6:	892a                	mv	s2,a0
230084d8:	ab2fa0ef          	jal	ra,2300278a <__floatsidf>
230084dc:	8652                	mv	a2,s4
230084de:	86d6                	mv	a3,s5
230084e0:	b1cf90ef          	jal	ra,230017fc <__muldf3>
230084e4:	86ae                	mv	a3,a1
230084e6:	862a                	mv	a2,a0
230084e8:	85e2                	mv	a1,s8
230084ea:	8566                	mv	a0,s9
230084ec:	8adf90ef          	jal	ra,23001d98 <__subdf3>
230084f0:	03090693          	addi	a3,s2,48
230084f4:	fedb0fa3          	sb	a3,-1(s6)
230084f8:	89da                	mv	s3,s6
230084fa:	096d1363          	bne	s10,s6,23008580 <_dtoa_r+0x7c8>
230084fe:	862a                	mv	a2,a0
23008500:	86ae                	mv	a3,a1
23008502:	9c6f80ef          	jal	ra,230006c8 <__adddf3>
23008506:	8652                	mv	a2,s4
23008508:	86d6                	mv	a3,s5
2300850a:	8baa                	mv	s7,a0
2300850c:	8b2e                	mv	s6,a1
2300850e:	992f90ef          	jal	ra,230016a0 <__gedf2>
23008512:	02a04d63          	bgtz	a0,2300854c <_dtoa_r+0x794>
23008516:	8652                	mv	a2,s4
23008518:	86d6                	mv	a3,s5
2300851a:	855e                	mv	a0,s7
2300851c:	85da                	mv	a1,s6
2300851e:	8def90ef          	jal	ra,230015fc <__eqdf2>
23008522:	e509                	bnez	a0,2300852c <_dtoa_r+0x774>
23008524:	00197913          	andi	s2,s2,1
23008528:	02091263          	bnez	s2,2300854c <_dtoa_r+0x794>
2300852c:	8526                	mv	a0,s1
2300852e:	85a2                	mv	a1,s0
23008530:	2c9000ef          	jal	ra,23008ff8 <_Bfree>
23008534:	57e2                	lw	a5,56(sp)
23008536:	00098023          	sb	zero,0(s3)
2300853a:	001d8513          	addi	a0,s11,1
2300853e:	c388                	sw	a0,0(a5)
23008540:	5792                	lw	a5,36(sp)
23008542:	94078ee3          	beqz	a5,23007e9e <_dtoa_r+0xe6>
23008546:	0137a023          	sw	s3,0(a5)
2300854a:	ba91                	j	23007e9e <_dtoa_r+0xe6>
2300854c:	cc6e                	sw	s11,24(sp)
2300854e:	87ce                	mv	a5,s3
23008550:	03900713          	li	a4,57
23008554:	89be                	mv	s3,a5
23008556:	fff7c683          	lbu	a3,-1(a5)
2300855a:	17fd                	addi	a5,a5,-1
2300855c:	00e69c63          	bne	a3,a4,23008574 <_dtoa_r+0x7bc>
23008560:	46b2                	lw	a3,12(sp)
23008562:	fef699e3          	bne	a3,a5,23008554 <_dtoa_r+0x79c>
23008566:	4762                	lw	a4,24(sp)
23008568:	0705                	addi	a4,a4,1
2300856a:	cc3a                	sw	a4,24(sp)
2300856c:	03000713          	li	a4,48
23008570:	00e68023          	sb	a4,0(a3)
23008574:	0007c703          	lbu	a4,0(a5)
23008578:	0705                	addi	a4,a4,1
2300857a:	00e78023          	sb	a4,0(a5)
2300857e:	bf29                	j	23008498 <_dtoa_r+0x6e0>
23008580:	000ba603          	lw	a2,0(s7)
23008584:	004ba683          	lw	a3,4(s7)
23008588:	0b05                	addi	s6,s6,1
2300858a:	a72f90ef          	jal	ra,230017fc <__muldf3>
2300858e:	4601                	li	a2,0
23008590:	4681                	li	a3,0
23008592:	8caa                	mv	s9,a0
23008594:	8c2e                	mv	s8,a1
23008596:	866f90ef          	jal	ra,230015fc <__eqdf2>
2300859a:	f515                	bnez	a0,230084c6 <_dtoa_r+0x70e>
2300859c:	bf41                	j	2300852c <_dtoa_r+0x774>
2300859e:	4772                	lw	a4,28(sp)
230085a0:	10070063          	beqz	a4,230086a0 <_dtoa_r+0x8e8>
230085a4:	46d2                	lw	a3,20(sp)
230085a6:	4705                	li	a4,1
230085a8:	0cd74563          	blt	a4,a3,23008672 <_dtoa_r+0x8ba>
230085ac:	4706                	lw	a4,64(sp)
230085ae:	43378793          	addi	a5,a5,1075
230085b2:	e709                	bnez	a4,230085bc <_dtoa_r+0x804>
230085b4:	4766                	lw	a4,88(sp)
230085b6:	03600793          	li	a5,54
230085ba:	8f99                	sub	a5,a5,a4
230085bc:	8a66                	mv	s4,s9
230085be:	8ade                	mv	s5,s7
230085c0:	4585                	li	a1,1
230085c2:	8526                	mv	a0,s1
230085c4:	9bbe                	add	s7,s7,a5
230085c6:	9c3e                	add	s8,s8,a5
230085c8:	403000ef          	jal	ra,230091ca <__i2b>
230085cc:	892a                	mv	s2,a0
230085ce:	01505e63          	blez	s5,230085ea <_dtoa_r+0x832>
230085d2:	01805c63          	blez	s8,230085ea <_dtoa_r+0x832>
230085d6:	87d6                	mv	a5,s5
230085d8:	015c5363          	bge	s8,s5,230085de <_dtoa_r+0x826>
230085dc:	87e2                	mv	a5,s8
230085de:	40fb8bb3          	sub	s7,s7,a5
230085e2:	40fa8ab3          	sub	s5,s5,a5
230085e6:	40fc0c33          	sub	s8,s8,a5
230085ea:	040c8163          	beqz	s9,2300862c <_dtoa_r+0x874>
230085ee:	47f2                	lw	a5,28(sp)
230085f0:	cfc5                	beqz	a5,230086a8 <_dtoa_r+0x8f0>
230085f2:	03405463          	blez	s4,2300861a <_dtoa_r+0x862>
230085f6:	85ca                	mv	a1,s2
230085f8:	8652                	mv	a2,s4
230085fa:	8526                	mv	a0,s1
230085fc:	587000ef          	jal	ra,23009382 <__pow5mult>
23008600:	8622                	mv	a2,s0
23008602:	85aa                	mv	a1,a0
23008604:	892a                	mv	s2,a0
23008606:	8526                	mv	a0,s1
23008608:	3fb000ef          	jal	ra,23009202 <__multiply>
2300860c:	cc2a                	sw	a0,24(sp)
2300860e:	85a2                	mv	a1,s0
23008610:	8526                	mv	a0,s1
23008612:	1e7000ef          	jal	ra,23008ff8 <_Bfree>
23008616:	47e2                	lw	a5,24(sp)
23008618:	843e                	mv	s0,a5
2300861a:	414c8633          	sub	a2,s9,s4
2300861e:	014c8763          	beq	s9,s4,2300862c <_dtoa_r+0x874>
23008622:	85a2                	mv	a1,s0
23008624:	8526                	mv	a0,s1
23008626:	55d000ef          	jal	ra,23009382 <__pow5mult>
2300862a:	842a                	mv	s0,a0
2300862c:	4585                	li	a1,1
2300862e:	8526                	mv	a0,s1
23008630:	39b000ef          	jal	ra,230091ca <__i2b>
23008634:	57a2                	lw	a5,40(sp)
23008636:	8a2a                	mv	s4,a0
23008638:	06f05a63          	blez	a5,230086ac <_dtoa_r+0x8f4>
2300863c:	863e                	mv	a2,a5
2300863e:	85aa                	mv	a1,a0
23008640:	8526                	mv	a0,s1
23008642:	541000ef          	jal	ra,23009382 <__pow5mult>
23008646:	4752                	lw	a4,20(sp)
23008648:	4785                	li	a5,1
2300864a:	8a2a                	mv	s4,a0
2300864c:	4c81                	li	s9,0
2300864e:	06e7c763          	blt	a5,a4,230086bc <_dtoa_r+0x904>
23008652:	4c81                	li	s9,0
23008654:	06099163          	bnez	s3,230086b6 <_dtoa_r+0x8fe>
23008658:	00cb1793          	slli	a5,s6,0xc
2300865c:	efa9                	bnez	a5,230086b6 <_dtoa_r+0x8fe>
2300865e:	7ff005b7          	lui	a1,0x7ff00
23008662:	00bb7b33          	and	s6,s6,a1
23008666:	040b0863          	beqz	s6,230086b6 <_dtoa_r+0x8fe>
2300866a:	0b85                	addi	s7,s7,1
2300866c:	0c05                	addi	s8,s8,1
2300866e:	4c85                	li	s9,1
23008670:	a099                	j	230086b6 <_dtoa_r+0x8fe>
23008672:	fffd0a13          	addi	s4,s10,-1
23008676:	014cca63          	blt	s9,s4,2300868a <_dtoa_r+0x8d2>
2300867a:	414c8a33          	sub	s4,s9,s4
2300867e:	000d5e63          	bgez	s10,2300869a <_dtoa_r+0x8e2>
23008682:	41ab8ab3          	sub	s5,s7,s10
23008686:	4781                	li	a5,0
23008688:	bf25                	j	230085c0 <_dtoa_r+0x808>
2300868a:	57a2                	lw	a5,40(sp)
2300868c:	419a0cb3          	sub	s9,s4,s9
23008690:	97e6                	add	a5,a5,s9
23008692:	d43e                	sw	a5,40(sp)
23008694:	8cd2                	mv	s9,s4
23008696:	4a01                	li	s4,0
23008698:	b7dd                	j	2300867e <_dtoa_r+0x8c6>
2300869a:	8ade                	mv	s5,s7
2300869c:	87ea                	mv	a5,s10
2300869e:	b70d                	j	230085c0 <_dtoa_r+0x808>
230086a0:	8a66                	mv	s4,s9
230086a2:	8ade                	mv	s5,s7
230086a4:	4901                	li	s2,0
230086a6:	b725                	j	230085ce <_dtoa_r+0x816>
230086a8:	8666                	mv	a2,s9
230086aa:	bfa5                	j	23008622 <_dtoa_r+0x86a>
230086ac:	4752                	lw	a4,20(sp)
230086ae:	4785                	li	a5,1
230086b0:	4c81                	li	s9,0
230086b2:	fae7d0e3          	bge	a5,a4,23008652 <_dtoa_r+0x89a>
230086b6:	57a2                	lw	a5,40(sp)
230086b8:	4505                	li	a0,1
230086ba:	cf89                	beqz	a5,230086d4 <_dtoa_r+0x91c>
230086bc:	010a2783          	lw	a5,16(s4)
230086c0:	078d                	addi	a5,a5,3
230086c2:	078a                	slli	a5,a5,0x2
230086c4:	97d2                	add	a5,a5,s4
230086c6:	43c8                	lw	a0,4(a5)
230086c8:	253000ef          	jal	ra,2300911a <__hi0bits>
230086cc:	02000793          	li	a5,32
230086d0:	40a78533          	sub	a0,a5,a0
230086d4:	9562                	add	a0,a0,s8
230086d6:	897d                	andi	a0,a0,31
230086d8:	c151                	beqz	a0,2300875c <_dtoa_r+0x9a4>
230086da:	02000793          	li	a5,32
230086de:	8f89                	sub	a5,a5,a0
230086e0:	4711                	li	a4,4
230086e2:	06f75a63          	bge	a4,a5,23008756 <_dtoa_r+0x99e>
230086e6:	47f1                	li	a5,28
230086e8:	40a78533          	sub	a0,a5,a0
230086ec:	9baa                	add	s7,s7,a0
230086ee:	9aaa                	add	s5,s5,a0
230086f0:	9c2a                	add	s8,s8,a0
230086f2:	01705863          	blez	s7,23008702 <_dtoa_r+0x94a>
230086f6:	85a2                	mv	a1,s0
230086f8:	865e                	mv	a2,s7
230086fa:	8526                	mv	a0,s1
230086fc:	561000ef          	jal	ra,2300945c <__lshift>
23008700:	842a                	mv	s0,a0
23008702:	01805863          	blez	s8,23008712 <_dtoa_r+0x95a>
23008706:	85d2                	mv	a1,s4
23008708:	8662                	mv	a2,s8
2300870a:	8526                	mv	a0,s1
2300870c:	551000ef          	jal	ra,2300945c <__lshift>
23008710:	8a2a                	mv	s4,a0
23008712:	57d2                	lw	a5,52(sp)
23008714:	c7b1                	beqz	a5,23008760 <_dtoa_r+0x9a8>
23008716:	85d2                	mv	a1,s4
23008718:	8522                	mv	a0,s0
2300871a:	647000ef          	jal	ra,23009560 <__mcmp>
2300871e:	04055163          	bgez	a0,23008760 <_dtoa_r+0x9a8>
23008722:	85a2                	mv	a1,s0
23008724:	4681                	li	a3,0
23008726:	4629                	li	a2,10
23008728:	8526                	mv	a0,s1
2300872a:	131000ef          	jal	ra,2300905a <__multadd>
2300872e:	47f2                	lw	a5,28(sp)
23008730:	1dfd                	addi	s11,s11,-1
23008732:	842a                	mv	s0,a0
23008734:	28078d63          	beqz	a5,230089ce <_dtoa_r+0xc16>
23008738:	85ca                	mv	a1,s2
2300873a:	4681                	li	a3,0
2300873c:	4629                	li	a2,10
2300873e:	8526                	mv	a0,s1
23008740:	11b000ef          	jal	ra,2300905a <__multadd>
23008744:	47c2                	lw	a5,16(sp)
23008746:	892a                	mv	s2,a0
23008748:	08f04563          	bgtz	a5,230087d2 <_dtoa_r+0xa1a>
2300874c:	4752                	lw	a4,20(sp)
2300874e:	4789                	li	a5,2
23008750:	00e7cf63          	blt	a5,a4,2300876e <_dtoa_r+0x9b6>
23008754:	a8bd                	j	230087d2 <_dtoa_r+0xa1a>
23008756:	f8e78ee3          	beq	a5,a4,230086f2 <_dtoa_r+0x93a>
2300875a:	853e                	mv	a0,a5
2300875c:	0571                	addi	a0,a0,28
2300875e:	b779                	j	230086ec <_dtoa_r+0x934>
23008760:	07a04563          	bgtz	s10,230087ca <_dtoa_r+0xa12>
23008764:	4752                	lw	a4,20(sp)
23008766:	4789                	li	a5,2
23008768:	06e7d163          	bge	a5,a4,230087ca <_dtoa_r+0xa12>
2300876c:	c86a                	sw	s10,16(sp)
2300876e:	47c2                	lw	a5,16(sp)
23008770:	ef91                	bnez	a5,2300878c <_dtoa_r+0x9d4>
23008772:	85d2                	mv	a1,s4
23008774:	4681                	li	a3,0
23008776:	4615                	li	a2,5
23008778:	8526                	mv	a0,s1
2300877a:	0e1000ef          	jal	ra,2300905a <__multadd>
2300877e:	8a2a                	mv	s4,a0
23008780:	85aa                	mv	a1,a0
23008782:	8522                	mv	a0,s0
23008784:	5dd000ef          	jal	ra,23009560 <__mcmp>
23008788:	aea04ce3          	bgtz	a0,23008280 <_dtoa_r+0x4c8>
2300878c:	5782                	lw	a5,32(sp)
2300878e:	49b2                	lw	s3,12(sp)
23008790:	fff7cd93          	not	s11,a5
23008794:	4b01                	li	s6,0
23008796:	85d2                	mv	a1,s4
23008798:	8526                	mv	a0,s1
2300879a:	05f000ef          	jal	ra,23008ff8 <_Bfree>
2300879e:	d80907e3          	beqz	s2,2300852c <_dtoa_r+0x774>
230087a2:	000b0863          	beqz	s6,230087b2 <_dtoa_r+0x9fa>
230087a6:	012b0663          	beq	s6,s2,230087b2 <_dtoa_r+0x9fa>
230087aa:	85da                	mv	a1,s6
230087ac:	8526                	mv	a0,s1
230087ae:	04b000ef          	jal	ra,23008ff8 <_Bfree>
230087b2:	85ca                	mv	a1,s2
230087b4:	8526                	mv	a0,s1
230087b6:	043000ef          	jal	ra,23008ff8 <_Bfree>
230087ba:	bb8d                	j	2300852c <_dtoa_r+0x774>
230087bc:	4a01                	li	s4,0
230087be:	4901                	li	s2,0
230087c0:	b7f1                	j	2300878c <_dtoa_r+0x9d4>
230087c2:	4de2                	lw	s11,24(sp)
230087c4:	4a01                	li	s4,0
230087c6:	4901                	li	s2,0
230087c8:	bc65                	j	23008280 <_dtoa_r+0x4c8>
230087ca:	47f2                	lw	a5,28(sp)
230087cc:	c86a                	sw	s10,16(sp)
230087ce:	20078763          	beqz	a5,230089dc <_dtoa_r+0xc24>
230087d2:	01505863          	blez	s5,230087e2 <_dtoa_r+0xa2a>
230087d6:	85ca                	mv	a1,s2
230087d8:	8656                	mv	a2,s5
230087da:	8526                	mv	a0,s1
230087dc:	481000ef          	jal	ra,2300945c <__lshift>
230087e0:	892a                	mv	s2,a0
230087e2:	854a                	mv	a0,s2
230087e4:	040c8063          	beqz	s9,23008824 <_dtoa_r+0xa6c>
230087e8:	00492583          	lw	a1,4(s2)
230087ec:	8526                	mv	a0,s1
230087ee:	75c000ef          	jal	ra,23008f4a <_Balloc>
230087f2:	8aaa                	mv	s5,a0
230087f4:	e911                	bnez	a0,23008808 <_dtoa_r+0xa50>
230087f6:	00004697          	auipc	a3,0x4
230087fa:	28268693          	addi	a3,a3,642 # 2300ca78 <dma_channel_base+0x194>
230087fe:	4601                	li	a2,0
23008800:	2ea00593          	li	a1,746
23008804:	e00ff06f          	j	23007e04 <_dtoa_r+0x4c>
23008808:	01092603          	lw	a2,16(s2)
2300880c:	00c90593          	addi	a1,s2,12
23008810:	0531                	addi	a0,a0,12
23008812:	0609                	addi	a2,a2,2
23008814:	060a                	slli	a2,a2,0x2
23008816:	e38fe0ef          	jal	ra,23006e4e <memcpy>
2300881a:	4605                	li	a2,1
2300881c:	85d6                	mv	a1,s5
2300881e:	8526                	mv	a0,s1
23008820:	43d000ef          	jal	ra,2300945c <__lshift>
23008824:	47b2                	lw	a5,12(sp)
23008826:	4742                	lw	a4,16(sp)
23008828:	8b4a                	mv	s6,s2
2300882a:	00178c13          	addi	s8,a5,1
2300882e:	97ba                	add	a5,a5,a4
23008830:	cc3e                	sw	a5,24(sp)
23008832:	0019f793          	andi	a5,s3,1
23008836:	892a                	mv	s2,a0
23008838:	c83e                	sw	a5,16(sp)
2300883a:	85d2                	mv	a1,s4
2300883c:	8522                	mv	a0,s0
2300883e:	c4eff0ef          	jal	ra,23007c8c <quorem>
23008842:	85da                	mv	a1,s6
23008844:	8caa                	mv	s9,a0
23008846:	03050a93          	addi	s5,a0,48
2300884a:	8522                	mv	a0,s0
2300884c:	515000ef          	jal	ra,23009560 <__mcmp>
23008850:	85d2                	mv	a1,s4
23008852:	8baa                	mv	s7,a0
23008854:	864a                	mv	a2,s2
23008856:	8526                	mv	a0,s1
23008858:	53f000ef          	jal	ra,23009596 <__mdiff>
2300885c:	4554                	lw	a3,12(a0)
2300885e:	fffc0d13          	addi	s10,s8,-1
23008862:	85aa                	mv	a1,a0
23008864:	4705                	li	a4,1
23008866:	e699                	bnez	a3,23008874 <_dtoa_r+0xabc>
23008868:	ce2a                	sw	a0,28(sp)
2300886a:	8522                	mv	a0,s0
2300886c:	4f5000ef          	jal	ra,23009560 <__mcmp>
23008870:	45f2                	lw	a1,28(sp)
23008872:	872a                	mv	a4,a0
23008874:	8526                	mv	a0,s1
23008876:	ce3a                	sw	a4,28(sp)
23008878:	780000ef          	jal	ra,23008ff8 <_Bfree>
2300887c:	47d2                	lw	a5,20(sp)
2300887e:	4772                	lw	a4,28(sp)
23008880:	89e2                	mv	s3,s8
23008882:	00e7e6b3          	or	a3,a5,a4
23008886:	47c2                	lw	a5,16(sp)
23008888:	8edd                	or	a3,a3,a5
2300888a:	ee81                	bnez	a3,230088a2 <_dtoa_r+0xaea>
2300888c:	03900713          	li	a4,57
23008890:	04ea8863          	beq	s5,a4,230088e0 <_dtoa_r+0xb28>
23008894:	01705463          	blez	s7,2300889c <_dtoa_r+0xae4>
23008898:	031c8a93          	addi	s5,s9,49
2300889c:	015d0023          	sb	s5,0(s10)
230088a0:	bddd                	j	23008796 <_dtoa_r+0x9de>
230088a2:	000bca63          	bltz	s7,230088b6 <_dtoa_r+0xafe>
230088a6:	47d2                	lw	a5,20(sp)
230088a8:	0177ebb3          	or	s7,a5,s7
230088ac:	47c2                	lw	a5,16(sp)
230088ae:	00fbebb3          	or	s7,s7,a5
230088b2:	040b9863          	bnez	s7,23008902 <_dtoa_r+0xb4a>
230088b6:	fee053e3          	blez	a4,2300889c <_dtoa_r+0xae4>
230088ba:	85a2                	mv	a1,s0
230088bc:	4605                	li	a2,1
230088be:	8526                	mv	a0,s1
230088c0:	39d000ef          	jal	ra,2300945c <__lshift>
230088c4:	85d2                	mv	a1,s4
230088c6:	842a                	mv	s0,a0
230088c8:	499000ef          	jal	ra,23009560 <__mcmp>
230088cc:	00a04663          	bgtz	a0,230088d8 <_dtoa_r+0xb20>
230088d0:	f571                	bnez	a0,2300889c <_dtoa_r+0xae4>
230088d2:	001af713          	andi	a4,s5,1
230088d6:	d379                	beqz	a4,2300889c <_dtoa_r+0xae4>
230088d8:	03900713          	li	a4,57
230088dc:	faea9ee3          	bne	s5,a4,23008898 <_dtoa_r+0xae0>
230088e0:	03900793          	li	a5,57
230088e4:	00fd0023          	sb	a5,0(s10)
230088e8:	87ce                	mv	a5,s3
230088ea:	03900693          	li	a3,57
230088ee:	89be                	mv	s3,a5
230088f0:	fff9c703          	lbu	a4,-1(s3)
230088f4:	17fd                	addi	a5,a5,-1
230088f6:	0ad70563          	beq	a4,a3,230089a0 <_dtoa_r+0xbe8>
230088fa:	0705                	addi	a4,a4,1
230088fc:	00e78023          	sb	a4,0(a5)
23008900:	bd59                	j	23008796 <_dtoa_r+0x9de>
23008902:	00e05b63          	blez	a4,23008918 <_dtoa_r+0xb60>
23008906:	03900713          	li	a4,57
2300890a:	fcea8be3          	beq	s5,a4,230088e0 <_dtoa_r+0xb28>
2300890e:	001a8793          	addi	a5,s5,1
23008912:	00fd0023          	sb	a5,0(s10)
23008916:	b541                	j	23008796 <_dtoa_r+0x9de>
23008918:	47e2                	lw	a5,24(sp)
2300891a:	ff5c0fa3          	sb	s5,-1(s8)
2300891e:	05878863          	beq	a5,s8,2300896e <_dtoa_r+0xbb6>
23008922:	85a2                	mv	a1,s0
23008924:	4681                	li	a3,0
23008926:	4629                	li	a2,10
23008928:	8526                	mv	a0,s1
2300892a:	730000ef          	jal	ra,2300905a <__multadd>
2300892e:	842a                	mv	s0,a0
23008930:	4681                	li	a3,0
23008932:	4629                	li	a2,10
23008934:	85da                	mv	a1,s6
23008936:	8526                	mv	a0,s1
23008938:	012b1863          	bne	s6,s2,23008948 <_dtoa_r+0xb90>
2300893c:	71e000ef          	jal	ra,2300905a <__multadd>
23008940:	8b2a                	mv	s6,a0
23008942:	892a                	mv	s2,a0
23008944:	0c05                	addi	s8,s8,1
23008946:	bdd5                	j	2300883a <_dtoa_r+0xa82>
23008948:	712000ef          	jal	ra,2300905a <__multadd>
2300894c:	85ca                	mv	a1,s2
2300894e:	8b2a                	mv	s6,a0
23008950:	4681                	li	a3,0
23008952:	4629                	li	a2,10
23008954:	8526                	mv	a0,s1
23008956:	704000ef          	jal	ra,2300905a <__multadd>
2300895a:	892a                	mv	s2,a0
2300895c:	b7e5                	j	23008944 <_dtoa_r+0xb8c>
2300895e:	47c2                	lw	a5,16(sp)
23008960:	4985                	li	s3,1
23008962:	00f05363          	blez	a5,23008968 <_dtoa_r+0xbb0>
23008966:	89be                	mv	s3,a5
23008968:	47b2                	lw	a5,12(sp)
2300896a:	4b01                	li	s6,0
2300896c:	99be                	add	s3,s3,a5
2300896e:	85a2                	mv	a1,s0
23008970:	4605                	li	a2,1
23008972:	8526                	mv	a0,s1
23008974:	2e9000ef          	jal	ra,2300945c <__lshift>
23008978:	85d2                	mv	a1,s4
2300897a:	842a                	mv	s0,a0
2300897c:	3e5000ef          	jal	ra,23009560 <__mcmp>
23008980:	f6a044e3          	bgtz	a0,230088e8 <_dtoa_r+0xb30>
23008984:	e501                	bnez	a0,2300898c <_dtoa_r+0xbd4>
23008986:	001af793          	andi	a5,s5,1
2300898a:	ffb9                	bnez	a5,230088e8 <_dtoa_r+0xb30>
2300898c:	87ce                	mv	a5,s3
2300898e:	03000713          	li	a4,48
23008992:	89be                	mv	s3,a5
23008994:	fff7c683          	lbu	a3,-1(a5)
23008998:	17fd                	addi	a5,a5,-1
2300899a:	fee68ce3          	beq	a3,a4,23008992 <_dtoa_r+0xbda>
2300899e:	bbe5                	j	23008796 <_dtoa_r+0x9de>
230089a0:	4732                	lw	a4,12(sp)
230089a2:	f4f716e3          	bne	a4,a5,230088ee <_dtoa_r+0xb36>
230089a6:	03100793          	li	a5,49
230089aa:	0d85                	addi	s11,s11,1
230089ac:	00f70023          	sb	a5,0(a4)
230089b0:	b3dd                	j	23008796 <_dtoa_r+0x9de>
230089b2:	5712                	lw	a4,36(sp)
230089b4:	00004797          	auipc	a5,0x4
230089b8:	fe478793          	addi	a5,a5,-28 # 2300c998 <dma_channel_base+0xb4>
230089bc:	c63e                	sw	a5,12(sp)
230089be:	00004797          	auipc	a5,0x4
230089c2:	fe278793          	addi	a5,a5,-30 # 2300c9a0 <dma_channel_base+0xbc>
230089c6:	cc071a63          	bnez	a4,23007e9a <_dtoa_r+0xe2>
230089ca:	cd4ff06f          	j	23007e9e <_dtoa_r+0xe6>
230089ce:	47c2                	lw	a5,16(sp)
230089d0:	00f04663          	bgtz	a5,230089dc <_dtoa_r+0xc24>
230089d4:	4752                	lw	a4,20(sp)
230089d6:	4789                	li	a5,2
230089d8:	d8e7cbe3          	blt	a5,a4,2300876e <_dtoa_r+0x9b6>
230089dc:	4981                	li	s3,0
230089de:	85d2                	mv	a1,s4
230089e0:	8522                	mv	a0,s0
230089e2:	aaaff0ef          	jal	ra,23007c8c <quorem>
230089e6:	47b2                	lw	a5,12(sp)
230089e8:	03050a93          	addi	s5,a0,48
230089ec:	01378733          	add	a4,a5,s3
230089f0:	47c2                	lw	a5,16(sp)
230089f2:	01570023          	sb	s5,0(a4)
230089f6:	0985                	addi	s3,s3,1
230089f8:	f6f9d3e3          	bge	s3,a5,2300895e <_dtoa_r+0xba6>
230089fc:	85a2                	mv	a1,s0
230089fe:	4681                	li	a3,0
23008a00:	4629                	li	a2,10
23008a02:	8526                	mv	a0,s1
23008a04:	656000ef          	jal	ra,2300905a <__multadd>
23008a08:	842a                	mv	s0,a0
23008a0a:	bfd1                	j	230089de <_dtoa_r+0xc26>

23008a0c <__sflush_r>:
23008a0c:	00c5d783          	lhu	a5,12(a1) # 7ff0000c <__HeapLimit+0x3ded000c>
23008a10:	1101                	addi	sp,sp,-32
23008a12:	cc22                	sw	s0,24(sp)
23008a14:	ca26                	sw	s1,20(sp)
23008a16:	ce06                	sw	ra,28(sp)
23008a18:	c84a                	sw	s2,16(sp)
23008a1a:	c64e                	sw	s3,12(sp)
23008a1c:	0087f713          	andi	a4,a5,8
23008a20:	84aa                	mv	s1,a0
23008a22:	842e                	mv	s0,a1
23008a24:	e37d                	bnez	a4,23008b0a <__sflush_r+0xfe>
23008a26:	41d8                	lw	a4,4(a1)
23008a28:	00e04763          	bgtz	a4,23008a36 <__sflush_r+0x2a>
23008a2c:	41b8                	lw	a4,64(a1)
23008a2e:	00e04463          	bgtz	a4,23008a36 <__sflush_r+0x2a>
23008a32:	4501                	li	a0,0
23008a34:	a87d                	j	23008af2 <__sflush_r+0xe6>
23008a36:	5458                	lw	a4,44(s0)
23008a38:	df6d                	beqz	a4,23008a32 <__sflush_r+0x26>
23008a3a:	6685                	lui	a3,0x1
23008a3c:	0004a903          	lw	s2,0(s1)
23008a40:	8ff5                	and	a5,a5,a3
23008a42:	0004a023          	sw	zero,0(s1)
23008a46:	cfad                	beqz	a5,23008ac0 <__sflush_r+0xb4>
23008a48:	4868                	lw	a0,84(s0)
23008a4a:	00c45783          	lhu	a5,12(s0)
23008a4e:	8b91                	andi	a5,a5,4
23008a50:	c799                	beqz	a5,23008a5e <__sflush_r+0x52>
23008a52:	405c                	lw	a5,4(s0)
23008a54:	8d1d                	sub	a0,a0,a5
23008a56:	585c                	lw	a5,52(s0)
23008a58:	c399                	beqz	a5,23008a5e <__sflush_r+0x52>
23008a5a:	403c                	lw	a5,64(s0)
23008a5c:	8d1d                	sub	a0,a0,a5
23008a5e:	545c                	lw	a5,44(s0)
23008a60:	500c                	lw	a1,32(s0)
23008a62:	862a                	mv	a2,a0
23008a64:	4681                	li	a3,0
23008a66:	8526                	mv	a0,s1
23008a68:	9782                	jalr	a5
23008a6a:	57fd                	li	a5,-1
23008a6c:	00c45703          	lhu	a4,12(s0)
23008a70:	00f51d63          	bne	a0,a5,23008a8a <__sflush_r+0x7e>
23008a74:	4094                	lw	a3,0(s1)
23008a76:	47f5                	li	a5,29
23008a78:	08d7e463          	bltu	a5,a3,23008b00 <__sflush_r+0xf4>
23008a7c:	204007b7          	lui	a5,0x20400
23008a80:	0785                	addi	a5,a5,1
23008a82:	00d7d7b3          	srl	a5,a5,a3
23008a86:	8b85                	andi	a5,a5,1
23008a88:	cfa5                	beqz	a5,23008b00 <__sflush_r+0xf4>
23008a8a:	481c                	lw	a5,16(s0)
23008a8c:	00042223          	sw	zero,4(s0)
23008a90:	c01c                	sw	a5,0(s0)
23008a92:	6785                	lui	a5,0x1
23008a94:	8f7d                	and	a4,a4,a5
23008a96:	c719                	beqz	a4,23008aa4 <__sflush_r+0x98>
23008a98:	57fd                	li	a5,-1
23008a9a:	00f51463          	bne	a0,a5,23008aa2 <__sflush_r+0x96>
23008a9e:	409c                	lw	a5,0(s1)
23008aa0:	e391                	bnez	a5,23008aa4 <__sflush_r+0x98>
23008aa2:	c868                	sw	a0,84(s0)
23008aa4:	584c                	lw	a1,52(s0)
23008aa6:	0124a023          	sw	s2,0(s1)
23008aaa:	d5c1                	beqz	a1,23008a32 <__sflush_r+0x26>
23008aac:	04440793          	addi	a5,s0,68
23008ab0:	00f58563          	beq	a1,a5,23008aba <__sflush_r+0xae>
23008ab4:	8526                	mv	a0,s1
23008ab6:	85ffa0ef          	jal	ra,23003314 <_free_r>
23008aba:	02042a23          	sw	zero,52(s0)
23008abe:	bf95                	j	23008a32 <__sflush_r+0x26>
23008ac0:	500c                	lw	a1,32(s0)
23008ac2:	4685                	li	a3,1
23008ac4:	4601                	li	a2,0
23008ac6:	8526                	mv	a0,s1
23008ac8:	9702                	jalr	a4
23008aca:	57fd                	li	a5,-1
23008acc:	f6f51fe3          	bne	a0,a5,23008a4a <__sflush_r+0x3e>
23008ad0:	409c                	lw	a5,0(s1)
23008ad2:	dfa5                	beqz	a5,23008a4a <__sflush_r+0x3e>
23008ad4:	4775                	li	a4,29
23008ad6:	00e78563          	beq	a5,a4,23008ae0 <__sflush_r+0xd4>
23008ada:	4759                	li	a4,22
23008adc:	00e79563          	bne	a5,a4,23008ae6 <__sflush_r+0xda>
23008ae0:	0124a023          	sw	s2,0(s1)
23008ae4:	b7b9                	j	23008a32 <__sflush_r+0x26>
23008ae6:	00c45783          	lhu	a5,12(s0)
23008aea:	0407e793          	ori	a5,a5,64
23008aee:	00f41623          	sh	a5,12(s0)
23008af2:	40f2                	lw	ra,28(sp)
23008af4:	4462                	lw	s0,24(sp)
23008af6:	44d2                	lw	s1,20(sp)
23008af8:	4942                	lw	s2,16(sp)
23008afa:	49b2                	lw	s3,12(sp)
23008afc:	6105                	addi	sp,sp,32
23008afe:	8082                	ret
23008b00:	04076713          	ori	a4,a4,64
23008b04:	00e41623          	sh	a4,12(s0)
23008b08:	b7ed                	j	23008af2 <__sflush_r+0xe6>
23008b0a:	0105a983          	lw	s3,16(a1)
23008b0e:	f20982e3          	beqz	s3,23008a32 <__sflush_r+0x26>
23008b12:	0005a903          	lw	s2,0(a1)
23008b16:	8b8d                	andi	a5,a5,3
23008b18:	0135a023          	sw	s3,0(a1)
23008b1c:	41390933          	sub	s2,s2,s3
23008b20:	4701                	li	a4,0
23008b22:	e391                	bnez	a5,23008b26 <__sflush_r+0x11a>
23008b24:	49d8                	lw	a4,20(a1)
23008b26:	c418                	sw	a4,8(s0)
23008b28:	f12055e3          	blez	s2,23008a32 <__sflush_r+0x26>
23008b2c:	541c                	lw	a5,40(s0)
23008b2e:	500c                	lw	a1,32(s0)
23008b30:	86ca                	mv	a3,s2
23008b32:	864e                	mv	a2,s3
23008b34:	8526                	mv	a0,s1
23008b36:	9782                	jalr	a5
23008b38:	00a04a63          	bgtz	a0,23008b4c <__sflush_r+0x140>
23008b3c:	00c45783          	lhu	a5,12(s0)
23008b40:	557d                	li	a0,-1
23008b42:	0407e793          	ori	a5,a5,64
23008b46:	00f41623          	sh	a5,12(s0)
23008b4a:	b765                	j	23008af2 <__sflush_r+0xe6>
23008b4c:	99aa                	add	s3,s3,a0
23008b4e:	40a90933          	sub	s2,s2,a0
23008b52:	bfd9                	j	23008b28 <__sflush_r+0x11c>

23008b54 <_fflush_r>:
23008b54:	499c                	lw	a5,16(a1)
23008b56:	c3a5                	beqz	a5,23008bb6 <_fflush_r+0x62>
23008b58:	1101                	addi	sp,sp,-32
23008b5a:	cc22                	sw	s0,24(sp)
23008b5c:	ce06                	sw	ra,28(sp)
23008b5e:	842a                	mv	s0,a0
23008b60:	c511                	beqz	a0,23008b6c <_fflush_r+0x18>
23008b62:	4d1c                	lw	a5,24(a0)
23008b64:	e781                	bnez	a5,23008b6c <_fflush_r+0x18>
23008b66:	c62e                	sw	a1,12(sp)
23008b68:	2239                	jal	23008c76 <__sinit>
23008b6a:	45b2                	lw	a1,12(sp)
23008b6c:	00004797          	auipc	a5,0x4
23008b70:	f4078793          	addi	a5,a5,-192 # 2300caac <__sf_fake_stdin>
23008b74:	00f59c63          	bne	a1,a5,23008b8c <_fflush_r+0x38>
23008b78:	404c                	lw	a1,4(s0)
23008b7a:	00c59783          	lh	a5,12(a1)
23008b7e:	c79d                	beqz	a5,23008bac <_fflush_r+0x58>
23008b80:	8522                	mv	a0,s0
23008b82:	4462                	lw	s0,24(sp)
23008b84:	40f2                	lw	ra,28(sp)
23008b86:	6105                	addi	sp,sp,32
23008b88:	e85ff06f          	j	23008a0c <__sflush_r>
23008b8c:	00004797          	auipc	a5,0x4
23008b90:	f4078793          	addi	a5,a5,-192 # 2300cacc <__sf_fake_stdout>
23008b94:	00f59463          	bne	a1,a5,23008b9c <_fflush_r+0x48>
23008b98:	440c                	lw	a1,8(s0)
23008b9a:	b7c5                	j	23008b7a <_fflush_r+0x26>
23008b9c:	00004797          	auipc	a5,0x4
23008ba0:	ef078793          	addi	a5,a5,-272 # 2300ca8c <__sf_fake_stderr>
23008ba4:	fcf59be3          	bne	a1,a5,23008b7a <_fflush_r+0x26>
23008ba8:	444c                	lw	a1,12(s0)
23008baa:	bfc1                	j	23008b7a <_fflush_r+0x26>
23008bac:	40f2                	lw	ra,28(sp)
23008bae:	4462                	lw	s0,24(sp)
23008bb0:	4501                	li	a0,0
23008bb2:	6105                	addi	sp,sp,32
23008bb4:	8082                	ret
23008bb6:	4501                	li	a0,0
23008bb8:	8082                	ret

23008bba <std>:
23008bba:	1141                	addi	sp,sp,-16
23008bbc:	c422                	sw	s0,8(sp)
23008bbe:	c606                	sw	ra,12(sp)
23008bc0:	842a                	mv	s0,a0
23008bc2:	00b51623          	sh	a1,12(a0)
23008bc6:	00c51723          	sh	a2,14(a0)
23008bca:	00052023          	sw	zero,0(a0)
23008bce:	00052223          	sw	zero,4(a0)
23008bd2:	00052423          	sw	zero,8(a0)
23008bd6:	06052223          	sw	zero,100(a0)
23008bda:	00052823          	sw	zero,16(a0)
23008bde:	00052a23          	sw	zero,20(a0)
23008be2:	00052c23          	sw	zero,24(a0)
23008be6:	4621                	li	a2,8
23008be8:	4581                	li	a1,0
23008bea:	05c50513          	addi	a0,a0,92
23008bee:	e96f70ef          	jal	ra,23000284 <memset>
23008bf2:	00001797          	auipc	a5,0x1
23008bf6:	26678793          	addi	a5,a5,614 # 23009e58 <__sread>
23008bfa:	d05c                	sw	a5,36(s0)
23008bfc:	00001797          	auipc	a5,0x1
23008c00:	28e78793          	addi	a5,a5,654 # 23009e8a <__swrite>
23008c04:	d41c                	sw	a5,40(s0)
23008c06:	00001797          	auipc	a5,0x1
23008c0a:	2d678793          	addi	a5,a5,726 # 23009edc <__sseek>
23008c0e:	d45c                	sw	a5,44(s0)
23008c10:	00001797          	auipc	a5,0x1
23008c14:	30478793          	addi	a5,a5,772 # 23009f14 <__sclose>
23008c18:	40b2                	lw	ra,12(sp)
23008c1a:	d000                	sw	s0,32(s0)
23008c1c:	d81c                	sw	a5,48(s0)
23008c1e:	4422                	lw	s0,8(sp)
23008c20:	0141                	addi	sp,sp,16
23008c22:	8082                	ret

23008c24 <_cleanup_r>:
23008c24:	00000597          	auipc	a1,0x0
23008c28:	f3058593          	addi	a1,a1,-208 # 23008b54 <_fflush_r>
23008c2c:	aab1                	j	23008d88 <_fwalk_reent>

23008c2e <__sfmoreglue>:
23008c2e:	1141                	addi	sp,sp,-16
23008c30:	c226                	sw	s1,4(sp)
23008c32:	06800613          	li	a2,104
23008c36:	fff58493          	addi	s1,a1,-1
23008c3a:	02c484b3          	mul	s1,s1,a2
23008c3e:	c04a                	sw	s2,0(sp)
23008c40:	892e                	mv	s2,a1
23008c42:	c422                	sw	s0,8(sp)
23008c44:	c606                	sw	ra,12(sp)
23008c46:	07448593          	addi	a1,s1,116
23008c4a:	e58fa0ef          	jal	ra,230032a2 <_malloc_r>
23008c4e:	842a                	mv	s0,a0
23008c50:	cd01                	beqz	a0,23008c68 <__sfmoreglue+0x3a>
23008c52:	00052023          	sw	zero,0(a0)
23008c56:	01252223          	sw	s2,4(a0)
23008c5a:	0531                	addi	a0,a0,12
23008c5c:	c408                	sw	a0,8(s0)
23008c5e:	06848613          	addi	a2,s1,104
23008c62:	4581                	li	a1,0
23008c64:	e20f70ef          	jal	ra,23000284 <memset>
23008c68:	40b2                	lw	ra,12(sp)
23008c6a:	8522                	mv	a0,s0
23008c6c:	4422                	lw	s0,8(sp)
23008c6e:	4492                	lw	s1,4(sp)
23008c70:	4902                	lw	s2,0(sp)
23008c72:	0141                	addi	sp,sp,16
23008c74:	8082                	ret

23008c76 <__sinit>:
23008c76:	4d1c                	lw	a5,24(a0)
23008c78:	e7b5                	bnez	a5,23008ce4 <__sinit+0x6e>
23008c7a:	1141                	addi	sp,sp,-16
23008c7c:	c422                	sw	s0,8(sp)
23008c7e:	c606                	sw	ra,12(sp)
23008c80:	00000797          	auipc	a5,0x0
23008c84:	fa478793          	addi	a5,a5,-92 # 23008c24 <_cleanup_r>
23008c88:	d51c                	sw	a5,40(a0)
23008c8a:	04052423          	sw	zero,72(a0)
23008c8e:	04052623          	sw	zero,76(a0)
23008c92:	04052823          	sw	zero,80(a0)
23008c96:	00004797          	auipc	a5,0x4
23008c9a:	7fa7a783          	lw	a5,2042(a5) # 2300d490 <_global_impure_ptr>
23008c9e:	842a                	mv	s0,a0
23008ca0:	00f51463          	bne	a0,a5,23008ca8 <__sinit+0x32>
23008ca4:	4785                	li	a5,1
23008ca6:	cd1c                	sw	a5,24(a0)
23008ca8:	8522                	mv	a0,s0
23008caa:	2835                	jal	23008ce6 <__sfp>
23008cac:	c048                	sw	a0,4(s0)
23008cae:	8522                	mv	a0,s0
23008cb0:	281d                	jal	23008ce6 <__sfp>
23008cb2:	c408                	sw	a0,8(s0)
23008cb4:	8522                	mv	a0,s0
23008cb6:	2805                	jal	23008ce6 <__sfp>
23008cb8:	c448                	sw	a0,12(s0)
23008cba:	4048                	lw	a0,4(s0)
23008cbc:	4601                	li	a2,0
23008cbe:	4591                	li	a1,4
23008cc0:	efbff0ef          	jal	ra,23008bba <std>
23008cc4:	4408                	lw	a0,8(s0)
23008cc6:	4605                	li	a2,1
23008cc8:	45a5                	li	a1,9
23008cca:	ef1ff0ef          	jal	ra,23008bba <std>
23008cce:	4448                	lw	a0,12(s0)
23008cd0:	4609                	li	a2,2
23008cd2:	45c9                	li	a1,18
23008cd4:	ee7ff0ef          	jal	ra,23008bba <std>
23008cd8:	4785                	li	a5,1
23008cda:	40b2                	lw	ra,12(sp)
23008cdc:	cc1c                	sw	a5,24(s0)
23008cde:	4422                	lw	s0,8(sp)
23008ce0:	0141                	addi	sp,sp,16
23008ce2:	8082                	ret
23008ce4:	8082                	ret

23008ce6 <__sfp>:
23008ce6:	1141                	addi	sp,sp,-16
23008ce8:	c226                	sw	s1,4(sp)
23008cea:	00004497          	auipc	s1,0x4
23008cee:	7a64a483          	lw	s1,1958(s1) # 2300d490 <_global_impure_ptr>
23008cf2:	4c9c                	lw	a5,24(s1)
23008cf4:	c04a                	sw	s2,0(sp)
23008cf6:	c606                	sw	ra,12(sp)
23008cf8:	c422                	sw	s0,8(sp)
23008cfa:	892a                	mv	s2,a0
23008cfc:	e781                	bnez	a5,23008d04 <__sfp+0x1e>
23008cfe:	8526                	mv	a0,s1
23008d00:	f77ff0ef          	jal	ra,23008c76 <__sinit>
23008d04:	04848493          	addi	s1,s1,72
23008d08:	4480                	lw	s0,8(s1)
23008d0a:	40dc                	lw	a5,4(s1)
23008d0c:	17fd                	addi	a5,a5,-1
23008d0e:	0007d663          	bgez	a5,23008d1a <__sfp+0x34>
23008d12:	409c                	lw	a5,0(s1)
23008d14:	cfb9                	beqz	a5,23008d72 <__sfp+0x8c>
23008d16:	4084                	lw	s1,0(s1)
23008d18:	bfc5                	j	23008d08 <__sfp+0x22>
23008d1a:	00c41703          	lh	a4,12(s0)
23008d1e:	e739                	bnez	a4,23008d6c <__sfp+0x86>
23008d20:	77c1                	lui	a5,0xffff0
23008d22:	0785                	addi	a5,a5,1
23008d24:	06042223          	sw	zero,100(s0)
23008d28:	00042023          	sw	zero,0(s0)
23008d2c:	00042223          	sw	zero,4(s0)
23008d30:	00042423          	sw	zero,8(s0)
23008d34:	c45c                	sw	a5,12(s0)
23008d36:	00042823          	sw	zero,16(s0)
23008d3a:	00042a23          	sw	zero,20(s0)
23008d3e:	00042c23          	sw	zero,24(s0)
23008d42:	4621                	li	a2,8
23008d44:	4581                	li	a1,0
23008d46:	05c40513          	addi	a0,s0,92
23008d4a:	d3af70ef          	jal	ra,23000284 <memset>
23008d4e:	02042a23          	sw	zero,52(s0)
23008d52:	02042c23          	sw	zero,56(s0)
23008d56:	04042423          	sw	zero,72(s0)
23008d5a:	04042623          	sw	zero,76(s0)
23008d5e:	40b2                	lw	ra,12(sp)
23008d60:	8522                	mv	a0,s0
23008d62:	4422                	lw	s0,8(sp)
23008d64:	4492                	lw	s1,4(sp)
23008d66:	4902                	lw	s2,0(sp)
23008d68:	0141                	addi	sp,sp,16
23008d6a:	8082                	ret
23008d6c:	06840413          	addi	s0,s0,104
23008d70:	bf71                	j	23008d0c <__sfp+0x26>
23008d72:	4591                	li	a1,4
23008d74:	854a                	mv	a0,s2
23008d76:	eb9ff0ef          	jal	ra,23008c2e <__sfmoreglue>
23008d7a:	c088                	sw	a0,0(s1)
23008d7c:	842a                	mv	s0,a0
23008d7e:	fd41                	bnez	a0,23008d16 <__sfp+0x30>
23008d80:	47b1                	li	a5,12
23008d82:	00f92023          	sw	a5,0(s2)
23008d86:	bfe1                	j	23008d5e <__sfp+0x78>

23008d88 <_fwalk_reent>:
23008d88:	7179                	addi	sp,sp,-48
23008d8a:	d422                	sw	s0,40(sp)
23008d8c:	d04a                	sw	s2,32(sp)
23008d8e:	ce4e                	sw	s3,28(sp)
23008d90:	cc52                	sw	s4,24(sp)
23008d92:	c85a                	sw	s6,16(sp)
23008d94:	c65e                	sw	s7,12(sp)
23008d96:	d606                	sw	ra,44(sp)
23008d98:	d226                	sw	s1,36(sp)
23008d9a:	ca56                	sw	s5,20(sp)
23008d9c:	892a                	mv	s2,a0
23008d9e:	8a2e                	mv	s4,a1
23008da0:	04850413          	addi	s0,a0,72
23008da4:	4981                	li	s3,0
23008da6:	4b05                	li	s6,1
23008da8:	5bfd                	li	s7,-1
23008daa:	4404                	lw	s1,8(s0)
23008dac:	00442a83          	lw	s5,4(s0)
23008db0:	1afd                	addi	s5,s5,-1
23008db2:	020ad063          	bgez	s5,23008dd2 <_fwalk_reent+0x4a>
23008db6:	4000                	lw	s0,0(s0)
23008db8:	f86d                	bnez	s0,23008daa <_fwalk_reent+0x22>
23008dba:	50b2                	lw	ra,44(sp)
23008dbc:	5422                	lw	s0,40(sp)
23008dbe:	5492                	lw	s1,36(sp)
23008dc0:	5902                	lw	s2,32(sp)
23008dc2:	4a62                	lw	s4,24(sp)
23008dc4:	4ad2                	lw	s5,20(sp)
23008dc6:	4b42                	lw	s6,16(sp)
23008dc8:	4bb2                	lw	s7,12(sp)
23008dca:	854e                	mv	a0,s3
23008dcc:	49f2                	lw	s3,28(sp)
23008dce:	6145                	addi	sp,sp,48
23008dd0:	8082                	ret
23008dd2:	00c4d783          	lhu	a5,12(s1)
23008dd6:	00fb7b63          	bgeu	s6,a5,23008dec <_fwalk_reent+0x64>
23008dda:	00e49783          	lh	a5,14(s1)
23008dde:	01778763          	beq	a5,s7,23008dec <_fwalk_reent+0x64>
23008de2:	85a6                	mv	a1,s1
23008de4:	854a                	mv	a0,s2
23008de6:	9a02                	jalr	s4
23008de8:	00a9e9b3          	or	s3,s3,a0
23008dec:	06848493          	addi	s1,s1,104
23008df0:	b7c1                	j	23008db0 <_fwalk_reent+0x28>

23008df2 <_localeconv_r>:
23008df2:	9f018513          	addi	a0,gp,-1552 # 420161f0 <__global_locale+0xf0>
23008df6:	8082                	ret

23008df8 <__swhatbuf_r>:
23008df8:	7159                	addi	sp,sp,-112
23008dfa:	d0ca                	sw	s2,96(sp)
23008dfc:	892e                	mv	s2,a1
23008dfe:	00e59583          	lh	a1,14(a1)
23008e02:	d4a2                	sw	s0,104(sp)
23008e04:	d2a6                	sw	s1,100(sp)
23008e06:	d686                	sw	ra,108(sp)
23008e08:	8432                	mv	s0,a2
23008e0a:	84b6                	mv	s1,a3
23008e0c:	0005dc63          	bgez	a1,23008e24 <__swhatbuf_r+0x2c>
23008e10:	00c91783          	lh	a5,12(s2)
23008e14:	0004a023          	sw	zero,0(s1)
23008e18:	0807f793          	andi	a5,a5,128
23008e1c:	e395                	bnez	a5,23008e40 <__swhatbuf_r+0x48>
23008e1e:	40000793          	li	a5,1024
23008e22:	a00d                	j	23008e44 <__swhatbuf_r+0x4c>
23008e24:	0030                	addi	a2,sp,8
23008e26:	c0efa0ef          	jal	ra,23003234 <_fstat_r>
23008e2a:	fe0543e3          	bltz	a0,23008e10 <__swhatbuf_r+0x18>
23008e2e:	4732                	lw	a4,12(sp)
23008e30:	67bd                	lui	a5,0xf
23008e32:	8ff9                	and	a5,a5,a4
23008e34:	7779                	lui	a4,0xffffe
23008e36:	97ba                	add	a5,a5,a4
23008e38:	0017b793          	seqz	a5,a5
23008e3c:	c09c                	sw	a5,0(s1)
23008e3e:	b7c5                	j	23008e1e <__swhatbuf_r+0x26>
23008e40:	04000793          	li	a5,64
23008e44:	50b6                	lw	ra,108(sp)
23008e46:	c01c                	sw	a5,0(s0)
23008e48:	5426                	lw	s0,104(sp)
23008e4a:	5496                	lw	s1,100(sp)
23008e4c:	5906                	lw	s2,96(sp)
23008e4e:	4501                	li	a0,0
23008e50:	6165                	addi	sp,sp,112
23008e52:	8082                	ret

23008e54 <__smakebuf_r>:
23008e54:	00c5d783          	lhu	a5,12(a1)
23008e58:	1101                	addi	sp,sp,-32
23008e5a:	cc22                	sw	s0,24(sp)
23008e5c:	ce06                	sw	ra,28(sp)
23008e5e:	ca26                	sw	s1,20(sp)
23008e60:	c84a                	sw	s2,16(sp)
23008e62:	8b89                	andi	a5,a5,2
23008e64:	842e                	mv	s0,a1
23008e66:	cf89                	beqz	a5,23008e80 <__smakebuf_r+0x2c>
23008e68:	04740793          	addi	a5,s0,71
23008e6c:	c01c                	sw	a5,0(s0)
23008e6e:	c81c                	sw	a5,16(s0)
23008e70:	4785                	li	a5,1
23008e72:	c85c                	sw	a5,20(s0)
23008e74:	40f2                	lw	ra,28(sp)
23008e76:	4462                	lw	s0,24(sp)
23008e78:	44d2                	lw	s1,20(sp)
23008e7a:	4942                	lw	s2,16(sp)
23008e7c:	6105                	addi	sp,sp,32
23008e7e:	8082                	ret
23008e80:	0074                	addi	a3,sp,12
23008e82:	0030                	addi	a2,sp,8
23008e84:	892a                	mv	s2,a0
23008e86:	f73ff0ef          	jal	ra,23008df8 <__swhatbuf_r>
23008e8a:	45a2                	lw	a1,8(sp)
23008e8c:	84aa                	mv	s1,a0
23008e8e:	854a                	mv	a0,s2
23008e90:	c12fa0ef          	jal	ra,230032a2 <_malloc_r>
23008e94:	ed01                	bnez	a0,23008eac <__smakebuf_r+0x58>
23008e96:	00c41783          	lh	a5,12(s0)
23008e9a:	2007f713          	andi	a4,a5,512
23008e9e:	fb79                	bnez	a4,23008e74 <__smakebuf_r+0x20>
23008ea0:	9bf1                	andi	a5,a5,-4
23008ea2:	0027e793          	ori	a5,a5,2
23008ea6:	00f41623          	sh	a5,12(s0)
23008eaa:	bf7d                	j	23008e68 <__smakebuf_r+0x14>
23008eac:	00000797          	auipc	a5,0x0
23008eb0:	d7878793          	addi	a5,a5,-648 # 23008c24 <_cleanup_r>
23008eb4:	02f92423          	sw	a5,40(s2)
23008eb8:	00c45783          	lhu	a5,12(s0)
23008ebc:	c008                	sw	a0,0(s0)
23008ebe:	c808                	sw	a0,16(s0)
23008ec0:	0807e793          	ori	a5,a5,128
23008ec4:	00f41623          	sh	a5,12(s0)
23008ec8:	47a2                	lw	a5,8(sp)
23008eca:	c85c                	sw	a5,20(s0)
23008ecc:	47b2                	lw	a5,12(sp)
23008ece:	cf91                	beqz	a5,23008eea <__smakebuf_r+0x96>
23008ed0:	00e41583          	lh	a1,14(s0)
23008ed4:	854a                	mv	a0,s2
23008ed6:	b68fa0ef          	jal	ra,2300323e <_isatty_r>
23008eda:	c901                	beqz	a0,23008eea <__smakebuf_r+0x96>
23008edc:	00c45783          	lhu	a5,12(s0)
23008ee0:	9bf1                	andi	a5,a5,-4
23008ee2:	0017e793          	ori	a5,a5,1
23008ee6:	00f41623          	sh	a5,12(s0)
23008eea:	00c45503          	lhu	a0,12(s0)
23008eee:	8cc9                	or	s1,s1,a0
23008ef0:	00941623          	sh	s1,12(s0)
23008ef4:	b741                	j	23008e74 <__smakebuf_r+0x20>

23008ef6 <__ascii_mbtowc>:
23008ef6:	e185                	bnez	a1,23008f16 <__ascii_mbtowc+0x20>
23008ef8:	1141                	addi	sp,sp,-16
23008efa:	006c                	addi	a1,sp,12
23008efc:	4501                	li	a0,0
23008efe:	ca11                	beqz	a2,23008f12 <__ascii_mbtowc+0x1c>
23008f00:	5579                	li	a0,-2
23008f02:	ca81                	beqz	a3,23008f12 <__ascii_mbtowc+0x1c>
23008f04:	00064783          	lbu	a5,0(a2)
23008f08:	c19c                	sw	a5,0(a1)
23008f0a:	00064503          	lbu	a0,0(a2)
23008f0e:	00a03533          	snez	a0,a0
23008f12:	0141                	addi	sp,sp,16
23008f14:	8082                	ret
23008f16:	4501                	li	a0,0
23008f18:	ca19                	beqz	a2,23008f2e <__ascii_mbtowc+0x38>
23008f1a:	5579                	li	a0,-2
23008f1c:	ca89                	beqz	a3,23008f2e <__ascii_mbtowc+0x38>
23008f1e:	00064783          	lbu	a5,0(a2)
23008f22:	c19c                	sw	a5,0(a1)
23008f24:	00064503          	lbu	a0,0(a2)
23008f28:	00a03533          	snez	a0,a0
23008f2c:	8082                	ret
23008f2e:	8082                	ret

23008f30 <memchr>:
23008f30:	0ff5f593          	zext.b	a1,a1
23008f34:	962a                	add	a2,a2,a0
23008f36:	00c51463          	bne	a0,a2,23008f3e <memchr+0xe>
23008f3a:	4501                	li	a0,0
23008f3c:	8082                	ret
23008f3e:	00054783          	lbu	a5,0(a0)
23008f42:	feb78de3          	beq	a5,a1,23008f3c <memchr+0xc>
23008f46:	0505                	addi	a0,a0,1
23008f48:	b7fd                	j	23008f36 <memchr+0x6>

23008f4a <_Balloc>:
23008f4a:	515c                	lw	a5,36(a0)
23008f4c:	1141                	addi	sp,sp,-16
23008f4e:	c422                	sw	s0,8(sp)
23008f50:	c226                	sw	s1,4(sp)
23008f52:	c606                	sw	ra,12(sp)
23008f54:	c04a                	sw	s2,0(sp)
23008f56:	842a                	mv	s0,a0
23008f58:	84ae                	mv	s1,a1
23008f5a:	eb9d                	bnez	a5,23008f90 <_Balloc+0x46>
23008f5c:	4541                	li	a0,16
23008f5e:	eddfd0ef          	jal	ra,23006e3a <malloc>
23008f62:	d048                	sw	a0,36(s0)
23008f64:	ed11                	bnez	a0,23008f80 <_Balloc+0x36>
23008f66:	00004697          	auipc	a3,0x4
23008f6a:	a4268693          	addi	a3,a3,-1470 # 2300c9a8 <dma_channel_base+0xc4>
23008f6e:	4601                	li	a2,0
23008f70:	06600593          	li	a1,102
23008f74:	00004517          	auipc	a0,0x4
23008f78:	b8850513          	addi	a0,a0,-1144 # 2300cafc <__sf_fake_stdout+0x30>
23008f7c:	7c1000ef          	jal	ra,23009f3c <__assert_func>
23008f80:	00052223          	sw	zero,4(a0)
23008f84:	00052423          	sw	zero,8(a0)
23008f88:	00052023          	sw	zero,0(a0)
23008f8c:	00052623          	sw	zero,12(a0)
23008f90:	02442903          	lw	s2,36(s0)
23008f94:	00c92783          	lw	a5,12(s2)
23008f98:	c79d                	beqz	a5,23008fc6 <_Balloc+0x7c>
23008f9a:	5058                	lw	a4,36(s0)
23008f9c:	00249793          	slli	a5,s1,0x2
23008fa0:	4758                	lw	a4,12(a4)
23008fa2:	97ba                	add	a5,a5,a4
23008fa4:	4388                	lw	a0,0(a5)
23008fa6:	e131                	bnez	a0,23008fea <_Balloc+0xa0>
23008fa8:	4905                	li	s2,1
23008faa:	00991933          	sll	s2,s2,s1
23008fae:	00590613          	addi	a2,s2,5
23008fb2:	060a                	slli	a2,a2,0x2
23008fb4:	4585                	li	a1,1
23008fb6:	8522                	mv	a0,s0
23008fb8:	b36fa0ef          	jal	ra,230032ee <_calloc_r>
23008fbc:	c105                	beqz	a0,23008fdc <_Balloc+0x92>
23008fbe:	c144                	sw	s1,4(a0)
23008fc0:	01252423          	sw	s2,8(a0)
23008fc4:	a02d                	j	23008fee <_Balloc+0xa4>
23008fc6:	02100613          	li	a2,33
23008fca:	4591                	li	a1,4
23008fcc:	8522                	mv	a0,s0
23008fce:	b20fa0ef          	jal	ra,230032ee <_calloc_r>
23008fd2:	505c                	lw	a5,36(s0)
23008fd4:	00a92623          	sw	a0,12(s2)
23008fd8:	47dc                	lw	a5,12(a5)
23008fda:	f3e1                	bnez	a5,23008f9a <_Balloc+0x50>
23008fdc:	4501                	li	a0,0
23008fde:	40b2                	lw	ra,12(sp)
23008fe0:	4422                	lw	s0,8(sp)
23008fe2:	4492                	lw	s1,4(sp)
23008fe4:	4902                	lw	s2,0(sp)
23008fe6:	0141                	addi	sp,sp,16
23008fe8:	8082                	ret
23008fea:	4118                	lw	a4,0(a0)
23008fec:	c398                	sw	a4,0(a5)
23008fee:	00052823          	sw	zero,16(a0)
23008ff2:	00052623          	sw	zero,12(a0)
23008ff6:	b7e5                	j	23008fde <_Balloc+0x94>

23008ff8 <_Bfree>:
23008ff8:	515c                	lw	a5,36(a0)
23008ffa:	1141                	addi	sp,sp,-16
23008ffc:	c422                	sw	s0,8(sp)
23008ffe:	c226                	sw	s1,4(sp)
23009000:	c606                	sw	ra,12(sp)
23009002:	84aa                	mv	s1,a0
23009004:	842e                	mv	s0,a1
23009006:	eb9d                	bnez	a5,2300903c <_Bfree+0x44>
23009008:	4541                	li	a0,16
2300900a:	e31fd0ef          	jal	ra,23006e3a <malloc>
2300900e:	d0c8                	sw	a0,36(s1)
23009010:	ed11                	bnez	a0,2300902c <_Bfree+0x34>
23009012:	00004697          	auipc	a3,0x4
23009016:	99668693          	addi	a3,a3,-1642 # 2300c9a8 <dma_channel_base+0xc4>
2300901a:	4601                	li	a2,0
2300901c:	08a00593          	li	a1,138
23009020:	00004517          	auipc	a0,0x4
23009024:	adc50513          	addi	a0,a0,-1316 # 2300cafc <__sf_fake_stdout+0x30>
23009028:	715000ef          	jal	ra,23009f3c <__assert_func>
2300902c:	00052223          	sw	zero,4(a0)
23009030:	00052423          	sw	zero,8(a0)
23009034:	00052023          	sw	zero,0(a0)
23009038:	00052623          	sw	zero,12(a0)
2300903c:	c811                	beqz	s0,23009050 <_Bfree+0x58>
2300903e:	50d4                	lw	a3,36(s1)
23009040:	405c                	lw	a5,4(s0)
23009042:	00279713          	slli	a4,a5,0x2
23009046:	46dc                	lw	a5,12(a3)
23009048:	97ba                	add	a5,a5,a4
2300904a:	4398                	lw	a4,0(a5)
2300904c:	c018                	sw	a4,0(s0)
2300904e:	c380                	sw	s0,0(a5)
23009050:	40b2                	lw	ra,12(sp)
23009052:	4422                	lw	s0,8(sp)
23009054:	4492                	lw	s1,4(sp)
23009056:	0141                	addi	sp,sp,16
23009058:	8082                	ret

2300905a <__multadd>:
2300905a:	1101                	addi	sp,sp,-32
2300905c:	cc22                	sw	s0,24(sp)
2300905e:	c84a                	sw	s2,16(sp)
23009060:	c64e                	sw	s3,12(sp)
23009062:	0105a903          	lw	s2,16(a1)
23009066:	842e                	mv	s0,a1
23009068:	89b6                	mv	s3,a3
2300906a:	01458693          	addi	a3,a1,20
2300906e:	65c1                	lui	a1,0x10
23009070:	ca26                	sw	s1,20(sp)
23009072:	ce06                	sw	ra,28(sp)
23009074:	84aa                	mv	s1,a0
23009076:	c452                	sw	s4,8(sp)
23009078:	4501                	li	a0,0
2300907a:	15fd                	addi	a1,a1,-1
2300907c:	429c                	lw	a5,0(a3)
2300907e:	0691                	addi	a3,a3,4
23009080:	0505                	addi	a0,a0,1
23009082:	00b7f733          	and	a4,a5,a1
23009086:	02c70733          	mul	a4,a4,a2
2300908a:	83c1                	srli	a5,a5,0x10
2300908c:	02c787b3          	mul	a5,a5,a2
23009090:	974e                	add	a4,a4,s3
23009092:	01075813          	srli	a6,a4,0x10
23009096:	8f6d                	and	a4,a4,a1
23009098:	97c2                	add	a5,a5,a6
2300909a:	0107d993          	srli	s3,a5,0x10
2300909e:	07c2                	slli	a5,a5,0x10
230090a0:	97ba                	add	a5,a5,a4
230090a2:	fef6ae23          	sw	a5,-4(a3)
230090a6:	fd254be3          	blt	a0,s2,2300907c <__multadd+0x22>
230090aa:	04098f63          	beqz	s3,23009108 <__multadd+0xae>
230090ae:	441c                	lw	a5,8(s0)
230090b0:	04f94363          	blt	s2,a5,230090f6 <__multadd+0x9c>
230090b4:	404c                	lw	a1,4(s0)
230090b6:	8526                	mv	a0,s1
230090b8:	0585                	addi	a1,a1,1
230090ba:	e91ff0ef          	jal	ra,23008f4a <_Balloc>
230090be:	8a2a                	mv	s4,a0
230090c0:	ed11                	bnez	a0,230090dc <__multadd+0x82>
230090c2:	00004697          	auipc	a3,0x4
230090c6:	9b668693          	addi	a3,a3,-1610 # 2300ca78 <dma_channel_base+0x194>
230090ca:	4601                	li	a2,0
230090cc:	0b500593          	li	a1,181
230090d0:	00004517          	auipc	a0,0x4
230090d4:	a2c50513          	addi	a0,a0,-1492 # 2300cafc <__sf_fake_stdout+0x30>
230090d8:	665000ef          	jal	ra,23009f3c <__assert_func>
230090dc:	4810                	lw	a2,16(s0)
230090de:	00c40593          	addi	a1,s0,12
230090e2:	0531                	addi	a0,a0,12
230090e4:	0609                	addi	a2,a2,2
230090e6:	060a                	slli	a2,a2,0x2
230090e8:	d67fd0ef          	jal	ra,23006e4e <memcpy>
230090ec:	85a2                	mv	a1,s0
230090ee:	8526                	mv	a0,s1
230090f0:	f09ff0ef          	jal	ra,23008ff8 <_Bfree>
230090f4:	8452                	mv	s0,s4
230090f6:	00490793          	addi	a5,s2,4
230090fa:	078a                	slli	a5,a5,0x2
230090fc:	97a2                	add	a5,a5,s0
230090fe:	0137a223          	sw	s3,4(a5)
23009102:	0905                	addi	s2,s2,1
23009104:	01242823          	sw	s2,16(s0)
23009108:	40f2                	lw	ra,28(sp)
2300910a:	8522                	mv	a0,s0
2300910c:	4462                	lw	s0,24(sp)
2300910e:	44d2                	lw	s1,20(sp)
23009110:	4942                	lw	s2,16(sp)
23009112:	49b2                	lw	s3,12(sp)
23009114:	4a22                	lw	s4,8(sp)
23009116:	6105                	addi	sp,sp,32
23009118:	8082                	ret

2300911a <__hi0bits>:
2300911a:	7741                	lui	a4,0xffff0
2300911c:	8f69                	and	a4,a4,a0
2300911e:	87aa                	mv	a5,a0
23009120:	4501                	li	a0,0
23009122:	e319                	bnez	a4,23009128 <__hi0bits+0xe>
23009124:	07c2                	slli	a5,a5,0x10
23009126:	4541                	li	a0,16
23009128:	ff000737          	lui	a4,0xff000
2300912c:	8f7d                	and	a4,a4,a5
2300912e:	e319                	bnez	a4,23009134 <__hi0bits+0x1a>
23009130:	0521                	addi	a0,a0,8
23009132:	07a2                	slli	a5,a5,0x8
23009134:	f0000737          	lui	a4,0xf0000
23009138:	8f7d                	and	a4,a4,a5
2300913a:	e319                	bnez	a4,23009140 <__hi0bits+0x26>
2300913c:	0511                	addi	a0,a0,4
2300913e:	0792                	slli	a5,a5,0x4
23009140:	c0000737          	lui	a4,0xc0000
23009144:	8f7d                	and	a4,a4,a5
23009146:	e319                	bnez	a4,2300914c <__hi0bits+0x32>
23009148:	0509                	addi	a0,a0,2
2300914a:	078a                	slli	a5,a5,0x2
2300914c:	0007c963          	bltz	a5,2300915e <__hi0bits+0x44>
23009150:	40000737          	lui	a4,0x40000
23009154:	8ff9                	and	a5,a5,a4
23009156:	0505                	addi	a0,a0,1
23009158:	e399                	bnez	a5,2300915e <__hi0bits+0x44>
2300915a:	02000513          	li	a0,32
2300915e:	8082                	ret

23009160 <__lo0bits>:
23009160:	411c                	lw	a5,0(a0)
23009162:	872a                	mv	a4,a0
23009164:	0077f693          	andi	a3,a5,7
23009168:	c285                	beqz	a3,23009188 <__lo0bits+0x28>
2300916a:	0017f693          	andi	a3,a5,1
2300916e:	4501                	li	a0,0
23009170:	eea1                	bnez	a3,230091c8 <__lo0bits+0x68>
23009172:	0027f693          	andi	a3,a5,2
23009176:	c689                	beqz	a3,23009180 <__lo0bits+0x20>
23009178:	8385                	srli	a5,a5,0x1
2300917a:	c31c                	sw	a5,0(a4)
2300917c:	4505                	li	a0,1
2300917e:	8082                	ret
23009180:	8389                	srli	a5,a5,0x2
23009182:	c31c                	sw	a5,0(a4)
23009184:	4509                	li	a0,2
23009186:	8082                	ret
23009188:	01079693          	slli	a3,a5,0x10
2300918c:	82c1                	srli	a3,a3,0x10
2300918e:	4501                	li	a0,0
23009190:	e299                	bnez	a3,23009196 <__lo0bits+0x36>
23009192:	83c1                	srli	a5,a5,0x10
23009194:	4541                	li	a0,16
23009196:	0ff7f693          	zext.b	a3,a5
2300919a:	e299                	bnez	a3,230091a0 <__lo0bits+0x40>
2300919c:	0521                	addi	a0,a0,8
2300919e:	83a1                	srli	a5,a5,0x8
230091a0:	00f7f693          	andi	a3,a5,15
230091a4:	e299                	bnez	a3,230091aa <__lo0bits+0x4a>
230091a6:	0511                	addi	a0,a0,4
230091a8:	8391                	srli	a5,a5,0x4
230091aa:	0037f693          	andi	a3,a5,3
230091ae:	e299                	bnez	a3,230091b4 <__lo0bits+0x54>
230091b0:	0509                	addi	a0,a0,2
230091b2:	8389                	srli	a5,a5,0x2
230091b4:	0017f693          	andi	a3,a5,1
230091b8:	e681                	bnez	a3,230091c0 <__lo0bits+0x60>
230091ba:	8385                	srli	a5,a5,0x1
230091bc:	0505                	addi	a0,a0,1
230091be:	c399                	beqz	a5,230091c4 <__lo0bits+0x64>
230091c0:	c31c                	sw	a5,0(a4)
230091c2:	8082                	ret
230091c4:	02000513          	li	a0,32
230091c8:	8082                	ret

230091ca <__i2b>:
230091ca:	1141                	addi	sp,sp,-16
230091cc:	c422                	sw	s0,8(sp)
230091ce:	842e                	mv	s0,a1
230091d0:	4585                	li	a1,1
230091d2:	c606                	sw	ra,12(sp)
230091d4:	d77ff0ef          	jal	ra,23008f4a <_Balloc>
230091d8:	ed11                	bnez	a0,230091f4 <__i2b+0x2a>
230091da:	00004697          	auipc	a3,0x4
230091de:	89e68693          	addi	a3,a3,-1890 # 2300ca78 <dma_channel_base+0x194>
230091e2:	4601                	li	a2,0
230091e4:	14000593          	li	a1,320
230091e8:	00004517          	auipc	a0,0x4
230091ec:	91450513          	addi	a0,a0,-1772 # 2300cafc <__sf_fake_stdout+0x30>
230091f0:	54d000ef          	jal	ra,23009f3c <__assert_func>
230091f4:	40b2                	lw	ra,12(sp)
230091f6:	c940                	sw	s0,20(a0)
230091f8:	4422                	lw	s0,8(sp)
230091fa:	4705                	li	a4,1
230091fc:	c918                	sw	a4,16(a0)
230091fe:	0141                	addi	sp,sp,16
23009200:	8082                	ret

23009202 <__multiply>:
23009202:	4998                	lw	a4,16(a1)
23009204:	4a1c                	lw	a5,16(a2)
23009206:	1101                	addi	sp,sp,-32
23009208:	cc22                	sw	s0,24(sp)
2300920a:	c84a                	sw	s2,16(sp)
2300920c:	ce06                	sw	ra,28(sp)
2300920e:	ca26                	sw	s1,20(sp)
23009210:	c64e                	sw	s3,12(sp)
23009212:	c452                	sw	s4,8(sp)
23009214:	842e                	mv	s0,a1
23009216:	8932                	mv	s2,a2
23009218:	00f75463          	bge	a4,a5,23009220 <__multiply+0x1e>
2300921c:	8432                	mv	s0,a2
2300921e:	892e                	mv	s2,a1
23009220:	01042a03          	lw	s4,16(s0)
23009224:	01092983          	lw	s3,16(s2)
23009228:	441c                	lw	a5,8(s0)
2300922a:	404c                	lw	a1,4(s0)
2300922c:	013a04b3          	add	s1,s4,s3
23009230:	0097d363          	bge	a5,s1,23009236 <__multiply+0x34>
23009234:	0585                	addi	a1,a1,1
23009236:	d15ff0ef          	jal	ra,23008f4a <_Balloc>
2300923a:	ed11                	bnez	a0,23009256 <__multiply+0x54>
2300923c:	00004697          	auipc	a3,0x4
23009240:	83c68693          	addi	a3,a3,-1988 # 2300ca78 <dma_channel_base+0x194>
23009244:	4601                	li	a2,0
23009246:	15d00593          	li	a1,349
2300924a:	00004517          	auipc	a0,0x4
2300924e:	8b250513          	addi	a0,a0,-1870 # 2300cafc <__sf_fake_stdout+0x30>
23009252:	4eb000ef          	jal	ra,23009f3c <__assert_func>
23009256:	01450693          	addi	a3,a0,20
2300925a:	00249813          	slli	a6,s1,0x2
2300925e:	9836                	add	a6,a6,a3
23009260:	87b6                	mv	a5,a3
23009262:	0507ea63          	bltu	a5,a6,230092b6 <__multiply+0xb4>
23009266:	01440313          	addi	t1,s0,20
2300926a:	002a1593          	slli	a1,s4,0x2
2300926e:	01490613          	addi	a2,s2,20
23009272:	00299893          	slli	a7,s3,0x2
23009276:	959a                	add	a1,a1,t1
23009278:	01540793          	addi	a5,s0,21
2300927c:	98b2                	add	a7,a7,a2
2300927e:	4e11                	li	t3,4
23009280:	00f5e863          	bltu	a1,a5,23009290 <__multiply+0x8e>
23009284:	40858433          	sub	s0,a1,s0
23009288:	142d                	addi	s0,s0,-21
2300928a:	9871                	andi	s0,s0,-4
2300928c:	00440e13          	addi	t3,s0,4
23009290:	6ec1                	lui	t4,0x10
23009292:	1efd                	addi	t4,t4,-1
23009294:	03166563          	bltu	a2,a7,230092be <__multiply+0xbc>
23009298:	00905663          	blez	s1,230092a4 <__multiply+0xa2>
2300929c:	ffc82783          	lw	a5,-4(a6)
230092a0:	1871                	addi	a6,a6,-4
230092a2:	cff1                	beqz	a5,2300937e <__multiply+0x17c>
230092a4:	40f2                	lw	ra,28(sp)
230092a6:	4462                	lw	s0,24(sp)
230092a8:	c904                	sw	s1,16(a0)
230092aa:	4942                	lw	s2,16(sp)
230092ac:	44d2                	lw	s1,20(sp)
230092ae:	49b2                	lw	s3,12(sp)
230092b0:	4a22                	lw	s4,8(sp)
230092b2:	6105                	addi	sp,sp,32
230092b4:	8082                	ret
230092b6:	0007a023          	sw	zero,0(a5)
230092ba:	0791                	addi	a5,a5,4
230092bc:	b75d                	j	23009262 <__multiply+0x60>
230092be:	00062f83          	lw	t6,0(a2)
230092c2:	01dfffb3          	and	t6,t6,t4
230092c6:	040f8b63          	beqz	t6,2300931c <__multiply+0x11a>
230092ca:	83b6                	mv	t2,a3
230092cc:	829a                	mv	t0,t1
230092ce:	4901                	li	s2,0
230092d0:	0002a703          	lw	a4,0(t0)
230092d4:	0003a403          	lw	s0,0(t2) # 10000 <StackSize+0xf000>
230092d8:	0391                	addi	t2,t2,4
230092da:	01d77f33          	and	t5,a4,t4
230092de:	03ff0f33          	mul	t5,t5,t6
230092e2:	01d477b3          	and	a5,s0,t4
230092e6:	8041                	srli	s0,s0,0x10
230092e8:	0291                	addi	t0,t0,4
230092ea:	9f3e                	add	t5,t5,a5
230092ec:	01075793          	srli	a5,a4,0x10
230092f0:	03f787b3          	mul	a5,a5,t6
230092f4:	9f4a                	add	t5,t5,s2
230092f6:	010f5713          	srli	a4,t5,0x10
230092fa:	01df7f33          	and	t5,t5,t4
230092fe:	97a2                	add	a5,a5,s0
23009300:	97ba                	add	a5,a5,a4
23009302:	0107d913          	srli	s2,a5,0x10
23009306:	07c2                	slli	a5,a5,0x10
23009308:	01e7e7b3          	or	a5,a5,t5
2300930c:	fef3ae23          	sw	a5,-4(t2)
23009310:	fcb2e0e3          	bltu	t0,a1,230092d0 <__multiply+0xce>
23009314:	01c687b3          	add	a5,a3,t3
23009318:	0127a023          	sw	s2,0(a5)
2300931c:	00265383          	lhu	t2,2(a2)
23009320:	04038c63          	beqz	t2,23009378 <__multiply+0x176>
23009324:	429c                	lw	a5,0(a3)
23009326:	8fb6                	mv	t6,a3
23009328:	8f1a                	mv	t5,t1
2300932a:	4281                	li	t0,0
2300932c:	000f2703          	lw	a4,0(t5)
23009330:	002fd403          	lhu	s0,2(t6)
23009334:	01d7f7b3          	and	a5,a5,t4
23009338:	01d77733          	and	a4,a4,t4
2300933c:	02770733          	mul	a4,a4,t2
23009340:	0f91                	addi	t6,t6,4
23009342:	0f11                	addi	t5,t5,4
23009344:	9722                	add	a4,a4,s0
23009346:	9716                	add	a4,a4,t0
23009348:	01071293          	slli	t0,a4,0x10
2300934c:	00f2e7b3          	or	a5,t0,a5
23009350:	feffae23          	sw	a5,-4(t6)
23009354:	ffef5783          	lhu	a5,-2(t5)
23009358:	000fa283          	lw	t0,0(t6)
2300935c:	8341                	srli	a4,a4,0x10
2300935e:	027787b3          	mul	a5,a5,t2
23009362:	01d2f2b3          	and	t0,t0,t4
23009366:	9796                	add	a5,a5,t0
23009368:	97ba                	add	a5,a5,a4
2300936a:	0107d293          	srli	t0,a5,0x10
2300936e:	fabf6fe3          	bltu	t5,a1,2300932c <__multiply+0x12a>
23009372:	01c68733          	add	a4,a3,t3
23009376:	c31c                	sw	a5,0(a4)
23009378:	0611                	addi	a2,a2,4
2300937a:	0691                	addi	a3,a3,4
2300937c:	bf21                	j	23009294 <__multiply+0x92>
2300937e:	14fd                	addi	s1,s1,-1
23009380:	bf21                	j	23009298 <__multiply+0x96>

23009382 <__pow5mult>:
23009382:	1101                	addi	sp,sp,-32
23009384:	ca26                	sw	s1,20(sp)
23009386:	c84a                	sw	s2,16(sp)
23009388:	c64e                	sw	s3,12(sp)
2300938a:	ce06                	sw	ra,28(sp)
2300938c:	cc22                	sw	s0,24(sp)
2300938e:	c452                	sw	s4,8(sp)
23009390:	00367793          	andi	a5,a2,3
23009394:	892a                	mv	s2,a0
23009396:	84b2                	mv	s1,a2
23009398:	89ae                	mv	s3,a1
2300939a:	cf89                	beqz	a5,230093b4 <__pow5mult+0x32>
2300939c:	17fd                	addi	a5,a5,-1
2300939e:	00004717          	auipc	a4,0x4
230093a2:	90a70713          	addi	a4,a4,-1782 # 2300cca8 <p05.0>
230093a6:	078a                	slli	a5,a5,0x2
230093a8:	97ba                	add	a5,a5,a4
230093aa:	4390                	lw	a2,0(a5)
230093ac:	4681                	li	a3,0
230093ae:	cadff0ef          	jal	ra,2300905a <__multadd>
230093b2:	89aa                	mv	s3,a0
230093b4:	8489                	srai	s1,s1,0x2
230093b6:	c8d1                	beqz	s1,2300944a <__pow5mult+0xc8>
230093b8:	02492783          	lw	a5,36(s2)
230093bc:	ef85                	bnez	a5,230093f4 <__pow5mult+0x72>
230093be:	4541                	li	a0,16
230093c0:	a7bfd0ef          	jal	ra,23006e3a <malloc>
230093c4:	02a92223          	sw	a0,36(s2)
230093c8:	ed11                	bnez	a0,230093e4 <__pow5mult+0x62>
230093ca:	00003697          	auipc	a3,0x3
230093ce:	5de68693          	addi	a3,a3,1502 # 2300c9a8 <dma_channel_base+0xc4>
230093d2:	4601                	li	a2,0
230093d4:	1ae00593          	li	a1,430
230093d8:	00003517          	auipc	a0,0x3
230093dc:	72450513          	addi	a0,a0,1828 # 2300cafc <__sf_fake_stdout+0x30>
230093e0:	35d000ef          	jal	ra,23009f3c <__assert_func>
230093e4:	00052223          	sw	zero,4(a0)
230093e8:	00052423          	sw	zero,8(a0)
230093ec:	00052023          	sw	zero,0(a0)
230093f0:	00052623          	sw	zero,12(a0)
230093f4:	02492a03          	lw	s4,36(s2)
230093f8:	008a2403          	lw	s0,8(s4)
230093fc:	e819                	bnez	s0,23009412 <__pow5mult+0x90>
230093fe:	27100593          	li	a1,625
23009402:	854a                	mv	a0,s2
23009404:	dc7ff0ef          	jal	ra,230091ca <__i2b>
23009408:	00aa2423          	sw	a0,8(s4)
2300940c:	842a                	mv	s0,a0
2300940e:	00052023          	sw	zero,0(a0)
23009412:	0014f793          	andi	a5,s1,1
23009416:	cf81                	beqz	a5,2300942e <__pow5mult+0xac>
23009418:	85ce                	mv	a1,s3
2300941a:	8622                	mv	a2,s0
2300941c:	854a                	mv	a0,s2
2300941e:	de5ff0ef          	jal	ra,23009202 <__multiply>
23009422:	8a2a                	mv	s4,a0
23009424:	85ce                	mv	a1,s3
23009426:	854a                	mv	a0,s2
23009428:	bd1ff0ef          	jal	ra,23008ff8 <_Bfree>
2300942c:	89d2                	mv	s3,s4
2300942e:	8485                	srai	s1,s1,0x1
23009430:	cc89                	beqz	s1,2300944a <__pow5mult+0xc8>
23009432:	4008                	lw	a0,0(s0)
23009434:	e909                	bnez	a0,23009446 <__pow5mult+0xc4>
23009436:	8622                	mv	a2,s0
23009438:	85a2                	mv	a1,s0
2300943a:	854a                	mv	a0,s2
2300943c:	dc7ff0ef          	jal	ra,23009202 <__multiply>
23009440:	c008                	sw	a0,0(s0)
23009442:	00052023          	sw	zero,0(a0)
23009446:	842a                	mv	s0,a0
23009448:	b7e9                	j	23009412 <__pow5mult+0x90>
2300944a:	40f2                	lw	ra,28(sp)
2300944c:	4462                	lw	s0,24(sp)
2300944e:	44d2                	lw	s1,20(sp)
23009450:	4942                	lw	s2,16(sp)
23009452:	4a22                	lw	s4,8(sp)
23009454:	854e                	mv	a0,s3
23009456:	49b2                	lw	s3,12(sp)
23009458:	6105                	addi	sp,sp,32
2300945a:	8082                	ret

2300945c <__lshift>:
2300945c:	1101                	addi	sp,sp,-32
2300945e:	cc22                	sw	s0,24(sp)
23009460:	842e                	mv	s0,a1
23009462:	c05a                	sw	s6,0(sp)
23009464:	01042b03          	lw	s6,16(s0)
23009468:	ca26                	sw	s1,20(sp)
2300946a:	41cc                	lw	a1,4(a1)
2300946c:	40565493          	srai	s1,a2,0x5
23009470:	441c                	lw	a5,8(s0)
23009472:	9b26                	add	s6,s6,s1
23009474:	c84a                	sw	s2,16(sp)
23009476:	c452                	sw	s4,8(sp)
23009478:	c256                	sw	s5,4(sp)
2300947a:	ce06                	sw	ra,28(sp)
2300947c:	c64e                	sw	s3,12(sp)
2300947e:	8aaa                	mv	s5,a0
23009480:	8932                	mv	s2,a2
23009482:	001b0a13          	addi	s4,s6,1
23009486:	0347c463          	blt	a5,s4,230094ae <__lshift+0x52>
2300948a:	8556                	mv	a0,s5
2300948c:	abfff0ef          	jal	ra,23008f4a <_Balloc>
23009490:	89aa                	mv	s3,a0
23009492:	e10d                	bnez	a0,230094b4 <__lshift+0x58>
23009494:	00003697          	auipc	a3,0x3
23009498:	5e468693          	addi	a3,a3,1508 # 2300ca78 <dma_channel_base+0x194>
2300949c:	4601                	li	a2,0
2300949e:	1d900593          	li	a1,473
230094a2:	00003517          	auipc	a0,0x3
230094a6:	65a50513          	addi	a0,a0,1626 # 2300cafc <__sf_fake_stdout+0x30>
230094aa:	293000ef          	jal	ra,23009f3c <__assert_func>
230094ae:	0585                	addi	a1,a1,1
230094b0:	0786                	slli	a5,a5,0x1
230094b2:	bfd1                	j	23009486 <__lshift+0x2a>
230094b4:	01450793          	addi	a5,a0,20
230094b8:	86be                	mv	a3,a5
230094ba:	4701                	li	a4,0
230094bc:	0691                	addi	a3,a3,4
230094be:	08974563          	blt	a4,s1,23009548 <__lshift+0xec>
230094c2:	0004d363          	bgez	s1,230094c8 <__lshift+0x6c>
230094c6:	4481                	li	s1,0
230094c8:	048a                	slli	s1,s1,0x2
230094ca:	009786b3          	add	a3,a5,s1
230094ce:	481c                	lw	a5,16(s0)
230094d0:	01440713          	addi	a4,s0,20
230094d4:	01f97613          	andi	a2,s2,31
230094d8:	078a                	slli	a5,a5,0x2
230094da:	97ba                	add	a5,a5,a4
230094dc:	ca35                	beqz	a2,23009550 <__lshift+0xf4>
230094de:	02000813          	li	a6,32
230094e2:	40c80833          	sub	a6,a6,a2
230094e6:	88b6                	mv	a7,a3
230094e8:	4581                	li	a1,0
230094ea:	4308                	lw	a0,0(a4)
230094ec:	0891                	addi	a7,a7,4
230094ee:	0711                	addi	a4,a4,4
230094f0:	00c51533          	sll	a0,a0,a2
230094f4:	8dc9                	or	a1,a1,a0
230094f6:	feb8ae23          	sw	a1,-4(a7) # fcbffffc <__HeapLimit+0xbabcfffc>
230094fa:	ffc72583          	lw	a1,-4(a4)
230094fe:	0105d5b3          	srl	a1,a1,a6
23009502:	fef764e3          	bltu	a4,a5,230094ea <__lshift+0x8e>
23009506:	01540713          	addi	a4,s0,21
2300950a:	4611                	li	a2,4
2300950c:	00e7e763          	bltu	a5,a4,2300951a <__lshift+0xbe>
23009510:	8f81                	sub	a5,a5,s0
23009512:	17ad                	addi	a5,a5,-21
23009514:	9bf1                	andi	a5,a5,-4
23009516:	00478613          	addi	a2,a5,4
2300951a:	96b2                	add	a3,a3,a2
2300951c:	c28c                	sw	a1,0(a3)
2300951e:	c199                	beqz	a1,23009524 <__lshift+0xc8>
23009520:	002b0a13          	addi	s4,s6,2
23009524:	1a7d                	addi	s4,s4,-1
23009526:	0149a823          	sw	s4,16(s3)
2300952a:	8556                	mv	a0,s5
2300952c:	85a2                	mv	a1,s0
2300952e:	acbff0ef          	jal	ra,23008ff8 <_Bfree>
23009532:	40f2                	lw	ra,28(sp)
23009534:	4462                	lw	s0,24(sp)
23009536:	44d2                	lw	s1,20(sp)
23009538:	4942                	lw	s2,16(sp)
2300953a:	4a22                	lw	s4,8(sp)
2300953c:	4a92                	lw	s5,4(sp)
2300953e:	4b02                	lw	s6,0(sp)
23009540:	854e                	mv	a0,s3
23009542:	49b2                	lw	s3,12(sp)
23009544:	6105                	addi	sp,sp,32
23009546:	8082                	ret
23009548:	fe06ae23          	sw	zero,-4(a3)
2300954c:	0705                	addi	a4,a4,1
2300954e:	b7bd                	j	230094bc <__lshift+0x60>
23009550:	4310                	lw	a2,0(a4)
23009552:	0711                	addi	a4,a4,4
23009554:	0691                	addi	a3,a3,4
23009556:	fec6ae23          	sw	a2,-4(a3)
2300955a:	fef76be3          	bltu	a4,a5,23009550 <__lshift+0xf4>
2300955e:	b7d9                	j	23009524 <__lshift+0xc8>

23009560 <__mcmp>:
23009560:	4914                	lw	a3,16(a0)
23009562:	4998                	lw	a4,16(a1)
23009564:	87aa                	mv	a5,a0
23009566:	40e68533          	sub	a0,a3,a4
2300956a:	02e69563          	bne	a3,a4,23009594 <__mcmp+0x34>
2300956e:	070a                	slli	a4,a4,0x2
23009570:	07d1                	addi	a5,a5,20
23009572:	05d1                	addi	a1,a1,20
23009574:	00e786b3          	add	a3,a5,a4
23009578:	95ba                	add	a1,a1,a4
2300957a:	16f1                	addi	a3,a3,-4
2300957c:	15f1                	addi	a1,a1,-4
2300957e:	4290                	lw	a2,0(a3)
23009580:	4198                	lw	a4,0(a1)
23009582:	00e60763          	beq	a2,a4,23009590 <__mcmp+0x30>
23009586:	557d                	li	a0,-1
23009588:	00e66663          	bltu	a2,a4,23009594 <__mcmp+0x34>
2300958c:	4505                	li	a0,1
2300958e:	8082                	ret
23009590:	fed7e5e3          	bltu	a5,a3,2300957a <__mcmp+0x1a>
23009594:	8082                	ret

23009596 <__mdiff>:
23009596:	1101                	addi	sp,sp,-32
23009598:	cc22                	sw	s0,24(sp)
2300959a:	842e                	mv	s0,a1
2300959c:	c84a                	sw	s2,16(sp)
2300959e:	85b2                	mv	a1,a2
230095a0:	892a                	mv	s2,a0
230095a2:	8522                	mv	a0,s0
230095a4:	ca26                	sw	s1,20(sp)
230095a6:	ce06                	sw	ra,28(sp)
230095a8:	c64e                	sw	s3,12(sp)
230095aa:	84b2                	mv	s1,a2
230095ac:	fb5ff0ef          	jal	ra,23009560 <__mcmp>
230095b0:	ed15                	bnez	a0,230095ec <__mdiff+0x56>
230095b2:	4581                	li	a1,0
230095b4:	854a                	mv	a0,s2
230095b6:	995ff0ef          	jal	ra,23008f4a <_Balloc>
230095ba:	ed11                	bnez	a0,230095d6 <__mdiff+0x40>
230095bc:	00003697          	auipc	a3,0x3
230095c0:	4bc68693          	addi	a3,a3,1212 # 2300ca78 <dma_channel_base+0x194>
230095c4:	4601                	li	a2,0
230095c6:	23200593          	li	a1,562
230095ca:	00003517          	auipc	a0,0x3
230095ce:	53250513          	addi	a0,a0,1330 # 2300cafc <__sf_fake_stdout+0x30>
230095d2:	16b000ef          	jal	ra,23009f3c <__assert_func>
230095d6:	4785                	li	a5,1
230095d8:	c91c                	sw	a5,16(a0)
230095da:	00052a23          	sw	zero,20(a0)
230095de:	40f2                	lw	ra,28(sp)
230095e0:	4462                	lw	s0,24(sp)
230095e2:	44d2                	lw	s1,20(sp)
230095e4:	4942                	lw	s2,16(sp)
230095e6:	49b2                	lw	s3,12(sp)
230095e8:	6105                	addi	sp,sp,32
230095ea:	8082                	ret
230095ec:	4985                	li	s3,1
230095ee:	00054663          	bltz	a0,230095fa <__mdiff+0x64>
230095f2:	87a6                	mv	a5,s1
230095f4:	4981                	li	s3,0
230095f6:	84a2                	mv	s1,s0
230095f8:	843e                	mv	s0,a5
230095fa:	40cc                	lw	a1,4(s1)
230095fc:	854a                	mv	a0,s2
230095fe:	94dff0ef          	jal	ra,23008f4a <_Balloc>
23009602:	e909                	bnez	a0,23009614 <__mdiff+0x7e>
23009604:	00003697          	auipc	a3,0x3
23009608:	47468693          	addi	a3,a3,1140 # 2300ca78 <dma_channel_base+0x194>
2300960c:	4601                	li	a2,0
2300960e:	24000593          	li	a1,576
23009612:	bf65                	j	230095ca <__mdiff+0x34>
23009614:	0104a803          	lw	a6,16(s1)
23009618:	4818                	lw	a4,16(s0)
2300961a:	01448893          	addi	a7,s1,20
2300961e:	00281693          	slli	a3,a6,0x2
23009622:	01440793          	addi	a5,s0,20
23009626:	070a                	slli	a4,a4,0x2
23009628:	6ec1                	lui	t4,0x10
2300962a:	01352623          	sw	s3,12(a0)
2300962e:	96c6                	add	a3,a3,a7
23009630:	97ba                	add	a5,a5,a4
23009632:	01450613          	addi	a2,a0,20
23009636:	4e51                	li	t3,20
23009638:	4301                	li	t1,0
2300963a:	1efd                	addi	t4,t4,-1
2300963c:	01c48733          	add	a4,s1,t3
23009640:	4318                	lw	a4,0(a4)
23009642:	01c405b3          	add	a1,s0,t3
23009646:	0005af03          	lw	t5,0(a1) # 10000 <StackSize+0xf000>
2300964a:	01d775b3          	and	a1,a4,t4
2300964e:	959a                	add	a1,a1,t1
23009650:	01df7333          	and	t1,t5,t4
23009654:	406585b3          	sub	a1,a1,t1
23009658:	010f5f13          	srli	t5,t5,0x10
2300965c:	8341                	srli	a4,a4,0x10
2300965e:	4105d313          	srai	t1,a1,0x10
23009662:	41e70733          	sub	a4,a4,t5
23009666:	971a                	add	a4,a4,t1
23009668:	41075313          	srai	t1,a4,0x10
2300966c:	01d5f5b3          	and	a1,a1,t4
23009670:	0742                	slli	a4,a4,0x10
23009672:	01c50f33          	add	t5,a0,t3
23009676:	8f4d                	or	a4,a4,a1
23009678:	0e11                	addi	t3,t3,4
2300967a:	00ef2023          	sw	a4,0(t5)
2300967e:	008e0733          	add	a4,t3,s0
23009682:	faf76de3          	bltu	a4,a5,2300963c <__mdiff+0xa6>
23009686:	01540593          	addi	a1,s0,21
2300968a:	4711                	li	a4,4
2300968c:	00b7e763          	bltu	a5,a1,2300969a <__mdiff+0x104>
23009690:	8f81                	sub	a5,a5,s0
23009692:	17ad                	addi	a5,a5,-21
23009694:	9bf1                	andi	a5,a5,-4
23009696:	00478713          	addi	a4,a5,4
2300969a:	98ba                	add	a7,a7,a4
2300969c:	6e41                	lui	t3,0x10
2300969e:	9732                	add	a4,a4,a2
230096a0:	8eba                	mv	t4,a4
230096a2:	85c6                	mv	a1,a7
230096a4:	1e7d                	addi	t3,t3,-1
230096a6:	02d5e263          	bltu	a1,a3,230096ca <__mdiff+0x134>
230096aa:	ffd88613          	addi	a2,a7,-3
230096ae:	4781                	li	a5,0
230096b0:	00c6e663          	bltu	a3,a2,230096bc <__mdiff+0x126>
230096b4:	068d                	addi	a3,a3,3
230096b6:	411687b3          	sub	a5,a3,a7
230096ba:	9bf1                	andi	a5,a5,-4
230096bc:	97ba                	add	a5,a5,a4
230096be:	17f1                	addi	a5,a5,-4
230096c0:	4398                	lw	a4,0(a5)
230096c2:	c71d                	beqz	a4,230096f0 <__mdiff+0x15a>
230096c4:	01052823          	sw	a6,16(a0)
230096c8:	bf19                	j	230095de <__mdiff+0x48>
230096ca:	419c                	lw	a5,0(a1)
230096cc:	0e91                	addi	t4,t4,4
230096ce:	0591                	addi	a1,a1,4
230096d0:	01c7f633          	and	a2,a5,t3
230096d4:	961a                	add	a2,a2,t1
230096d6:	41065313          	srai	t1,a2,0x10
230096da:	83c1                	srli	a5,a5,0x10
230096dc:	979a                	add	a5,a5,t1
230096de:	4107d313          	srai	t1,a5,0x10
230096e2:	01c67633          	and	a2,a2,t3
230096e6:	07c2                	slli	a5,a5,0x10
230096e8:	8fd1                	or	a5,a5,a2
230096ea:	fefeae23          	sw	a5,-4(t4) # fffc <StackSize+0xeffc>
230096ee:	bf65                	j	230096a6 <__mdiff+0x110>
230096f0:	187d                	addi	a6,a6,-1
230096f2:	b7f1                	j	230096be <__mdiff+0x128>

230096f4 <__d2b>:
230096f4:	7179                	addi	sp,sp,-48
230096f6:	d226                	sw	s1,36(sp)
230096f8:	84ae                	mv	s1,a1
230096fa:	4585                	li	a1,1
230096fc:	d422                	sw	s0,40(sp)
230096fe:	d04a                	sw	s2,32(sp)
23009700:	ce4e                	sw	s3,28(sp)
23009702:	d606                	sw	ra,44(sp)
23009704:	cc52                	sw	s4,24(sp)
23009706:	8432                	mv	s0,a2
23009708:	89b6                	mv	s3,a3
2300970a:	893a                	mv	s2,a4
2300970c:	83fff0ef          	jal	ra,23008f4a <_Balloc>
23009710:	ed11                	bnez	a0,2300972c <__d2b+0x38>
23009712:	00003697          	auipc	a3,0x3
23009716:	36668693          	addi	a3,a3,870 # 2300ca78 <dma_channel_base+0x194>
2300971a:	4601                	li	a2,0
2300971c:	30a00593          	li	a1,778
23009720:	00003517          	auipc	a0,0x3
23009724:	3dc50513          	addi	a0,a0,988 # 2300cafc <__sf_fake_stdout+0x30>
23009728:	015000ef          	jal	ra,23009f3c <__assert_func>
2300972c:	00100737          	lui	a4,0x100
23009730:	fff70793          	addi	a5,a4,-1 # fffff <StackSize+0xfefff>
23009734:	8fe1                	and	a5,a5,s0
23009736:	8051                	srli	s0,s0,0x14
23009738:	7ff47413          	andi	s0,s0,2047
2300973c:	8a2a                	mv	s4,a0
2300973e:	e035                	bnez	s0,230097a2 <__d2b+0xae>
23009740:	c63e                	sw	a5,12(sp)
23009742:	c4ad                	beqz	s1,230097ac <__d2b+0xb8>
23009744:	0028                	addi	a0,sp,8
23009746:	c426                	sw	s1,8(sp)
23009748:	a19ff0ef          	jal	ra,23009160 <__lo0bits>
2300974c:	46a2                	lw	a3,8(sp)
2300974e:	cd21                	beqz	a0,230097a6 <__d2b+0xb2>
23009750:	4732                	lw	a4,12(sp)
23009752:	02000793          	li	a5,32
23009756:	8f89                	sub	a5,a5,a0
23009758:	00f717b3          	sll	a5,a4,a5
2300975c:	8fd5                	or	a5,a5,a3
2300975e:	00a75733          	srl	a4,a4,a0
23009762:	00fa2a23          	sw	a5,20(s4)
23009766:	c63a                	sw	a4,12(sp)
23009768:	44b2                	lw	s1,12(sp)
2300976a:	009a2c23          	sw	s1,24(s4)
2300976e:	009034b3          	snez	s1,s1
23009772:	0485                	addi	s1,s1,1
23009774:	009a2823          	sw	s1,16(s4)
23009778:	c439                	beqz	s0,230097c6 <__d2b+0xd2>
2300977a:	bcd40413          	addi	s0,s0,-1075
2300977e:	942a                	add	s0,s0,a0
23009780:	03500793          	li	a5,53
23009784:	0089a023          	sw	s0,0(s3)
23009788:	40a78533          	sub	a0,a5,a0
2300978c:	00a92023          	sw	a0,0(s2)
23009790:	50b2                	lw	ra,44(sp)
23009792:	5422                	lw	s0,40(sp)
23009794:	5492                	lw	s1,36(sp)
23009796:	5902                	lw	s2,32(sp)
23009798:	49f2                	lw	s3,28(sp)
2300979a:	8552                	mv	a0,s4
2300979c:	4a62                	lw	s4,24(sp)
2300979e:	6145                	addi	sp,sp,48
230097a0:	8082                	ret
230097a2:	8fd9                	or	a5,a5,a4
230097a4:	bf71                	j	23009740 <__d2b+0x4c>
230097a6:	00da2a23          	sw	a3,20(s4)
230097aa:	bf7d                	j	23009768 <__d2b+0x74>
230097ac:	0068                	addi	a0,sp,12
230097ae:	9b3ff0ef          	jal	ra,23009160 <__lo0bits>
230097b2:	47b2                	lw	a5,12(sp)
230097b4:	02050513          	addi	a0,a0,32
230097b8:	4485                	li	s1,1
230097ba:	00fa2a23          	sw	a5,20(s4)
230097be:	4785                	li	a5,1
230097c0:	00fa2823          	sw	a5,16(s4)
230097c4:	bf55                	j	23009778 <__d2b+0x84>
230097c6:	bce50793          	addi	a5,a0,-1074
230097ca:	00f9a023          	sw	a5,0(s3)
230097ce:	00249793          	slli	a5,s1,0x2
230097d2:	97d2                	add	a5,a5,s4
230097d4:	4b88                	lw	a0,16(a5)
230097d6:	0496                	slli	s1,s1,0x5
230097d8:	943ff0ef          	jal	ra,2300911a <__hi0bits>
230097dc:	8c89                	sub	s1,s1,a0
230097de:	00992023          	sw	s1,0(s2)
230097e2:	b77d                	j	23009790 <__d2b+0x9c>

230097e4 <__ssputs_r>:
230097e4:	1101                	addi	sp,sp,-32
230097e6:	c84a                	sw	s2,16(sp)
230097e8:	0085a903          	lw	s2,8(a1)
230097ec:	cc22                	sw	s0,24(sp)
230097ee:	c64e                	sw	s3,12(sp)
230097f0:	c452                	sw	s4,8(sp)
230097f2:	ce06                	sw	ra,28(sp)
230097f4:	ca26                	sw	s1,20(sp)
230097f6:	c256                	sw	s5,4(sp)
230097f8:	c05a                	sw	s6,0(sp)
230097fa:	842e                	mv	s0,a1
230097fc:	8a32                	mv	s4,a2
230097fe:	89b6                	mv	s3,a3
23009800:	0926ee63          	bltu	a3,s2,2300989c <__ssputs_r+0xb8>
23009804:	00c5d783          	lhu	a5,12(a1)
23009808:	4807f713          	andi	a4,a5,1152
2300980c:	c751                	beqz	a4,23009898 <__ssputs_r+0xb4>
2300980e:	4004                	lw	s1,0(s0)
23009810:	498c                	lw	a1,16(a1)
23009812:	4858                	lw	a4,20(s0)
23009814:	8b2a                	mv	s6,a0
23009816:	40b48ab3          	sub	s5,s1,a1
2300981a:	448d                	li	s1,3
2300981c:	02e484b3          	mul	s1,s1,a4
23009820:	4709                	li	a4,2
23009822:	02e4c4b3          	div	s1,s1,a4
23009826:	00168713          	addi	a4,a3,1
2300982a:	9756                	add	a4,a4,s5
2300982c:	00e4f363          	bgeu	s1,a4,23009832 <__ssputs_r+0x4e>
23009830:	84ba                	mv	s1,a4
23009832:	4007f793          	andi	a5,a5,1024
23009836:	c3c9                	beqz	a5,230098b8 <__ssputs_r+0xd4>
23009838:	85a6                	mv	a1,s1
2300983a:	855a                	mv	a0,s6
2300983c:	a67f90ef          	jal	ra,230032a2 <_malloc_r>
23009840:	892a                	mv	s2,a0
23009842:	e50d                	bnez	a0,2300986c <__ssputs_r+0x88>
23009844:	47b1                	li	a5,12
23009846:	00fb2023          	sw	a5,0(s6)
2300984a:	00c45783          	lhu	a5,12(s0)
2300984e:	557d                	li	a0,-1
23009850:	0407e793          	ori	a5,a5,64
23009854:	00f41623          	sh	a5,12(s0)
23009858:	40f2                	lw	ra,28(sp)
2300985a:	4462                	lw	s0,24(sp)
2300985c:	44d2                	lw	s1,20(sp)
2300985e:	4942                	lw	s2,16(sp)
23009860:	49b2                	lw	s3,12(sp)
23009862:	4a22                	lw	s4,8(sp)
23009864:	4a92                	lw	s5,4(sp)
23009866:	4b02                	lw	s6,0(sp)
23009868:	6105                	addi	sp,sp,32
2300986a:	8082                	ret
2300986c:	480c                	lw	a1,16(s0)
2300986e:	8656                	mv	a2,s5
23009870:	ddefd0ef          	jal	ra,23006e4e <memcpy>
23009874:	00c45783          	lhu	a5,12(s0)
23009878:	b7f7f793          	andi	a5,a5,-1153
2300987c:	0807e793          	ori	a5,a5,128
23009880:	00f41623          	sh	a5,12(s0)
23009884:	01242823          	sw	s2,16(s0)
23009888:	c844                	sw	s1,20(s0)
2300988a:	9956                	add	s2,s2,s5
2300988c:	415484b3          	sub	s1,s1,s5
23009890:	01242023          	sw	s2,0(s0)
23009894:	c404                	sw	s1,8(s0)
23009896:	894e                	mv	s2,s3
23009898:	0129f363          	bgeu	s3,s2,2300989e <__ssputs_r+0xba>
2300989c:	894e                	mv	s2,s3
2300989e:	4008                	lw	a0,0(s0)
230098a0:	864a                	mv	a2,s2
230098a2:	85d2                	mv	a1,s4
230098a4:	2dd5                	jal	23009f98 <memmove>
230098a6:	441c                	lw	a5,8(s0)
230098a8:	4501                	li	a0,0
230098aa:	412787b3          	sub	a5,a5,s2
230098ae:	c41c                	sw	a5,8(s0)
230098b0:	401c                	lw	a5,0(s0)
230098b2:	97ca                	add	a5,a5,s2
230098b4:	c01c                	sw	a5,0(s0)
230098b6:	b74d                	j	23009858 <__ssputs_r+0x74>
230098b8:	8626                	mv	a2,s1
230098ba:	855a                	mv	a0,s6
230098bc:	a0df90ef          	jal	ra,230032c8 <_realloc_r>
230098c0:	892a                	mv	s2,a0
230098c2:	f169                	bnez	a0,23009884 <__ssputs_r+0xa0>
230098c4:	480c                	lw	a1,16(s0)
230098c6:	855a                	mv	a0,s6
230098c8:	a4df90ef          	jal	ra,23003314 <_free_r>
230098cc:	bfa5                	j	23009844 <__ssputs_r+0x60>

230098ce <_svfiprintf_r>:
230098ce:	00c5d783          	lhu	a5,12(a1)
230098d2:	7135                	addi	sp,sp,-160
230098d4:	cd22                	sw	s0,152(sp)
230098d6:	cb26                	sw	s1,148(sp)
230098d8:	c94a                	sw	s2,144(sp)
230098da:	c552                	sw	s4,136(sp)
230098dc:	cf06                	sw	ra,156(sp)
230098de:	c74e                	sw	s3,140(sp)
230098e0:	c356                	sw	s5,132(sp)
230098e2:	c15a                	sw	s6,128(sp)
230098e4:	dede                	sw	s7,124(sp)
230098e6:	dce2                	sw	s8,120(sp)
230098e8:	dae6                	sw	s9,116(sp)
230098ea:	0807f793          	andi	a5,a5,128
230098ee:	8a2a                	mv	s4,a0
230098f0:	892e                	mv	s2,a1
230098f2:	84b2                	mv	s1,a2
230098f4:	8436                	mv	s0,a3
230098f6:	c3a9                	beqz	a5,23009938 <_svfiprintf_r+0x6a>
230098f8:	499c                	lw	a5,16(a1)
230098fa:	ef9d                	bnez	a5,23009938 <_svfiprintf_r+0x6a>
230098fc:	04000593          	li	a1,64
23009900:	9a3f90ef          	jal	ra,230032a2 <_malloc_r>
23009904:	00a92023          	sw	a0,0(s2)
23009908:	00a92823          	sw	a0,16(s2)
2300990c:	e115                	bnez	a0,23009930 <_svfiprintf_r+0x62>
2300990e:	47b1                	li	a5,12
23009910:	00fa2023          	sw	a5,0(s4)
23009914:	557d                	li	a0,-1
23009916:	40fa                	lw	ra,156(sp)
23009918:	446a                	lw	s0,152(sp)
2300991a:	44da                	lw	s1,148(sp)
2300991c:	494a                	lw	s2,144(sp)
2300991e:	49ba                	lw	s3,140(sp)
23009920:	4a2a                	lw	s4,136(sp)
23009922:	4a9a                	lw	s5,132(sp)
23009924:	4b0a                	lw	s6,128(sp)
23009926:	5bf6                	lw	s7,124(sp)
23009928:	5c66                	lw	s8,120(sp)
2300992a:	5cd6                	lw	s9,116(sp)
2300992c:	610d                	addi	sp,sp,160
2300992e:	8082                	ret
23009930:	04000793          	li	a5,64
23009934:	00f92a23          	sw	a5,20(s2)
23009938:	02000793          	li	a5,32
2300993c:	02f104a3          	sb	a5,41(sp)
23009940:	03000793          	li	a5,48
23009944:	d202                	sw	zero,36(sp)
23009946:	02f10523          	sb	a5,42(sp)
2300994a:	c622                	sw	s0,12(sp)
2300994c:	02500b93          	li	s7,37
23009950:	00003a97          	auipc	s5,0x3
23009954:	364a8a93          	addi	s5,s5,868 # 2300ccb4 <p05.0+0xc>
23009958:	4c05                	li	s8,1
2300995a:	4b29                	li	s6,10
2300995c:	8426                	mv	s0,s1
2300995e:	00044783          	lbu	a5,0(s0)
23009962:	c399                	beqz	a5,23009968 <_svfiprintf_r+0x9a>
23009964:	09779d63          	bne	a5,s7,230099fe <_svfiprintf_r+0x130>
23009968:	40940cb3          	sub	s9,s0,s1
2300996c:	00940e63          	beq	s0,s1,23009988 <_svfiprintf_r+0xba>
23009970:	86e6                	mv	a3,s9
23009972:	8626                	mv	a2,s1
23009974:	85ca                	mv	a1,s2
23009976:	8552                	mv	a0,s4
23009978:	e6dff0ef          	jal	ra,230097e4 <__ssputs_r>
2300997c:	57fd                	li	a5,-1
2300997e:	1af50263          	beq	a0,a5,23009b22 <_svfiprintf_r+0x254>
23009982:	5792                	lw	a5,36(sp)
23009984:	97e6                	add	a5,a5,s9
23009986:	d23e                	sw	a5,36(sp)
23009988:	00044783          	lbu	a5,0(s0)
2300998c:	18078b63          	beqz	a5,23009b22 <_svfiprintf_r+0x254>
23009990:	57fd                	li	a5,-1
23009992:	00140493          	addi	s1,s0,1
23009996:	c802                	sw	zero,16(sp)
23009998:	ce02                	sw	zero,28(sp)
2300999a:	ca3e                	sw	a5,20(sp)
2300999c:	cc02                	sw	zero,24(sp)
2300999e:	040109a3          	sb	zero,83(sp)
230099a2:	d482                	sw	zero,104(sp)
230099a4:	0004c583          	lbu	a1,0(s1)
230099a8:	4615                	li	a2,5
230099aa:	8556                	mv	a0,s5
230099ac:	d84ff0ef          	jal	ra,23008f30 <memchr>
230099b0:	47c2                	lw	a5,16(sp)
230099b2:	00148413          	addi	s0,s1,1
230099b6:	e531                	bnez	a0,23009a02 <_svfiprintf_r+0x134>
230099b8:	0107f713          	andi	a4,a5,16
230099bc:	c709                	beqz	a4,230099c6 <_svfiprintf_r+0xf8>
230099be:	02000713          	li	a4,32
230099c2:	04e109a3          	sb	a4,83(sp)
230099c6:	0087f713          	andi	a4,a5,8
230099ca:	c709                	beqz	a4,230099d4 <_svfiprintf_r+0x106>
230099cc:	02b00713          	li	a4,43
230099d0:	04e109a3          	sb	a4,83(sp)
230099d4:	0004c683          	lbu	a3,0(s1)
230099d8:	02a00713          	li	a4,42
230099dc:	02e68b63          	beq	a3,a4,23009a12 <_svfiprintf_r+0x144>
230099e0:	47f2                	lw	a5,28(sp)
230099e2:	8426                	mv	s0,s1
230099e4:	4681                	li	a3,0
230099e6:	4625                	li	a2,9
230099e8:	00044703          	lbu	a4,0(s0)
230099ec:	00140593          	addi	a1,s0,1
230099f0:	fd070713          	addi	a4,a4,-48
230099f4:	06e67463          	bgeu	a2,a4,23009a5c <_svfiprintf_r+0x18e>
230099f8:	c68d                	beqz	a3,23009a22 <_svfiprintf_r+0x154>
230099fa:	ce3e                	sw	a5,28(sp)
230099fc:	a01d                	j	23009a22 <_svfiprintf_r+0x154>
230099fe:	0405                	addi	s0,s0,1
23009a00:	bfb9                	j	2300995e <_svfiprintf_r+0x90>
23009a02:	41550533          	sub	a0,a0,s5
23009a06:	00ac1533          	sll	a0,s8,a0
23009a0a:	8fc9                	or	a5,a5,a0
23009a0c:	c83e                	sw	a5,16(sp)
23009a0e:	84a2                	mv	s1,s0
23009a10:	bf51                	j	230099a4 <_svfiprintf_r+0xd6>
23009a12:	4732                	lw	a4,12(sp)
23009a14:	00470693          	addi	a3,a4,4
23009a18:	4318                	lw	a4,0(a4)
23009a1a:	c636                	sw	a3,12(sp)
23009a1c:	02074963          	bltz	a4,23009a4e <_svfiprintf_r+0x180>
23009a20:	ce3a                	sw	a4,28(sp)
23009a22:	00044703          	lbu	a4,0(s0)
23009a26:	02e00793          	li	a5,46
23009a2a:	04f71f63          	bne	a4,a5,23009a88 <_svfiprintf_r+0x1ba>
23009a2e:	00144703          	lbu	a4,1(s0)
23009a32:	02a00793          	li	a5,42
23009a36:	02f71b63          	bne	a4,a5,23009a6c <_svfiprintf_r+0x19e>
23009a3a:	47b2                	lw	a5,12(sp)
23009a3c:	0409                	addi	s0,s0,2
23009a3e:	00478713          	addi	a4,a5,4
23009a42:	439c                	lw	a5,0(a5)
23009a44:	c63a                	sw	a4,12(sp)
23009a46:	0207c163          	bltz	a5,23009a68 <_svfiprintf_r+0x19a>
23009a4a:	ca3e                	sw	a5,20(sp)
23009a4c:	a835                	j	23009a88 <_svfiprintf_r+0x1ba>
23009a4e:	40e00733          	neg	a4,a4
23009a52:	0027e793          	ori	a5,a5,2
23009a56:	ce3a                	sw	a4,28(sp)
23009a58:	c83e                	sw	a5,16(sp)
23009a5a:	b7e1                	j	23009a22 <_svfiprintf_r+0x154>
23009a5c:	036787b3          	mul	a5,a5,s6
23009a60:	842e                	mv	s0,a1
23009a62:	4685                	li	a3,1
23009a64:	97ba                	add	a5,a5,a4
23009a66:	b749                	j	230099e8 <_svfiprintf_r+0x11a>
23009a68:	57fd                	li	a5,-1
23009a6a:	b7c5                	j	23009a4a <_svfiprintf_r+0x17c>
23009a6c:	0405                	addi	s0,s0,1
23009a6e:	ca02                	sw	zero,20(sp)
23009a70:	4681                	li	a3,0
23009a72:	4781                	li	a5,0
23009a74:	4625                	li	a2,9
23009a76:	00044703          	lbu	a4,0(s0)
23009a7a:	00140593          	addi	a1,s0,1
23009a7e:	fd070713          	addi	a4,a4,-48
23009a82:	06e67863          	bgeu	a2,a4,23009af2 <_svfiprintf_r+0x224>
23009a86:	f2f1                	bnez	a3,23009a4a <_svfiprintf_r+0x17c>
23009a88:	00044583          	lbu	a1,0(s0)
23009a8c:	460d                	li	a2,3
23009a8e:	00003517          	auipc	a0,0x3
23009a92:	22e50513          	addi	a0,a0,558 # 2300ccbc <p05.0+0x14>
23009a96:	c9aff0ef          	jal	ra,23008f30 <memchr>
23009a9a:	cd11                	beqz	a0,23009ab6 <_svfiprintf_r+0x1e8>
23009a9c:	00003797          	auipc	a5,0x3
23009aa0:	22078793          	addi	a5,a5,544 # 2300ccbc <p05.0+0x14>
23009aa4:	8d1d                	sub	a0,a0,a5
23009aa6:	04000793          	li	a5,64
23009aaa:	00a797b3          	sll	a5,a5,a0
23009aae:	4542                	lw	a0,16(sp)
23009ab0:	0405                	addi	s0,s0,1
23009ab2:	8d5d                	or	a0,a0,a5
23009ab4:	c82a                	sw	a0,16(sp)
23009ab6:	00044583          	lbu	a1,0(s0)
23009aba:	4619                	li	a2,6
23009abc:	00003517          	auipc	a0,0x3
23009ac0:	20450513          	addi	a0,a0,516 # 2300ccc0 <p05.0+0x18>
23009ac4:	00140493          	addi	s1,s0,1
23009ac8:	02b10423          	sb	a1,40(sp)
23009acc:	c64ff0ef          	jal	ra,23008f30 <memchr>
23009ad0:	c135                	beqz	a0,23009b34 <_svfiprintf_r+0x266>
23009ad2:	ffffd797          	auipc	a5,0xffffd
23009ad6:	5e078793          	addi	a5,a5,1504 # 230070b2 <_printf_float>
23009ada:	e795                	bnez	a5,23009b06 <_svfiprintf_r+0x238>
23009adc:	4742                	lw	a4,16(sp)
23009ade:	47b2                	lw	a5,12(sp)
23009ae0:	10077713          	andi	a4,a4,256
23009ae4:	cf09                	beqz	a4,23009afe <_svfiprintf_r+0x230>
23009ae6:	0791                	addi	a5,a5,4
23009ae8:	c63e                	sw	a5,12(sp)
23009aea:	5792                	lw	a5,36(sp)
23009aec:	97ce                	add	a5,a5,s3
23009aee:	d23e                	sw	a5,36(sp)
23009af0:	b5b5                	j	2300995c <_svfiprintf_r+0x8e>
23009af2:	036787b3          	mul	a5,a5,s6
23009af6:	842e                	mv	s0,a1
23009af8:	4685                	li	a3,1
23009afa:	97ba                	add	a5,a5,a4
23009afc:	bfad                	j	23009a76 <_svfiprintf_r+0x1a8>
23009afe:	079d                	addi	a5,a5,7
23009b00:	9be1                	andi	a5,a5,-8
23009b02:	07a1                	addi	a5,a5,8
23009b04:	b7d5                	j	23009ae8 <_svfiprintf_r+0x21a>
23009b06:	0078                	addi	a4,sp,12
23009b08:	00000697          	auipc	a3,0x0
23009b0c:	cdc68693          	addi	a3,a3,-804 # 230097e4 <__ssputs_r>
23009b10:	864a                	mv	a2,s2
23009b12:	080c                	addi	a1,sp,16
23009b14:	8552                	mv	a0,s4
23009b16:	d9cfd0ef          	jal	ra,230070b2 <_printf_float>
23009b1a:	57fd                	li	a5,-1
23009b1c:	89aa                	mv	s3,a0
23009b1e:	fcf516e3          	bne	a0,a5,23009aea <_svfiprintf_r+0x21c>
23009b22:	00c95783          	lhu	a5,12(s2)
23009b26:	557d                	li	a0,-1
23009b28:	0407f793          	andi	a5,a5,64
23009b2c:	de0795e3          	bnez	a5,23009916 <_svfiprintf_r+0x48>
23009b30:	5512                	lw	a0,36(sp)
23009b32:	b3d5                	j	23009916 <_svfiprintf_r+0x48>
23009b34:	0078                	addi	a4,sp,12
23009b36:	00000697          	auipc	a3,0x0
23009b3a:	cae68693          	addi	a3,a3,-850 # 230097e4 <__ssputs_r>
23009b3e:	864a                	mv	a2,s2
23009b40:	080c                	addi	a1,sp,16
23009b42:	8552                	mv	a0,s4
23009b44:	b51fd0ef          	jal	ra,23007694 <_printf_i>
23009b48:	bfc9                	j	23009b1a <_svfiprintf_r+0x24c>

23009b4a <__sfputc_r>:
23009b4a:	461c                	lw	a5,8(a2)
23009b4c:	17fd                	addi	a5,a5,-1
23009b4e:	c61c                	sw	a5,8(a2)
23009b50:	0007da63          	bgez	a5,23009b64 <__sfputc_r+0x1a>
23009b54:	4e18                	lw	a4,24(a2)
23009b56:	00e7c563          	blt	a5,a4,23009b60 <__sfputc_r+0x16>
23009b5a:	47a9                	li	a5,10
23009b5c:	00f59463          	bne	a1,a5,23009b64 <__sfputc_r+0x1a>
23009b60:	f5bfd06f          	j	23007aba <__swbuf_r>
23009b64:	421c                	lw	a5,0(a2)
23009b66:	852e                	mv	a0,a1
23009b68:	00178713          	addi	a4,a5,1
23009b6c:	c218                	sw	a4,0(a2)
23009b6e:	00b78023          	sb	a1,0(a5)
23009b72:	8082                	ret

23009b74 <__sfputs_r>:
23009b74:	1101                	addi	sp,sp,-32
23009b76:	cc22                	sw	s0,24(sp)
23009b78:	ca26                	sw	s1,20(sp)
23009b7a:	c84a                	sw	s2,16(sp)
23009b7c:	c64e                	sw	s3,12(sp)
23009b7e:	c452                	sw	s4,8(sp)
23009b80:	ce06                	sw	ra,28(sp)
23009b82:	892a                	mv	s2,a0
23009b84:	89ae                	mv	s3,a1
23009b86:	8432                	mv	s0,a2
23009b88:	00d604b3          	add	s1,a2,a3
23009b8c:	5a7d                	li	s4,-1
23009b8e:	00941463          	bne	s0,s1,23009b96 <__sfputs_r+0x22>
23009b92:	4501                	li	a0,0
23009b94:	a811                	j	23009ba8 <__sfputs_r+0x34>
23009b96:	00044583          	lbu	a1,0(s0)
23009b9a:	864e                	mv	a2,s3
23009b9c:	854a                	mv	a0,s2
23009b9e:	fadff0ef          	jal	ra,23009b4a <__sfputc_r>
23009ba2:	0405                	addi	s0,s0,1
23009ba4:	ff4515e3          	bne	a0,s4,23009b8e <__sfputs_r+0x1a>
23009ba8:	40f2                	lw	ra,28(sp)
23009baa:	4462                	lw	s0,24(sp)
23009bac:	44d2                	lw	s1,20(sp)
23009bae:	4942                	lw	s2,16(sp)
23009bb0:	49b2                	lw	s3,12(sp)
23009bb2:	4a22                	lw	s4,8(sp)
23009bb4:	6105                	addi	sp,sp,32
23009bb6:	8082                	ret

23009bb8 <_vfiprintf_r>:
23009bb8:	7135                	addi	sp,sp,-160
23009bba:	cd22                	sw	s0,152(sp)
23009bbc:	cb26                	sw	s1,148(sp)
23009bbe:	c94a                	sw	s2,144(sp)
23009bc0:	c74e                	sw	s3,140(sp)
23009bc2:	cf06                	sw	ra,156(sp)
23009bc4:	c552                	sw	s4,136(sp)
23009bc6:	c356                	sw	s5,132(sp)
23009bc8:	c15a                	sw	s6,128(sp)
23009bca:	dede                	sw	s7,124(sp)
23009bcc:	dce2                	sw	s8,120(sp)
23009bce:	dae6                	sw	s9,116(sp)
23009bd0:	89aa                	mv	s3,a0
23009bd2:	84ae                	mv	s1,a1
23009bd4:	8932                	mv	s2,a2
23009bd6:	8436                	mv	s0,a3
23009bd8:	c509                	beqz	a0,23009be2 <_vfiprintf_r+0x2a>
23009bda:	4d1c                	lw	a5,24(a0)
23009bdc:	e399                	bnez	a5,23009be2 <_vfiprintf_r+0x2a>
23009bde:	898ff0ef          	jal	ra,23008c76 <__sinit>
23009be2:	00003797          	auipc	a5,0x3
23009be6:	eca78793          	addi	a5,a5,-310 # 2300caac <__sf_fake_stdin>
23009bea:	0cf49d63          	bne	s1,a5,23009cc4 <_vfiprintf_r+0x10c>
23009bee:	0049a483          	lw	s1,4(s3)
23009bf2:	00c4d783          	lhu	a5,12(s1)
23009bf6:	8ba1                	andi	a5,a5,8
23009bf8:	cbe5                	beqz	a5,23009ce8 <_vfiprintf_r+0x130>
23009bfa:	489c                	lw	a5,16(s1)
23009bfc:	c7f5                	beqz	a5,23009ce8 <_vfiprintf_r+0x130>
23009bfe:	02000793          	li	a5,32
23009c02:	02f104a3          	sb	a5,41(sp)
23009c06:	03000793          	li	a5,48
23009c0a:	d202                	sw	zero,36(sp)
23009c0c:	02f10523          	sb	a5,42(sp)
23009c10:	c622                	sw	s0,12(sp)
23009c12:	02500b93          	li	s7,37
23009c16:	00003a97          	auipc	s5,0x3
23009c1a:	09ea8a93          	addi	s5,s5,158 # 2300ccb4 <p05.0+0xc>
23009c1e:	4c05                	li	s8,1
23009c20:	4b29                	li	s6,10
23009c22:	844a                	mv	s0,s2
23009c24:	00044783          	lbu	a5,0(s0)
23009c28:	c399                	beqz	a5,23009c2e <_vfiprintf_r+0x76>
23009c2a:	0f779263          	bne	a5,s7,23009d0e <_vfiprintf_r+0x156>
23009c2e:	41240cb3          	sub	s9,s0,s2
23009c32:	01240e63          	beq	s0,s2,23009c4e <_vfiprintf_r+0x96>
23009c36:	86e6                	mv	a3,s9
23009c38:	864a                	mv	a2,s2
23009c3a:	85a6                	mv	a1,s1
23009c3c:	854e                	mv	a0,s3
23009c3e:	f37ff0ef          	jal	ra,23009b74 <__sfputs_r>
23009c42:	57fd                	li	a5,-1
23009c44:	1ef50763          	beq	a0,a5,23009e32 <_vfiprintf_r+0x27a>
23009c48:	5792                	lw	a5,36(sp)
23009c4a:	97e6                	add	a5,a5,s9
23009c4c:	d23e                	sw	a5,36(sp)
23009c4e:	00044783          	lbu	a5,0(s0)
23009c52:	1e078063          	beqz	a5,23009e32 <_vfiprintf_r+0x27a>
23009c56:	57fd                	li	a5,-1
23009c58:	00140913          	addi	s2,s0,1
23009c5c:	c802                	sw	zero,16(sp)
23009c5e:	ce02                	sw	zero,28(sp)
23009c60:	ca3e                	sw	a5,20(sp)
23009c62:	cc02                	sw	zero,24(sp)
23009c64:	040109a3          	sb	zero,83(sp)
23009c68:	d482                	sw	zero,104(sp)
23009c6a:	00094583          	lbu	a1,0(s2)
23009c6e:	4615                	li	a2,5
23009c70:	8556                	mv	a0,s5
23009c72:	abeff0ef          	jal	ra,23008f30 <memchr>
23009c76:	47c2                	lw	a5,16(sp)
23009c78:	00190413          	addi	s0,s2,1
23009c7c:	e959                	bnez	a0,23009d12 <_vfiprintf_r+0x15a>
23009c7e:	0107f713          	andi	a4,a5,16
23009c82:	c709                	beqz	a4,23009c8c <_vfiprintf_r+0xd4>
23009c84:	02000713          	li	a4,32
23009c88:	04e109a3          	sb	a4,83(sp)
23009c8c:	0087f713          	andi	a4,a5,8
23009c90:	c709                	beqz	a4,23009c9a <_vfiprintf_r+0xe2>
23009c92:	02b00713          	li	a4,43
23009c96:	04e109a3          	sb	a4,83(sp)
23009c9a:	00094683          	lbu	a3,0(s2)
23009c9e:	02a00713          	li	a4,42
23009ca2:	08e68063          	beq	a3,a4,23009d22 <_vfiprintf_r+0x16a>
23009ca6:	47f2                	lw	a5,28(sp)
23009ca8:	844a                	mv	s0,s2
23009caa:	4681                	li	a3,0
23009cac:	4625                	li	a2,9
23009cae:	00044703          	lbu	a4,0(s0)
23009cb2:	00140593          	addi	a1,s0,1
23009cb6:	fd070713          	addi	a4,a4,-48
23009cba:	0ae67963          	bgeu	a2,a4,23009d6c <_vfiprintf_r+0x1b4>
23009cbe:	cab5                	beqz	a3,23009d32 <_vfiprintf_r+0x17a>
23009cc0:	ce3e                	sw	a5,28(sp)
23009cc2:	a885                	j	23009d32 <_vfiprintf_r+0x17a>
23009cc4:	00003797          	auipc	a5,0x3
23009cc8:	e0878793          	addi	a5,a5,-504 # 2300cacc <__sf_fake_stdout>
23009ccc:	00f49563          	bne	s1,a5,23009cd6 <_vfiprintf_r+0x11e>
23009cd0:	0089a483          	lw	s1,8(s3)
23009cd4:	bf39                	j	23009bf2 <_vfiprintf_r+0x3a>
23009cd6:	00003797          	auipc	a5,0x3
23009cda:	db678793          	addi	a5,a5,-586 # 2300ca8c <__sf_fake_stderr>
23009cde:	f0f49ae3          	bne	s1,a5,23009bf2 <_vfiprintf_r+0x3a>
23009ce2:	00c9a483          	lw	s1,12(s3)
23009ce6:	b731                	j	23009bf2 <_vfiprintf_r+0x3a>
23009ce8:	85a6                	mv	a1,s1
23009cea:	854e                	mv	a0,s3
23009cec:	e95fd0ef          	jal	ra,23007b80 <__swsetup_r>
23009cf0:	d519                	beqz	a0,23009bfe <_vfiprintf_r+0x46>
23009cf2:	557d                	li	a0,-1
23009cf4:	40fa                	lw	ra,156(sp)
23009cf6:	446a                	lw	s0,152(sp)
23009cf8:	44da                	lw	s1,148(sp)
23009cfa:	494a                	lw	s2,144(sp)
23009cfc:	49ba                	lw	s3,140(sp)
23009cfe:	4a2a                	lw	s4,136(sp)
23009d00:	4a9a                	lw	s5,132(sp)
23009d02:	4b0a                	lw	s6,128(sp)
23009d04:	5bf6                	lw	s7,124(sp)
23009d06:	5c66                	lw	s8,120(sp)
23009d08:	5cd6                	lw	s9,116(sp)
23009d0a:	610d                	addi	sp,sp,160
23009d0c:	8082                	ret
23009d0e:	0405                	addi	s0,s0,1
23009d10:	bf11                	j	23009c24 <_vfiprintf_r+0x6c>
23009d12:	41550533          	sub	a0,a0,s5
23009d16:	00ac1533          	sll	a0,s8,a0
23009d1a:	8fc9                	or	a5,a5,a0
23009d1c:	c83e                	sw	a5,16(sp)
23009d1e:	8922                	mv	s2,s0
23009d20:	b7a9                	j	23009c6a <_vfiprintf_r+0xb2>
23009d22:	4732                	lw	a4,12(sp)
23009d24:	00470693          	addi	a3,a4,4
23009d28:	4318                	lw	a4,0(a4)
23009d2a:	c636                	sw	a3,12(sp)
23009d2c:	02074963          	bltz	a4,23009d5e <_vfiprintf_r+0x1a6>
23009d30:	ce3a                	sw	a4,28(sp)
23009d32:	00044703          	lbu	a4,0(s0)
23009d36:	02e00793          	li	a5,46
23009d3a:	04f71f63          	bne	a4,a5,23009d98 <_vfiprintf_r+0x1e0>
23009d3e:	00144703          	lbu	a4,1(s0)
23009d42:	02a00793          	li	a5,42
23009d46:	02f71b63          	bne	a4,a5,23009d7c <_vfiprintf_r+0x1c4>
23009d4a:	47b2                	lw	a5,12(sp)
23009d4c:	0409                	addi	s0,s0,2
23009d4e:	00478713          	addi	a4,a5,4
23009d52:	439c                	lw	a5,0(a5)
23009d54:	c63a                	sw	a4,12(sp)
23009d56:	0207c163          	bltz	a5,23009d78 <_vfiprintf_r+0x1c0>
23009d5a:	ca3e                	sw	a5,20(sp)
23009d5c:	a835                	j	23009d98 <_vfiprintf_r+0x1e0>
23009d5e:	40e00733          	neg	a4,a4
23009d62:	0027e793          	ori	a5,a5,2
23009d66:	ce3a                	sw	a4,28(sp)
23009d68:	c83e                	sw	a5,16(sp)
23009d6a:	b7e1                	j	23009d32 <_vfiprintf_r+0x17a>
23009d6c:	036787b3          	mul	a5,a5,s6
23009d70:	842e                	mv	s0,a1
23009d72:	4685                	li	a3,1
23009d74:	97ba                	add	a5,a5,a4
23009d76:	bf25                	j	23009cae <_vfiprintf_r+0xf6>
23009d78:	57fd                	li	a5,-1
23009d7a:	b7c5                	j	23009d5a <_vfiprintf_r+0x1a2>
23009d7c:	0405                	addi	s0,s0,1
23009d7e:	ca02                	sw	zero,20(sp)
23009d80:	4681                	li	a3,0
23009d82:	4781                	li	a5,0
23009d84:	4625                	li	a2,9
23009d86:	00044703          	lbu	a4,0(s0)
23009d8a:	00140593          	addi	a1,s0,1
23009d8e:	fd070713          	addi	a4,a4,-48
23009d92:	06e67863          	bgeu	a2,a4,23009e02 <_vfiprintf_r+0x24a>
23009d96:	f2f1                	bnez	a3,23009d5a <_vfiprintf_r+0x1a2>
23009d98:	00044583          	lbu	a1,0(s0)
23009d9c:	460d                	li	a2,3
23009d9e:	00003517          	auipc	a0,0x3
23009da2:	f1e50513          	addi	a0,a0,-226 # 2300ccbc <p05.0+0x14>
23009da6:	98aff0ef          	jal	ra,23008f30 <memchr>
23009daa:	cd11                	beqz	a0,23009dc6 <_vfiprintf_r+0x20e>
23009dac:	00003797          	auipc	a5,0x3
23009db0:	f1078793          	addi	a5,a5,-240 # 2300ccbc <p05.0+0x14>
23009db4:	8d1d                	sub	a0,a0,a5
23009db6:	04000793          	li	a5,64
23009dba:	00a797b3          	sll	a5,a5,a0
23009dbe:	4542                	lw	a0,16(sp)
23009dc0:	0405                	addi	s0,s0,1
23009dc2:	8d5d                	or	a0,a0,a5
23009dc4:	c82a                	sw	a0,16(sp)
23009dc6:	00044583          	lbu	a1,0(s0)
23009dca:	4619                	li	a2,6
23009dcc:	00003517          	auipc	a0,0x3
23009dd0:	ef450513          	addi	a0,a0,-268 # 2300ccc0 <p05.0+0x18>
23009dd4:	00140913          	addi	s2,s0,1
23009dd8:	02b10423          	sb	a1,40(sp)
23009ddc:	954ff0ef          	jal	ra,23008f30 <memchr>
23009de0:	c12d                	beqz	a0,23009e42 <_vfiprintf_r+0x28a>
23009de2:	ffffd797          	auipc	a5,0xffffd
23009de6:	2d078793          	addi	a5,a5,720 # 230070b2 <_printf_float>
23009dea:	e795                	bnez	a5,23009e16 <_vfiprintf_r+0x25e>
23009dec:	4742                	lw	a4,16(sp)
23009dee:	47b2                	lw	a5,12(sp)
23009df0:	10077713          	andi	a4,a4,256
23009df4:	cf09                	beqz	a4,23009e0e <_vfiprintf_r+0x256>
23009df6:	0791                	addi	a5,a5,4
23009df8:	c63e                	sw	a5,12(sp)
23009dfa:	5792                	lw	a5,36(sp)
23009dfc:	97d2                	add	a5,a5,s4
23009dfe:	d23e                	sw	a5,36(sp)
23009e00:	b50d                	j	23009c22 <_vfiprintf_r+0x6a>
23009e02:	036787b3          	mul	a5,a5,s6
23009e06:	842e                	mv	s0,a1
23009e08:	4685                	li	a3,1
23009e0a:	97ba                	add	a5,a5,a4
23009e0c:	bfad                	j	23009d86 <_vfiprintf_r+0x1ce>
23009e0e:	079d                	addi	a5,a5,7
23009e10:	9be1                	andi	a5,a5,-8
23009e12:	07a1                	addi	a5,a5,8
23009e14:	b7d5                	j	23009df8 <_vfiprintf_r+0x240>
23009e16:	0078                	addi	a4,sp,12
23009e18:	00000697          	auipc	a3,0x0
23009e1c:	d5c68693          	addi	a3,a3,-676 # 23009b74 <__sfputs_r>
23009e20:	8626                	mv	a2,s1
23009e22:	080c                	addi	a1,sp,16
23009e24:	854e                	mv	a0,s3
23009e26:	a8cfd0ef          	jal	ra,230070b2 <_printf_float>
23009e2a:	57fd                	li	a5,-1
23009e2c:	8a2a                	mv	s4,a0
23009e2e:	fcf516e3          	bne	a0,a5,23009dfa <_vfiprintf_r+0x242>
23009e32:	00c4d783          	lhu	a5,12(s1)
23009e36:	0407f793          	andi	a5,a5,64
23009e3a:	ea079ce3          	bnez	a5,23009cf2 <_vfiprintf_r+0x13a>
23009e3e:	5512                	lw	a0,36(sp)
23009e40:	bd55                	j	23009cf4 <_vfiprintf_r+0x13c>
23009e42:	0078                	addi	a4,sp,12
23009e44:	00000697          	auipc	a3,0x0
23009e48:	d3068693          	addi	a3,a3,-720 # 23009b74 <__sfputs_r>
23009e4c:	8626                	mv	a2,s1
23009e4e:	080c                	addi	a1,sp,16
23009e50:	854e                	mv	a0,s3
23009e52:	843fd0ef          	jal	ra,23007694 <_printf_i>
23009e56:	bfd1                	j	23009e2a <_vfiprintf_r+0x272>

23009e58 <__sread>:
23009e58:	1141                	addi	sp,sp,-16
23009e5a:	c422                	sw	s0,8(sp)
23009e5c:	842e                	mv	s0,a1
23009e5e:	00e59583          	lh	a1,14(a1)
23009e62:	c606                	sw	ra,12(sp)
23009e64:	c02f90ef          	jal	ra,23003266 <_read_r>
23009e68:	00054963          	bltz	a0,23009e7a <__sread+0x22>
23009e6c:	487c                	lw	a5,84(s0)
23009e6e:	97aa                	add	a5,a5,a0
23009e70:	c87c                	sw	a5,84(s0)
23009e72:	40b2                	lw	ra,12(sp)
23009e74:	4422                	lw	s0,8(sp)
23009e76:	0141                	addi	sp,sp,16
23009e78:	8082                	ret
23009e7a:	00c45783          	lhu	a5,12(s0)
23009e7e:	777d                	lui	a4,0xfffff
23009e80:	177d                	addi	a4,a4,-1
23009e82:	8ff9                	and	a5,a5,a4
23009e84:	00f41623          	sh	a5,12(s0)
23009e88:	b7ed                	j	23009e72 <__sread+0x1a>

23009e8a <__swrite>:
23009e8a:	00c5d783          	lhu	a5,12(a1)
23009e8e:	1101                	addi	sp,sp,-32
23009e90:	cc22                	sw	s0,24(sp)
23009e92:	ca26                	sw	s1,20(sp)
23009e94:	c84a                	sw	s2,16(sp)
23009e96:	c64e                	sw	s3,12(sp)
23009e98:	ce06                	sw	ra,28(sp)
23009e9a:	1007f793          	andi	a5,a5,256
23009e9e:	84aa                	mv	s1,a0
23009ea0:	842e                	mv	s0,a1
23009ea2:	8932                	mv	s2,a2
23009ea4:	89b6                	mv	s3,a3
23009ea6:	c799                	beqz	a5,23009eb4 <__swrite+0x2a>
23009ea8:	00e59583          	lh	a1,14(a1)
23009eac:	4689                	li	a3,2
23009eae:	4601                	li	a2,0
23009eb0:	ba2f90ef          	jal	ra,23003252 <_lseek_r>
23009eb4:	00c45783          	lhu	a5,12(s0)
23009eb8:	777d                	lui	a4,0xfffff
23009eba:	177d                	addi	a4,a4,-1
23009ebc:	8ff9                	and	a5,a5,a4
23009ebe:	00e41583          	lh	a1,14(s0)
23009ec2:	00f41623          	sh	a5,12(s0)
23009ec6:	4462                	lw	s0,24(sp)
23009ec8:	40f2                	lw	ra,28(sp)
23009eca:	86ce                	mv	a3,s3
23009ecc:	864a                	mv	a2,s2
23009ece:	49b2                	lw	s3,12(sp)
23009ed0:	4942                	lw	s2,16(sp)
23009ed2:	8526                	mv	a0,s1
23009ed4:	44d2                	lw	s1,20(sp)
23009ed6:	6105                	addi	sp,sp,32
23009ed8:	b98f906f          	j	23003270 <_write_r>

23009edc <__sseek>:
23009edc:	1141                	addi	sp,sp,-16
23009ede:	c422                	sw	s0,8(sp)
23009ee0:	842e                	mv	s0,a1
23009ee2:	00e59583          	lh	a1,14(a1)
23009ee6:	c606                	sw	ra,12(sp)
23009ee8:	b6af90ef          	jal	ra,23003252 <_lseek_r>
23009eec:	57fd                	li	a5,-1
23009eee:	00c45703          	lhu	a4,12(s0)
23009ef2:	00f51b63          	bne	a0,a5,23009f08 <__sseek+0x2c>
23009ef6:	77fd                	lui	a5,0xfffff
23009ef8:	17fd                	addi	a5,a5,-1
23009efa:	8ff9                	and	a5,a5,a4
23009efc:	00f41623          	sh	a5,12(s0)
23009f00:	40b2                	lw	ra,12(sp)
23009f02:	4422                	lw	s0,8(sp)
23009f04:	0141                	addi	sp,sp,16
23009f06:	8082                	ret
23009f08:	6785                	lui	a5,0x1
23009f0a:	8fd9                	or	a5,a5,a4
23009f0c:	00f41623          	sh	a5,12(s0)
23009f10:	c868                	sw	a0,84(s0)
23009f12:	b7fd                	j	23009f00 <__sseek+0x24>

23009f14 <__sclose>:
23009f14:	00e59583          	lh	a1,14(a1)
23009f18:	b44f906f          	j	2300325c <_close_r>

23009f1c <__ascii_wctomb>:
23009f1c:	cd91                	beqz	a1,23009f38 <__ascii_wctomb+0x1c>
23009f1e:	0ff00793          	li	a5,255
23009f22:	00c7f763          	bgeu	a5,a2,23009f30 <__ascii_wctomb+0x14>
23009f26:	08a00793          	li	a5,138
23009f2a:	c11c                	sw	a5,0(a0)
23009f2c:	557d                	li	a0,-1
23009f2e:	8082                	ret
23009f30:	00c58023          	sb	a2,0(a1)
23009f34:	4505                	li	a0,1
23009f36:	8082                	ret
23009f38:	4501                	li	a0,0
23009f3a:	8082                	ret

23009f3c <__assert_func>:
23009f3c:	1141                	addi	sp,sp,-16
23009f3e:	a8c1a783          	lw	a5,-1396(gp) # 4201628c <_impure_ptr>
23009f42:	8832                	mv	a6,a2
23009f44:	c606                	sw	ra,12(sp)
23009f46:	88aa                	mv	a7,a0
23009f48:	872e                	mv	a4,a1
23009f4a:	47c8                	lw	a0,12(a5)
23009f4c:	8636                	mv	a2,a3
23009f4e:	00003797          	auipc	a5,0x3
23009f52:	d7a78793          	addi	a5,a5,-646 # 2300ccc8 <p05.0+0x20>
23009f56:	00081763          	bnez	a6,23009f64 <__assert_func+0x28>
23009f5a:	00002797          	auipc	a5,0x2
23009f5e:	5b678793          	addi	a5,a5,1462 # 2300c510 <strtol+0x296>
23009f62:	883e                	mv	a6,a5
23009f64:	86c6                	mv	a3,a7
23009f66:	00003597          	auipc	a1,0x3
23009f6a:	d7258593          	addi	a1,a1,-654 # 2300ccd8 <p05.0+0x30>
23009f6e:	2011                	jal	23009f72 <fiprintf>
23009f70:	288d                	jal	23009fe2 <abort>

23009f72 <fiprintf>:
23009f72:	7139                	addi	sp,sp,-64
23009f74:	d432                	sw	a2,40(sp)
23009f76:	d636                	sw	a3,44(sp)
23009f78:	862e                	mv	a2,a1
23009f7a:	1034                	addi	a3,sp,40
23009f7c:	85aa                	mv	a1,a0
23009f7e:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
23009f82:	ce06                	sw	ra,28(sp)
23009f84:	d83a                	sw	a4,48(sp)
23009f86:	da3e                	sw	a5,52(sp)
23009f88:	dc42                	sw	a6,56(sp)
23009f8a:	de46                	sw	a7,60(sp)
23009f8c:	c636                	sw	a3,12(sp)
23009f8e:	c2bff0ef          	jal	ra,23009bb8 <_vfiprintf_r>
23009f92:	40f2                	lw	ra,28(sp)
23009f94:	6121                	addi	sp,sp,64
23009f96:	8082                	ret

23009f98 <memmove>:
23009f98:	04a5f363          	bgeu	a1,a0,23009fde <memmove+0x46>
23009f9c:	00c586b3          	add	a3,a1,a2
23009fa0:	02d57f63          	bgeu	a0,a3,23009fde <memmove+0x46>
23009fa4:	fff64593          	not	a1,a2
23009fa8:	4781                	li	a5,0
23009faa:	17fd                	addi	a5,a5,-1
23009fac:	00f59363          	bne	a1,a5,23009fb2 <memmove+0x1a>
23009fb0:	8082                	ret
23009fb2:	00f68733          	add	a4,a3,a5
23009fb6:	00074803          	lbu	a6,0(a4) # fffff000 <__HeapLimit+0xbdfcf000>
23009fba:	00f60733          	add	a4,a2,a5
23009fbe:	972a                	add	a4,a4,a0
23009fc0:	01070023          	sb	a6,0(a4)
23009fc4:	b7dd                	j	23009faa <memmove+0x12>
23009fc6:	00f58733          	add	a4,a1,a5
23009fca:	00074683          	lbu	a3,0(a4)
23009fce:	00f50733          	add	a4,a0,a5
23009fd2:	0785                	addi	a5,a5,1
23009fd4:	00d70023          	sb	a3,0(a4)
23009fd8:	fef617e3          	bne	a2,a5,23009fc6 <memmove+0x2e>
23009fdc:	8082                	ret
23009fde:	4781                	li	a5,0
23009fe0:	bfe5                	j	23009fd8 <memmove+0x40>

23009fe2 <abort>:
23009fe2:	1141                	addi	sp,sp,-16
23009fe4:	4519                	li	a0,6
23009fe6:	c606                	sw	ra,12(sp)
23009fe8:	20bd                	jal	2300a056 <raise>
23009fea:	4505                	li	a0,1
23009fec:	b30f90ef          	jal	ra,2300331c <_exit>

23009ff0 <_raise_r>:
23009ff0:	1101                	addi	sp,sp,-32
23009ff2:	cc22                	sw	s0,24(sp)
23009ff4:	ce06                	sw	ra,28(sp)
23009ff6:	47fd                	li	a5,31
23009ff8:	842a                	mv	s0,a0
23009ffa:	00b7f963          	bgeu	a5,a1,2300a00c <_raise_r+0x1c>
23009ffe:	47d9                	li	a5,22
2300a000:	c11c                	sw	a5,0(a0)
2300a002:	557d                	li	a0,-1
2300a004:	40f2                	lw	ra,28(sp)
2300a006:	4462                	lw	s0,24(sp)
2300a008:	6105                	addi	sp,sp,32
2300a00a:	8082                	ret
2300a00c:	417c                	lw	a5,68(a0)
2300a00e:	862e                	mv	a2,a1
2300a010:	c791                	beqz	a5,2300a01c <_raise_r+0x2c>
2300a012:	00259713          	slli	a4,a1,0x2
2300a016:	97ba                	add	a5,a5,a4
2300a018:	4398                	lw	a4,0(a5)
2300a01a:	ef09                	bnez	a4,2300a034 <_raise_r+0x44>
2300a01c:	8522                	mv	a0,s0
2300a01e:	c632                	sw	a2,12(sp)
2300a020:	a10f90ef          	jal	ra,23003230 <_getpid_r>
2300a024:	85aa                	mv	a1,a0
2300a026:	8522                	mv	a0,s0
2300a028:	4462                	lw	s0,24(sp)
2300a02a:	4632                	lw	a2,12(sp)
2300a02c:	40f2                	lw	ra,28(sp)
2300a02e:	6105                	addi	sp,sp,32
2300a030:	a18f906f          	j	23003248 <_kill_r>
2300a034:	4685                	li	a3,1
2300a036:	4501                	li	a0,0
2300a038:	fcd706e3          	beq	a4,a3,2300a004 <_raise_r+0x14>
2300a03c:	56fd                	li	a3,-1
2300a03e:	00d71663          	bne	a4,a3,2300a04a <_raise_r+0x5a>
2300a042:	47d9                	li	a5,22
2300a044:	c01c                	sw	a5,0(s0)
2300a046:	4505                	li	a0,1
2300a048:	bf75                	j	2300a004 <_raise_r+0x14>
2300a04a:	852e                	mv	a0,a1
2300a04c:	0007a023          	sw	zero,0(a5)
2300a050:	9702                	jalr	a4
2300a052:	4501                	li	a0,0
2300a054:	bf45                	j	2300a004 <_raise_r+0x14>

2300a056 <raise>:
2300a056:	85aa                	mv	a1,a0
2300a058:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
2300a05c:	f95ff06f          	j	23009ff0 <_raise_r>

2300a060 <usbd_cdc_acm_bulk_out>:
#endif
    0x00
};

static void usbd_cdc_acm_bulk_out(uint8_t ep)
{
2300a060:	711d                	addi	sp,sp,-96
    uint32_t actual_read_length = 0;
    uint8_t out_buffer[64];

    if (usbd_ep_read(ep, out_buffer, 64, &actual_read_length) < 0) {
2300a062:	0074                	addi	a3,sp,12
2300a064:	04000613          	li	a2,64
2300a068:	080c                	addi	a1,sp,16
{
2300a06a:	c8ca                	sw	s2,80(sp)
2300a06c:	ce86                	sw	ra,92(sp)
2300a06e:	cca2                	sw	s0,88(sp)
2300a070:	caa6                	sw	s1,84(sp)
2300a072:	892a                	mv	s2,a0
    uint32_t actual_read_length = 0;
2300a074:	c602                	sw	zero,12(sp)
    if (usbd_ep_read(ep, out_buffer, 64, &actual_read_length) < 0) {
2300a076:	2281                	jal	2300a1b6 <usbd_ep_read>
2300a078:	02054a63          	bltz	a0,2300a0ac <usbd_cdc_acm_bulk_out+0x4c>
        MSG("Read DATA Packet failed\r\n");
        usbd_ep_set_stall(ep);
        return;
    }
    for (uint32_t i = 0; i < actual_read_length; i++) {
2300a07c:	47b2                	lw	a5,12(sp)
2300a07e:	0800                	addi	s0,sp,16
2300a080:	4481                	li	s1,0
2300a082:	cb91                	beqz	a5,2300a096 <usbd_cdc_acm_bulk_out+0x36>
        shell_handler(out_buffer[i]);
2300a084:	00044503          	lbu	a0,0(s0)
    for (uint32_t i = 0; i < actual_read_length; i++) {
2300a088:	0485                	addi	s1,s1,1
2300a08a:	0405                	addi	s0,s0,1
        shell_handler(out_buffer[i]);
2300a08c:	049010ef          	jal	ra,2300b8d4 <shell_handler>
    for (uint32_t i = 0; i < actual_read_length; i++) {
2300a090:	47b2                	lw	a5,12(sp)
2300a092:	fef4e9e3          	bltu	s1,a5,2300a084 <usbd_cdc_acm_bulk_out+0x24>
    }
    usbd_ep_read(ep, NULL, 0, NULL);
2300a096:	854a                	mv	a0,s2
2300a098:	4681                	li	a3,0
2300a09a:	4601                	li	a2,0
2300a09c:	4581                	li	a1,0
2300a09e:	2a21                	jal	2300a1b6 <usbd_ep_read>
}
2300a0a0:	40f6                	lw	ra,92(sp)
2300a0a2:	4466                	lw	s0,88(sp)
2300a0a4:	44d6                	lw	s1,84(sp)
2300a0a6:	4946                	lw	s2,80(sp)
2300a0a8:	6125                	addi	sp,sp,96
2300a0aa:	8082                	ret
        MSG("Read DATA Packet failed\r\n");
2300a0ac:	2300d537          	lui	a0,0x2300d
2300a0b0:	e0c50513          	addi	a0,a0,-500 # 2300ce0c <_ctype_+0x104>
2300a0b4:	f4df80ef          	jal	ra,23003000 <bflb_platform_printf>
        usbd_ep_set_stall(ep);
2300a0b8:	854a                	mv	a0,s2
2300a0ba:	28d1                	jal	2300a18e <usbd_ep_set_stall>
}
2300a0bc:	40f6                	lw	ra,92(sp)
2300a0be:	4466                	lw	s0,88(sp)
2300a0c0:	44d6                	lw	s1,84(sp)
2300a0c2:	4946                	lw	s2,80(sp)
2300a0c4:	6125                	addi	sp,sp,96
2300a0c6:	8082                	ret

2300a0c8 <usb_stdio_init>:
static usbd_endpoint_t cdc_out_ep = { .ep_addr = CDC_OUT_EP, .ep_cb = usbd_cdc_acm_bulk_out };

static usbd_endpoint_t cdc_in_ep = { .ep_addr = CDC_IN_EP, .ep_cb = NULL };

void usb_stdio_init()
{
2300a0c8:	1141                	addi	sp,sp,-16
2300a0ca:	c606                	sw	ra,12(sp)
2300a0cc:	c422                	sw	s0,8(sp)
2300a0ce:	c226                	sw	s1,4(sp)
    shell_init();
2300a0d0:	5bd010ef          	jal	ra,2300be8c <shell_init>
    shell_set_print(printf);
2300a0d4:	23008537          	lui	a0,0x23008
2300a0d8:	90850513          	addi	a0,a0,-1784 # 23007908 <iprintf>
2300a0dc:	59d010ef          	jal	ra,2300be78 <shell_set_print>

    usbd_desc_register(cdc_descriptor);
2300a0e0:	23000537          	lui	a0,0x23000
2300a0e4:	1d450513          	addi	a0,a0,468 # 230001d4 <cdc_descriptor>
2300a0e8:	31e010ef          	jal	ra,2300b406 <usbd_desc_register>

    usbd_cdc_add_acm_interface(&cdc_class, &cdc_cmd_intf);
2300a0ec:	da418593          	addi	a1,gp,-604 # 420165a4 <cdc_cmd_intf>
2300a0f0:	d9818513          	addi	a0,gp,-616 # 42016598 <cdc_class>
2300a0f4:	123000ef          	jal	ra,2300aa16 <usbd_cdc_add_acm_interface>
    usbd_cdc_add_acm_interface(&cdc_class, &cdc_data_intf);
2300a0f8:	dc018593          	addi	a1,gp,-576 # 420165c0 <cdc_data_intf>
2300a0fc:	d9818513          	addi	a0,gp,-616 # 42016598 <cdc_class>
2300a100:	117000ef          	jal	ra,2300aa16 <usbd_cdc_add_acm_interface>
    usbd_interface_add_endpoint(&cdc_data_intf, &cdc_out_ep);
2300a104:	a7818593          	addi	a1,gp,-1416 # 42016278 <cdc_out_ep>
2300a108:	dc018513          	addi	a0,gp,-576 # 420165c0 <cdc_data_intf>
2300a10c:	33c010ef          	jal	ra,2300b448 <usbd_interface_add_endpoint>
    usbd_interface_add_endpoint(&cdc_data_intf, &cdc_in_ep);
2300a110:	a6c18593          	addi	a1,gp,-1428 # 4201626c <cdc_in_ep>
2300a114:	dc018513          	addi	a0,gp,-576 # 420165c0 <cdc_data_intf>
2300a118:	330010ef          	jal	ra,2300b448 <usbd_interface_add_endpoint>

    extern struct device *usb_dc_init(void);
    struct device *usb_fs = usb_dc_init();
2300a11c:	201d                	jal	2300a142 <usb_dc_init>

    if (usb_fs) {
2300a11e:	c511                	beqz	a0,2300a12a <usb_stdio_init+0x62>
        device_control(usb_fs, DEVICE_CTRL_SET_INT, (void *)(USB_EP1_DATA_OUT_IT));
2300a120:	6605                	lui	a2,0x1
2300a122:	80060613          	addi	a2,a2,-2048 # 800 <__heap_min_size+0x400>
2300a126:	4585                	li	a1,1
2300a128:	2271                	jal	2300a2b4 <device_control>
    }

    while (!usb_device_is_configured()) {
2300a12a:	32e010ef          	jal	ra,2300b458 <usb_device_is_configured>
2300a12e:	dd75                	beqz	a0,2300a12a <usb_stdio_init+0x62>
    }
}
2300a130:	40b2                	lw	ra,12(sp)
2300a132:	4422                	lw	s0,8(sp)
2300a134:	4492                	lw	s1,4(sp)
2300a136:	0141                	addi	sp,sp,16
2300a138:	8082                	ret

2300a13a <usb_dc_event_callback>:

struct device *usb;

static void usb_dc_event_callback(struct device *dev, void *args, uint32_t size, uint32_t state)
{
    usbd_event_notify_handler(state, args);
2300a13a:	0ff6f513          	zext.b	a0,a3
2300a13e:	0620106f          	j	2300b1a0 <usbd_event_notify_handler>

2300a142 <usb_dc_init>:
}

struct device *usb_dc_init(void)
{
2300a142:	1141                	addi	sp,sp,-16
2300a144:	c422                	sw	s0,8(sp)
    usb_dc_register(USB_INDEX, "usb");
2300a146:	2300c437          	lui	s0,0x2300c
2300a14a:	51440593          	addi	a1,s0,1300 # 2300c514 <strtol+0x29a>
2300a14e:	4501                	li	a0,0
{
2300a150:	c606                	sw	ra,12(sp)
    usb_dc_register(USB_INDEX, "usb");
2300a152:	8dbfa0ef          	jal	ra,23004a2c <usb_dc_register>
    usb = device_find("usb");
2300a156:	51440513          	addi	a0,s0,1300
2300a15a:	20d9                	jal	2300a220 <device_find>
    device_set_callback(usb, usb_dc_event_callback);
2300a15c:	2300a5b7          	lui	a1,0x2300a
    usb = device_find("usb");
2300a160:	12018413          	addi	s0,gp,288 # 42016920 <usb>
    device_set_callback(usb, usb_dc_event_callback);
2300a164:	13a58593          	addi	a1,a1,314 # 2300a13a <usb_dc_event_callback>
    usb = device_find("usb");
2300a168:	c008                	sw	a0,0(s0)
    device_set_callback(usb, usb_dc_event_callback);
2300a16a:	2a9d                	jal	2300a2e0 <device_set_callback>
    device_open(usb, 0);
2300a16c:	4008                	lw	a0,0(s0)
2300a16e:	4581                	li	a1,0
2300a170:	2209                	jal	2300a272 <device_open>
    return usb;
}
2300a172:	4008                	lw	a0,0(s0)
2300a174:	40b2                	lw	ra,12(sp)
2300a176:	4422                	lw	s0,8(sp)
2300a178:	0141                	addi	sp,sp,16
2300a17a:	8082                	ret

2300a17c <usbd_set_address>:

int usbd_set_address(const uint8_t addr)
{
    return usb_dc_set_dev_address(addr);
2300a17c:	8f9fa06f          	j	23004a74 <usb_dc_set_dev_address>

2300a180 <usbd_ep_open>:
}

int usbd_ep_open(const struct usbd_endpoint_cfg *ep_cfg)
{
2300a180:	85aa                	mv	a1,a0
    return usb_dc_ep_open(usb, (const struct usb_dc_ep_cfg *)ep_cfg);
2300a182:	1201a503          	lw	a0,288(gp) # 42016920 <usb>
2300a186:	8fffa06f          	j	23004a84 <usb_dc_ep_open>

2300a18a <usbd_ep_close>:
}
int usbd_ep_close(const uint8_t ep)
{
    return usb_dc_ep_close(ep);
2300a18a:	a05fa06f          	j	23004b8e <usb_dc_ep_close>

2300a18e <usbd_ep_set_stall>:
}
int usbd_ep_set_stall(const uint8_t ep)
{
    return usb_dc_ep_set_stall(ep);
2300a18e:	a05fa06f          	j	23004b92 <usb_dc_ep_set_stall>

2300a192 <usbd_ep_clear_stall>:
}
int usbd_ep_clear_stall(const uint8_t ep)
{
    return usb_dc_ep_clear_stall(ep);
2300a192:	b0ffa06f          	j	23004ca0 <usb_dc_ep_clear_stall>

2300a196 <usbd_ep_is_stalled>:
}
int usbd_ep_is_stalled(const uint8_t ep, uint8_t *stalled)
{
2300a196:	87aa                	mv	a5,a0
    return usb_dc_ep_is_stalled(usb, ep, stalled);
2300a198:	1201a503          	lw	a0,288(gp) # 42016920 <usb>
{
2300a19c:	862e                	mv	a2,a1
    return usb_dc_ep_is_stalled(usb, ep, stalled);
2300a19e:	85be                	mv	a1,a5
2300a1a0:	c2bfa06f          	j	23004dca <usb_dc_ep_is_stalled>

2300a1a4 <usbd_ep_write>:
}

int usbd_ep_write(const uint8_t ep, const uint8_t *data, uint32_t data_len, uint32_t *ret_bytes)
{
2300a1a4:	87aa                	mv	a5,a0
    return usb_dc_ep_write(usb, ep, data, data_len, ret_bytes);
2300a1a6:	1201a503          	lw	a0,288(gp) # 42016920 <usb>
{
2300a1aa:	8736                	mv	a4,a3
    return usb_dc_ep_write(usb, ep, data, data_len, ret_bytes);
2300a1ac:	86b2                	mv	a3,a2
2300a1ae:	862e                	mv	a2,a1
2300a1b0:	85be                	mv	a1,a5
2300a1b2:	c79fa06f          	j	23004e2a <usb_dc_ep_write>

2300a1b6 <usbd_ep_read>:
}

int usbd_ep_read(const uint8_t ep, uint8_t *data, uint32_t max_data_len, uint32_t *read_bytes)
{
2300a1b6:	87aa                	mv	a5,a0
    return usb_dc_ep_read(usb, ep, data, max_data_len, read_bytes);
2300a1b8:	1201a503          	lw	a0,288(gp) # 42016920 <usb>
{
2300a1bc:	8736                	mv	a4,a3
    return usb_dc_ep_read(usb, ep, data, max_data_len, read_bytes);
2300a1be:	86b2                	mv	a3,a2
2300a1c0:	862e                	mv	a2,a1
2300a1c2:	85be                	mv	a1,a5
2300a1c4:	d91fa06f          	j	23004f54 <usb_dc_ep_read>

2300a1c8 <device_register>:
 * @param flags the capabilities flag of device
 *
 * @return the error code, DEVICE_EOK on initialization successfully.
 */
int device_register(struct device *dev, const char *name)
{
2300a1c8:	1141                	addi	sp,sp,-16
2300a1ca:	c422                	sw	s0,8(sp)
    dlist_t *node;

    dlist_for_each(node, &device_head)
2300a1cc:	a8418413          	addi	s0,gp,-1404 # 42016284 <device_head>
2300a1d0:	401c                	lw	a5,0(s0)
{
2300a1d2:	c606                	sw	ra,12(sp)
2300a1d4:	86aa                	mv	a3,a0
    dlist_for_each(node, &device_head)
2300a1d6:	00878e63          	beq	a5,s0,2300a1f2 <device_register+0x2a>
    {
        struct device *dev_obj;
        dev_obj = dlist_entry(node, struct device, list);
2300a1da:	fec78713          	addi	a4,a5,-20

        if (dev_obj == dev) {
2300a1de:	00e51563          	bne	a0,a4,2300a1e8 <device_register+0x20>
2300a1e2:	a815                	j	2300a216 <device_register+0x4e>
2300a1e4:	02e68963          	beq	a3,a4,2300a216 <device_register+0x4e>
    dlist_for_each(node, &device_head)
2300a1e8:	439c                	lw	a5,0(a5)
        dev_obj = dlist_entry(node, struct device, list);
2300a1ea:	fec78713          	addi	a4,a5,-20
    dlist_for_each(node, &device_head)
2300a1ee:	fe879be3          	bne	a5,s0,2300a1e4 <device_register+0x1c>
            return -DEVICE_EEXIST;
        }
    }

    strcpy(dev->name, name);
2300a1f2:	8536                	mv	a0,a3
2300a1f4:	523010ef          	jal	ra,2300bf16 <strcpy>
 * @param l list to insert it
 * @param n new node to be inserted
 */
static inline void dlist_insert_after(dlist_t *l, dlist_t *n)
{
    l->next->prev = n;
2300a1f8:	4018                	lw	a4,0(s0)

    dlist_insert_after(&device_head, &(dev->list));
2300a1fa:	01450793          	addi	a5,a0,20
    n->next = l->next;

    l->next = n;
2300a1fe:	c01c                	sw	a5,0(s0)
    l->next->prev = n;
2300a200:	c35c                	sw	a5,4(a4)
    dev->status = DEVICE_REGISTERED;
2300a202:	4785                	li	a5,1
2300a204:	00f50e23          	sb	a5,28(a0)
    n->prev = l;
2300a208:	cd00                	sw	s0,24(a0)
    return DEVICE_EOK;
}
2300a20a:	40b2                	lw	ra,12(sp)
2300a20c:	4422                	lw	s0,8(sp)
    n->next = l->next;
2300a20e:	c958                	sw	a4,20(a0)
    return DEVICE_EOK;
2300a210:	4501                	li	a0,0
}
2300a212:	0141                	addi	sp,sp,16
2300a214:	8082                	ret
2300a216:	40b2                	lw	ra,12(sp)
2300a218:	4422                	lw	s0,8(sp)
            return -DEVICE_EEXIST;
2300a21a:	553d                	li	a0,-17
}
2300a21c:	0141                	addi	sp,sp,16
2300a21e:	8082                	ret

2300a220 <device_find>:
 * @param name the device driver's name
 *
 * @return the registered device driver on successful, or NULL on failure.
 */
struct device *device_find(const char *name)
{
2300a220:	1101                	addi	sp,sp,-32
2300a222:	c84a                	sw	s2,16(sp)
    struct device *dev;
    dlist_t *node;

    dlist_for_each(node, &device_head)
2300a224:	a8418913          	addi	s2,gp,-1404 # 42016284 <device_head>
{
2300a228:	cc22                	sw	s0,24(sp)
    dlist_for_each(node, &device_head)
2300a22a:	00092403          	lw	s0,0(s2)
{
2300a22e:	ce06                	sw	ra,28(sp)
2300a230:	ca26                	sw	s1,20(sp)
2300a232:	c64e                	sw	s3,12(sp)
    dlist_for_each(node, &device_head)
2300a234:	03240763          	beq	s0,s2,2300a262 <device_find+0x42>
2300a238:	89aa                	mv	s3,a0
2300a23a:	a021                	j	2300a242 <device_find+0x22>
2300a23c:	4000                	lw	s0,0(s0)
2300a23e:	03240263          	beq	s0,s2,2300a262 <device_find+0x42>
    {
        dev = dlist_entry(node, struct device, list);

        if (strncmp(dev->name, name, DEVICE_NAME_MAX) == 0) {
2300a242:	fec40493          	addi	s1,s0,-20
2300a246:	4651                	li	a2,20
2300a248:	85ce                	mv	a1,s3
2300a24a:	8526                	mv	a0,s1
2300a24c:	4dd010ef          	jal	ra,2300bf28 <strncmp>
2300a250:	f575                	bnez	a0,2300a23c <device_find+0x1c>
            return dev;
        }
    }
    return NULL;
}
2300a252:	40f2                	lw	ra,28(sp)
2300a254:	4462                	lw	s0,24(sp)
2300a256:	4942                	lw	s2,16(sp)
2300a258:	49b2                	lw	s3,12(sp)
        dev = dlist_entry(node, struct device, list);
2300a25a:	8526                	mv	a0,s1
}
2300a25c:	44d2                	lw	s1,20(sp)
2300a25e:	6105                	addi	sp,sp,32
2300a260:	8082                	ret
2300a262:	40f2                	lw	ra,28(sp)
2300a264:	4462                	lw	s0,24(sp)
2300a266:	44d2                	lw	s1,20(sp)
2300a268:	4942                	lw	s2,16(sp)
2300a26a:	49b2                	lw	s3,12(sp)
    return NULL;
2300a26c:	4501                	li	a0,0
}
2300a26e:	6105                	addi	sp,sp,32
2300a270:	8082                	ret

2300a272 <device_open>:
int device_open(struct device *dev, uint16_t oflag)
{
#ifdef DEVICE_CHECK_PARAM
    int retval = DEVICE_EOK;

    if ((dev->status == DEVICE_REGISTERED) || (dev->status == DEVICE_CLOSED)) {
2300a272:	01c54783          	lbu	a5,28(a0)
2300a276:	4705                	li	a4,1
2300a278:	0fd7f793          	andi	a5,a5,253
2300a27c:	00e78463          	beq	a5,a4,2300a284 <device_open+0x12>
            dev->oflag |= oflag;
        } else {
            retval = -DEVICE_EFAULT;
        }
    } else {
        retval = -DEVICE_EINVAL;
2300a280:	5529                	li	a0,-22

    return retval;
#else
    return dev_open(dev, oflag);
#endif
}
2300a282:	8082                	ret
        if (dev_open != NULL) {
2300a284:	511c                	lw	a5,32(a0)
{
2300a286:	1141                	addi	sp,sp,-16
2300a288:	c422                	sw	s0,8(sp)
2300a28a:	c606                	sw	ra,12(sp)
2300a28c:	c226                	sw	s1,4(sp)
2300a28e:	842a                	mv	s0,a0
        if (dev_open != NULL) {
2300a290:	c385                	beqz	a5,2300a2b0 <device_open+0x3e>
2300a292:	84ae                	mv	s1,a1
            retval = dev_open(dev, oflag);
2300a294:	9782                	jalr	a5
            dev->oflag |= oflag;
2300a296:	01e45583          	lhu	a1,30(s0)
            dev->status = DEVICE_OPENED;
2300a29a:	4789                	li	a5,2
2300a29c:	00f40e23          	sb	a5,28(s0)
            dev->oflag |= oflag;
2300a2a0:	8dc5                	or	a1,a1,s1
2300a2a2:	00b41f23          	sh	a1,30(s0)
}
2300a2a6:	40b2                	lw	ra,12(sp)
2300a2a8:	4422                	lw	s0,8(sp)
2300a2aa:	4492                	lw	s1,4(sp)
2300a2ac:	0141                	addi	sp,sp,16
2300a2ae:	8082                	ret
            retval = -DEVICE_EFAULT;
2300a2b0:	5549                	li	a0,-14
    return retval;
2300a2b2:	bfd5                	j	2300a2a6 <device_open+0x34>

2300a2b4 <device_control>:
int device_control(struct device *dev, int cmd, void *args)
{
#ifdef DEVICE_CHECK_PARAM
    int retval = DEVICE_EOK;

    if (dev->status > DEVICE_UNREGISTER) {
2300a2b4:	01c54703          	lbu	a4,28(a0)
2300a2b8:	c701                	beqz	a4,2300a2c0 <device_control+0xc>
        if (dev_control != NULL) {
2300a2ba:	551c                	lw	a5,40(a0)
2300a2bc:	c781                	beqz	a5,2300a2c4 <device_control+0x10>
            retval = dev_control(dev, cmd, args);
2300a2be:	8782                	jr	a5
        } else {
            retval = -DEVICE_EFAULT;
        }
    } else {
        retval = -DEVICE_EINVAL;
2300a2c0:	5529                	li	a0,-22
2300a2c2:	8082                	ret
            retval = -DEVICE_EFAULT;
2300a2c4:	5549                	li	a0,-14

    return retval;
#else
    return dev_control(dev, cmd, args);
#endif
}
2300a2c6:	8082                	ret

2300a2c8 <device_write>:
int device_write(struct device *dev, uint32_t pos, const void *buffer, uint32_t size)
{
#ifdef DEVICE_CHECK_PARAM
    int retval = DEVICE_EOK;

    if (dev->status == DEVICE_OPENED) {
2300a2c8:	01c54803          	lbu	a6,28(a0)
2300a2cc:	4709                	li	a4,2
2300a2ce:	00e81563          	bne	a6,a4,2300a2d8 <device_write+0x10>
        if (dev_write != NULL) {
2300a2d2:	555c                	lw	a5,44(a0)
2300a2d4:	c781                	beqz	a5,2300a2dc <device_write+0x14>
            retval = dev_write(dev, pos, buffer, size);
2300a2d6:	8782                	jr	a5
        } else {
            retval = -DEVICE_EFAULT;
        }
    } else {
        retval = -DEVICE_EINVAL;
2300a2d8:	5529                	li	a0,-22
2300a2da:	8082                	ret
            retval = -DEVICE_EFAULT;
2300a2dc:	5549                	li	a0,-14

    return retval;
#else
    return dev_write(dev, pos, buffer, size);
#endif
}
2300a2de:	8082                	ret

2300a2e0 <device_set_callback>:
 */
int device_set_callback(struct device *dev, void (*callback)(struct device *dev, void *args, uint32_t size, uint32_t event))
{
    int retval = DEVICE_EOK;

    if (dev->status > DEVICE_UNREGISTER) {
2300a2e0:	01c54783          	lbu	a5,28(a0)
2300a2e4:	c789                	beqz	a5,2300a2ee <device_set_callback+0xe>
        if (callback != NULL) {
2300a2e6:	c591                	beqz	a1,2300a2f2 <device_set_callback+0x12>
            dev->callback = callback;
2300a2e8:	d94c                	sw	a1,52(a0)
    int retval = DEVICE_EOK;
2300a2ea:	4501                	li	a0,0
2300a2ec:	8082                	ret
        } else {
            retval = -DEVICE_EFAULT;
        }
    } else {
        retval = -DEVICE_EINVAL;
2300a2ee:	5529                	li	a0,-22
2300a2f0:	8082                	ret
            retval = -DEVICE_EFAULT;
2300a2f2:	5549                	li	a0,-14
    }

    return retval;
2300a2f4:	8082                	ret

2300a2f6 <mmheap_align_alloc>:
void *mmheap_align_alloc(struct heap_info *pRoot, size_t align_size, size_t want_size)
{
    void *pReturn = NULL;
    struct heap_node *pPriv_Node, *pNow_Node;

    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a2f6:	411c                	lw	a5,0(a0)
{
2300a2f8:	1141                	addi	sp,sp,-16
2300a2fa:	c422                	sw	s0,8(sp)
2300a2fc:	c226                	sw	s1,4(sp)
2300a2fe:	c04a                	sw	s2,0(sp)
2300a300:	c606                	sw	ra,12(sp)
2300a302:	892a                	mv	s2,a0
2300a304:	842e                	mv	s0,a1
2300a306:	84b2                	mv	s1,a2
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a308:	14078963          	beqz	a5,2300a45a <mmheap_align_alloc+0x164>
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a30c:	00492783          	lw	a5,4(s2)
2300a310:	10078463          	beqz	a5,2300a418 <mmheap_align_alloc+0x122>

    if (want_size == 0) {
2300a314:	10048c63          	beqz	s1,2300a42c <mmheap_align_alloc+0x136>
        return NULL;
    }

    if ((want_size & MEM_MANAGE_ALLOCA_LABAL) != 0) {
2300a318:	1804c963          	bltz	s1,2300a4aa <mmheap_align_alloc+0x1b4>
        MMHEAP_MALLOC_FAIL();
        return NULL;
    }

    if (align_size & (align_size - 1)) {
2300a31c:	fff40793          	addi	a5,s0,-1
2300a320:	8fe1                	and	a5,a5,s0
2300a322:	14079e63          	bnez	a5,2300a47e <mmheap_align_alloc+0x188>
    }

    MMHEAP_LOCK();
    if (want_size < MEM_MANAGE_MINUM_MEM_SIZE)
        want_size = MEM_MANAGE_MINUM_MEM_SIZE;
    if (align_size < MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT)
2300a326:	47a1                	li	a5,8
2300a328:	85a2                	mv	a1,s0
2300a32a:	0af46063          	bltu	s0,a5,2300a3ca <mmheap_align_alloc+0xd4>
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a32e:	47c1                	li	a5,16
2300a330:	08f4eb63          	bltu	s1,a5,2300a3c6 <mmheap_align_alloc+0xd0>
        align_size = MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT;

    want_size = mmheap_align_up(want_size, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT);

    pPriv_Node = pRoot->pStart;
2300a334:	00092383          	lw	t2,0(s2)
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a338:	049d                	addi	s1,s1,7
2300a33a:	ff84f893          	andi	a7,s1,-8
    pNow_Node = pRoot->pStart->next_node;
2300a33e:	0003a783          	lw	a5,0(t2)

    while (pNow_Node->next_node != NULL) {
2300a342:	4394                	lw	a3,0(a5)
2300a344:	18068d63          	beqz	a3,2300a4de <mmheap_align_alloc+0x1e8>
2300a348:	00888e13          	addi	t3,a7,8
2300a34c:	8e9e                	mv	t4,t2
    void *pReturn = NULL;
2300a34e:	4501                	li	a0,0
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a350:	40b00f33          	neg	t5,a1
2300a354:	fff58313          	addi	t1,a1,-1
            size_t use_align_size;
            size_t new_size;
            pReturn = (void *)mmheap_align_up((size_t)mmheap_addr_add(pNow_Node), align_size); /*Calculate the aligned address*/
            use_align_size = (uint8_t *)pReturn - (uint8_t *)mmheap_addr_add(pNow_Node);       /*Calculate the memory consumed by the alignment*/
            if (use_align_size != 0) {                                                         /*if Memory misalignment*/
                if (use_align_size < MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE) { /*The unaligned value is too small*/
2300a358:	42dd                	li	t0,23
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a35a:	01758813          	addi	a6,a1,23
2300a35e:	a011                	j	2300a362 <mmheap_align_alloc+0x6c>
2300a360:	86ba                	mv	a3,a4
        if (pNow_Node->mem_size >= want_size + MEM_MANAGE_MEM_STRUCT_SIZE) {
2300a362:	43d0                	lw	a2,4(a5)
    return (void *)((const uint8_t *)mem_node + MEM_MANAGE_MEM_STRUCT_SIZE);
2300a364:	00878713          	addi	a4,a5,8
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a368:	00e305b3          	add	a1,t1,a4
        if (pNow_Node->mem_size >= want_size + MEM_MANAGE_MEM_STRUCT_SIZE) {
2300a36c:	03c66663          	bltu	a2,t3,2300a398 <mmheap_align_alloc+0xa2>
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a370:	01e5f533          	and	a0,a1,t5
2300a374:	00e80fb3          	add	t6,a6,a4
            use_align_size = (uint8_t *)pReturn - (uint8_t *)mmheap_addr_add(pNow_Node);       /*Calculate the memory consumed by the alignment*/
2300a378:	40e505b3          	sub	a1,a0,a4
            if (use_align_size != 0) {                                                         /*if Memory misalignment*/
2300a37c:	0ce50963          	beq	a0,a4,2300a44e <mmheap_align_alloc+0x158>
                if (use_align_size < MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE) { /*The unaligned value is too small*/
2300a380:	00b2e663          	bltu	t0,a1,2300a38c <mmheap_align_alloc+0x96>
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a384:	01eff533          	and	a0,t6,t5
                    pReturn = (void *)mmheap_align_up(
                        (size_t)mmheap_addr_add(pNow_Node) + MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE, align_size);
                    use_align_size = (uint8_t *)pReturn - (uint8_t *)mmheap_addr_add(pNow_Node);
2300a388:	40e505b3          	sub	a1,a0,a4
                }
                if (use_align_size <= pNow_Node->mem_size) {
                    new_size = pNow_Node->mem_size - use_align_size; /*Calculate the remaining memory size by removing the memory consumed by alignment*/
2300a38c:	40b60733          	sub	a4,a2,a1
                if (use_align_size <= pNow_Node->mem_size) {
2300a390:	00b66463          	bltu	a2,a1,2300a398 <mmheap_align_alloc+0xa2>
                    if (new_size >= want_size) {                     /*Meet the conditions for distribution*/
2300a394:	0d177c63          	bgeu	a4,a7,2300a46c <mmheap_align_alloc+0x176>
    while (pNow_Node->next_node != NULL) {
2300a398:	4298                	lw	a4,0(a3)
2300a39a:	8ebe                	mv	t4,a5
2300a39c:	87b6                	mv	a5,a3
2300a39e:	f369                	bnez	a4,2300a360 <mmheap_align_alloc+0x6a>
        }
        pPriv_Node = pNow_Node;
        pNow_Node = pNow_Node->next_node;
    }

    if (pNow_Node == pRoot->pEnd) {
2300a3a0:	00492583          	lw	a1,4(s2)
2300a3a4:	12d58363          	beq	a1,a3,2300a4ca <mmheap_align_alloc+0x1d4>
        MMHEAP_UNLOCK();
        MMHEAP_MALLOC_FAIL();
        return NULL;
    }

    if (pNow_Node->mem_size >= MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE + want_size) {           /*Node memory is still available*/
2300a3a8:	42d8                	lw	a4,4(a3)
2300a3aa:	01888793          	addi	a5,a7,24
2300a3ae:	02f77363          	bgeu	a4,a5,2300a3d4 <mmheap_align_alloc+0xde>
        pNew_Node->mem_size = pNow_Node->mem_size - want_size - MEM_MANAGE_MEM_STRUCT_SIZE;
        pNew_Node->next_node = NULL;
        pNow_Node->mem_size = want_size;
        mmheap_insert_node_to_freelist(pRoot, pNew_Node);
    }
    pNow_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a3b2:	800007b7          	lui	a5,0x80000
2300a3b6:	8f5d                	or	a4,a4,a5
2300a3b8:	c2d8                	sw	a4,4(a3)
    MMHEAP_UNLOCK();
    return pReturn;
}
2300a3ba:	40b2                	lw	ra,12(sp)
2300a3bc:	4422                	lw	s0,8(sp)
2300a3be:	4492                	lw	s1,4(sp)
2300a3c0:	4902                	lw	s2,0(sp)
2300a3c2:	0141                	addi	sp,sp,16
2300a3c4:	8082                	ret
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a3c6:	44c1                	li	s1,16
2300a3c8:	b7b5                	j	2300a334 <mmheap_align_alloc+0x3e>
2300a3ca:	47c1                	li	a5,16
2300a3cc:	45a1                	li	a1,8
2300a3ce:	f6f4f3e3          	bgeu	s1,a5,2300a334 <mmheap_align_alloc+0x3e>
2300a3d2:	bfd5                	j	2300a3c6 <mmheap_align_alloc+0xd0>
        struct heap_node *pNew_Node = (struct heap_node *)((uint8_t *)mmheap_addr_add(pNow_Node) + want_size); /*Calculate the address of the node that will be moved into the free chain table*/
2300a3d4:	00888613          	addi	a2,a7,8
        pNew_Node->mem_size = pNow_Node->mem_size - want_size - MEM_MANAGE_MEM_STRUCT_SIZE;
2300a3d8:	41170733          	sub	a4,a4,a7
        struct heap_node *pNew_Node = (struct heap_node *)((uint8_t *)mmheap_addr_add(pNow_Node) + want_size); /*Calculate the address of the node that will be moved into the free chain table*/
2300a3dc:	9636                	add	a2,a2,a3
        pNew_Node->mem_size = pNow_Node->mem_size - want_size - MEM_MANAGE_MEM_STRUCT_SIZE;
2300a3de:	1761                	addi	a4,a4,-8
2300a3e0:	c258                	sw	a4,4(a2)
        pNew_Node->next_node = NULL;
2300a3e2:	00062023          	sw	zero,0(a2)
        pNow_Node->mem_size = want_size;
2300a3e6:	0116a223          	sw	a7,4(a3)
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pNode; pPriv_Node = pPriv_Node->next_node) {
2300a3ea:	879e                	mv	a5,t2
2300a3ec:	873e                	mv	a4,a5
2300a3ee:	439c                	lw	a5,0(a5)
2300a3f0:	fec7eee3          	bltu	a5,a2,2300a3ec <mmheap_align_alloc+0xf6>
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a3f4:	00472e03          	lw	t3,4(a4)
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a3f8:	00462303          	lw	t1,4(a2)
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a3fc:	008e0893          	addi	a7,t3,8 # 10008 <StackSize+0xf008>
2300a400:	98ba                	add	a7,a7,a4
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a402:	00830813          	addi	a6,t1,8
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a406:	03160a63          	beq	a2,a7,2300a43a <mmheap_align_alloc+0x144>
        pPriv_Node->next_node = pNode;
2300a40a:	c310                	sw	a2,0(a4)
    if ((uint8_t *)mmheap_addr_add(pNode) + pNode->mem_size == (uint8_t *)pNext_Node) {
2300a40c:	9832                	add	a6,a6,a2
2300a40e:	09078263          	beq	a5,a6,2300a492 <mmheap_align_alloc+0x19c>
    pNow_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a412:	42d8                	lw	a4,4(a3)
        pNode->next_node = pNext_Node;
2300a414:	c21c                	sw	a5,0(a2)
2300a416:	bf71                	j	2300a3b2 <mmheap_align_alloc+0xbc>
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a418:	2300d537          	lui	a0,0x2300d
2300a41c:	08500593          	li	a1,133
2300a420:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a424:	ce4fd0ef          	jal	ra,23007908 <iprintf>
    if (want_size == 0) {
2300a428:	ee0498e3          	bnez	s1,2300a318 <mmheap_align_alloc+0x22>
}
2300a42c:	40b2                	lw	ra,12(sp)
2300a42e:	4422                	lw	s0,8(sp)
2300a430:	4492                	lw	s1,4(sp)
2300a432:	4902                	lw	s2,0(sp)
        return NULL;
2300a434:	4501                	li	a0,0
}
2300a436:	0141                	addi	sp,sp,16
2300a438:	8082                	ret
        if (pPriv_Node != pRoot->pStart) { /*can merge if not start block*/
2300a43a:	08e38263          	beq	t2,a4,2300a4be <mmheap_align_alloc+0x1c8>
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a43e:	010e0333          	add	t1,t3,a6
2300a442:	00672223          	sw	t1,4(a4)
            pNode = pPriv_Node;
2300a446:	00830813          	addi	a6,t1,8
2300a44a:	863a                	mv	a2,a4
2300a44c:	b7c1                	j	2300a40c <mmheap_align_alloc+0x116>
                pPriv_Node->next_node = pNow_Node->next_node;
2300a44e:	00dea023          	sw	a3,0(t4)
                pNow_Node->next_node = NULL;
2300a452:	0007a023          	sw	zero,0(a5) # 80000000 <__HeapLimit+0x3dfd0000>
                break;
2300a456:	86be                	mv	a3,a5
2300a458:	b7a1                	j	2300a3a0 <mmheap_align_alloc+0xaa>
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a45a:	2300d537          	lui	a0,0x2300d
2300a45e:	08400593          	li	a1,132
2300a462:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a466:	ca2fd0ef          	jal	ra,23007908 <iprintf>
2300a46a:	b54d                	j	2300a30c <mmheap_align_alloc+0x16>
                        pNow_Node->mem_size -= new_size + MEM_MANAGE_MEM_STRUCT_SIZE; /*Split Node*/
2300a46c:	15e1                	addi	a1,a1,-8
2300a46e:	c3cc                	sw	a1,4(a5)
    return (struct heap_node *)((const uint8_t *)addr - MEM_MANAGE_MEM_STRUCT_SIZE);
2300a470:	ff850693          	addi	a3,a0,-8
                        pNew_Node->mem_size = new_size;                               /*The new node is also not in the free chain and does not need to be discharged from the free chain*/
2300a474:	fee52e23          	sw	a4,-4(a0)
                        pNew_Node->next_node = NULL;
2300a478:	fe052c23          	sw	zero,-8(a0)
                        break;
2300a47c:	b715                	j	2300a3a0 <mmheap_align_alloc+0xaa>
        MMHEAP_MALLOC_FAIL();
2300a47e:	2300d537          	lui	a0,0x2300d
2300a482:	09100593          	li	a1,145
2300a486:	e4c50513          	addi	a0,a0,-436 # 2300ce4c <_ctype_+0x144>
2300a48a:	c7efd0ef          	jal	ra,23007908 <iprintf>
        return NULL;
2300a48e:	4501                	li	a0,0
2300a490:	b72d                	j	2300a3ba <mmheap_align_alloc+0xc4>
        if (pNext_Node != pRoot->pEnd) {
2300a492:	02f58963          	beq	a1,a5,2300a4c4 <mmheap_align_alloc+0x1ce>
            pNode->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a496:	43d8                	lw	a4,4(a5)
            pNode->next_node = pNext_Node->next_node;
2300a498:	438c                	lw	a1,0(a5)
            pNode->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a49a:	00870793          	addi	a5,a4,8
2300a49e:	933e                	add	t1,t1,a5
2300a4a0:	00662223          	sw	t1,4(a2)
    pNow_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a4a4:	42d8                	lw	a4,4(a3)
            pNode->next_node = pNext_Node->next_node;
2300a4a6:	c20c                	sw	a1,0(a2)
2300a4a8:	b729                	j	2300a3b2 <mmheap_align_alloc+0xbc>
        MMHEAP_MALLOC_FAIL();
2300a4aa:	2300d537          	lui	a0,0x2300d
2300a4ae:	08c00593          	li	a1,140
2300a4b2:	e4c50513          	addi	a0,a0,-436 # 2300ce4c <_ctype_+0x144>
2300a4b6:	c52fd0ef          	jal	ra,23007908 <iprintf>
        return NULL;
2300a4ba:	4501                	li	a0,0
2300a4bc:	bdfd                	j	2300a3ba <mmheap_align_alloc+0xc4>
            pRoot->pStart->next_node = pNode;
2300a4be:	00c3a023          	sw	a2,0(t2)
2300a4c2:	b7a9                	j	2300a40c <mmheap_align_alloc+0x116>
    pNow_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a4c4:	42d8                	lw	a4,4(a3)
            pNode->next_node = pRoot->pEnd;
2300a4c6:	c20c                	sw	a1,0(a2)
2300a4c8:	b5ed                	j	2300a3b2 <mmheap_align_alloc+0xbc>
        MMHEAP_MALLOC_FAIL();
2300a4ca:	2300d537          	lui	a0,0x2300d
2300a4ce:	0c300593          	li	a1,195
2300a4d2:	e4c50513          	addi	a0,a0,-436 # 2300ce4c <_ctype_+0x144>
2300a4d6:	c32fd0ef          	jal	ra,23007908 <iprintf>
        return NULL;
2300a4da:	4501                	li	a0,0
2300a4dc:	bdf9                	j	2300a3ba <mmheap_align_alloc+0xc4>
    void *pReturn = NULL;
2300a4de:	4501                	li	a0,0
    while (pNow_Node->next_node != NULL) {
2300a4e0:	86be                	mv	a3,a5
2300a4e2:	bd7d                	j	2300a3a0 <mmheap_align_alloc+0xaa>

2300a4e4 <mmheap_alloc>:
 * @param pRoot
 * @param want_size
 * @return void*
 */
void *mmheap_alloc(struct heap_info *pRoot, size_t want_size)
{
2300a4e4:	862e                	mv	a2,a1
    return mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a4e6:	45a1                	li	a1,8
2300a4e8:	e0fff06f          	j	2300a2f6 <mmheap_align_alloc>

2300a4ec <mmheap_calloc>:
 * @param num
 * @param size
 * @return void*
 */
void *mmheap_calloc(struct heap_info *pRoot, size_t num, size_t size)
{
2300a4ec:	1141                	addi	sp,sp,-16
2300a4ee:	c226                	sw	s1,4(sp)
    void *pReturn = NULL;

    pReturn = (void *)mmheap_alloc(pRoot, size * num);
2300a4f0:	02b604b3          	mul	s1,a2,a1
    return mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a4f4:	45a1                	li	a1,8
{
2300a4f6:	c422                	sw	s0,8(sp)
2300a4f8:	c606                	sw	ra,12(sp)
    return mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a4fa:	8626                	mv	a2,s1
2300a4fc:	dfbff0ef          	jal	ra,2300a2f6 <mmheap_align_alloc>
2300a500:	842a                	mv	s0,a0

    if (pReturn) {
2300a502:	c509                	beqz	a0,2300a50c <mmheap_calloc+0x20>
        memset(pReturn, 0, num * size);
2300a504:	8626                	mv	a2,s1
2300a506:	4581                	li	a1,0
2300a508:	d7df50ef          	jal	ra,23000284 <memset>
    }

    return pReturn;
}
2300a50c:	40b2                	lw	ra,12(sp)
2300a50e:	8522                	mv	a0,s0
2300a510:	4422                	lw	s0,8(sp)
2300a512:	4492                	lw	s1,4(sp)
2300a514:	0141                	addi	sp,sp,16
2300a516:	8082                	ret

2300a518 <mmheap_free>:
 * @param addr
 */
void mmheap_free(struct heap_info *pRoot, void *addr)
{
    struct heap_node *pFree_Node;
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a518:	411c                	lw	a5,0(a0)
{
2300a51a:	1141                	addi	sp,sp,-16
2300a51c:	c422                	sw	s0,8(sp)
2300a51e:	c226                	sw	s1,4(sp)
2300a520:	c606                	sw	ra,12(sp)
2300a522:	84aa                	mv	s1,a0
2300a524:	842e                	mv	s0,a1
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a526:	c7dd                	beqz	a5,2300a5d4 <mmheap_free+0xbc>
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a528:	40dc                	lw	a5,4(s1)
2300a52a:	cba5                	beqz	a5,2300a59a <mmheap_free+0x82>
    MMHEAP_LOCK();
    if (addr == NULL) {
2300a52c:	c035                	beqz	s0,2300a590 <mmheap_free+0x78>
        MMHEAP_UNLOCK();
        return;
    }
    pFree_Node = mmheap_addr_sub(addr);

    if ((pFree_Node->mem_size & MEM_MANAGE_ALLOCA_LABAL) == 0) {
2300a52e:	ffc42783          	lw	a5,-4(s0)
        MMHEAP_UNLOCK();
        MMHEAP_ASSERT((pFree_Node->mem_size & MEM_MANAGE_ALLOCA_LABAL) != 0);
2300a532:	15900593          	li	a1,345
    if ((pFree_Node->mem_size & MEM_MANAGE_ALLOCA_LABAL) == 0) {
2300a536:	0007d763          	bgez	a5,2300a544 <mmheap_free+0x2c>
        return;
    }

    if (pFree_Node->next_node != NULL) {
2300a53a:	ff842703          	lw	a4,-8(s0)
2300a53e:	cf09                	beqz	a4,2300a558 <mmheap_free+0x40>
        MMHEAP_UNLOCK();
        MMHEAP_ASSERT(pFree_Node->next_node == NULL);
2300a540:	15f00593          	li	a1,351
        return;
    }
    pFree_Node->mem_size &= ~MEM_MANAGE_ALLOCA_LABAL;
    mmheap_insert_node_to_freelist(pRoot, pFree_Node);
    MMHEAP_UNLOCK();
}
2300a544:	4422                	lw	s0,8(sp)
2300a546:	40b2                	lw	ra,12(sp)
2300a548:	4492                	lw	s1,4(sp)
        MMHEAP_ASSERT(pFree_Node->next_node == NULL);
2300a54a:	2300d537          	lui	a0,0x2300d
2300a54e:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
}
2300a552:	0141                	addi	sp,sp,16
        MMHEAP_ASSERT(pFree_Node->next_node == NULL);
2300a554:	bb4fd06f          	j	23007908 <iprintf>
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pNode; pPriv_Node = pPriv_Node->next_node) {
2300a558:	0004a803          	lw	a6,0(s1)
    pFree_Node->mem_size &= ~MEM_MANAGE_ALLOCA_LABAL;
2300a55c:	0786                	slli	a5,a5,0x1
2300a55e:	0017d693          	srli	a3,a5,0x1
    return (struct heap_node *)((const uint8_t *)addr - MEM_MANAGE_MEM_STRUCT_SIZE);
2300a562:	ff840713          	addi	a4,s0,-8
    pFree_Node->mem_size &= ~MEM_MANAGE_ALLOCA_LABAL;
2300a566:	fed42e23          	sw	a3,-4(s0)
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pNode; pPriv_Node = pPriv_Node->next_node) {
2300a56a:	87c2                	mv	a5,a6
2300a56c:	863e                	mv	a2,a5
2300a56e:	439c                	lw	a5,0(a5)
2300a570:	fee7eee3          	bltu	a5,a4,2300a56c <mmheap_free+0x54>
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a574:	00462883          	lw	a7,4(a2)
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a578:	00868593          	addi	a1,a3,8
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a57c:	00888513          	addi	a0,a7,8
2300a580:	9532                	add	a0,a0,a2
2300a582:	04a70063          	beq	a4,a0,2300a5c2 <mmheap_free+0xaa>
        pPriv_Node->next_node = pNode;
2300a586:	c218                	sw	a4,0(a2)
    if ((uint8_t *)mmheap_addr_add(pNode) + pNode->mem_size == (uint8_t *)pNext_Node) {
2300a588:	95ba                	add	a1,a1,a4
2300a58a:	02b78163          	beq	a5,a1,2300a5ac <mmheap_free+0x94>
        pNode->next_node = pNext_Node;
2300a58e:	c31c                	sw	a5,0(a4)
}
2300a590:	40b2                	lw	ra,12(sp)
2300a592:	4422                	lw	s0,8(sp)
2300a594:	4492                	lw	s1,4(sp)
2300a596:	0141                	addi	sp,sp,16
2300a598:	8082                	ret
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a59a:	2300d537          	lui	a0,0x2300d
2300a59e:	14f00593          	li	a1,335
2300a5a2:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a5a6:	b62fd0ef          	jal	ra,23007908 <iprintf>
2300a5aa:	b749                	j	2300a52c <mmheap_free+0x14>
        if (pNext_Node != pRoot->pEnd) {
2300a5ac:	40d0                	lw	a2,4(s1)
2300a5ae:	fec780e3          	beq	a5,a2,2300a58e <mmheap_free+0x76>
            pNode->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a5b2:	43d0                	lw	a2,4(a5)
            pNode->next_node = pNext_Node->next_node;
2300a5b4:	438c                	lw	a1,0(a5)
            pNode->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a5b6:	00860793          	addi	a5,a2,8
2300a5ba:	96be                	add	a3,a3,a5
2300a5bc:	c354                	sw	a3,4(a4)
            pNode->next_node = pNext_Node->next_node;
2300a5be:	c30c                	sw	a1,0(a4)
2300a5c0:	bfc1                	j	2300a590 <mmheap_free+0x78>
        if (pPriv_Node != pRoot->pStart) { /*can merge if not start block*/
2300a5c2:	02c80263          	beq	a6,a2,2300a5e6 <mmheap_free+0xce>
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a5c6:	00b886b3          	add	a3,a7,a1
2300a5ca:	c254                	sw	a3,4(a2)
            pNode = pPriv_Node;
2300a5cc:	00868593          	addi	a1,a3,8
2300a5d0:	8732                	mv	a4,a2
2300a5d2:	bf5d                	j	2300a588 <mmheap_free+0x70>
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a5d4:	2300d537          	lui	a0,0x2300d
2300a5d8:	14e00593          	li	a1,334
2300a5dc:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a5e0:	b28fd0ef          	jal	ra,23007908 <iprintf>
2300a5e4:	b791                	j	2300a528 <mmheap_free+0x10>
            pRoot->pStart->next_node = pNode;
2300a5e6:	00e82023          	sw	a4,0(a6)
2300a5ea:	bf79                	j	2300a588 <mmheap_free+0x70>

2300a5ec <mmheap_realloc>:
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a5ec:	411c                	lw	a5,0(a0)
{
2300a5ee:	1141                	addi	sp,sp,-16
2300a5f0:	c422                	sw	s0,8(sp)
2300a5f2:	c226                	sw	s1,4(sp)
2300a5f4:	c04a                	sw	s2,0(sp)
2300a5f6:	c606                	sw	ra,12(sp)
2300a5f8:	84aa                	mv	s1,a0
2300a5fa:	842e                	mv	s0,a1
2300a5fc:	8932                	mv	s2,a2
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a5fe:	cbf1                	beqz	a5,2300a6d2 <mmheap_realloc+0xe6>
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a600:	40dc                	lw	a5,4(s1)
2300a602:	cfdd                	beqz	a5,2300a6c0 <mmheap_realloc+0xd4>
    if (src_addr == NULL) {
2300a604:	10040263          	beqz	s0,2300a708 <mmheap_realloc+0x11c>
    if (want_size == 0) {
2300a608:	10090a63          	beqz	s2,2300a71c <mmheap_realloc+0x130>
    if ((want_size & MEM_MANAGE_ALLOCA_LABAL) != 0) {
2300a60c:	10094d63          	bltz	s2,2300a726 <mmheap_realloc+0x13a>
    if ((pSrc_Node->mem_size & MEM_MANAGE_ALLOCA_LABAL) == 0) {
2300a610:	ffc42703          	lw	a4,-4(s0)
2300a614:	0c075863          	bgez	a4,2300a6e4 <mmheap_realloc+0xf8>
    pSrc_Node->mem_size &= ~MEM_MANAGE_ALLOCA_LABAL;
2300a618:	800007b7          	lui	a5,0x80000
2300a61c:	fff7c693          	not	a3,a5
2300a620:	8f75                	and	a4,a4,a3
2300a622:	fee42e23          	sw	a4,-4(s0)
    if (pSrc_Node->mem_size >= want_size) {
2300a626:	09277263          	bgeu	a4,s2,2300a6aa <mmheap_realloc+0xbe>
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pSrc_Node; pPriv_Node = pPriv_Node->next_node) {
2300a62a:	408c                	lw	a1,0(s1)
    return (struct heap_node *)((const uint8_t *)addr - MEM_MANAGE_MEM_STRUCT_SIZE);
2300a62c:	ff840693          	addi	a3,s0,-8
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pSrc_Node; pPriv_Node = pPriv_Node->next_node) {
2300a630:	87ae                	mv	a5,a1
2300a632:	863e                	mv	a2,a5
2300a634:	439c                	lw	a5,0(a5)
2300a636:	fed7eee3          	bltu	a5,a3,2300a632 <mmheap_realloc+0x46>
    if (pNext_Node != pRoot->pEnd &&
2300a63a:	40d4                	lw	a3,4(s1)
2300a63c:	00d78663          	beq	a5,a3,2300a648 <mmheap_realloc+0x5c>
        ((uint8_t *)src_addr + pSrc_Node->mem_size == (uint8_t *)pNext_Node) &&
2300a640:	00e40533          	add	a0,s0,a4
    if (pNext_Node != pRoot->pEnd &&
2300a644:	04a78163          	beq	a5,a0,2300a686 <mmheap_realloc+0x9a>
        pReturn = mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a648:	864a                	mv	a2,s2
2300a64a:	45a1                	li	a1,8
2300a64c:	8526                	mv	a0,s1
2300a64e:	ca9ff0ef          	jal	ra,2300a2f6 <mmheap_align_alloc>
2300a652:	892a                	mv	s2,a0
        if (pReturn == NULL) {
2300a654:	12050663          	beqz	a0,2300a780 <mmheap_realloc+0x194>
        memcpy(pReturn, src_addr, pSrc_Node->mem_size);
2300a658:	ffc42603          	lw	a2,-4(s0)
2300a65c:	85a2                	mv	a1,s0
2300a65e:	ff0fc0ef          	jal	ra,23006e4e <memcpy>
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a662:	ffc42783          	lw	a5,-4(s0)
2300a666:	80000737          	lui	a4,0x80000
        mmheap_free(pRoot, src_addr);
2300a66a:	85a2                	mv	a1,s0
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a66c:	8fd9                	or	a5,a5,a4
2300a66e:	fef42e23          	sw	a5,-4(s0)
        mmheap_free(pRoot, src_addr);
2300a672:	8526                	mv	a0,s1
2300a674:	ea5ff0ef          	jal	ra,2300a518 <mmheap_free>
}
2300a678:	40b2                	lw	ra,12(sp)
2300a67a:	4422                	lw	s0,8(sp)
2300a67c:	4492                	lw	s1,4(sp)
2300a67e:	854a                	mv	a0,s2
2300a680:	4902                	lw	s2,0(sp)
2300a682:	0141                	addi	sp,sp,16
2300a684:	8082                	ret
        (pSrc_Node->mem_size + pNext_Node->mem_size + MEM_MANAGE_MEM_STRUCT_SIZE >= want_size)) {
2300a686:	43c8                	lw	a0,4(a5)
2300a688:	0721                	addi	a4,a4,8
2300a68a:	972a                	add	a4,a4,a0
        ((uint8_t *)src_addr + pSrc_Node->mem_size == (uint8_t *)pNext_Node) &&
2300a68c:	fb276ee3          	bltu	a4,s2,2300a648 <mmheap_realloc+0x5c>
        pPriv_Node->next_node = pNext_Node->next_node;
2300a690:	4388                	lw	a0,0(a5)
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a692:	00790793          	addi	a5,s2,7
2300a696:	9be1                	andi	a5,a5,-8
        pPriv_Node->next_node = pNext_Node->next_node;
2300a698:	c208                	sw	a0,0(a2)
        pSrc_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a69a:	fee42e23          	sw	a4,-4(s0)
        if (pSrc_Node->mem_size >= MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE + want_size) { /*Removing the remaining space allocated is enough to open new blocks*/
2300a69e:	01878613          	addi	a2,a5,24 # 80000018 <__HeapLimit+0x3dfd0018>
2300a6a2:	08c77c63          	bgeu	a4,a2,2300a73a <mmheap_realloc+0x14e>
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a6a6:	800007b7          	lui	a5,0x80000
2300a6aa:	8f5d                	or	a4,a4,a5
2300a6ac:	8922                	mv	s2,s0
}
2300a6ae:	40b2                	lw	ra,12(sp)
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a6b0:	fee42e23          	sw	a4,-4(s0)
}
2300a6b4:	4422                	lw	s0,8(sp)
2300a6b6:	4492                	lw	s1,4(sp)
2300a6b8:	854a                	mv	a0,s2
2300a6ba:	4902                	lw	s2,0(sp)
2300a6bc:	0141                	addi	sp,sp,16
2300a6be:	8082                	ret
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a6c0:	2300d537          	lui	a0,0x2300d
2300a6c4:	0eb00593          	li	a1,235
2300a6c8:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a6cc:	a3cfd0ef          	jal	ra,23007908 <iprintf>
2300a6d0:	bf15                	j	2300a604 <mmheap_realloc+0x18>
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a6d2:	2300d537          	lui	a0,0x2300d
2300a6d6:	0ea00593          	li	a1,234
2300a6da:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a6de:	a2afd0ef          	jal	ra,23007908 <iprintf>
2300a6e2:	bf39                	j	2300a600 <mmheap_realloc+0x14>
        MMHEAP_ASSERT((pSrc_Node->mem_size & MEM_MANAGE_ALLOCA_LABAL) != 0);
2300a6e4:	2300d537          	lui	a0,0x2300d
2300a6e8:	0ff00593          	li	a1,255
2300a6ec:	e2850513          	addi	a0,a0,-472 # 2300ce28 <_ctype_+0x120>
2300a6f0:	a18fd0ef          	jal	ra,23007908 <iprintf>
        MMHEAP_MALLOC_FAIL();
2300a6f4:	2300d537          	lui	a0,0x2300d
2300a6f8:	10000593          	li	a1,256
2300a6fc:	e4c50513          	addi	a0,a0,-436 # 2300ce4c <_ctype_+0x144>
2300a700:	a08fd0ef          	jal	ra,23007908 <iprintf>
        return NULL;
2300a704:	4901                	li	s2,0
2300a706:	bf8d                	j	2300a678 <mmheap_realloc+0x8c>
}
2300a708:	4422                	lw	s0,8(sp)
2300a70a:	40b2                	lw	ra,12(sp)
        return mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a70c:	864a                	mv	a2,s2
2300a70e:	8526                	mv	a0,s1
}
2300a710:	4902                	lw	s2,0(sp)
2300a712:	4492                	lw	s1,4(sp)
        return mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a714:	45a1                	li	a1,8
}
2300a716:	0141                	addi	sp,sp,16
        return mmheap_align_alloc(pRoot, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT, want_size);
2300a718:	bdfff06f          	j	2300a2f6 <mmheap_align_alloc>
        mmheap_free(pRoot, src_addr);
2300a71c:	85a2                	mv	a1,s0
2300a71e:	8526                	mv	a0,s1
2300a720:	df9ff0ef          	jal	ra,2300a518 <mmheap_free>
        return NULL;
2300a724:	bf91                	j	2300a678 <mmheap_realloc+0x8c>
        MMHEAP_MALLOC_FAIL();
2300a726:	2300d537          	lui	a0,0x2300d
2300a72a:	0f700593          	li	a1,247
2300a72e:	e4c50513          	addi	a0,a0,-436 # 2300ce4c <_ctype_+0x144>
2300a732:	9d6fd0ef          	jal	ra,23007908 <iprintf>
        return NULL;
2300a736:	4901                	li	s2,0
2300a738:	b781                	j	2300a678 <mmheap_realloc+0x8c>
            pNew_Node->mem_size = pSrc_Node->mem_size - want_size - MEM_MANAGE_MEM_STRUCT_SIZE;
2300a73a:	8f1d                	sub	a4,a4,a5
            struct heap_node *pNew_Node = (struct heap_node *)((uint8_t *)mmheap_addr_add(pSrc_Node) + want_size);
2300a73c:	00f40633          	add	a2,s0,a5
            pNew_Node->mem_size = pSrc_Node->mem_size - want_size - MEM_MANAGE_MEM_STRUCT_SIZE;
2300a740:	1761                	addi	a4,a4,-8
            pNew_Node->next_node = NULL;
2300a742:	00062023          	sw	zero,0(a2)
            pNew_Node->mem_size = pSrc_Node->mem_size - want_size - MEM_MANAGE_MEM_STRUCT_SIZE;
2300a746:	c258                	sw	a4,4(a2)
            pSrc_Node->mem_size = want_size;
2300a748:	fef42e23          	sw	a5,-4(s0)
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pSrc_Node; pPriv_Node = pPriv_Node->next_node) {
2300a74c:	87ae                	mv	a5,a1
    for (pPriv_Node = pRoot->pStart; pPriv_Node->next_node < pNode; pPriv_Node = pPriv_Node->next_node) {
2300a74e:	873e                	mv	a4,a5
2300a750:	439c                	lw	a5,0(a5)
2300a752:	fec7eee3          	bltu	a5,a2,2300a74e <mmheap_realloc+0x162>
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a756:	00472303          	lw	t1,4(a4) # 80000004 <__HeapLimit+0x3dfd0004>
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a75a:	00462883          	lw	a7,4(a2)
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a75e:	00830813          	addi	a6,t1,8
2300a762:	983a                	add	a6,a6,a4
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a764:	00888513          	addi	a0,a7,8
    if ((uint8_t *)mmheap_addr_add(pPriv_Node) + pPriv_Node->mem_size == (uint8_t *)pNode) {
2300a768:	05060b63          	beq	a2,a6,2300a7be <mmheap_realloc+0x1d2>
        pPriv_Node->next_node = pNode;
2300a76c:	c310                	sw	a2,0(a4)
    if ((uint8_t *)mmheap_addr_add(pNode) + pNode->mem_size == (uint8_t *)pNext_Node) {
2300a76e:	9532                	add	a0,a0,a2
2300a770:	02a78863          	beq	a5,a0,2300a7a0 <mmheap_realloc+0x1b4>
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a774:	ffc42703          	lw	a4,-4(s0)
        pNode->next_node = pNext_Node;
2300a778:	c21c                	sw	a5,0(a2)
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a77a:	800007b7          	lui	a5,0x80000
2300a77e:	b735                	j	2300a6aa <mmheap_realloc+0xbe>
            pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a780:	ffc42783          	lw	a5,-4(s0)
2300a784:	80000737          	lui	a4,0x80000
            MMHEAP_MALLOC_FAIL();
2300a788:	2300d537          	lui	a0,0x2300d
            pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a78c:	8fd9                	or	a5,a5,a4
2300a78e:	fef42e23          	sw	a5,-4(s0)
            MMHEAP_MALLOC_FAIL();
2300a792:	12600593          	li	a1,294
2300a796:	e4c50513          	addi	a0,a0,-436 # 2300ce4c <_ctype_+0x144>
2300a79a:	96efd0ef          	jal	ra,23007908 <iprintf>
            return NULL;
2300a79e:	bde9                	j	2300a678 <mmheap_realloc+0x8c>
        if (pNext_Node != pRoot->pEnd) {
2300a7a0:	02f68963          	beq	a3,a5,2300a7d2 <mmheap_realloc+0x1e6>
            pNode->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a7a4:	43d8                	lw	a4,4(a5)
            pNode->next_node = pNext_Node->next_node;
2300a7a6:	4394                	lw	a3,0(a5)
            pNode->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNext_Node->mem_size;
2300a7a8:	00870793          	addi	a5,a4,8 # 80000008 <__HeapLimit+0x3dfd0008>
2300a7ac:	98be                	add	a7,a7,a5
2300a7ae:	01162223          	sw	a7,4(a2)
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a7b2:	ffc42703          	lw	a4,-4(s0)
2300a7b6:	800007b7          	lui	a5,0x80000
            pNode->next_node = pNext_Node->next_node;
2300a7ba:	c214                	sw	a3,0(a2)
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a7bc:	b5fd                	j	2300a6aa <mmheap_realloc+0xbe>
        if (pPriv_Node != pRoot->pStart) { /*can merge if not start block*/
2300a7be:	02e58063          	beq	a1,a4,2300a7de <mmheap_realloc+0x1f2>
            pPriv_Node->mem_size += MEM_MANAGE_MEM_STRUCT_SIZE + pNode->mem_size;
2300a7c2:	00a308b3          	add	a7,t1,a0
2300a7c6:	01172223          	sw	a7,4(a4)
            pNode = pPriv_Node;
2300a7ca:	00888513          	addi	a0,a7,8
2300a7ce:	863a                	mv	a2,a4
2300a7d0:	bf79                	j	2300a76e <mmheap_realloc+0x182>
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a7d2:	ffc42703          	lw	a4,-4(s0)
2300a7d6:	800007b7          	lui	a5,0x80000
            pNode->next_node = pRoot->pEnd;
2300a7da:	c214                	sw	a3,0(a2)
        pSrc_Node->mem_size |= MEM_MANAGE_ALLOCA_LABAL;
2300a7dc:	b5f9                	j	2300a6aa <mmheap_realloc+0xbe>
            pRoot->pStart->next_node = pNode;
2300a7de:	c190                	sw	a2,0(a1)
2300a7e0:	b779                	j	2300a76e <mmheap_realloc+0x182>

2300a7e2 <mmheap_init>:

    pRoot->total_size = 0;
    pRoot->pEnd = NULL;
    pRoot->pStart = NULL;

    for (; pRegion->addr != NULL; pRegion++) {
2300a7e2:	4198                	lw	a4,0(a1)
    pRoot->total_size = 0;
2300a7e4:	00052423          	sw	zero,8(a0)
    pRoot->pEnd = NULL;
2300a7e8:	00052223          	sw	zero,4(a0)
    pRoot->pStart = NULL;
2300a7ec:	00052023          	sw	zero,0(a0)
    for (; pRegion->addr != NULL; pRegion++) {
2300a7f0:	c765                	beqz	a4,2300a8d8 <mmheap_init+0xf6>
{
2300a7f2:	1141                	addi	sp,sp,-16
2300a7f4:	c422                	sw	s0,8(sp)
2300a7f6:	c606                	sw	ra,12(sp)
2300a7f8:	842a                	mv	s0,a0
2300a7fa:	c226                	sw	s1,4(sp)
    for (; pRegion->addr != NULL; pRegion++) {
2300a7fc:	4881                	li	a7,0
    struct heap_node *pPriv_node = NULL;
2300a7fe:	4501                	li	a0,0
        align_addr = (struct heap_node *)mmheap_align_up((size_t)pRegion->addr, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT); /*Calculate the aligned address*/
        if ((uint8_t *)align_addr > pRegion->mem_size + (uint8_t *)pRegion->addr)                                   /*Alignment consumes more memory than the memory area*/
            continue;
        align_size = pRegion->mem_size - ((uint8_t *)align_addr - (uint8_t *)pRegion->addr); /*Calculate the size of memory left after alignment*/
        if (align_size < MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE)             /*if Aligning the remaining memory is too small*/
2300a800:	485d                	li	a6,23
2300a802:	a809                	j	2300a814 <mmheap_init+0x32>
                pRoot->total_size = 0;
                pRoot->pStart->mem_size = 0;
            }
        } else {
            pPriv_node->next_node = align_addr;
            pRoot->total_size += align_size;
2300a804:	4418                	lw	a4,8(s0)
            pPriv_node->next_node = align_addr;
2300a806:	c11c                	sw	a5,0(a0)
            pRoot->total_size += align_size;
2300a808:	853e                	mv	a0,a5
2300a80a:	96ba                	add	a3,a3,a4
2300a80c:	c414                	sw	a3,8(s0)
    for (; pRegion->addr != NULL; pRegion++) {
2300a80e:	4598                	lw	a4,8(a1)
2300a810:	05a1                	addi	a1,a1,8
2300a812:	c739                	beqz	a4,2300a860 <mmheap_init+0x7e>
        if ((uint8_t *)align_addr > pRegion->mem_size + (uint8_t *)pRegion->addr)                                   /*Alignment consumes more memory than the memory area*/
2300a814:	41d4                	lw	a3,4(a1)
    return (data + align_byte - 1) & ~(align_byte - 1);
2300a816:	00770793          	addi	a5,a4,7
2300a81a:	9be1                	andi	a5,a5,-8
        if ((uint8_t *)align_addr > pRegion->mem_size + (uint8_t *)pRegion->addr)                                   /*Alignment consumes more memory than the memory area*/
2300a81c:	00d70633          	add	a2,a4,a3
2300a820:	fef667e3          	bltu	a2,a5,2300a80e <mmheap_init+0x2c>
        align_size = pRegion->mem_size - ((uint8_t *)align_addr - (uint8_t *)pRegion->addr); /*Calculate the size of memory left after alignment*/
2300a824:	40e78733          	sub	a4,a5,a4
2300a828:	40e68733          	sub	a4,a3,a4
        if (align_size < MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE)             /*if Aligning the remaining memory is too small*/
2300a82c:	fee871e3          	bgeu	a6,a4,2300a80e <mmheap_init+0x2c>
        align_size -= MEM_MANAGE_MEM_STRUCT_SIZE; /*Find the size of the memory block after removing the table header*/
2300a830:	ff870693          	addi	a3,a4,-8
        align_addr->mem_size = align_size;
2300a834:	c3d4                	sw	a3,4(a5)
        align_addr->next_node = NULL;
2300a836:	0007a023          	sw	zero,0(a5) # 80000000 <__HeapLimit+0x3dfd0000>
        if (pRoot->pStart == NULL) {
2300a83a:	fc0895e3          	bnez	a7,2300a804 <mmheap_init+0x22>
            pRoot->pStart = align_addr;                                                                   /*set current addr for start*/
2300a83e:	c01c                	sw	a5,0(s0)
            if (align_size >= MEM_MANAGE_MINUM_MEM_SIZE + MEM_MANAGE_MEM_STRUCT_SIZE) {                   /*If the remaining blocks are large enough*/
2300a840:	08d87563          	bgeu	a6,a3,2300a8ca <mmheap_init+0xe8>
                align_size -= MEM_MANAGE_MEM_STRUCT_SIZE;                                                 /*Remove the next block of table headers remaining memory size*/
2300a844:	1741                	addi	a4,a4,-16
                align_addr = (struct heap_node *)((uint8_t *)pRoot->pStart + MEM_MANAGE_MEM_STRUCT_SIZE); //the next block addr
2300a846:	00878513          	addi	a0,a5,8
                align_addr->mem_size = align_size;
2300a84a:	c7d8                	sw	a4,12(a5)
                align_addr->next_node = NULL;
2300a84c:	0007a423          	sw	zero,8(a5)
                pRoot->pStart->next_node = align_addr;
2300a850:	c388                	sw	a0,0(a5)
                pRoot->pStart->mem_size = 0;
2300a852:	0007a223          	sw	zero,4(a5)
                pRoot->total_size = align_addr->mem_size;
2300a856:	c418                	sw	a4,8(s0)
    for (; pRegion->addr != NULL; pRegion++) {
2300a858:	4598                	lw	a4,8(a1)
2300a85a:	88be                	mv	a7,a5
2300a85c:	05a1                	addi	a1,a1,8
2300a85e:	fb5d                	bnez	a4,2300a814 <mmheap_init+0x32>
        }
        pPriv_node = align_addr;
    }
    //At this point, pPriv_node is the last block, then place the end of the table at the end of the block, find the address to place the end block, end block is only convenient for traversal, so as small as possible, assigned to MEM_MANAGE_MEM_STRUCT_SIZE
    align_addr = (struct heap_node *)mmheap_align_down(
        (size_t)mmheap_addr_add(pPriv_node) + pPriv_node->mem_size - MEM_MANAGE_MEM_STRUCT_SIZE, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT);
2300a860:	4150                	lw	a2,4(a0)
    return data & ~(align_byte - 1);
2300a862:	4414                	lw	a3,8(s0)
    align_addr = (struct heap_node *)mmheap_align_down(
2300a864:	00850793          	addi	a5,a0,8
2300a868:	00c50733          	add	a4,a0,a2
    return data & ~(align_byte - 1);
2300a86c:	9b61                	andi	a4,a4,-8
    align_size = (uint8_t *)align_addr - (uint8_t *)mmheap_addr_add(pPriv_node); /*Find the remaining size of the previous block after the end block is allocated*/
2300a86e:	40f707b3          	sub	a5,a4,a5
    if (align_size >= MEM_MANAGE_MINUM_MEM_SIZE) {
2300a872:	45bd                	li	a1,15
2300a874:	8e91                	sub	a3,a3,a2
2300a876:	02f5f263          	bgeu	a1,a5,2300a89a <mmheap_init+0xb8>
        pRoot->total_size -= pPriv_node->mem_size - align_size; /*Removing memory consumed by allocating end blocks*/
2300a87a:	96be                	add	a3,a3,a5
2300a87c:	c414                	sw	a3,8(s0)
        pRoot->pEnd = align_addr;                               /*Update the address at the end of the list*/
2300a87e:	c058                	sw	a4,4(s0)
        pPriv_node->next_node = align_addr;
2300a880:	c118                	sw	a4,0(a0)
        pPriv_node->mem_size = align_size;
2300a882:	c15c                	sw	a5,4(a0)
        align_addr->next_node = NULL;
2300a884:	00072023          	sw	zero,0(a4)
        align_addr->mem_size = 0; /*The end block is not involved in memory allocation, so a direct 0 is sufficient*/
2300a888:	00072223          	sw	zero,4(a4)
    } else {                      /*The last block is too small, directly as the end block*/
        pRoot->pEnd = pPriv_node;
        pRoot->total_size -= pPriv_node->mem_size;
    }
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a88c:	00088b63          	beqz	a7,2300a8a2 <mmheap_init+0xc0>
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
}
2300a890:	40b2                	lw	ra,12(sp)
2300a892:	4422                	lw	s0,8(sp)
2300a894:	4492                	lw	s1,4(sp)
2300a896:	0141                	addi	sp,sp,16
2300a898:	8082                	ret
        pRoot->pEnd = pPriv_node;
2300a89a:	c048                	sw	a0,4(s0)
        pRoot->total_size -= pPriv_node->mem_size;
2300a89c:	c414                	sw	a3,8(s0)
    MMHEAP_ASSERT(pRoot->pStart != NULL);
2300a89e:	fe0899e3          	bnez	a7,2300a890 <mmheap_init+0xae>
2300a8a2:	2300d4b7          	lui	s1,0x2300d
2300a8a6:	1a300593          	li	a1,419
2300a8aa:	e2848513          	addi	a0,s1,-472 # 2300ce28 <_ctype_+0x120>
2300a8ae:	85afd0ef          	jal	ra,23007908 <iprintf>
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a8b2:	405c                	lw	a5,4(s0)
2300a8b4:	fff1                	bnez	a5,2300a890 <mmheap_init+0xae>
}
2300a8b6:	4422                	lw	s0,8(sp)
2300a8b8:	40b2                	lw	ra,12(sp)
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a8ba:	e2848513          	addi	a0,s1,-472
}
2300a8be:	4492                	lw	s1,4(sp)
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a8c0:	1a400593          	li	a1,420
}
2300a8c4:	0141                	addi	sp,sp,16
    MMHEAP_ASSERT(pRoot->pEnd != NULL);
2300a8c6:	842fd06f          	j	23007908 <iprintf>
                pRoot->total_size = 0;
2300a8ca:	00042423          	sw	zero,8(s0)
                pRoot->pStart->mem_size = 0;
2300a8ce:	88be                	mv	a7,a5
2300a8d0:	0007a223          	sw	zero,4(a5)
2300a8d4:	853e                	mv	a0,a5
2300a8d6:	bf25                	j	2300a80e <mmheap_init+0x2c>
        (size_t)mmheap_addr_add(pPriv_node) + pPriv_node->mem_size - MEM_MANAGE_MEM_STRUCT_SIZE, MEM_MANAGE_ALIGNMENT_BYTE_DEFAULT);
2300a8d8:	00402783          	lw	a5,4(zero) # 4 <__metal_chicken_bit+0x4>
2300a8dc:	9002                	ebreak

2300a8de <memcopy_to_fifo>:
void memcopy_to_fifo(void *fifo_addr, uint8_t *data, uint32_t length)
{
    uint8_t *p = (uint8_t *)fifo_addr;
    uint8_t *q = data;

    while (length--) {
2300a8de:	ca09                	beqz	a2,2300a8f0 <memcopy_to_fifo+0x12>
2300a8e0:	962e                	add	a2,a2,a1
        *p = *q++;
2300a8e2:	0005c783          	lbu	a5,0(a1)
2300a8e6:	0585                	addi	a1,a1,1
2300a8e8:	00f50023          	sb	a5,0(a0)
    while (length--) {
2300a8ec:	fec59be3          	bne	a1,a2,2300a8e2 <memcopy_to_fifo+0x4>
    }
}
2300a8f0:	8082                	ret

2300a8f2 <fifocopy_to_mem>:
void fifocopy_to_mem(void *fifo_addr, uint8_t *data, uint32_t length)
{
    uint8_t *p = (uint8_t *)fifo_addr;
    uint8_t *q = data;

    while (length--) {
2300a8f2:	ca09                	beqz	a2,2300a904 <fifocopy_to_mem+0x12>
2300a8f4:	962e                	add	a2,a2,a1
        *q++ = *p;
2300a8f6:	00054783          	lbu	a5,0(a0)
2300a8fa:	0585                	addi	a1,a1,1
2300a8fc:	fef58fa3          	sb	a5,-1(a1)
    while (length--) {
2300a900:	fec59be3          	bne	a1,a2,2300a8f6 <fifocopy_to_mem+0x4>
    }
}
2300a904:	8082                	ret

2300a906 <cdc_notify_handler>:
    return 0;
}

static void cdc_notify_handler(uint8_t event, void *arg)
{
    switch (event) {
2300a906:	4785                	li	a5,1
2300a908:	00f50363          	beq	a0,a5,2300a90e <cdc_notify_handler+0x8>
            break;

        default:
            break;
    }
}
2300a90c:	8082                	ret
    usbd_cdc_acm_cfg.line_coding.dwDTERate = 2000000;
2300a90e:	001e8737          	lui	a4,0x1e8
2300a912:	ddc18793          	addi	a5,gp,-548 # 420165dc <usbd_cdc_acm_cfg>
2300a916:	48070713          	addi	a4,a4,1152 # 1e8480 <StackSize+0x1e7480>
2300a91a:	c398                	sw	a4,0(a5)
    usbd_cdc_acm_cfg.line_coding.bDataBits = 8;
2300a91c:	4721                	li	a4,8
    usbd_cdc_acm_cfg.line_coding.bCharFormat = 0;
2300a91e:	00079223          	sh	zero,4(a5)
    usbd_cdc_acm_cfg.line_coding.bDataBits = 8;
2300a922:	00e78323          	sb	a4,6(a5)
    usbd_cdc_acm_cfg.configured = false;
2300a926:	00078523          	sb	zero,10(a5)
    usbd_cdc_acm_cfg.uart_first_init_flag = 0;
2300a92a:	0007a623          	sw	zero,12(a5)
}
2300a92e:	8082                	ret

2300a930 <usbd_cdc_acm_set_line_coding>:

__weak void usbd_cdc_acm_set_line_coding(uint32_t baudrate, uint8_t databits, uint8_t parity, uint8_t stopbits)
{
}
2300a930:	8082                	ret

2300a932 <usbd_cdc_acm_set_dtr>:
__weak void usbd_cdc_acm_set_dtr(bool dtr)
{
}
2300a932:	8082                	ret

2300a934 <usbd_cdc_acm_set_rts>:
2300a934:	8082                	ret

2300a936 <cdc_acm_class_request_handler>:
    switch (setup->bRequest) {
2300a936:	00154783          	lbu	a5,1(a0)
2300a93a:	02100713          	li	a4,33
2300a93e:	02e78963          	beq	a5,a4,2300a970 <cdc_acm_class_request_handler+0x3a>
{
2300a942:	1141                	addi	sp,sp,-16
2300a944:	c606                	sw	ra,12(sp)
2300a946:	c422                	sw	s0,8(sp)
    switch (setup->bRequest) {
2300a948:	02200713          	li	a4,34
2300a94c:	04e78463          	beq	a5,a4,2300a994 <cdc_acm_class_request_handler+0x5e>
2300a950:	02000713          	li	a4,32
2300a954:	02e78563          	beq	a5,a4,2300a97e <cdc_acm_class_request_handler+0x48>
            USBD_LOG_WRN("Unhandled CDC Class bRequest 0x%02x\r\n", setup->bRequest);
2300a958:	2300d537          	lui	a0,0x2300d
2300a95c:	e7050513          	addi	a0,a0,-400 # 2300ce70 <_ctype_+0x168>
2300a960:	85be                	mv	a1,a5
2300a962:	e9ef80ef          	jal	ra,23003000 <bflb_platform_printf>
}
2300a966:	40b2                	lw	ra,12(sp)
2300a968:	4422                	lw	s0,8(sp)
            return -1;
2300a96a:	557d                	li	a0,-1
}
2300a96c:	0141                	addi	sp,sp,16
2300a96e:	8082                	ret
            *data = (uint8_t *)(&usbd_cdc_acm_cfg.line_coding);
2300a970:	ddc18793          	addi	a5,gp,-548 # 420165dc <usbd_cdc_acm_cfg>
2300a974:	c19c                	sw	a5,0(a1)
            *len = sizeof(usbd_cdc_acm_cfg.line_coding);
2300a976:	479d                	li	a5,7
2300a978:	c21c                	sw	a5,0(a2)
    return 0;
2300a97a:	4501                	li	a0,0
}
2300a97c:	8082                	ret
            if (usbd_cdc_acm_cfg.uart_first_init_flag == 0) {
2300a97e:	ddc18793          	addi	a5,gp,-548 # 420165dc <usbd_cdc_acm_cfg>
2300a982:	47d8                	lw	a4,12(a5)
2300a984:	ef15                	bnez	a4,2300a9c0 <cdc_acm_class_request_handler+0x8a>
}
2300a986:	40b2                	lw	ra,12(sp)
2300a988:	4422                	lw	s0,8(sp)
                usbd_cdc_acm_cfg.uart_first_init_flag = 1;
2300a98a:	4705                	li	a4,1
2300a98c:	c7d8                	sw	a4,12(a5)
                return 0;
2300a98e:	4501                	li	a0,0
}
2300a990:	0141                	addi	sp,sp,16
2300a992:	8082                	ret
            usbd_cdc_acm_cfg.line_state = (uint8_t)setup->wValue;
2300a994:	00354403          	lbu	s0,3(a0)
2300a998:	00254503          	lbu	a0,2(a0)
2300a99c:	0422                	slli	s0,s0,0x8
2300a99e:	8c49                	or	s0,s0,a0
            usbd_cdc_acm_set_dtr(dtr);
2300a9a0:	00147513          	andi	a0,s0,1
            usbd_cdc_acm_cfg.line_state = (uint8_t)setup->wValue;
2300a9a4:	de8181a3          	sb	s0,-541(gp) # 420165e3 <usbd_cdc_acm_cfg+0x7>
            usbd_cdc_acm_set_dtr(dtr);
2300a9a8:	f8bff0ef          	jal	ra,2300a932 <usbd_cdc_acm_set_dtr>
            bool rts = (setup->wValue & 0x02);
2300a9ac:	00145513          	srli	a0,s0,0x1
            usbd_cdc_acm_set_rts(rts);
2300a9b0:	8905                	andi	a0,a0,1
2300a9b2:	f83ff0ef          	jal	ra,2300a934 <usbd_cdc_acm_set_rts>
}
2300a9b6:	40b2                	lw	ra,12(sp)
2300a9b8:	4422                	lw	s0,8(sp)
    return 0;
2300a9ba:	4501                	li	a0,0
}
2300a9bc:	0141                	addi	sp,sp,16
2300a9be:	8082                	ret
            memcpy(&usbd_cdc_acm_cfg.line_coding, *data, sizeof(usbd_cdc_acm_cfg.line_coding));
2300a9c0:	4198                	lw	a4,0(a1)
2300a9c2:	00074503          	lbu	a0,0(a4)
2300a9c6:	00174583          	lbu	a1,1(a4)
2300a9ca:	00274603          	lbu	a2,2(a4)
2300a9ce:	00374683          	lbu	a3,3(a4)
2300a9d2:	00474883          	lbu	a7,4(a4)
2300a9d6:	00574803          	lbu	a6,5(a4)
2300a9da:	00674703          	lbu	a4,6(a4)
2300a9de:	00b780a3          	sb	a1,1(a5)
2300a9e2:	00c78123          	sb	a2,2(a5)
2300a9e6:	00d781a3          	sb	a3,3(a5)
2300a9ea:	00a78023          	sb	a0,0(a5)
            usbd_cdc_acm_set_line_coding(usbd_cdc_acm_cfg.line_coding.dwDTERate, usbd_cdc_acm_cfg.line_coding.bDataBits,
2300a9ee:	4388                	lw	a0,0(a5)
2300a9f0:	0ff8f693          	zext.b	a3,a7
2300a9f4:	0ff87613          	zext.b	a2,a6
2300a9f8:	0ff77593          	zext.b	a1,a4
            memcpy(&usbd_cdc_acm_cfg.line_coding, *data, sizeof(usbd_cdc_acm_cfg.line_coding));
2300a9fc:	01178223          	sb	a7,4(a5)
2300aa00:	010782a3          	sb	a6,5(a5)
2300aa04:	00e78323          	sb	a4,6(a5)
            usbd_cdc_acm_set_line_coding(usbd_cdc_acm_cfg.line_coding.dwDTERate, usbd_cdc_acm_cfg.line_coding.bDataBits,
2300aa08:	f29ff0ef          	jal	ra,2300a930 <usbd_cdc_acm_set_line_coding>
}
2300aa0c:	40b2                	lw	ra,12(sp)
2300aa0e:	4422                	lw	s0,8(sp)
    return 0;
2300aa10:	4501                	li	a0,0
}
2300aa12:	0141                	addi	sp,sp,16
2300aa14:	8082                	ret

2300aa16 <usbd_cdc_add_acm_interface>:

void usbd_cdc_add_acm_interface(usbd_class_t *class, usbd_interface_t *intf)
{
    static usbd_class_t *last_class = NULL;

    if (last_class != class) {
2300aa16:	12418793          	addi	a5,gp,292 # 42016924 <last_class.0>
2300aa1a:	4398                	lw	a4,0(a5)
{
2300aa1c:	1101                	addi	sp,sp,-32
2300aa1e:	cc26                	sw	s1,24(sp)
2300aa20:	ce06                	sw	ra,28(sp)
2300aa22:	84aa                	mv	s1,a0
    if (last_class != class) {
2300aa24:	00a70763          	beq	a4,a0,2300aa32 <usbd_cdc_add_acm_interface+0x1c>
2300aa28:	c62e                	sw	a1,12(sp)
        last_class = class;
2300aa2a:	c388                	sw	a0,0(a5)
        usbd_class_register(class);
2300aa2c:	1e1000ef          	jal	ra,2300b40c <usbd_class_register>
2300aa30:	45b2                	lw	a1,12(sp)
    }

    intf->class_handler = cdc_acm_class_request_handler;
2300aa32:	2300b7b7          	lui	a5,0x2300b
2300aa36:	93678793          	addi	a5,a5,-1738 # 2300a936 <cdc_acm_class_request_handler>
2300aa3a:	c1dc                	sw	a5,4(a1)
    intf->custom_handler = NULL;
    intf->vendor_handler = NULL;
    intf->notify_handler = cdc_notify_handler;
2300aa3c:	2300b7b7          	lui	a5,0x2300b
    usbd_class_add_interface(class, intf);
}
2300aa40:	40f2                	lw	ra,28(sp)
    intf->notify_handler = cdc_notify_handler;
2300aa42:	90678793          	addi	a5,a5,-1786 # 2300a906 <cdc_notify_handler>
    usbd_class_add_interface(class, intf);
2300aa46:	8526                	mv	a0,s1
}
2300aa48:	44e2                	lw	s1,24(sp)
    intf->custom_handler = NULL;
2300aa4a:	0005a623          	sw	zero,12(a1)
    intf->vendor_handler = NULL;
2300aa4e:	0005a423          	sw	zero,8(a1)
    intf->notify_handler = cdc_notify_handler;
2300aa52:	c99c                	sw	a5,16(a1)
}
2300aa54:	6105                	addi	sp,sp,32
    usbd_class_add_interface(class, intf);
2300aa56:	1cd0006f          	j	2300b422 <usbd_class_add_interface>

2300aa5a <usbd_send_to_host.constprop.0>:
/**
 * @brief send data or status to host
 *
 * @return N/A
 */
static void usbd_send_to_host(uint16_t len)
2300aa5a:	1101                	addi	sp,sp,-32
2300aa5c:	cc22                	sw	s0,24(sp)
{
    uint32_t chunk = 0U;

    if (usbd_core_cfg.zlp_flag == false) {
2300aa5e:	dec18413          	addi	s0,gp,-532 # 420165ec <usbd_core_cfg>
2300aa62:	01444783          	lbu	a5,20(s0)
static void usbd_send_to_host(uint16_t len)
2300aa66:	ce06                	sw	ra,28(sp)
    uint32_t chunk = 0U;
2300aa68:	c602                	sw	zero,12(sp)
    if (usbd_core_cfg.zlp_flag == false) {
2300aa6a:	e3b1                	bnez	a5,2300aaae <usbd_send_to_host.constprop.0+0x54>
        chunk = usbd_core_cfg.ep0_data_buf_residue;
2300aa6c:	4450                	lw	a2,12(s0)

        if (usbd_ep_write(USB_CONTROL_IN_EP0, usbd_core_cfg.ep0_data_buf, usbd_core_cfg.ep0_data_buf_residue, &chunk) < 0) {
2300aa6e:	440c                	lw	a1,8(s0)
2300aa70:	0074                	addi	a3,sp,12
2300aa72:	08000513          	li	a0,128
        chunk = usbd_core_cfg.ep0_data_buf_residue;
2300aa76:	c632                	sw	a2,12(sp)
        if (usbd_ep_write(USB_CONTROL_IN_EP0, usbd_core_cfg.ep0_data_buf, usbd_core_cfg.ep0_data_buf_residue, &chunk) < 0) {
2300aa78:	f2cff0ef          	jal	ra,2300a1a4 <usbd_ep_write>
2300aa7c:	04054b63          	bltz	a0,2300aad2 <usbd_send_to_host.constprop.0+0x78>
            USBD_LOG_ERR("USB write data failed\r\n");
            return;
        }

        usbd_core_cfg.ep0_data_buf += chunk;
2300aa80:	46b2                	lw	a3,12(sp)
2300aa82:	4418                	lw	a4,8(s0)
        usbd_core_cfg.ep0_data_buf_residue -= chunk;
2300aa84:	445c                	lw	a5,12(s0)
        usbd_core_cfg.ep0_data_buf += chunk;
2300aa86:	9736                	add	a4,a4,a3
        usbd_core_cfg.ep0_data_buf_residue -= chunk;
2300aa88:	8f95                	sub	a5,a5,a3
        usbd_core_cfg.ep0_data_buf += chunk;
2300aa8a:	c418                	sw	a4,8(s0)
        usbd_core_cfg.ep0_data_buf_residue -= chunk;
2300aa8c:	c45c                	sw	a5,12(s0)
        /*
         * Set ZLP flag when host asks for a bigger length and the
         * last chunk is wMaxPacketSize long, to indicate the last
         * packet.
         */
        if ((!usbd_core_cfg.ep0_data_buf_residue) && (usbd_core_cfg.ep0_data_buf_len >= USB_CTRL_EP_MPS) && !(usbd_core_cfg.ep0_data_buf_len % USB_CTRL_EP_MPS)) {
2300aa8e:	ef81                	bnez	a5,2300aaa6 <usbd_send_to_host.constprop.0+0x4c>
2300aa90:	481c                	lw	a5,16(s0)
2300aa92:	03f00713          	li	a4,63
2300aa96:	00f77863          	bgeu	a4,a5,2300aaa6 <usbd_send_to_host.constprop.0+0x4c>
2300aa9a:	03f7f793          	andi	a5,a5,63
2300aa9e:	e781                	bnez	a5,2300aaa6 <usbd_send_to_host.constprop.0+0x4c>
            /* Transfers a zero-length packet next*/
            usbd_core_cfg.zlp_flag = true;
2300aaa0:	4785                	li	a5,1
2300aaa2:	00f40a23          	sb	a5,20(s0)
        if (usbd_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL) < 0) {
            USBD_LOG_ERR("USB write zlp failed\r\n");
            return;
        }
    }
}
2300aaa6:	40f2                	lw	ra,28(sp)
2300aaa8:	4462                	lw	s0,24(sp)
2300aaaa:	6105                	addi	sp,sp,32
2300aaac:	8082                	ret
        if (usbd_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL) < 0) {
2300aaae:	4681                	li	a3,0
2300aab0:	4601                	li	a2,0
2300aab2:	4581                	li	a1,0
2300aab4:	08000513          	li	a0,128
        usbd_core_cfg.zlp_flag = false;
2300aab8:	00040a23          	sb	zero,20(s0)
        if (usbd_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL) < 0) {
2300aabc:	ee8ff0ef          	jal	ra,2300a1a4 <usbd_ep_write>
2300aac0:	fe0553e3          	bgez	a0,2300aaa6 <usbd_send_to_host.constprop.0+0x4c>
            USBD_LOG_ERR("USB write zlp failed\r\n");
2300aac4:	2300d537          	lui	a0,0x2300d
2300aac8:	eb050513          	addi	a0,a0,-336 # 2300ceb0 <_ctype_+0x1a8>
2300aacc:	d34f80ef          	jal	ra,23003000 <bflb_platform_printf>
            return;
2300aad0:	bfd9                	j	2300aaa6 <usbd_send_to_host.constprop.0+0x4c>
            USBD_LOG_ERR("USB write data failed\r\n");
2300aad2:	2300d537          	lui	a0,0x2300d
2300aad6:	e9850513          	addi	a0,a0,-360 # 2300ce98 <_ctype_+0x190>
2300aada:	d26f80ef          	jal	ra,23003000 <bflb_platform_printf>
            return;
2300aade:	b7e1                	j	2300aaa6 <usbd_send_to_host.constprop.0+0x4c>

2300aae0 <usbd_setup_request_handler.constprop.0>:
static bool usbd_setup_request_handler(struct usb_setup_packet *setup, uint8_t **data, uint32_t *len)
2300aae0:	711d                	addi	sp,sp,-96
2300aae2:	caa6                	sw	s1,84(sp)
2300aae4:	c8ca                	sw	s2,80(sp)
    uint8_t type = setup->bmRequestType_b.Type;
2300aae6:	dec18913          	addi	s2,gp,-532 # 420165ec <usbd_core_cfg>
2300aaea:	00092783          	lw	a5,0(s2)
static bool usbd_setup_request_handler(struct usb_setup_packet *setup, uint8_t **data, uint32_t *len)
2300aaee:	ce86                	sw	ra,92(sp)
2300aaf0:	cca2                	sw	s0,88(sp)
    uint8_t type = setup->bmRequestType_b.Type;
2300aaf2:	8395                	srli	a5,a5,0x5
static bool usbd_setup_request_handler(struct usb_setup_packet *setup, uint8_t **data, uint32_t *len)
2300aaf4:	c6ce                	sw	s3,76(sp)
2300aaf6:	c4d2                	sw	s4,72(sp)
2300aaf8:	c2d6                	sw	s5,68(sp)
2300aafa:	c0da                	sw	s6,64(sp)
2300aafc:	de5e                	sw	s7,60(sp)
2300aafe:	dc62                	sw	s8,56(sp)
2300ab00:	da66                	sw	s9,52(sp)
2300ab02:	d86a                	sw	s10,48(sp)
2300ab04:	d66e                	sw	s11,44(sp)
    uint8_t type = setup->bmRequestType_b.Type;
2300ab06:	8b8d                	andi	a5,a5,3
    if (type == USB_REQUEST_STANDARD) {
2300ab08:	c79d                	beqz	a5,2300ab36 <usbd_setup_request_handler.constprop.0+0x56>
    } else if (type == USB_REQUEST_CLASS) {
2300ab0a:	4705                	li	a4,1
2300ab0c:	0ee78f63          	beq	a5,a4,2300ac0a <usbd_setup_request_handler.constprop.0+0x12a>
    } else if (type == USB_REQUEST_VENDOR) {
2300ab10:	4709                	li	a4,2
        return false;
2300ab12:	4501                	li	a0,0
    } else if (type == USB_REQUEST_VENDOR) {
2300ab14:	0ae78663          	beq	a5,a4,2300abc0 <usbd_setup_request_handler.constprop.0+0xe0>
}
2300ab18:	40f6                	lw	ra,92(sp)
2300ab1a:	4466                	lw	s0,88(sp)
2300ab1c:	44d6                	lw	s1,84(sp)
2300ab1e:	4946                	lw	s2,80(sp)
2300ab20:	49b6                	lw	s3,76(sp)
2300ab22:	4a26                	lw	s4,72(sp)
2300ab24:	4a96                	lw	s5,68(sp)
2300ab26:	4b06                	lw	s6,64(sp)
2300ab28:	5bf2                	lw	s7,60(sp)
2300ab2a:	5c62                	lw	s8,56(sp)
2300ab2c:	5cd2                	lw	s9,52(sp)
2300ab2e:	5d42                	lw	s10,48(sp)
2300ab30:	5db2                	lw	s11,44(sp)
2300ab32:	6125                	addi	sp,sp,96
2300ab34:	8082                	ret
    if (setup->bmRequestType_b.Recipient != USB_REQUEST_TO_INTERFACE) {
2300ab36:	00094783          	lbu	a5,0(s2)
2300ab3a:	4705                	li	a4,1
2300ab3c:	8bfd                	andi	a5,a5,31
2300ab3e:	02e79363          	bne	a5,a4,2300ab64 <usbd_setup_request_handler.constprop.0+0x84>
    usb_slist_for_each(i, &usbd_class_head)
2300ab42:	1381a583          	lw	a1,312(gp) # 42016938 <usbd_class_head>
2300ab46:	cd99                	beqz	a1,2300ab64 <usbd_setup_request_handler.constprop.0+0x84>
            if (intf->custom_handler && (intf->intf_num == (setup->wIndex & 0xFF))) {
2300ab48:	00494603          	lbu	a2,4(s2)
        usb_slist_for_each(j, &class->intf_list)
2300ab4c:	459c                	lw	a5,8(a1)
2300ab4e:	cb89                	beqz	a5,2300ab60 <usbd_setup_request_handler.constprop.0+0x80>
            if (intf->custom_handler && (intf->intf_num == (setup->wIndex & 0xFF))) {
2300ab50:	47d8                	lw	a4,12(a5)
2300ab52:	c709                	beqz	a4,2300ab5c <usbd_setup_request_handler.constprop.0+0x7c>
2300ab54:	0147c683          	lbu	a3,20(a5)
2300ab58:	04c68a63          	beq	a3,a2,2300abac <usbd_setup_request_handler.constprop.0+0xcc>
        usb_slist_for_each(j, &class->intf_list)
2300ab5c:	439c                	lw	a5,0(a5)
2300ab5e:	fbed                	bnez	a5,2300ab50 <usbd_setup_request_handler.constprop.0+0x70>
    usb_slist_for_each(i, &usbd_class_head)
2300ab60:	418c                	lw	a1,0(a1)
2300ab62:	f5ed                	bnez	a1,2300ab4c <usbd_setup_request_handler.constprop.0+0x6c>
    switch (setup->bmRequestType_b.Recipient) {
2300ab64:	00092783          	lw	a5,0(s2)
2300ab68:	4705                	li	a4,1
2300ab6a:	8bfd                	andi	a5,a5,31
2300ab6c:	24e78e63          	beq	a5,a4,2300adc8 <usbd_setup_request_handler.constprop.0+0x2e8>
2300ab70:	4689                	li	a3,2
2300ab72:	1cd78e63          	beq	a5,a3,2300ad4e <usbd_setup_request_handler.constprop.0+0x26e>
2300ab76:	10078c63          	beqz	a5,2300ac8e <usbd_setup_request_handler.constprop.0+0x1ae>
            USBD_LOG_ERR("Handler Error %d\r\n", type);
2300ab7a:	4581                	li	a1,0
            USBD_LOG_ERR("Handler Error %d\r\n", type);
2300ab7c:	2300d537          	lui	a0,0x2300d
2300ab80:	ffc50513          	addi	a0,a0,-4 # 2300cffc <_ctype_+0x2f4>
2300ab84:	c7cf80ef          	jal	ra,23003000 <bflb_platform_printf>
    USBD_LOG_INFO("Setup: "
2300ab88:	00695783          	lhu	a5,6(s2)
2300ab8c:	00495703          	lhu	a4,4(s2)
2300ab90:	00295683          	lhu	a3,2(s2)
2300ab94:	00194603          	lbu	a2,1(s2)
2300ab98:	00094583          	lbu	a1,0(s2)
2300ab9c:	2300d537          	lui	a0,0x2300d
2300aba0:	01050513          	addi	a0,a0,16 # 2300d010 <_ctype_+0x308>
2300aba4:	c5cf80ef          	jal	ra,23003000 <bflb_platform_printf>
            return false;
2300aba8:	4501                	li	a0,0
}
2300abaa:	b7bd                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
                return intf->custom_handler(setup, data, len);
2300abac:	01090613          	addi	a2,s2,16
2300abb0:	00890593          	addi	a1,s2,8
2300abb4:	dec18513          	addi	a0,gp,-532 # 420165ec <usbd_core_cfg>
2300abb8:	9702                	jalr	a4
        if (!usbd_custom_request_handler(setup, data, len)) {
2300abba:	f54d                	bnez	a0,2300ab64 <usbd_setup_request_handler.constprop.0+0x84>
    return true;
2300abbc:	4505                	li	a0,1
2300abbe:	bfa9                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    if (msosv1_desc) {
2300abc0:	13018413          	addi	s0,gp,304 # 42016930 <msosv1_desc>
2300abc4:	401c                	lw	a5,0(s0)
2300abc6:	c7c9                	beqz	a5,2300ac50 <usbd_setup_request_handler.constprop.0+0x170>
        if (setup->bRequest == msosv1_desc->vendor_code) {
2300abc8:	00194703          	lbu	a4,1(s2)
2300abcc:	0057c783          	lbu	a5,5(a5)
2300abd0:	0ef70663          	beq	a4,a5,2300acbc <usbd_setup_request_handler.constprop.0+0x1dc>
    usb_slist_for_each(i, &usbd_class_head)
2300abd4:	1381aa83          	lw	s5,312(gp) # 42016938 <usbd_class_head>
            if (intf->vendor_handler && !intf->vendor_handler(setup, data, len)) {
2300abd8:	01090a13          	addi	s4,s2,16
2300abdc:	00890993          	addi	s3,s2,8
    usb_slist_for_each(i, &usbd_class_head)
2300abe0:	020a8363          	beqz	s5,2300ac06 <usbd_setup_request_handler.constprop.0+0x126>
        usb_slist_for_each(j, &class->intf_list)
2300abe4:	008aa403          	lw	s0,8(s5)
2300abe8:	c819                	beqz	s0,2300abfe <usbd_setup_request_handler.constprop.0+0x11e>
            if (intf->vendor_handler && !intf->vendor_handler(setup, data, len)) {
2300abea:	441c                	lw	a5,8(s0)
2300abec:	8652                	mv	a2,s4
2300abee:	85ce                	mv	a1,s3
2300abf0:	dec18513          	addi	a0,gp,-532 # 420165ec <usbd_core_cfg>
2300abf4:	c399                	beqz	a5,2300abfa <usbd_setup_request_handler.constprop.0+0x11a>
2300abf6:	9782                	jalr	a5
2300abf8:	d171                	beqz	a0,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
        usb_slist_for_each(j, &class->intf_list)
2300abfa:	4000                	lw	s0,0(s0)
2300abfc:	f47d                	bnez	s0,2300abea <usbd_setup_request_handler.constprop.0+0x10a>
    usb_slist_for_each(i, &usbd_class_head)
2300abfe:	000aaa83          	lw	s5,0(s5)
2300ac02:	fe0a91e3          	bnez	s5,2300abe4 <usbd_setup_request_handler.constprop.0+0x104>
            USBD_LOG_ERR("Handler Error %d\r\n", type);
2300ac06:	4589                	li	a1,2
2300ac08:	bf95                	j	2300ab7c <usbd_setup_request_handler.constprop.0+0x9c>
    if (setup->bmRequestType_b.Recipient != USB_REQUEST_TO_INTERFACE) {
2300ac0a:	00094703          	lbu	a4,0(s2)
2300ac0e:	8b7d                	andi	a4,a4,31
2300ac10:	02f71363          	bne	a4,a5,2300ac36 <usbd_setup_request_handler.constprop.0+0x156>
    usb_slist_for_each(i, &usbd_class_head)
2300ac14:	1381a583          	lw	a1,312(gp) # 42016938 <usbd_class_head>
2300ac18:	cd99                	beqz	a1,2300ac36 <usbd_setup_request_handler.constprop.0+0x156>
            if (intf->class_handler && (intf->intf_num == (setup->wIndex & 0xFF))) {
2300ac1a:	00494603          	lbu	a2,4(s2)
        usb_slist_for_each(j, &class->intf_list)
2300ac1e:	459c                	lw	a5,8(a1)
2300ac20:	cb89                	beqz	a5,2300ac32 <usbd_setup_request_handler.constprop.0+0x152>
            if (intf->class_handler && (intf->intf_num == (setup->wIndex & 0xFF))) {
2300ac22:	43d8                	lw	a4,4(a5)
2300ac24:	c709                	beqz	a4,2300ac2e <usbd_setup_request_handler.constprop.0+0x14e>
2300ac26:	0147c683          	lbu	a3,20(a5)
2300ac2a:	00c68863          	beq	a3,a2,2300ac3a <usbd_setup_request_handler.constprop.0+0x15a>
        usb_slist_for_each(j, &class->intf_list)
2300ac2e:	439c                	lw	a5,0(a5)
2300ac30:	fbed                	bnez	a5,2300ac22 <usbd_setup_request_handler.constprop.0+0x142>
    usb_slist_for_each(i, &usbd_class_head)
2300ac32:	418c                	lw	a1,0(a1)
2300ac34:	f5ed                	bnez	a1,2300ac1e <usbd_setup_request_handler.constprop.0+0x13e>
            USBD_LOG_ERR("Handler Error %d\r\n", type);
2300ac36:	4585                	li	a1,1
2300ac38:	b791                	j	2300ab7c <usbd_setup_request_handler.constprop.0+0x9c>
                return intf->class_handler(setup, data, len);
2300ac3a:	01090613          	addi	a2,s2,16
2300ac3e:	00890593          	addi	a1,s2,8
2300ac42:	dec18513          	addi	a0,gp,-532 # 420165ec <usbd_core_cfg>
2300ac46:	9702                	jalr	a4
        if (usbd_class_request_handler(setup, data, len) < 0) {
2300ac48:	fe0547e3          	bltz	a0,2300ac36 <usbd_setup_request_handler.constprop.0+0x156>
    return true;
2300ac4c:	4505                	li	a0,1
2300ac4e:	b5e9                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    } else if (msosv2_desc) {
2300ac50:	13418413          	addi	s0,gp,308 # 42016934 <msosv2_desc>
2300ac54:	401c                	lw	a5,0(s0)
2300ac56:	dfbd                	beqz	a5,2300abd4 <usbd_setup_request_handler.constprop.0+0xf4>
        if (setup->bRequest == msosv2_desc->vendor_code) {
2300ac58:	00194703          	lbu	a4,1(s2)
2300ac5c:	0067c783          	lbu	a5,6(a5)
2300ac60:	f6f71ae3          	bne	a4,a5,2300abd4 <usbd_setup_request_handler.constprop.0+0xf4>
            switch (setup->wIndex) {
2300ac64:	00495703          	lhu	a4,4(s2)
2300ac68:	479d                	li	a5,7
2300ac6a:	06f71163          	bne	a4,a5,2300accc <usbd_setup_request_handler.constprop.0+0x1ec>
                    USBD_LOG_INFO("GET MS OS 2.0 Descriptor\r\n");
2300ac6e:	2300d537          	lui	a0,0x2300d
2300ac72:	0b450513          	addi	a0,a0,180 # 2300d0b4 <_ctype_+0x3ac>
2300ac76:	b8af80ef          	jal	ra,23003000 <bflb_platform_printf>
                    *data = (uint8_t *)msosv2_desc->compat_id;
2300ac7a:	401c                	lw	a5,0(s0)
    return true;
2300ac7c:	4505                	li	a0,1
                    *data = (uint8_t *)msosv2_desc->compat_id;
2300ac7e:	4398                	lw	a4,0(a5)
                    *len = msosv2_desc->compat_id_len;
2300ac80:	0047d783          	lhu	a5,4(a5)
                    *data = (uint8_t *)msosv2_desc->compat_id;
2300ac84:	00e92423          	sw	a4,8(s2)
                    *len = msosv2_desc->compat_id_len;
2300ac88:	00f92823          	sw	a5,16(s2)
                    return 0;
2300ac8c:	b571                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    switch (setup->bRequest) {
2300ac8e:	00194583          	lbu	a1,1(s2)
2300ac92:	4799                	li	a5,6
    uint16_t value = setup->wValue;
2300ac94:	00295503          	lhu	a0,2(s2)
    switch (setup->bRequest) {
2300ac98:	32f58d63          	beq	a1,a5,2300afd2 <usbd_setup_request_handler.constprop.0+0x4f2>
2300ac9c:	06b7e963          	bltu	a5,a1,2300ad0e <usbd_setup_request_handler.constprop.0+0x22e>
2300aca0:	478d                	li	a5,3
2300aca2:	36f58a63          	beq	a1,a5,2300b016 <usbd_setup_request_handler.constprop.0+0x536>
2300aca6:	02b7fb63          	bgeu	a5,a1,2300acdc <usbd_setup_request_handler.constprop.0+0x1fc>
2300acaa:	4795                	li	a5,5
2300acac:	06f59c63          	bne	a1,a5,2300ad24 <usbd_setup_request_handler.constprop.0+0x244>
            usbd_set_address(value);
2300acb0:	0ff57513          	zext.b	a0,a0
2300acb4:	cc8ff0ef          	jal	ra,2300a17c <usbd_set_address>
    return true;
2300acb8:	4505                	li	a0,1
2300acba:	bdb9                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
            switch (setup->wIndex) {
2300acbc:	00495783          	lhu	a5,4(s2)
2300acc0:	4711                	li	a4,4
2300acc2:	18e78663          	beq	a5,a4,2300ae4e <usbd_setup_request_handler.constprop.0+0x36e>
2300acc6:	4715                	li	a4,5
2300acc8:	16e78363          	beq	a5,a4,2300ae2e <usbd_setup_request_handler.constprop.0+0x34e>
                    USBD_LOG_ERR("unknown vendor code\r\n");
2300accc:	2300d537          	lui	a0,0x2300d
2300acd0:	09c50513          	addi	a0,a0,156 # 2300d09c <_ctype_+0x394>
2300acd4:	b2cf80ef          	jal	ra,23003000 <bflb_platform_printf>
            USBD_LOG_ERR("Handler Error %d\r\n", type);
2300acd8:	4589                	li	a1,2
2300acda:	b54d                	j	2300ab7c <usbd_setup_request_handler.constprop.0+0x9c>
    switch (setup->bRequest) {
2300acdc:	14058063          	beqz	a1,2300ae1c <usbd_setup_request_handler.constprop.0+0x33c>
2300ace0:	04e59263          	bne	a1,a4,2300ad24 <usbd_setup_request_handler.constprop.0+0x244>
            if (value == USB_FEATURE_REMOTE_WAKEUP) {
2300ace4:	e8b51be3          	bne	a0,a1,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
}

static void usbd_class_event_notify_handler(uint8_t event, void *arg)
{
    usb_slist_t *i, *j;
    usb_slist_for_each(i, &usbd_class_head)
2300ace8:	1381a483          	lw	s1,312(gp) # 42016938 <usbd_class_head>
                usbd_core_cfg.remote_wakeup = 0;
2300acec:	16091023          	sh	zero,352(s2)
    usb_slist_for_each(i, &usbd_class_head)
2300acf0:	ec0486e3          	beqz	s1,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
    {
        usbd_class_t *class = usb_slist_entry(i, struct usbd_class, list);

        usb_slist_for_each(j, &class->intf_list)
2300acf4:	4480                	lw	s0,8(s1)
2300acf6:	c801                	beqz	s0,2300ad06 <usbd_setup_request_handler.constprop.0+0x226>
        {
            usbd_interface_t *intf = usb_slist_entry(j, struct usbd_interface, list);

            if (intf->notify_handler) {
2300acf8:	481c                	lw	a5,16(s0)
                intf->notify_handler(event, arg);
2300acfa:	4581                	li	a1,0
2300acfc:	4529                	li	a0,10
            if (intf->notify_handler) {
2300acfe:	c391                	beqz	a5,2300ad02 <usbd_setup_request_handler.constprop.0+0x222>
                intf->notify_handler(event, arg);
2300ad00:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300ad02:	4000                	lw	s0,0(s0)
2300ad04:	f875                	bnez	s0,2300acf8 <usbd_setup_request_handler.constprop.0+0x218>
    usb_slist_for_each(i, &usbd_class_head)
2300ad06:	4084                	lw	s1,0(s1)
2300ad08:	f4f5                	bnez	s1,2300acf4 <usbd_setup_request_handler.constprop.0+0x214>
    return true;
2300ad0a:	4505                	li	a0,1
2300ad0c:	b531                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    switch (setup->bRequest) {
2300ad0e:	47a5                	li	a5,9
2300ad10:	22f58463          	beq	a1,a5,2300af38 <usbd_setup_request_handler.constprop.0+0x458>
2300ad14:	00b7ff63          	bgeu	a5,a1,2300ad32 <usbd_setup_request_handler.constprop.0+0x252>
2300ad18:	ff658793          	addi	a5,a1,-10
2300ad1c:	0ff7f793          	zext.b	a5,a5
2300ad20:	e8f77ee3          	bgeu	a4,a5,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
            USBD_LOG_ERR("Illegal device req 0x%02x\r\n", setup->bRequest);
2300ad24:	2300d537          	lui	a0,0x2300d
2300ad28:	f6050513          	addi	a0,a0,-160 # 2300cf60 <_ctype_+0x258>
2300ad2c:	ad4f80ef          	jal	ra,23003000 <bflb_platform_printf>
    return ret;
2300ad30:	b5a9                	j	2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    switch (setup->bRequest) {
2300ad32:	479d                	li	a5,7
2300ad34:	e4f583e3          	beq	a1,a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
2300ad38:	47a1                	li	a5,8
2300ad3a:	fef595e3          	bne	a1,a5,2300ad24 <usbd_setup_request_handler.constprop.0+0x244>
            *data = (uint8_t *)&usbd_core_cfg.configuration;
2300ad3e:	15e90793          	addi	a5,s2,350
2300ad42:	00f92423          	sw	a5,8(s2)
            *len = 1;
2300ad46:	00e92823          	sw	a4,16(s2)
    return true;
2300ad4a:	4505                	li	a0,1
2300ad4c:	b3f1                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    switch (setup->bRequest) {
2300ad4e:	00194583          	lbu	a1,1(s2)
2300ad52:	478d                	li	a5,3
    uint8_t ep = (uint8_t)setup->wIndex;
2300ad54:	00494403          	lbu	s0,4(s2)
    switch (setup->bRequest) {
2300ad58:	18f58a63          	beq	a1,a5,2300aeec <usbd_setup_request_handler.constprop.0+0x40c>
2300ad5c:	04b7ec63          	bltu	a5,a1,2300adb4 <usbd_setup_request_handler.constprop.0+0x2d4>
2300ad60:	16058263          	beqz	a1,2300aec4 <usbd_setup_request_handler.constprop.0+0x3e4>
2300ad64:	04e59b63          	bne	a1,a4,2300adba <usbd_setup_request_handler.constprop.0+0x2da>
            if (setup->wValue == USB_FEATURE_ENDPOINT_STALL) {
2300ad68:	00295783          	lhu	a5,2(s2)
2300ad6c:	e00797e3          	bnez	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
                if (((ep & 0x7f) == 0) || is_device_configured()) {
2300ad70:	07f47793          	andi	a5,s0,127
2300ad74:	c789                	beqz	a5,2300ad7e <usbd_setup_request_handler.constprop.0+0x29e>
2300ad76:	15e94783          	lbu	a5,350(s2)
2300ad7a:	e00780e3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
                    USBD_LOG_ERR("ep:%x clear halt\r\n", ep);
2300ad7e:	2300d537          	lui	a0,0x2300d
2300ad82:	85a2                	mv	a1,s0
2300ad84:	fbc50513          	addi	a0,a0,-68 # 2300cfbc <_ctype_+0x2b4>
2300ad88:	a78f80ef          	jal	ra,23003000 <bflb_platform_printf>
                    usbd_ep_clear_stall(ep);
2300ad8c:	8522                	mv	a0,s0
2300ad8e:	c04ff0ef          	jal	ra,2300a192 <usbd_ep_clear_stall>
    usb_slist_for_each(i, &usbd_class_head)
2300ad92:	1381a483          	lw	s1,312(gp) # 42016938 <usbd_class_head>
2300ad96:	e20483e3          	beqz	s1,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
        usb_slist_for_each(j, &class->intf_list)
2300ad9a:	4480                	lw	s0,8(s1)
2300ad9c:	c801                	beqz	s0,2300adac <usbd_setup_request_handler.constprop.0+0x2cc>
            if (intf->notify_handler) {
2300ad9e:	481c                	lw	a5,16(s0)
                intf->notify_handler(event, arg);
2300ada0:	4581                	li	a1,0
2300ada2:	4531                	li	a0,12
            if (intf->notify_handler) {
2300ada4:	c391                	beqz	a5,2300ada8 <usbd_setup_request_handler.constprop.0+0x2c8>
                intf->notify_handler(event, arg);
2300ada6:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300ada8:	4000                	lw	s0,0(s0)
2300adaa:	f875                	bnez	s0,2300ad9e <usbd_setup_request_handler.constprop.0+0x2be>
    usb_slist_for_each(i, &usbd_class_head)
2300adac:	4084                	lw	s1,0(s1)
2300adae:	f4f5                	bnez	s1,2300ad9a <usbd_setup_request_handler.constprop.0+0x2ba>
    return true;
2300adb0:	4505                	li	a0,1
2300adb2:	b39d                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    switch (setup->bRequest) {
2300adb4:	47b1                	li	a5,12
2300adb6:	dcf582e3          	beq	a1,a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
            USBD_LOG_ERR("Illegal ep req 0x%02x\r\n", setup->bRequest);
2300adba:	2300d537          	lui	a0,0x2300d
2300adbe:	fe450513          	addi	a0,a0,-28 # 2300cfe4 <_ctype_+0x2dc>
2300adc2:	a3ef80ef          	jal	ra,23003000 <bflb_platform_printf>
            return false;
2300adc6:	bb55                	j	2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    if (!is_device_configured() ||
2300adc8:	15e94783          	lbu	a5,350(s2)
2300adcc:	da0787e3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    const uint8_t *p = (uint8_t *)usbd_core_cfg.descriptors;
2300add0:	01892403          	lw	s0,24(s2)
        (!is_interface_valid((uint8_t)setup->wIndex))) {
2300add4:	00494983          	lbu	s3,4(s2)
    while (p[DESC_bLength] != 0U) {
2300add8:	00044703          	lbu	a4,0(s0)
2300addc:	d8070fe3          	beqz	a4,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
2300ade0:	87a2                	mv	a5,s0
        if (p[DESC_bDescriptorType] == USB_DESCRIPTOR_TYPE_CONFIGURATION) {
2300ade2:	4609                	li	a2,2
2300ade4:	a031                	j	2300adf0 <usbd_setup_request_handler.constprop.0+0x310>
        p += p[DESC_bLength];
2300ade6:	97ba                	add	a5,a5,a4
    while (p[DESC_bLength] != 0U) {
2300ade8:	0007c703          	lbu	a4,0(a5)
2300adec:	d80707e3          	beqz	a4,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
        if (p[DESC_bDescriptorType] == USB_DESCRIPTOR_TYPE_CONFIGURATION) {
2300adf0:	0017c683          	lbu	a3,1(a5)
2300adf4:	fec699e3          	bne	a3,a2,2300ade6 <usbd_setup_request_handler.constprop.0+0x306>
            if (interface < cfg_descr->bNumInterfaces) {
2300adf8:	0047c683          	lbu	a3,4(a5)
2300adfc:	fed9f5e3          	bgeu	s3,a3,2300ade6 <usbd_setup_request_handler.constprop.0+0x306>
    switch (setup->bRequest) {
2300ae00:	00194583          	lbu	a1,1(s2)
2300ae04:	47a9                	li	a5,10
2300ae06:	2cf58163          	beq	a1,a5,2300b0c8 <usbd_setup_request_handler.constprop.0+0x5e8>
2300ae0a:	06b7e263          	bltu	a5,a1,2300ae6e <usbd_setup_request_handler.constprop.0+0x38e>
2300ae0e:	0fd5f793          	andi	a5,a1,253
2300ae12:	4705                	li	a4,1
2300ae14:	d6e783e3          	beq	a5,a4,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
2300ae18:	28059063          	bnez	a1,2300b098 <usbd_setup_request_handler.constprop.0+0x5b8>
            *data = (uint8_t *)&usbd_core_cfg.remote_wakeup;
2300ae1c:	16090793          	addi	a5,s2,352
2300ae20:	00f92423          	sw	a5,8(s2)
            *len = 2;
2300ae24:	4789                	li	a5,2
2300ae26:	00f92823          	sw	a5,16(s2)
    return true;
2300ae2a:	4505                	li	a0,1
2300ae2c:	b1f5                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
                    USBD_LOG_INFO("get Compat id properties\r\n");
2300ae2e:	2300d537          	lui	a0,0x2300d
2300ae32:	08050513          	addi	a0,a0,128 # 2300d080 <_ctype_+0x378>
2300ae36:	9caf80ef          	jal	ra,23003000 <bflb_platform_printf>
                    *data = (uint8_t *)msosv1_desc->comp_id_property;
2300ae3a:	401c                	lw	a5,0(s0)
    return true;
2300ae3c:	4505                	li	a0,1
                    *data = (uint8_t *)msosv1_desc->comp_id_property;
2300ae3e:	4b98                	lw	a4,16(a5)
                    *len = msosv1_desc->comp_id_property_len;
2300ae40:	0147d783          	lhu	a5,20(a5)
                    *data = (uint8_t *)msosv1_desc->comp_id_property;
2300ae44:	00e92423          	sw	a4,8(s2)
                    *len = msosv1_desc->comp_id_property_len;
2300ae48:	00f92823          	sw	a5,16(s2)
                    return 0;
2300ae4c:	b1f1                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
                    USBD_LOG_INFO("get Compat ID\r\n");
2300ae4e:	2300d537          	lui	a0,0x2300d
2300ae52:	07050513          	addi	a0,a0,112 # 2300d070 <_ctype_+0x368>
2300ae56:	9aaf80ef          	jal	ra,23003000 <bflb_platform_printf>
                    *data = (uint8_t *)msosv1_desc->compat_id;
2300ae5a:	401c                	lw	a5,0(s0)
    return true;
2300ae5c:	4505                	li	a0,1
                    *data = (uint8_t *)msosv1_desc->compat_id;
2300ae5e:	4798                	lw	a4,8(a5)
                    *len = msosv1_desc->compat_id_len;
2300ae60:	00c7d783          	lhu	a5,12(a5)
                    *data = (uint8_t *)msosv1_desc->compat_id;
2300ae64:	00e92423          	sw	a4,8(s2)
                    *len = msosv1_desc->compat_id_len;
2300ae68:	00f92823          	sw	a5,16(s2)
                    return 0;
2300ae6c:	b175                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    switch (setup->bRequest) {
2300ae6e:	47ad                	li	a5,11
2300ae70:	22f59463          	bne	a1,a5,2300b098 <usbd_setup_request_handler.constprop.0+0x5b8>
            usbd_set_interface(setup->wIndex, setup->wValue);
2300ae74:	00294b03          	lbu	s6,2(s2)
    const uint8_t *if_desc = NULL;
2300ae78:	4481                	li	s1,0
    uint8_t cur_alt_setting = 0xFF;
2300ae7a:	0ff00d93          	li	s11,255
    uint8_t cur_iface = 0xFF;
2300ae7e:	0ff00d13          	li	s10,255
        switch (p[DESC_bDescriptorType]) {
2300ae82:	4a91                	li	s5,4
2300ae84:	4a15                	li	s4,5
    USBD_LOG_INFO("Open endpoint:0x%x type:%u mps:%u\r\n",
2300ae86:	2300dcb7          	lui	s9,0x2300d
    usbd_core_cfg.configured = true;
2300ae8a:	4c05                	li	s8,1
    USBD_LOG_INFO("Close endpoint:0x%x type:%u\r\n",
2300ae8c:	2300dbb7          	lui	s7,0x2300d
2300ae90:	a821                	j	2300aea8 <usbd_setup_request_handler.constprop.0+0x3c8>
        switch (p[DESC_bDescriptorType]) {
2300ae92:	01479463          	bne	a5,s4,2300ae9a <usbd_setup_request_handler.constprop.0+0x3ba>
                if (cur_iface == iface) {
2300ae96:	21a98863          	beq	s3,s10,2300b0a6 <usbd_setup_request_handler.constprop.0+0x5c6>
        p += p[DESC_bLength];
2300ae9a:	00044783          	lbu	a5,0(s0)
2300ae9e:	943e                	add	s0,s0,a5
    while (p[DESC_bLength] != 0U) {
2300aea0:	00044783          	lbu	a5,0(s0)
2300aea4:	1c078663          	beqz	a5,2300b070 <usbd_setup_request_handler.constprop.0+0x590>
        switch (p[DESC_bDescriptorType]) {
2300aea8:	00144783          	lbu	a5,1(s0)
2300aeac:	ff5793e3          	bne	a5,s5,2300ae92 <usbd_setup_request_handler.constprop.0+0x3b2>
                cur_iface = p[INTF_DESC_bInterfaceNumber];
2300aeb0:	00244d03          	lbu	s10,2(s0)
                cur_alt_setting = p[INTF_DESC_bAlternateSetting];
2300aeb4:	00344d83          	lbu	s11,3(s0)
                if (cur_iface == iface &&
2300aeb8:	ffa991e3          	bne	s3,s10,2300ae9a <usbd_setup_request_handler.constprop.0+0x3ba>
2300aebc:	fdbb1fe3          	bne	s6,s11,2300ae9a <usbd_setup_request_handler.constprop.0+0x3ba>
2300aec0:	84a2                	mv	s1,s0
2300aec2:	bfe1                	j	2300ae9a <usbd_setup_request_handler.constprop.0+0x3ba>
            if (((ep & 0x7f) == 0) || is_device_configured()) {
2300aec4:	07f47793          	andi	a5,s0,127
2300aec8:	c789                	beqz	a5,2300aed2 <usbd_setup_request_handler.constprop.0+0x3f2>
2300aeca:	15e94783          	lbu	a5,350(s2)
2300aece:	ca0786e3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
                usbd_ep_is_stalled(ep, (uint8_t *)&usbd_core_cfg.remote_wakeup);
2300aed2:	16090493          	addi	s1,s2,352
2300aed6:	85a6                	mv	a1,s1
2300aed8:	8522                	mv	a0,s0
2300aeda:	abcff0ef          	jal	ra,2300a196 <usbd_ep_is_stalled>
                *len = 2;
2300aede:	4789                	li	a5,2
                *data = (uint8_t *)&usbd_core_cfg.remote_wakeup;
2300aee0:	00992423          	sw	s1,8(s2)
                *len = 2;
2300aee4:	00f92823          	sw	a5,16(s2)
    return true;
2300aee8:	4505                	li	a0,1
2300aeea:	b13d                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
            if (setup->wValue == USB_FEATURE_ENDPOINT_STALL) {
2300aeec:	00295783          	lhu	a5,2(s2)
2300aef0:	c80795e3          	bnez	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
                if (((ep & 0x7f) == 0) || is_device_configured()) {
2300aef4:	07f47793          	andi	a5,s0,127
2300aef8:	c789                	beqz	a5,2300af02 <usbd_setup_request_handler.constprop.0+0x422>
2300aefa:	15e94783          	lbu	a5,350(s2)
2300aefe:	c6078ee3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
                    USBD_LOG_ERR("ep:%x set halt\r\n", ep);
2300af02:	2300d537          	lui	a0,0x2300d
2300af06:	85a2                	mv	a1,s0
2300af08:	fd050513          	addi	a0,a0,-48 # 2300cfd0 <_ctype_+0x2c8>
2300af0c:	8f4f80ef          	jal	ra,23003000 <bflb_platform_printf>
                    usbd_ep_set_stall(ep);
2300af10:	8522                	mv	a0,s0
2300af12:	a7cff0ef          	jal	ra,2300a18e <usbd_ep_set_stall>
    usb_slist_for_each(i, &usbd_class_head)
2300af16:	1381a483          	lw	s1,312(gp) # 42016938 <usbd_class_head>
2300af1a:	ca0481e3          	beqz	s1,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
        usb_slist_for_each(j, &class->intf_list)
2300af1e:	4480                	lw	s0,8(s1)
2300af20:	c801                	beqz	s0,2300af30 <usbd_setup_request_handler.constprop.0+0x450>
            if (intf->notify_handler) {
2300af22:	481c                	lw	a5,16(s0)
                intf->notify_handler(event, arg);
2300af24:	4581                	li	a1,0
2300af26:	452d                	li	a0,11
            if (intf->notify_handler) {
2300af28:	c391                	beqz	a5,2300af2c <usbd_setup_request_handler.constprop.0+0x44c>
                intf->notify_handler(event, arg);
2300af2a:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300af2c:	4000                	lw	s0,0(s0)
2300af2e:	f875                	bnez	s0,2300af22 <usbd_setup_request_handler.constprop.0+0x442>
    usb_slist_for_each(i, &usbd_class_head)
2300af30:	4084                	lw	s1,0(s1)
2300af32:	f4f5                	bnez	s1,2300af1e <usbd_setup_request_handler.constprop.0+0x43e>
    return true;
2300af34:	4505                	li	a0,1
2300af36:	b6cd                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
            if (!usbd_set_configuration(value, 0)) {
2300af38:	0ff57493          	zext.b	s1,a0
    if (config_index == 0U) {
2300af3c:	24048063          	beqz	s1,2300b17c <usbd_setup_request_handler.constprop.0+0x69c>
    uint8_t *p = (uint8_t *)usbd_core_cfg.descriptors;
2300af40:	01892403          	lw	s0,24(s2)
    bool found = false;
2300af44:	4701                	li	a4,0
    uint8_t cur_alt_setting = 0xFF;
2300af46:	0ff00b93          	li	s7,255
    while (p[DESC_bLength] != 0U) {
2300af4a:	00044783          	lbu	a5,0(s0)
    uint8_t cur_config = 0xFF;
2300af4e:	0ff00b13          	li	s6,255
    while (p[DESC_bLength] != 0U) {
2300af52:	c20784e3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
        switch (p[DESC_bDescriptorType]) {
2300af56:	4a91                	li	s5,4
2300af58:	4a15                	li	s4,5
    USBD_LOG_INFO("Open endpoint:0x%x type:%u mps:%u\r\n",
2300af5a:	2300dcb7          	lui	s9,0x2300d
    usbd_core_cfg.configured = true;
2300af5e:	4c05                	li	s8,1
        switch (p[DESC_bDescriptorType]) {
2300af60:	4989                	li	s3,2
2300af62:	a809                	j	2300af74 <usbd_setup_request_handler.constprop.0+0x494>
2300af64:	07378163          	beq	a5,s3,2300afc6 <usbd_setup_request_handler.constprop.0+0x4e6>
        p += p[DESC_bLength];
2300af68:	00044783          	lbu	a5,0(s0)
2300af6c:	943e                	add	s0,s0,a5
    while (p[DESC_bLength] != 0U) {
2300af6e:	00044783          	lbu	a5,0(s0)
2300af72:	c7f9                	beqz	a5,2300b040 <usbd_setup_request_handler.constprop.0+0x560>
        switch (p[DESC_bDescriptorType]) {
2300af74:	00144783          	lbu	a5,1(s0)
2300af78:	05578463          	beq	a5,s5,2300afc0 <usbd_setup_request_handler.constprop.0+0x4e0>
2300af7c:	ff4794e3          	bne	a5,s4,2300af64 <usbd_setup_request_handler.constprop.0+0x484>
                if ((cur_config != config_index) ||
2300af80:	ff6494e3          	bne	s1,s6,2300af68 <usbd_setup_request_handler.constprop.0+0x488>
2300af84:	fe0b92e3          	bnez	s7,2300af68 <usbd_setup_request_handler.constprop.0+0x488>
    ep_cfg.ep_addr = ep_desc->bEndpointAddress;
2300af88:	00244583          	lbu	a1,2(s0)
    USBD_LOG_INFO("Open endpoint:0x%x type:%u mps:%u\r\n",
2300af8c:	f3cc8513          	addi	a0,s9,-196 # 2300cf3c <_ctype_+0x234>
    ep_cfg.ep_addr = ep_desc->bEndpointAddress;
2300af90:	00b10c23          	sb	a1,24(sp)
    ep_cfg.ep_mps = ep_desc->wMaxPacketSize;
2300af94:	00544783          	lbu	a5,5(s0)
2300af98:	00444683          	lbu	a3,4(s0)
2300af9c:	07a2                	slli	a5,a5,0x8
2300af9e:	8edd                	or	a3,a3,a5
2300afa0:	00d11d23          	sh	a3,26(sp)
    ep_cfg.ep_type = ep_desc->bmAttributes & USBD_EP_TYPE_MASK;
2300afa4:	00344603          	lbu	a2,3(s0)
2300afa8:	8a0d                	andi	a2,a2,3
2300afaa:	00c10e23          	sb	a2,28(sp)
    USBD_LOG_INFO("Open endpoint:0x%x type:%u mps:%u\r\n",
2300afae:	852f80ef          	jal	ra,23003000 <bflb_platform_printf>
    usbd_ep_open(&ep_cfg);
2300afb2:	0828                	addi	a0,sp,24
2300afb4:	9ccff0ef          	jal	ra,2300a180 <usbd_ep_open>
                found = usbd_set_endpoint((struct usb_endpoint_descriptor *)p);
2300afb8:	4705                	li	a4,1
    usbd_core_cfg.configured = true;
2300afba:	15890ea3          	sb	s8,349(s2)
                break;
2300afbe:	b76d                	j	2300af68 <usbd_setup_request_handler.constprop.0+0x488>
                cur_alt_setting =
2300afc0:	00344b83          	lbu	s7,3(s0)
                break;
2300afc4:	b755                	j	2300af68 <usbd_setup_request_handler.constprop.0+0x488>
                cur_config = p[CONF_DESC_bConfigurationValue];
2300afc6:	00544b03          	lbu	s6,5(s0)
                if (cur_config == config_index) {
2300afca:	f9649fe3          	bne	s1,s6,2300af68 <usbd_setup_request_handler.constprop.0+0x488>
                found = usbd_set_endpoint((struct usb_endpoint_descriptor *)p);
2300afce:	4705                	li	a4,1
2300afd0:	bf61                	j	2300af68 <usbd_setup_request_handler.constprop.0+0x488>
    type = GET_DESC_TYPE(type_index);
2300afd2:	00855593          	srli	a1,a0,0x8
    if ((type == USB_DESCRIPTOR_TYPE_STRING) && (index == USB_OSDESC_STRING_DESC_INDEX)) {
2300afd6:	478d                	li	a5,3
    type = GET_DESC_TYPE(type_index);
2300afd8:	882e                	mv	a6,a1
    index = GET_DESC_INDEX(type_index);
2300afda:	0ff57613          	zext.b	a2,a0
    if ((type == USB_DESCRIPTOR_TYPE_STRING) && (index == USB_OSDESC_STRING_DESC_INDEX)) {
2300afde:	10f58963          	beq	a1,a5,2300b0f0 <usbd_setup_request_handler.constprop.0+0x610>
    } else if (type == USB_DESCRIPTOR_TYPE_BINARY_OBJECT_STORE) {
2300afe2:	473d                	li	a4,15
2300afe4:	16e58a63          	beq	a1,a4,2300b158 <usbd_setup_request_handler.constprop.0+0x678>
    else if ((type == USB_DESCRIPTOR_TYPE_INTERFACE) || (type == USB_DESCRIPTOR_TYPE_ENDPOINT) ||
2300afe8:	b8b7e9e3          	bltu	a5,a1,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    p = (uint8_t *)usbd_core_cfg.descriptors;
2300afec:	01892783          	lw	a5,24(s2)
    while (p[DESC_bLength] != 0U) {
2300aff0:	0007c703          	lbu	a4,0(a5)
2300aff4:	14070b63          	beqz	a4,2300b14a <usbd_setup_request_handler.constprop.0+0x66a>
    cur_index = 0U;
2300aff8:	4501                	li	a0,0
2300affa:	a031                	j	2300b006 <usbd_setup_request_handler.constprop.0+0x526>
        p += p[DESC_bLength];
2300affc:	97ba                	add	a5,a5,a4
    while (p[DESC_bLength] != 0U) {
2300affe:	0007c703          	lbu	a4,0(a5)
2300b002:	14070463          	beqz	a4,2300b14a <usbd_setup_request_handler.constprop.0+0x66a>
        if (p[DESC_bDescriptorType] == type) {
2300b006:	0017c683          	lbu	a3,1(a5)
2300b00a:	ff0699e3          	bne	a3,a6,2300affc <usbd_setup_request_handler.constprop.0+0x51c>
            if (cur_index == index) {
2300b00e:	0cc50663          	beq	a0,a2,2300b0da <usbd_setup_request_handler.constprop.0+0x5fa>
            cur_index++;
2300b012:	0505                	addi	a0,a0,1
2300b014:	b7e5                	j	2300affc <usbd_setup_request_handler.constprop.0+0x51c>
            if (value == USB_FEATURE_REMOTE_WAKEUP) {
2300b016:	b6e512e3          	bne	a0,a4,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    usb_slist_for_each(i, &usbd_class_head)
2300b01a:	1381a483          	lw	s1,312(gp) # 42016938 <usbd_class_head>
                usbd_core_cfg.remote_wakeup = 1;
2300b01e:	16a91023          	sh	a0,352(s2)
    usb_slist_for_each(i, &usbd_class_head)
2300b022:	b8048de3          	beqz	s1,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
        usb_slist_for_each(j, &class->intf_list)
2300b026:	4480                	lw	s0,8(s1)
2300b028:	c801                	beqz	s0,2300b038 <usbd_setup_request_handler.constprop.0+0x558>
            if (intf->notify_handler) {
2300b02a:	481c                	lw	a5,16(s0)
                intf->notify_handler(event, arg);
2300b02c:	4581                	li	a1,0
2300b02e:	4525                	li	a0,9
            if (intf->notify_handler) {
2300b030:	c391                	beqz	a5,2300b034 <usbd_setup_request_handler.constprop.0+0x554>
                intf->notify_handler(event, arg);
2300b032:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300b034:	4000                	lw	s0,0(s0)
2300b036:	f875                	bnez	s0,2300b02a <usbd_setup_request_handler.constprop.0+0x54a>
    usb_slist_for_each(i, &usbd_class_head)
2300b038:	4084                	lw	s1,0(s1)
2300b03a:	f4f5                	bnez	s1,2300b026 <usbd_setup_request_handler.constprop.0+0x546>
    return true;
2300b03c:	4505                	li	a0,1
2300b03e:	bce9                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
            if (!usbd_set_configuration(value, 0)) {
2300b040:	b2070de3          	beqz	a4,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    usb_slist_for_each(i, &usbd_class_head)
2300b044:	1381a983          	lw	s3,312(gp) # 42016938 <usbd_class_head>
                usbd_core_cfg.configuration = value;
2300b048:	14990f23          	sb	s1,350(s2)
    usb_slist_for_each(i, &usbd_class_head)
2300b04c:	b60988e3          	beqz	s3,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
        usb_slist_for_each(j, &class->intf_list)
2300b050:	0089a403          	lw	s0,8(s3)
2300b054:	c801                	beqz	s0,2300b064 <usbd_setup_request_handler.constprop.0+0x584>
            if (intf->notify_handler) {
2300b056:	481c                	lw	a5,16(s0)
                intf->notify_handler(event, arg);
2300b058:	4581                	li	a1,0
2300b05a:	4511                	li	a0,4
            if (intf->notify_handler) {
2300b05c:	c391                	beqz	a5,2300b060 <usbd_setup_request_handler.constprop.0+0x580>
                intf->notify_handler(event, arg);
2300b05e:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300b060:	4000                	lw	s0,0(s0)
2300b062:	f875                	bnez	s0,2300b056 <usbd_setup_request_handler.constprop.0+0x576>
    usb_slist_for_each(i, &usbd_class_head)
2300b064:	0009a983          	lw	s3,0(s3)
2300b068:	fe0994e3          	bnez	s3,2300b050 <usbd_setup_request_handler.constprop.0+0x570>
    return true;
2300b06c:	4505                	li	a0,1
2300b06e:	b46d                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    usb_slist_for_each(i, &usbd_class_head)
2300b070:	1381a903          	lw	s2,312(gp) # 42016938 <usbd_class_head>
2300b074:	b40904e3          	beqz	s2,2300abbc <usbd_setup_request_handler.constprop.0+0xdc>
        usb_slist_for_each(j, &class->intf_list)
2300b078:	00892403          	lw	s0,8(s2)
2300b07c:	c801                	beqz	s0,2300b08c <usbd_setup_request_handler.constprop.0+0x5ac>
            if (intf->notify_handler) {
2300b07e:	481c                	lw	a5,16(s0)
                intf->notify_handler(event, arg);
2300b080:	85a6                	mv	a1,s1
2300b082:	4521                	li	a0,8
            if (intf->notify_handler) {
2300b084:	c391                	beqz	a5,2300b088 <usbd_setup_request_handler.constprop.0+0x5a8>
                intf->notify_handler(event, arg);
2300b086:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300b088:	4000                	lw	s0,0(s0)
2300b08a:	f875                	bnez	s0,2300b07e <usbd_setup_request_handler.constprop.0+0x59e>
    usb_slist_for_each(i, &usbd_class_head)
2300b08c:	00092903          	lw	s2,0(s2)
2300b090:	fe0914e3          	bnez	s2,2300b078 <usbd_setup_request_handler.constprop.0+0x598>
    return true;
2300b094:	4505                	li	a0,1
2300b096:	b449                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
            USBD_LOG_ERR("Illegal interface req 0x%02x\r\n", setup->bRequest);
2300b098:	2300d537          	lui	a0,0x2300d
2300b09c:	f9c50513          	addi	a0,a0,-100 # 2300cf9c <_ctype_+0x294>
2300b0a0:	f61f70ef          	jal	ra,23003000 <bflb_platform_printf>
            return false;
2300b0a4:	bcd9                	j	2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
    ep_cfg.ep_type = ep_desc->bmAttributes & USBD_EP_TYPE_MASK;
2300b0a6:	00344603          	lbu	a2,3(s0)
                cur_iface = p[INTF_DESC_bInterfaceNumber];
2300b0aa:	00244583          	lbu	a1,2(s0)
    ep_cfg.ep_type = ep_desc->bmAttributes & USBD_EP_TYPE_MASK;
2300b0ae:	8a0d                	andi	a2,a2,3
                    if (cur_alt_setting != alt_setting) {
2300b0b0:	07bb0763          	beq	s6,s11,2300b11e <usbd_setup_request_handler.constprop.0+0x63e>
    USBD_LOG_INFO("Close endpoint:0x%x type:%u\r\n",
2300b0b4:	f7cb8513          	addi	a0,s7,-132 # 2300cf7c <_ctype_+0x274>
2300b0b8:	c62e                	sw	a1,12(sp)
2300b0ba:	f47f70ef          	jal	ra,23003000 <bflb_platform_printf>
    usbd_ep_close(ep_cfg.ep_addr);
2300b0be:	45b2                	lw	a1,12(sp)
2300b0c0:	852e                	mv	a0,a1
2300b0c2:	8c8ff0ef          	jal	ra,2300a18a <usbd_ep_close>
    return true;
2300b0c6:	bbd1                	j	2300ae9a <usbd_setup_request_handler.constprop.0+0x3ba>
            *data = (uint8_t *)&usbd_core_cfg.reserved;
2300b0c8:	16290793          	addi	a5,s2,354
2300b0cc:	00f92423          	sw	a5,8(s2)
            *len = 1;
2300b0d0:	4785                	li	a5,1
2300b0d2:	00f92823          	sw	a5,16(s2)
    return true;
2300b0d6:	4505                	li	a0,1
2300b0d8:	b481                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
        *data = p;
2300b0da:	00f92423          	sw	a5,8(s2)
        if (type == USB_DESCRIPTOR_TYPE_CONFIGURATION) {
2300b0de:	4709                	li	a4,2
2300b0e0:	0ae80563          	beq	a6,a4,2300b18a <usbd_setup_request_handler.constprop.0+0x6aa>
            *len = p[DESC_bLength];
2300b0e4:	0007c783          	lbu	a5,0(a5)
    return true;
2300b0e8:	4505                	li	a0,1
            *len = p[DESC_bLength];
2300b0ea:	00f92823          	sw	a5,16(s2)
2300b0ee:	b42d                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    if ((type == USB_DESCRIPTOR_TYPE_STRING) && (index == USB_OSDESC_STRING_DESC_INDEX)) {
2300b0f0:	0ee00793          	li	a5,238
2300b0f4:	eef61ce3          	bne	a2,a5,2300afec <usbd_setup_request_handler.constprop.0+0x50c>
        USBD_LOG_INFO("read MS OS 2.0 descriptor string\r\n");
2300b0f8:	2300d537          	lui	a0,0x2300d
2300b0fc:	ec850513          	addi	a0,a0,-312 # 2300cec8 <_ctype_+0x1c0>
2300b100:	f01f70ef          	jal	ra,23003000 <bflb_platform_printf>
        if (!msosv1_desc) {
2300b104:	1301a783          	lw	a5,304(gp) # 42016930 <msosv1_desc>
2300b108:	a60789e3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
        *data = (uint8_t *)msosv1_desc->string;
2300b10c:	4398                	lw	a4,0(a5)
    return true;
2300b10e:	4505                	li	a0,1
        *data = (uint8_t *)msosv1_desc->string;
2300b110:	00e92423          	sw	a4,8(s2)
        *len = msosv1_desc->string_len;
2300b114:	0047c783          	lbu	a5,4(a5)
2300b118:	00f92823          	sw	a5,16(s2)
    return ret;
2300b11c:	baf5                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
    ep_cfg.ep_addr = ep_desc->bEndpointAddress;
2300b11e:	00b10c23          	sb	a1,24(sp)
    ep_cfg.ep_mps = ep_desc->wMaxPacketSize;
2300b122:	00544683          	lbu	a3,5(s0)
2300b126:	00444783          	lbu	a5,4(s0)
    USBD_LOG_INFO("Open endpoint:0x%x type:%u mps:%u\r\n",
2300b12a:	f3cc8513          	addi	a0,s9,-196
    ep_cfg.ep_mps = ep_desc->wMaxPacketSize;
2300b12e:	06a2                	slli	a3,a3,0x8
2300b130:	8edd                	or	a3,a3,a5
2300b132:	00d11d23          	sh	a3,26(sp)
    ep_cfg.ep_type = ep_desc->bmAttributes & USBD_EP_TYPE_MASK;
2300b136:	00c10e23          	sb	a2,28(sp)
    USBD_LOG_INFO("Open endpoint:0x%x type:%u mps:%u\r\n",
2300b13a:	ec7f70ef          	jal	ra,23003000 <bflb_platform_printf>
    usbd_ep_open(&ep_cfg);
2300b13e:	0828                	addi	a0,sp,24
2300b140:	840ff0ef          	jal	ra,2300a180 <usbd_ep_open>
    usbd_core_cfg.configured = true;
2300b144:	15890ea3          	sb	s8,349(s2)
    return true;
2300b148:	bb89                	j	2300ae9a <usbd_setup_request_handler.constprop.0+0x3ba>
        USBD_LOG_ERR("descriptor <type:%x,index:%x> not found!\r\n", type, index);
2300b14a:	2300d537          	lui	a0,0x2300d
2300b14e:	0d050513          	addi	a0,a0,208 # 2300d0d0 <_ctype_+0x3c8>
2300b152:	eaff70ef          	jal	ra,23003000 <bflb_platform_printf>
    return ret;
2300b156:	b415                	j	2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
        USBD_LOG_INFO("read BOS descriptor string\r\n");
2300b158:	2300d537          	lui	a0,0x2300d
2300b15c:	eec50513          	addi	a0,a0,-276 # 2300ceec <_ctype_+0x1e4>
2300b160:	ea1f70ef          	jal	ra,23003000 <bflb_platform_printf>
        if (!bos_desc) {
2300b164:	1281a783          	lw	a5,296(gp) # 42016928 <bos_desc>
2300b168:	a00789e3          	beqz	a5,2300ab7a <usbd_setup_request_handler.constprop.0+0x9a>
        *data = bos_desc->string;
2300b16c:	4398                	lw	a4,0(a5)
        *len = bos_desc->string_len;
2300b16e:	43dc                	lw	a5,4(a5)
    return true;
2300b170:	4505                	li	a0,1
        *data = bos_desc->string;
2300b172:	00e92423          	sw	a4,8(s2)
        *len = bos_desc->string_len;
2300b176:	00f92823          	sw	a5,16(s2)
    return ret;
2300b17a:	ba79                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>
        USBD_LOG_ERR("Device not configured - invalid configuration\r\n");
2300b17c:	2300d537          	lui	a0,0x2300d
2300b180:	f0c50513          	addi	a0,a0,-244 # 2300cf0c <_ctype_+0x204>
2300b184:	e7df70ef          	jal	ra,23003000 <bflb_platform_printf>
        return true;
2300b188:	bd75                	j	2300b044 <usbd_setup_request_handler.constprop.0+0x564>
            *len = (p[CONF_DESC_wTotalLength]) |
2300b18a:	0037c703          	lbu	a4,3(a5)
2300b18e:	0027c683          	lbu	a3,2(a5)
    return true;
2300b192:	4505                	li	a0,1
            *len = (p[CONF_DESC_wTotalLength]) |
2300b194:	00871793          	slli	a5,a4,0x8
2300b198:	8fd5                	or	a5,a5,a3
2300b19a:	00f92823          	sw	a5,16(s2)
2300b19e:	baad                	j	2300ab18 <usbd_setup_request_handler.constprop.0+0x38>

2300b1a0 <usbd_event_notify_handler>:
    }
}

void usbd_event_notify_handler(uint8_t event, void *arg)
{
    switch (event) {
2300b1a0:	47b9                	li	a5,14
2300b1a2:	1cf50063          	beq	a0,a5,2300b362 <usbd_event_notify_handler+0x1c2>
{
2300b1a6:	7179                	addi	sp,sp,-48
2300b1a8:	d04a                	sw	s2,32(sp)
2300b1aa:	ce4e                	sw	s3,28(sp)
2300b1ac:	d606                	sw	ra,44(sp)
2300b1ae:	d422                	sw	s0,40(sp)
2300b1b0:	d226                	sw	s1,36(sp)
2300b1b2:	892a                	mv	s2,a0
2300b1b4:	89ae                	mv	s3,a1
    switch (event) {
2300b1b6:	08a7ed63          	bltu	a5,a0,2300b250 <usbd_event_notify_handler+0xb0>
2300b1ba:	47b5                	li	a5,13
2300b1bc:	10f50863          	beq	a0,a5,2300b2cc <usbd_event_notify_handler+0x12c>
2300b1c0:	4785                	li	a5,1
2300b1c2:	16f51063          	bne	a0,a5,2300b322 <usbd_event_notify_handler+0x182>
        case USB_EVENT_RESET:
            usbd_set_address(0);
2300b1c6:	4501                	li	a0,0
2300b1c8:	fb5fe0ef          	jal	ra,2300a17c <usbd_set_address>
    usb_slist_for_each(i, &usbd_class_head)
2300b1cc:	1381a403          	lw	s0,312(gp) # 42016938 <usbd_class_head>
                        usbd_core_cfg.out_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b1d0:	dec18893          	addi	a7,gp,-532 # 420165ec <usbd_core_cfg>
    usb_slist_for_each(i, &usbd_class_head)
2300b1d4:	85a2                	mv	a1,s0
2300b1d6:	c435                	beqz	s0,2300b242 <usbd_event_notify_handler+0xa2>
        usb_slist_for_each(j, &class->intf_list)
2300b1d8:	0085a303          	lw	t1,8(a1)
2300b1dc:	04030663          	beqz	t1,2300b228 <usbd_event_notify_handler+0x88>
            usb_slist_for_each(k, &intf->ep_list)
2300b1e0:	01832703          	lw	a4,24(t1)
2300b1e4:	e711                	bnez	a4,2300b1f0 <usbd_event_notify_handler+0x50>
2300b1e6:	a82d                	j	2300b220 <usbd_event_notify_handler+0x80>
                        usbd_core_cfg.out_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b1e8:	01062623          	sw	a6,12(a2)
            usb_slist_for_each(k, &intf->ep_list)
2300b1ec:	4318                	lw	a4,0(a4)
2300b1ee:	cb0d                	beqz	a4,2300b220 <usbd_event_notify_handler+0x80>
                if (ept->ep_cb) {
2300b1f0:	00872803          	lw	a6,8(a4)
2300b1f4:	fe080ce3          	beqz	a6,2300b1ec <usbd_event_notify_handler+0x4c>
                    if (ept->ep_addr & 0x80) {
2300b1f8:	00474683          	lbu	a3,4(a4)
                        usbd_core_cfg.in_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b1fc:	07f6f793          	andi	a5,a3,127
                        usbd_core_cfg.out_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b200:	04c68613          	addi	a2,a3,76
                        usbd_core_cfg.in_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b204:	04478793          	addi	a5,a5,68
                    if (ept->ep_addr & 0x80) {
2300b208:	06e2                	slli	a3,a3,0x18
                        usbd_core_cfg.out_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b20a:	060a                	slli	a2,a2,0x2
                        usbd_core_cfg.in_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b20c:	078a                	slli	a5,a5,0x2
                    if (ept->ep_addr & 0x80) {
2300b20e:	86e1                	srai	a3,a3,0x18
                        usbd_core_cfg.out_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b210:	9646                	add	a2,a2,a7
                        usbd_core_cfg.in_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b212:	97c6                	add	a5,a5,a7
                    if (ept->ep_addr & 0x80) {
2300b214:	fc06dae3          	bgez	a3,2300b1e8 <usbd_event_notify_handler+0x48>
            usb_slist_for_each(k, &intf->ep_list)
2300b218:	4318                	lw	a4,0(a4)
                        usbd_core_cfg.in_ep_cb[ept->ep_addr & 0x7f] = ept->ep_cb;
2300b21a:	0107a623          	sw	a6,12(a5)
            usb_slist_for_each(k, &intf->ep_list)
2300b21e:	fb69                	bnez	a4,2300b1f0 <usbd_event_notify_handler+0x50>
        usb_slist_for_each(j, &class->intf_list)
2300b220:	00032303          	lw	t1,0(t1)
2300b224:	fa031ee3          	bnez	t1,2300b1e0 <usbd_event_notify_handler+0x40>
    usb_slist_for_each(i, &usbd_class_head)
2300b228:	418c                	lw	a1,0(a1)
2300b22a:	f5dd                	bnez	a1,2300b1d8 <usbd_event_notify_handler+0x38>
        usb_slist_for_each(j, &class->intf_list)
2300b22c:	4404                	lw	s1,8(s0)
2300b22e:	c881                	beqz	s1,2300b23e <usbd_event_notify_handler+0x9e>
            if (intf->notify_handler) {
2300b230:	489c                	lw	a5,16(s1)
                intf->notify_handler(event, arg);
2300b232:	85ce                	mv	a1,s3
2300b234:	854a                	mv	a0,s2
            if (intf->notify_handler) {
2300b236:	c391                	beqz	a5,2300b23a <usbd_event_notify_handler+0x9a>
                intf->notify_handler(event, arg);
2300b238:	9782                	jalr	a5
        usb_slist_for_each(j, &class->intf_list)
2300b23a:	4084                	lw	s1,0(s1)
2300b23c:	f8f5                	bnez	s1,2300b230 <usbd_event_notify_handler+0x90>
    usb_slist_for_each(i, &usbd_class_head)
2300b23e:	4000                	lw	s0,0(s0)
2300b240:	f475                	bnez	s0,2300b22c <usbd_event_notify_handler+0x8c>

        default:
            USBD_LOG_ERR("USB unknown event: %d\r\n", event);
            break;
    }
}
2300b242:	50b2                	lw	ra,44(sp)
2300b244:	5422                	lw	s0,40(sp)
2300b246:	5492                	lw	s1,36(sp)
2300b248:	5902                	lw	s2,32(sp)
2300b24a:	49f2                	lw	s3,28(sp)
2300b24c:	6145                	addi	sp,sp,48
2300b24e:	8082                	ret
    switch (event) {
2300b250:	47c1                	li	a5,16
2300b252:	0cf50d63          	beq	a0,a5,2300b32c <usbd_event_notify_handler+0x18c>
2300b256:	47c5                	li	a5,17
2300b258:	02f51663          	bne	a0,a5,2300b284 <usbd_event_notify_handler+0xe4>
    if (usbd_core_cfg.out_ep_cb[ep & 0x7f]) {
2300b25c:	07f5f793          	andi	a5,a1,127
2300b260:	04c78793          	addi	a5,a5,76
2300b264:	00279713          	slli	a4,a5,0x2
2300b268:	dec18793          	addi	a5,gp,-532 # 420165ec <usbd_core_cfg>
2300b26c:	97ba                	add	a5,a5,a4
2300b26e:	47dc                	lw	a5,12(a5)
            usbd_ep_out_handler((uint32_t)arg);
2300b270:	0ff9f513          	zext.b	a0,s3
    if (usbd_core_cfg.out_ep_cb[ep & 0x7f]) {
2300b274:	d7f9                	beqz	a5,2300b242 <usbd_event_notify_handler+0xa2>
}
2300b276:	5422                	lw	s0,40(sp)
2300b278:	50b2                	lw	ra,44(sp)
2300b27a:	5492                	lw	s1,36(sp)
2300b27c:	5902                	lw	s2,32(sp)
2300b27e:	49f2                	lw	s3,28(sp)
2300b280:	6145                	addi	sp,sp,48
        usbd_core_cfg.out_ep_cb[ep & 0x7f](ep);
2300b282:	8782                	jr	a5
    switch (event) {
2300b284:	47bd                	li	a5,15
2300b286:	0cf51163          	bne	a0,a5,2300b348 <usbd_event_notify_handler+0x1a8>
    if (usbd_core_cfg.ep0_data_buf_residue == 0) {
2300b28a:	dec18413          	addi	s0,gp,-532 # 420165ec <usbd_core_cfg>
2300b28e:	4450                	lw	a2,12(s0)
    uint32_t chunk = 0U;
2300b290:	c602                	sw	zero,12(sp)
    if (usbd_core_cfg.ep0_data_buf_residue == 0) {
2300b292:	0e060c63          	beqz	a2,2300b38a <usbd_event_notify_handler+0x1ea>
    usbd_core_cfg.ep0_data_buf = usbd_core_cfg.req_data;
2300b296:	01c40493          	addi	s1,s0,28
    if (usbd_ep_read(USB_CONTROL_OUT_EP0,
2300b29a:	0074                	addi	a3,sp,12
2300b29c:	85a6                	mv	a1,s1
2300b29e:	4501                	li	a0,0
    usbd_core_cfg.ep0_data_buf = usbd_core_cfg.req_data;
2300b2a0:	c404                	sw	s1,8(s0)
    if (usbd_ep_read(USB_CONTROL_OUT_EP0,
2300b2a2:	f15fe0ef          	jal	ra,2300a1b6 <usbd_ep_read>
2300b2a6:	0e054963          	bltz	a0,2300b398 <usbd_event_notify_handler+0x1f8>
    usbd_core_cfg.ep0_data_buf += chunk;
2300b2aa:	46b2                	lw	a3,12(sp)
2300b2ac:	4418                	lw	a4,8(s0)
    usbd_core_cfg.ep0_data_buf_residue -= chunk;
2300b2ae:	445c                	lw	a5,12(s0)
    usbd_core_cfg.ep0_data_buf += chunk;
2300b2b0:	9736                	add	a4,a4,a3
    usbd_core_cfg.ep0_data_buf_residue -= chunk;
2300b2b2:	8f95                	sub	a5,a5,a3
    usbd_core_cfg.ep0_data_buf += chunk;
2300b2b4:	c418                	sw	a4,8(s0)
    usbd_core_cfg.ep0_data_buf_residue -= chunk;
2300b2b6:	c45c                	sw	a5,12(s0)
    if (usbd_core_cfg.ep0_data_buf_residue == 0) {
2300b2b8:	0e079b63          	bnez	a5,2300b3ae <usbd_event_notify_handler+0x20e>
        usbd_core_cfg.ep0_data_buf = usbd_core_cfg.req_data;
2300b2bc:	c404                	sw	s1,8(s0)
        if (!usbd_setup_request_handler(setup, &usbd_core_cfg.ep0_data_buf, &usbd_core_cfg.ep0_data_buf_len)) {
2300b2be:	823ff0ef          	jal	ra,2300aae0 <usbd_setup_request_handler.constprop.0>
2300b2c2:	12050763          	beqz	a0,2300b3f0 <usbd_event_notify_handler+0x250>
        usbd_send_to_host(setup->wLength);
2300b2c6:	f94ff0ef          	jal	ra,2300aa5a <usbd_send_to_host.constprop.0>
2300b2ca:	bfa5                	j	2300b242 <usbd_event_notify_handler+0xa2>
    if (usbd_ep_read(USB_CONTROL_OUT_EP0, (uint8_t *)setup,
2300b2cc:	dec18593          	addi	a1,gp,-532 # 420165ec <usbd_core_cfg>
2300b2d0:	4681                	li	a3,0
2300b2d2:	4621                	li	a2,8
2300b2d4:	4501                	li	a0,0
2300b2d6:	dec18413          	addi	s0,gp,-532 # 420165ec <usbd_core_cfg>
2300b2da:	eddfe0ef          	jal	ra,2300a1b6 <usbd_ep_read>
2300b2de:	10054463          	bltz	a0,2300b3e6 <usbd_event_notify_handler+0x246>
    if (setup->wLength > USB_REQUEST_BUFFER_SIZE) {
2300b2e2:	00645783          	lhu	a5,6(s0)
2300b2e6:	10000713          	li	a4,256
2300b2ea:	08f77663          	bgeu	a4,a5,2300b376 <usbd_event_notify_handler+0x1d6>
        if (setup->bmRequestType_b.Dir != USB_REQUEST_DEVICE_TO_HOST) {
2300b2ee:	00040703          	lb	a4,0(s0)
2300b2f2:	0e075563          	bgez	a4,2300b3dc <usbd_event_notify_handler+0x23c>
    usbd_core_cfg.ep0_data_buf_residue = setup->wLength;
2300b2f6:	c45c                	sw	a5,12(s0)
    usbd_core_cfg.ep0_data_buf_len = setup->wLength;
2300b2f8:	c81c                	sw	a5,16(s0)
    usbd_core_cfg.zlp_flag = false;
2300b2fa:	00040a23          	sb	zero,20(s0)
    if (!usbd_setup_request_handler(setup, &usbd_core_cfg.ep0_data_buf, &usbd_core_cfg.ep0_data_buf_len)) {
2300b2fe:	fe2ff0ef          	jal	ra,2300aae0 <usbd_setup_request_handler.constprop.0>
2300b302:	cd4d                	beqz	a0,2300b3bc <usbd_event_notify_handler+0x21c>
    usbd_core_cfg.ep0_data_buf_residue = MIN(usbd_core_cfg.ep0_data_buf_len,
2300b304:	4818                	lw	a4,16(s0)
2300b306:	00645783          	lhu	a5,6(s0)
2300b30a:	00f77363          	bgeu	a4,a5,2300b310 <usbd_event_notify_handler+0x170>
2300b30e:	87ba                	mv	a5,a4
2300b310:	c45c                	sw	a5,12(s0)
}
2300b312:	5422                	lw	s0,40(sp)
2300b314:	50b2                	lw	ra,44(sp)
2300b316:	5492                	lw	s1,36(sp)
2300b318:	5902                	lw	s2,32(sp)
2300b31a:	49f2                	lw	s3,28(sp)
2300b31c:	6145                	addi	sp,sp,48
    usbd_send_to_host(setup->wLength);
2300b31e:	f3cff06f          	j	2300aa5a <usbd_send_to_host.constprop.0>
    usb_slist_for_each(i, &usbd_class_head)
2300b322:	1381a403          	lw	s0,312(gp) # 42016938 <usbd_class_head>
2300b326:	f00413e3          	bnez	s0,2300b22c <usbd_event_notify_handler+0x8c>
2300b32a:	bf21                	j	2300b242 <usbd_event_notify_handler+0xa2>
    if (usbd_core_cfg.in_ep_cb[ep & 0x7f]) {
2300b32c:	07f5f793          	andi	a5,a1,127
2300b330:	04478793          	addi	a5,a5,68
    if (usbd_core_cfg.out_ep_cb[ep & 0x7f]) {
2300b334:	00279713          	slli	a4,a5,0x2
2300b338:	dec18793          	addi	a5,gp,-532 # 420165ec <usbd_core_cfg>
2300b33c:	97ba                	add	a5,a5,a4
2300b33e:	47dc                	lw	a5,12(a5)
            usbd_ep_out_handler((uint32_t)arg);
2300b340:	0ff9f513          	zext.b	a0,s3
    if (usbd_core_cfg.out_ep_cb[ep & 0x7f]) {
2300b344:	fb8d                	bnez	a5,2300b276 <usbd_event_notify_handler+0xd6>
2300b346:	bdf5                	j	2300b242 <usbd_event_notify_handler+0xa2>
}
2300b348:	5422                	lw	s0,40(sp)
2300b34a:	50b2                	lw	ra,44(sp)
2300b34c:	5492                	lw	s1,36(sp)
2300b34e:	5902                	lw	s2,32(sp)
2300b350:	49f2                	lw	s3,28(sp)
            USBD_LOG_ERR("USB unknown event: %d\r\n", event);
2300b352:	85aa                	mv	a1,a0
2300b354:	2300d537          	lui	a0,0x2300d
2300b358:	1a450513          	addi	a0,a0,420 # 2300d1a4 <_ctype_+0x49c>
}
2300b35c:	6145                	addi	sp,sp,48
            USBD_LOG_ERR("USB unknown event: %d\r\n", event);
2300b35e:	ca3f706f          	j	23003000 <bflb_platform_printf>
    if (usbd_core_cfg.ep0_data_buf_residue != 0 || usbd_core_cfg.zlp_flag == true) {
2300b362:	dec18793          	addi	a5,gp,-532 # 420165ec <usbd_core_cfg>
2300b366:	47d8                	lw	a4,12(a5)
2300b368:	e701                	bnez	a4,2300b370 <usbd_event_notify_handler+0x1d0>
2300b36a:	0147c783          	lbu	a5,20(a5)
2300b36e:	c399                	beqz	a5,2300b374 <usbd_event_notify_handler+0x1d4>
        usbd_send_to_host(setup->wLength);
2300b370:	eeaff06f          	j	2300aa5a <usbd_send_to_host.constprop.0>
2300b374:	8082                	ret
    usbd_core_cfg.ep0_data_buf_residue = setup->wLength;
2300b376:	c45c                	sw	a5,12(s0)
    usbd_core_cfg.ep0_data_buf_len = setup->wLength;
2300b378:	c81c                	sw	a5,16(s0)
    usbd_core_cfg.zlp_flag = false;
2300b37a:	00040a23          	sb	zero,20(s0)
    if (setup->wLength &&
2300b37e:	d3c1                	beqz	a5,2300b2fe <usbd_event_notify_handler+0x15e>
2300b380:	00040783          	lb	a5,0(s0)
2300b384:	ea07dfe3          	bgez	a5,2300b242 <usbd_event_notify_handler+0xa2>
2300b388:	bf9d                	j	2300b2fe <usbd_event_notify_handler+0x15e>
        if (usbd_ep_read(USB_CONTROL_OUT_EP0,
2300b38a:	4681                	li	a3,0
2300b38c:	4581                	li	a1,0
2300b38e:	4501                	li	a0,0
2300b390:	e27fe0ef          	jal	ra,2300a1b6 <usbd_ep_read>
2300b394:	ea0557e3          	bgez	a0,2300b242 <usbd_event_notify_handler+0xa2>
            USBD_LOG_ERR("Read DATA Packet failed\r\n");
2300b398:	2300d537          	lui	a0,0x2300d
2300b39c:	e0c50513          	addi	a0,a0,-500 # 2300ce0c <_ctype_+0x104>
2300b3a0:	c61f70ef          	jal	ra,23003000 <bflb_platform_printf>
            usbd_ep_set_stall(USB_CONTROL_IN_EP0);
2300b3a4:	08000513          	li	a0,128
2300b3a8:	de7fe0ef          	jal	ra,2300a18e <usbd_ep_set_stall>
2300b3ac:	bd59                	j	2300b242 <usbd_event_notify_handler+0xa2>
        USBD_LOG_ERR("ep0_data_buf_residue is not zero\r\n");
2300b3ae:	2300d537          	lui	a0,0x2300d
2300b3b2:	18050513          	addi	a0,a0,384 # 2300d180 <_ctype_+0x478>
2300b3b6:	c4bf70ef          	jal	ra,23003000 <bflb_platform_printf>
2300b3ba:	b561                	j	2300b242 <usbd_event_notify_handler+0xa2>
        USBD_LOG_ERR("usbd_setup_request_handler failed\r\n");
2300b3bc:	2300d537          	lui	a0,0x2300d
2300b3c0:	13450513          	addi	a0,a0,308 # 2300d134 <_ctype_+0x42c>
            USBD_LOG_ERR("Request buffer too small\r\n");
2300b3c4:	c3df70ef          	jal	ra,23003000 <bflb_platform_printf>
}
2300b3c8:	5422                	lw	s0,40(sp)
2300b3ca:	50b2                	lw	ra,44(sp)
2300b3cc:	5492                	lw	s1,36(sp)
2300b3ce:	5902                	lw	s2,32(sp)
2300b3d0:	49f2                	lw	s3,28(sp)
            usbd_ep_set_stall(USB_CONTROL_IN_EP0);
2300b3d2:	08000513          	li	a0,128
}
2300b3d6:	6145                	addi	sp,sp,48
            usbd_ep_set_stall(USB_CONTROL_IN_EP0);
2300b3d8:	db7fe06f          	j	2300a18e <usbd_ep_set_stall>
            USBD_LOG_ERR("Request buffer too small\r\n");
2300b3dc:	2300d537          	lui	a0,0x2300d
2300b3e0:	11850513          	addi	a0,a0,280 # 2300d118 <_ctype_+0x410>
2300b3e4:	b7c5                	j	2300b3c4 <usbd_event_notify_handler+0x224>
        USBD_LOG_ERR("Read Setup Packet failed\r\n");
2300b3e6:	2300d537          	lui	a0,0x2300d
2300b3ea:	0fc50513          	addi	a0,a0,252 # 2300d0fc <_ctype_+0x3f4>
2300b3ee:	bfd9                	j	2300b3c4 <usbd_event_notify_handler+0x224>
            USBD_LOG_ERR("usbd_setup_request_handler1 failed\r\n");
2300b3f0:	2300d537          	lui	a0,0x2300d
2300b3f4:	15850513          	addi	a0,a0,344 # 2300d158 <_ctype_+0x450>
2300b3f8:	c09f70ef          	jal	ra,23003000 <bflb_platform_printf>
            usbd_ep_set_stall(USB_CONTROL_IN_EP0);
2300b3fc:	08000513          	li	a0,128
2300b400:	d8ffe0ef          	jal	ra,2300a18e <usbd_ep_set_stall>
            return;
2300b404:	bd3d                	j	2300b242 <usbd_event_notify_handler+0xa2>

2300b406 <usbd_desc_register>:

void usbd_desc_register(const uint8_t *desc)
{
    usbd_core_cfg.descriptors = desc;
2300b406:	e0a1a223          	sw	a0,-508(gp) # 42016604 <usbd_core_cfg+0x18>
}
2300b40a:	8082                	ret

2300b40c <usbd_class_register>:
    l->next = n;
}

static inline void usb_slist_add_tail(usb_slist_t *l, usb_slist_t *n)
{
    while (l->next) {
2300b40c:	13818793          	addi	a5,gp,312 # 42016938 <usbd_class_head>
2300b410:	873e                	mv	a4,a5
2300b412:	439c                	lw	a5,0(a5)
2300b414:	fff5                	bnez	a5,2300b410 <usbd_class_register+0x4>
        l = l->next;
    }

    /* append the node to the tail */
    l->next = n;
2300b416:	c308                	sw	a0,0(a4)
    n->next = NULL;
2300b418:	00052023          	sw	zero,0(a0)
    l->next = NULL;
2300b41c:	00052423          	sw	zero,8(a0)

void usbd_class_register(usbd_class_t *class)
{
    usb_slist_add_tail(&usbd_class_head, &class->list);
    usb_slist_init(&class->intf_list);
}
2300b420:	8082                	ret

2300b422 <usbd_class_add_interface>:

void usbd_class_add_interface(usbd_class_t *class, usbd_interface_t *intf)
{
    static uint8_t intf_offset = 0;
    intf->intf_num = intf_offset;
2300b422:	12c18713          	addi	a4,gp,300 # 4201692c <intf_offset.0>
2300b426:	00074683          	lbu	a3,0(a4)
    usb_slist_add_tail(&class->intf_list, &intf->list);
2300b42a:	0521                	addi	a0,a0,8
    intf->intf_num = intf_offset;
2300b42c:	00d58a23          	sb	a3,20(a1)
    while (l->next) {
2300b430:	87aa                	mv	a5,a0
2300b432:	4108                	lw	a0,0(a0)
2300b434:	fd75                	bnez	a0,2300b430 <usbd_class_add_interface+0xe>
    l->next = n;
2300b436:	c38c                	sw	a1,0(a5)
    usb_slist_init(&intf->ep_list);
    intf_offset++;
2300b438:	0685                	addi	a3,a3,1
    n->next = NULL;
2300b43a:	0005a023          	sw	zero,0(a1)
    l->next = NULL;
2300b43e:	0005ac23          	sw	zero,24(a1)
2300b442:	00d70023          	sb	a3,0(a4)
}
2300b446:	8082                	ret

2300b448 <usbd_interface_add_endpoint>:

void usbd_interface_add_endpoint(usbd_interface_t *intf, usbd_endpoint_t *ep)
{
    usb_slist_add_tail(&intf->ep_list, &ep->list);
2300b448:	0561                	addi	a0,a0,24
    while (l->next) {
2300b44a:	87aa                	mv	a5,a0
2300b44c:	4108                	lw	a0,0(a0)
2300b44e:	fd75                	bnez	a0,2300b44a <usbd_interface_add_endpoint+0x2>
    l->next = n;
2300b450:	c38c                	sw	a1,0(a5)
    n->next = NULL;
2300b452:	0005a023          	sw	zero,0(a1)
}
2300b456:	8082                	ret

2300b458 <usb_device_is_configured>:

bool usb_device_is_configured(void)
{
    return usbd_core_cfg.configured;
}
2300b458:	f491c503          	lbu	a0,-183(gp) # 42016749 <usbd_core_cfg+0x15d>
2300b45c:	8082                	ret

2300b45e <shell_help>:
struct shell _shell;
static struct shell *shell;
static char *shell_prompt_custom = NULL;

int shell_help(int argc, char **argv)
{
2300b45e:	1101                	addi	sp,sp,-32
2300b460:	c452                	sw	s4,8(sp)
    SHELL_DGB("shell commands list:\r\n");
2300b462:	14c18a13          	addi	s4,gp,332 # 4201694c <shell>
2300b466:	000a2783          	lw	a5,0(s4)
2300b46a:	2300d537          	lui	a0,0x2300d
{
2300b46e:	cc22                	sw	s0,24(sp)
    SHELL_DGB("shell commands list:\r\n");
2300b470:	1387a783          	lw	a5,312(a5)
{
2300b474:	c64e                	sw	s3,12(sp)
2300b476:	ce06                	sw	ra,28(sp)
2300b478:	ca26                	sw	s1,20(sp)
2300b47a:	c84a                	sw	s2,16(sp)
2300b47c:	c256                	sw	s5,4(sp)
2300b47e:	c05a                	sw	s6,0(sp)
    SHELL_DGB("shell commands list:\r\n");
2300b480:	1bc50513          	addi	a0,a0,444 # 2300d1bc <_ctype_+0x4b4>
2300b484:	9782                	jalr	a5
    {
        struct shell_syscall *index;

        for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300b486:	14018993          	addi	s3,gp,320 # 42016940 <_syscall_table_end>
2300b48a:	13c1a403          	lw	s0,316(gp) # 4201693c <_syscall_table_begin>
2300b48e:	0009a783          	lw	a5,0(s3)
2300b492:	06f47163          	bgeu	s0,a5,2300b4f4 <shell_help+0x96>
            }

#if defined(SHELL_USING_DESCRIPTION)
            SHELL_DGB("%-16s - %s\r\n", &index->name[6], index->desc);
#else
            SHELL_DGB("%s\r\n", &index->name[6]);
2300b496:	000a2783          	lw	a5,0(s4)
2300b49a:	2300db37          	lui	s6,0x2300d
2300b49e:	2300dab7          	lui	s5,0x2300d
2300b4a2:	1387a903          	lw	s2,312(a5)
            if (strncmp(index->name, "__cmd_", 6) != 0) {
2300b4a6:	4004                	lw	s1,0(s0)
2300b4a8:	1d4b0593          	addi	a1,s6,468 # 2300d1d4 <_ctype_+0x4cc>
2300b4ac:	4619                	li	a2,6
2300b4ae:	8526                	mv	a0,s1
2300b4b0:	279000ef          	jal	ra,2300bf28 <strncmp>
2300b4b4:	87aa                	mv	a5,a0
            SHELL_DGB("%s\r\n", &index->name[6]);
2300b4b6:	00648593          	addi	a1,s1,6
2300b4ba:	1dca8513          	addi	a0,s5,476 # 2300d1dc <_ctype_+0x4d4>
        for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300b4be:	0421                	addi	s0,s0,8
            if (strncmp(index->name, "__cmd_", 6) != 0) {
2300b4c0:	e791                	bnez	a5,2300b4cc <shell_help+0x6e>
            SHELL_DGB("%s\r\n", &index->name[6]);
2300b4c2:	9902                	jalr	s2
#endif
        }
    }
    SHELL_DGB("\r\n");
2300b4c4:	000a2783          	lw	a5,0(s4)
2300b4c8:	1387a903          	lw	s2,312(a5)
        for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300b4cc:	0009a783          	lw	a5,0(s3)
2300b4d0:	fcf46be3          	bltu	s0,a5,2300b4a6 <shell_help+0x48>
    SHELL_DGB("\r\n");
2300b4d4:	2300d537          	lui	a0,0x2300d
2300b4d8:	8b050513          	addi	a0,a0,-1872 # 2300c8b0 <af_pin_table+0x1e0>
2300b4dc:	9902                	jalr	s2

    return 0;
}
2300b4de:	40f2                	lw	ra,28(sp)
2300b4e0:	4462                	lw	s0,24(sp)
2300b4e2:	44d2                	lw	s1,20(sp)
2300b4e4:	4942                	lw	s2,16(sp)
2300b4e6:	49b2                	lw	s3,12(sp)
2300b4e8:	4a22                	lw	s4,8(sp)
2300b4ea:	4a92                	lw	s5,4(sp)
2300b4ec:	4b02                	lw	s6,0(sp)
2300b4ee:	4501                	li	a0,0
2300b4f0:	6105                	addi	sp,sp,32
2300b4f2:	8082                	ret
    SHELL_DGB("\r\n");
2300b4f4:	000a2783          	lw	a5,0(s4)
2300b4f8:	1387a903          	lw	s2,312(a5)
2300b4fc:	bfe1                	j	2300b4d4 <shell_help+0x76>

2300b4fe <shell_get_prompt>:

static char *shell_get_prompt(void)
{
    static char shell_prompt[SHELL_CONSOLEBUF_SIZE + 1] = { 0 };

    if (shell_prompt_custom) {
2300b4fe:	1501a583          	lw	a1,336(gp) # 42016950 <shell_prompt_custom>
{
2300b502:	1141                	addi	sp,sp,-16
2300b504:	c606                	sw	ra,12(sp)
2300b506:	c422                	sw	s0,8(sp)
2300b508:	c226                	sw	s1,4(sp)
    if (shell_prompt_custom) {
2300b50a:	cd8d                	beqz	a1,2300b544 <shell_get_prompt+0x46>
        strcpy(shell_prompt, shell_prompt_custom);
2300b50c:	08c18513          	addi	a0,gp,140 # 4201688c <shell_prompt.0>
2300b510:	207000ef          	jal	ra,2300bf16 <strcpy>
2300b514:	08c18413          	addi	s0,gp,140 # 4201688c <shell_prompt.0>
    /* get current working directory */
    f_getcwd(&shell_prompt[strlen(shell_prompt)],
             SHELL_CONSOLEBUF_SIZE - strlen(shell_prompt));
#endif

    strcat(shell_prompt, "/>");
2300b518:	08c18513          	addi	a0,gp,140 # 4201688c <shell_prompt.0>
2300b51c:	d1afc0ef          	jal	ra,23007a36 <strlen>
2300b520:	9522                	add	a0,a0,s0
2300b522:	02f00793          	li	a5,47
2300b526:	00f50023          	sb	a5,0(a0)
2300b52a:	03e00793          	li	a5,62
2300b52e:	00f500a3          	sb	a5,1(a0)
2300b532:	00050123          	sb	zero,2(a0)

    return shell_prompt;
}
2300b536:	40b2                	lw	ra,12(sp)
2300b538:	4422                	lw	s0,8(sp)
2300b53a:	08c18513          	addi	a0,gp,140 # 4201688c <shell_prompt.0>
2300b53e:	4492                	lw	s1,4(sp)
2300b540:	0141                	addi	sp,sp,16
2300b542:	8082                	ret
        strcpy(shell_prompt, SHELL_DEFAULT_NAME);
2300b544:	2300d7b7          	lui	a5,0x2300d
2300b548:	1e478793          	addi	a5,a5,484 # 2300d1e4 <_ctype_+0x4dc>
2300b54c:	4390                	lw	a2,0(a5)
2300b54e:	43d4                	lw	a3,4(a5)
2300b550:	4798                	lw	a4,8(a5)
2300b552:	00c7c783          	lbu	a5,12(a5)
2300b556:	08c18413          	addi	s0,gp,140 # 4201688c <shell_prompt.0>
2300b55a:	c010                	sw	a2,0(s0)
2300b55c:	c054                	sw	a3,4(s0)
2300b55e:	c418                	sw	a4,8(s0)
2300b560:	00f40623          	sb	a5,12(s0)
2300b564:	bf55                	j	2300b518 <shell_get_prompt+0x1a>

2300b566 <shell_handle_history>:

    return (str - str1);
}

static void shell_handle_history(struct shell *shell)
{
2300b566:	1141                	addi	sp,sp,-16
    SHELL_PRINTF("\033[2K\r");
2300b568:	13852783          	lw	a5,312(a0)
{
2300b56c:	c422                	sw	s0,8(sp)
2300b56e:	842a                	mv	s0,a0
    SHELL_PRINTF("\033[2K\r");
2300b570:	2300d537          	lui	a0,0x2300d
{
2300b574:	c606                	sw	ra,12(sp)
2300b576:	c226                	sw	s1,4(sp)
2300b578:	c04a                	sw	s2,0(sp)
    SHELL_PRINTF("\033[2K\r");
2300b57a:	1f450513          	addi	a0,a0,500 # 2300d1f4 <_ctype_+0x4ec>
2300b57e:	9782                	jalr	a5
    SHELL_PROMPT("%s", shell_get_prompt());
2300b580:	13842903          	lw	s2,312(s0)
2300b584:	2300d4b7          	lui	s1,0x2300d
2300b588:	f77ff0ef          	jal	ra,2300b4fe <shell_get_prompt>
2300b58c:	85aa                	mv	a1,a0
2300b58e:	1fc48513          	addi	a0,s1,508 # 2300d1fc <_ctype_+0x4f4>
2300b592:	9902                	jalr	s2
    SHELL_PRINTF("%s", shell->line);
2300b594:	13842783          	lw	a5,312(s0)
2300b598:	10040593          	addi	a1,s0,256
}
2300b59c:	4422                	lw	s0,8(sp)
2300b59e:	40b2                	lw	ra,12(sp)
2300b5a0:	4902                	lw	s2,0(sp)
    SHELL_PRINTF("%s", shell->line);
2300b5a2:	1fc48513          	addi	a0,s1,508
}
2300b5a6:	4492                	lw	s1,4(sp)
2300b5a8:	0141                	addi	sp,sp,16
    SHELL_PRINTF("%s", shell->line);
2300b5aa:	8782                	jr	a5

2300b5ac <shell_memtrace>:
{
2300b5ac:	1101                	addi	sp,sp,-32
2300b5ae:	ce06                	sw	ra,28(sp)
2300b5b0:	cc22                	sw	s0,24(sp)
2300b5b2:	ca26                	sw	s1,20(sp)
2300b5b4:	c84a                	sw	s2,16(sp)
2300b5b6:	c64e                	sw	s3,12(sp)
    if (argc < 2) {
2300b5b8:	4785                	li	a5,1
2300b5ba:	02a7db63          	bge	a5,a0,2300b5f0 <shell_memtrace+0x44>
2300b5be:	842a                	mv	s0,a0
    addr = strtoll(argv[1], NULL, 16);
2300b5c0:	41c8                	lw	a0,4(a1)
2300b5c2:	892e                	mv	s2,a1
2300b5c4:	4641                	li	a2,16
2300b5c6:	4581                	li	a1,0
2300b5c8:	36b000ef          	jal	ra,2300c132 <strtoll>
    if (argc < 3) {
2300b5cc:	4789                	li	a5,2
    addr = strtoll(argv[1], NULL, 16);
2300b5ce:	84aa                	mv	s1,a0
    if (argc < 3) {
2300b5d0:	04f40a63          	beq	s0,a5,2300b624 <shell_memtrace+0x78>
    if (argc < 4) {
2300b5d4:	478d                	li	a5,3
2300b5d6:	06f40963          	beq	s0,a5,2300b648 <shell_memtrace+0x9c>
    if (argc < 5) {
2300b5da:	4791                	li	a5,4
2300b5dc:	0af40063          	beq	s0,a5,2300b67c <shell_memtrace+0xd0>
}
2300b5e0:	40f2                	lw	ra,28(sp)
2300b5e2:	4462                	lw	s0,24(sp)
2300b5e4:	44d2                	lw	s1,20(sp)
2300b5e6:	4942                	lw	s2,16(sp)
2300b5e8:	49b2                	lw	s3,12(sp)
2300b5ea:	4501                	li	a0,0
2300b5ec:	6105                	addi	sp,sp,32
2300b5ee:	8082                	ret
        SHELL_DGB("write memory: 0x42000000 0xabcd 10\r\n");
2300b5f0:	14c18413          	addi	s0,gp,332 # 4201694c <shell>
2300b5f4:	401c                	lw	a5,0(s0)
2300b5f6:	2300d537          	lui	a0,0x2300d
2300b5fa:	20050513          	addi	a0,a0,512 # 2300d200 <_ctype_+0x4f8>
2300b5fe:	1387a783          	lw	a5,312(a5)
2300b602:	9782                	jalr	a5
        SHELL_DGB("read memory: 0x42000000 10\r\n");
2300b604:	401c                	lw	a5,0(s0)
2300b606:	2300d537          	lui	a0,0x2300d
2300b60a:	22850513          	addi	a0,a0,552 # 2300d228 <_ctype_+0x520>
2300b60e:	1387a783          	lw	a5,312(a5)
2300b612:	9782                	jalr	a5
}
2300b614:	40f2                	lw	ra,28(sp)
2300b616:	4462                	lw	s0,24(sp)
2300b618:	44d2                	lw	s1,20(sp)
2300b61a:	4942                	lw	s2,16(sp)
2300b61c:	49b2                	lw	s3,12(sp)
2300b61e:	4501                	li	a0,0
2300b620:	6105                	addi	sp,sp,32
2300b622:	8082                	ret
        SHELL_DGB("0x%08x\r\n", *(volatile uint32_t *)addr);
2300b624:	14c1a783          	lw	a5,332(gp) # 4201694c <shell>
2300b628:	410c                	lw	a1,0(a0)
2300b62a:	2300d537          	lui	a0,0x2300d
2300b62e:	1387a783          	lw	a5,312(a5)
2300b632:	24850513          	addi	a0,a0,584 # 2300d248 <_ctype_+0x540>
2300b636:	9782                	jalr	a5
}
2300b638:	40f2                	lw	ra,28(sp)
2300b63a:	4462                	lw	s0,24(sp)
2300b63c:	44d2                	lw	s1,20(sp)
2300b63e:	4942                	lw	s2,16(sp)
2300b640:	49b2                	lw	s3,12(sp)
2300b642:	4501                	li	a0,0
2300b644:	6105                	addi	sp,sp,32
2300b646:	8082                	ret
        uint16_t count = atoi(argv[2]);
2300b648:	00892503          	lw	a0,8(s2)
2300b64c:	09f000ef          	jal	ra,2300beea <atoi>
        for (int i = 0; i < count; i++) {
2300b650:	0542                	slli	a0,a0,0x10
2300b652:	8141                	srli	a0,a0,0x10
2300b654:	d551                	beqz	a0,2300b5e0 <shell_memtrace+0x34>
2300b656:	050a                	slli	a0,a0,0x2
2300b658:	00950433          	add	s0,a0,s1
2300b65c:	14c18913          	addi	s2,gp,332 # 4201694c <shell>
2300b660:	2300d9b7          	lui	s3,0x2300d
            SHELL_DGB("0x%08x\r\n", *(volatile uint32_t *)(addr + 4 * i));
2300b664:	00092783          	lw	a5,0(s2)
2300b668:	408c                	lw	a1,0(s1)
2300b66a:	24898513          	addi	a0,s3,584 # 2300d248 <_ctype_+0x540>
2300b66e:	1387a783          	lw	a5,312(a5)
        for (int i = 0; i < count; i++) {
2300b672:	0491                	addi	s1,s1,4
            SHELL_DGB("0x%08x\r\n", *(volatile uint32_t *)(addr + 4 * i));
2300b674:	9782                	jalr	a5
        for (int i = 0; i < count; i++) {
2300b676:	fe9417e3          	bne	s0,s1,2300b664 <shell_memtrace+0xb8>
2300b67a:	b79d                	j	2300b5e0 <shell_memtrace+0x34>
        uint16_t count = atoi(argv[3]);
2300b67c:	00c92503          	lw	a0,12(s2)
2300b680:	06b000ef          	jal	ra,2300beea <atoi>
2300b684:	842a                	mv	s0,a0
        value = strtoll(argv[2], NULL, 16);
2300b686:	00892503          	lw	a0,8(s2)
2300b68a:	4641                	li	a2,16
2300b68c:	4581                	li	a1,0
2300b68e:	2a5000ef          	jal	ra,2300c132 <strtoll>
2300b692:	01041793          	slli	a5,s0,0x10
2300b696:	83c1                	srli	a5,a5,0x10
        for (int i = 0; i < count; i++) {
2300b698:	d7a1                	beqz	a5,2300b5e0 <shell_memtrace+0x34>
2300b69a:	078a                	slli	a5,a5,0x2
2300b69c:	97a6                	add	a5,a5,s1
            *(volatile uint32_t *)(addr + 4 * i) = (uint32_t)value;
2300b69e:	c088                	sw	a0,0(s1)
        for (int i = 0; i < count; i++) {
2300b6a0:	0491                	addi	s1,s1,4
2300b6a2:	fe979ee3          	bne	a5,s1,2300b69e <shell_memtrace+0xf2>
2300b6a6:	bf2d                	j	2300b5e0 <shell_memtrace+0x34>

2300b6a8 <shell_exec>:
    return 0;
}
#endif

int shell_exec(char *cmd, uint32_t length)
{
2300b6a8:	715d                	addi	sp,sp,-80
2300b6aa:	c2a6                	sw	s1,68(sp)
2300b6ac:	c686                	sw	ra,76(sp)
2300b6ae:	c4a2                	sw	s0,72(sp)
2300b6b0:	c0ca                	sw	s2,64(sp)
2300b6b2:	de4e                	sw	s3,60(sp)
2300b6b4:	dc52                	sw	s4,56(sp)
2300b6b6:	da56                	sw	s5,52(sp)
2300b6b8:	d85a                	sw	s6,48(sp)
2300b6ba:	d65e                	sw	s7,44(sp)
2300b6bc:	d462                	sw	s8,40(sp)
    int cmd_ret;

    /* strim the beginning of command */
    while (*cmd == ' ' || *cmd == '\t') {
2300b6be:	84aa                	mv	s1,a0
2300b6c0:	95aa                	add	a1,a1,a0
2300b6c2:	02000793          	li	a5,32
2300b6c6:	4725                	li	a4,9
2300b6c8:	0004c403          	lbu	s0,0(s1)
2300b6cc:	40958933          	sub	s2,a1,s1
2300b6d0:	00f40463          	beq	s0,a5,2300b6d8 <shell_exec+0x30>
2300b6d4:	00e41463          	bne	s0,a4,2300b6dc <shell_exec+0x34>
        cmd++;
2300b6d8:	0485                	addi	s1,s1,1
        length--;
2300b6da:	b7fd                	j	2300b6c8 <shell_exec+0x20>
    }

    if (length == 0) {
        return 0;
2300b6dc:	4501                	li	a0,0
    if (length == 0) {
2300b6de:	00091e63          	bnez	s2,2300b6fa <shell_exec+0x52>

        *tcmd = '\0';
    }
    SHELL_E("%s: command not found.\r\n", cmd);
    return -1;
}
2300b6e2:	40b6                	lw	ra,76(sp)
2300b6e4:	4426                	lw	s0,72(sp)
2300b6e6:	4496                	lw	s1,68(sp)
2300b6e8:	4906                	lw	s2,64(sp)
2300b6ea:	59f2                	lw	s3,60(sp)
2300b6ec:	5a62                	lw	s4,56(sp)
2300b6ee:	5ad2                	lw	s5,52(sp)
2300b6f0:	5b42                	lw	s6,48(sp)
2300b6f2:	5bb2                	lw	s7,44(sp)
2300b6f4:	5c22                	lw	s8,40(sp)
2300b6f6:	6161                	addi	sp,sp,80
2300b6f8:	8082                	ret
    uint32_t cmd0_size = 0;
2300b6fa:	4a01                	li	s4,0
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') &&
2300b6fc:	02000713          	li	a4,32
2300b700:	46a5                	li	a3,9
2300b702:	a019                	j	2300b708 <shell_exec+0x60>
2300b704:	012a0c63          	beq	s4,s2,2300b71c <shell_exec+0x74>
        cmd0_size++;
2300b708:	8b52                	mv	s6,s4
2300b70a:	0a05                	addi	s4,s4,1
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') &&
2300b70c:	014487b3          	add	a5,s1,s4
2300b710:	0007c783          	lbu	a5,0(a5)
2300b714:	00e78463          	beq	a5,a4,2300b71c <shell_exec+0x74>
2300b718:	fed796e3          	bne	a5,a3,2300b704 <shell_exec+0x5c>
    for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300b71c:	13c1aa83          	lw	s5,316(gp) # 4201693c <_syscall_table_begin>
2300b720:	1401ab83          	lw	s7,320(gp) # 42016940 <_syscall_table_end>
2300b724:	037afc63          	bgeu	s5,s7,2300b75c <shell_exec+0xb4>
2300b728:	2300dc37          	lui	s8,0x2300d
        if (strncmp(index->name, "__cmd_", 6) != 0) {
2300b72c:	000aa983          	lw	s3,0(s5)
2300b730:	4619                	li	a2,6
2300b732:	1d4c0593          	addi	a1,s8,468 # 2300d1d4 <_ctype_+0x4cc>
2300b736:	854e                	mv	a0,s3
2300b738:	7f0000ef          	jal	ra,2300bf28 <strncmp>
2300b73c:	87aa                	mv	a5,a0
        if (strncmp(&index->name[6], cmd, size) == 0 &&
2300b73e:	8652                	mv	a2,s4
2300b740:	85a6                	mv	a1,s1
2300b742:	00698513          	addi	a0,s3,6
        if (strncmp(index->name, "__cmd_", 6) != 0) {
2300b746:	eb81                	bnez	a5,2300b756 <shell_exec+0xae>
        if (strncmp(&index->name[6], cmd, size) == 0 &&
2300b748:	7e0000ef          	jal	ra,2300bf28 <strncmp>
            index->name[6 + size] == '\0') {
2300b74c:	99da                	add	s3,s3,s6
        if (strncmp(&index->name[6], cmd, size) == 0 &&
2300b74e:	e501                	bnez	a0,2300b756 <shell_exec+0xae>
2300b750:	0079c783          	lbu	a5,7(s3)
2300b754:	cb9d                	beqz	a5,2300b78a <shell_exec+0xe2>
    for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300b756:	0aa1                	addi	s5,s5,8
2300b758:	fd7aeae3          	bltu	s5,s7,2300b72c <shell_exec+0x84>
    return argc;
2300b75c:	87a6                	mv	a5,s1
        while (*tcmd != ' ' && *tcmd != '\0') {
2300b75e:	02000713          	li	a4,32
2300b762:	c411                	beqz	s0,2300b76e <shell_exec+0xc6>
2300b764:	0017c403          	lbu	s0,1(a5)
            tcmd++;
2300b768:	0785                	addi	a5,a5,1
        while (*tcmd != ' ' && *tcmd != '\0') {
2300b76a:	fee41ce3          	bne	s0,a4,2300b762 <shell_exec+0xba>
    SHELL_E("%s: command not found.\r\n", cmd);
2300b76e:	14c1a703          	lw	a4,332(gp) # 4201694c <shell>
        *tcmd = '\0';
2300b772:	00078023          	sb	zero,0(a5)
    SHELL_E("%s: command not found.\r\n", cmd);
2300b776:	2300d537          	lui	a0,0x2300d
2300b77a:	13872783          	lw	a5,312(a4)
2300b77e:	27850513          	addi	a0,a0,632 # 2300d278 <_ctype_+0x570>
2300b782:	85a6                	mv	a1,s1
2300b784:	9782                	jalr	a5
    return -1;
2300b786:	557d                	li	a0,-1
2300b788:	bfa9                	j	2300b6e2 <shell_exec+0x3a>
            cmd_func = (cmd_function_t)index->func;
2300b78a:	004aa983          	lw	s3,4(s5)
    if (cmd_func == NULL) {
2300b78e:	fc0987e3          	beqz	s3,2300b75c <shell_exec+0xb4>
    memset(argv, 0x00, sizeof(argv));
2300b792:	c002                	sw	zero,0(sp)
2300b794:	8a0a                	mv	s4,sp
2300b796:	8e8a                	mv	t4,sp
2300b798:	87a6                	mv	a5,s1
    position = 0;
2300b79a:	4701                	li	a4,0
    argc = 0;
2300b79c:	4501                	li	a0,0
        while ((*ptr == ' ' || *ptr == '\t') && position < length) {
2300b79e:	02000693          	li	a3,32
2300b7a2:	45a5                	li	a1,9
        if (argc >= SHELL_ARG_NUM) {
2300b7a4:	4fa1                	li	t6,8
        if (*ptr == '"') {
2300b7a6:	02200e13          	li	t3,34
                if (*ptr == '\\') {
2300b7aa:	05c00f13          	li	t5,92
    memset(argv, 0x00, sizeof(argv));
2300b7ae:	c202                	sw	zero,4(sp)
2300b7b0:	c402                	sw	zero,8(sp)
2300b7b2:	c602                	sw	zero,12(sp)
2300b7b4:	c802                	sw	zero,16(sp)
2300b7b6:	ca02                	sw	zero,20(sp)
2300b7b8:	cc02                	sw	zero,24(sp)
2300b7ba:	ce02                	sw	zero,28(sp)
        while ((*ptr == ' ' || *ptr == '\t') && position < length) {
2300b7bc:	00d40463          	beq	s0,a3,2300b7c4 <shell_exec+0x11c>
2300b7c0:	00b41b63          	bne	s0,a1,2300b7d6 <shell_exec+0x12e>
2300b7c4:	05277563          	bgeu	a4,s2,2300b80e <shell_exec+0x166>
2300b7c8:	0017c403          	lbu	s0,1(a5)
            *ptr = '\0';
2300b7cc:	00078023          	sb	zero,0(a5)
            position++;
2300b7d0:	0705                	addi	a4,a4,1
            ptr++;
2300b7d2:	0785                	addi	a5,a5,1
            position++;
2300b7d4:	b7e5                	j	2300b7bc <shell_exec+0x114>
        if (argc >= SHELL_ARG_NUM) {
2300b7d6:	03f50f63          	beq	a0,t6,2300b814 <shell_exec+0x16c>
        if (position >= length) {
2300b7da:	0f277463          	bgeu	a4,s2,2300b8c2 <shell_exec+0x21a>
            argc++;
2300b7de:	0505                	addi	a0,a0,1
        if (*ptr == '"') {
2300b7e0:	07c40f63          	beq	s0,t3,2300b85e <shell_exec+0x1b6>
            argv[argc] = ptr;
2300b7e4:	40e90833          	sub	a6,s2,a4
2300b7e8:	00fea023          	sw	a5,0(t4)
            while ((*ptr != ' ' && *ptr != '\t') && position < length) {
2300b7ec:	983e                	add	a6,a6,a5
2300b7ee:	06f80563          	beq	a6,a5,2300b858 <shell_exec+0x1b0>
2300b7f2:	0017c603          	lbu	a2,1(a5)
                position++;
2300b7f6:	0705                	addi	a4,a4,1
                ptr++;
2300b7f8:	0785                	addi	a5,a5,1
            while ((*ptr != ' ' && *ptr != '\t') && position < length) {
2300b7fa:	00d60463          	beq	a2,a3,2300b802 <shell_exec+0x15a>
2300b7fe:	feb618e3          	bne	a2,a1,2300b7ee <shell_exec+0x146>
            if (position >= length) {
2300b802:	05277b63          	bgeu	a4,s2,2300b858 <shell_exec+0x1b0>
        while ((*ptr == ' ' || *ptr == '\t') && position < length) {
2300b806:	0007c403          	lbu	s0,0(a5)
    while (position < length) {
2300b80a:	0e91                	addi	t4,t4,4
2300b80c:	bf45                	j	2300b7bc <shell_exec+0x114>
        if (argc >= SHELL_ARG_NUM) {
2300b80e:	47a1                	li	a5,8
2300b810:	0af51963          	bne	a0,a5,2300b8c2 <shell_exec+0x21a>
            SHELL_E("Too many args ! We only Use:\r\n");
2300b814:	14c18413          	addi	s0,gp,332 # 4201694c <shell>
2300b818:	401c                	lw	a5,0(s0)
2300b81a:	2300d537          	lui	a0,0x2300d
2300b81e:	25450513          	addi	a0,a0,596 # 2300d254 <_ctype_+0x54c>
2300b822:	1387a783          	lw	a5,312(a5)
2300b826:	02010913          	addi	s2,sp,32
2300b82a:	2300d4b7          	lui	s1,0x2300d
2300b82e:	9782                	jalr	a5
                SHELL_E("%s ", argv[i]);
2300b830:	401c                	lw	a5,0(s0)
2300b832:	000a2583          	lw	a1,0(s4)
2300b836:	27448513          	addi	a0,s1,628 # 2300d274 <_ctype_+0x56c>
2300b83a:	1387a783          	lw	a5,312(a5)
            for (i = 0; i < argc; i++) {
2300b83e:	0a11                	addi	s4,s4,4
                SHELL_E("%s ", argv[i]);
2300b840:	9782                	jalr	a5
            for (i = 0; i < argc; i++) {
2300b842:	ff2a17e3          	bne	s4,s2,2300b830 <shell_exec+0x188>
            SHELL_E("\r\n");
2300b846:	401c                	lw	a5,0(s0)
2300b848:	2300d537          	lui	a0,0x2300d
2300b84c:	8b050513          	addi	a0,a0,-1872 # 2300c8b0 <af_pin_table+0x1e0>
2300b850:	1387a783          	lw	a5,312(a5)
2300b854:	9782                	jalr	a5
    return argc;
2300b856:	4521                	li	a0,8
    *retp = cmd_func(argc, argv);
2300b858:	858a                	mv	a1,sp
2300b85a:	9982                	jalr	s3
    return 0;
2300b85c:	b559                	j	2300b6e2 <shell_exec+0x3a>
            while (*ptr != '"' && position < length) {
2300b85e:	0017c803          	lbu	a6,1(a5)
            ptr++;
2300b862:	00178613          	addi	a2,a5,1
            argv[argc] = ptr;
2300b866:	00cea023          	sw	a2,0(t4)
            position++;
2300b86a:	0705                	addi	a4,a4,1
            while (*ptr != '"' && position < length) {
2300b86c:	03c80163          	beq	a6,t3,2300b88e <shell_exec+0x1e6>
2300b870:	ff2774e3          	bgeu	a4,s2,2300b858 <shell_exec+0x1b0>
                    if (*(ptr + 1) == '"') {
2300b874:	00164783          	lbu	a5,1(a2)
                        ptr++;
2300b878:	00160893          	addi	a7,a2,1
                        position++;
2300b87c:	00170313          	addi	t1,a4,1
                if (*ptr == '\\') {
2300b880:	03e80463          	beq	a6,t5,2300b8a8 <shell_exec+0x200>
                    if (*(ptr + 1) == '"') {
2300b884:	883e                	mv	a6,a5
2300b886:	871a                	mv	a4,t1
2300b888:	8646                	mv	a2,a7
            while (*ptr != '"' && position < length) {
2300b88a:	ffc813e3          	bne	a6,t3,2300b870 <shell_exec+0x1c8>
            if (position >= length) {
2300b88e:	fd2775e3          	bgeu	a4,s2,2300b858 <shell_exec+0x1b0>
            *ptr = '\0';
2300b892:	00060023          	sb	zero,0(a2)
            position++;
2300b896:	0705                	addi	a4,a4,1
            ptr++;
2300b898:	00160793          	addi	a5,a2,1
    while (position < length) {
2300b89c:	fb277ee3          	bgeu	a4,s2,2300b858 <shell_exec+0x1b0>
        while ((*ptr == ' ' || *ptr == '\t') && position < length) {
2300b8a0:	00164403          	lbu	s0,1(a2)
2300b8a4:	0e91                	addi	t4,t4,4
2300b8a6:	bf19                	j	2300b7bc <shell_exec+0x114>
                    if (*(ptr + 1) == '"') {
2300b8a8:	01c78663          	beq	a5,t3,2300b8b4 <shell_exec+0x20c>
2300b8ac:	871a                	mv	a4,t1
2300b8ae:	8646                	mv	a2,a7
2300b8b0:	883e                	mv	a6,a5
2300b8b2:	bf7d                	j	2300b870 <shell_exec+0x1c8>
            while (*ptr != '"' && position < length) {
2300b8b4:	00264803          	lbu	a6,2(a2)
                position++;
2300b8b8:	0709                	addi	a4,a4,2
                ptr++;
2300b8ba:	0609                	addi	a2,a2,2
            while (*ptr != '"' && position < length) {
2300b8bc:	fbc81ae3          	bne	a6,t3,2300b870 <shell_exec+0x1c8>
2300b8c0:	b7f9                	j	2300b88e <shell_exec+0x1e6>
    if (argc == 0) {
2300b8c2:	f959                	bnez	a0,2300b858 <shell_exec+0x1b0>
        while (*tcmd != ' ' && *tcmd != '\0') {
2300b8c4:	0004c403          	lbu	s0,0(s1)
2300b8c8:	02000793          	li	a5,32
2300b8cc:	e8f418e3          	bne	s0,a5,2300b75c <shell_exec+0xb4>
2300b8d0:	87a6                	mv	a5,s1
2300b8d2:	bd71                	j	2300b76e <shell_exec+0xc6>

2300b8d4 <shell_handler>:

void shell_handler(uint8_t data)
{
2300b8d4:	7179                	addi	sp,sp,-48
2300b8d6:	d04a                	sw	s2,32(sp)
2300b8d8:	d422                	sw	s0,40(sp)
   * down key: 0x1b 0x5b 0x42
   * right key:0x1b 0x5b 0x43
   * left key: 0x1b 0x5b 0x44
   */
    if (data == 0x1b) {
        shell->stat = WAIT_SPEC_KEY;
2300b8da:	14c18913          	addi	s2,gp,332 # 4201694c <shell>
{
2300b8de:	d606                	sw	ra,44(sp)
2300b8e0:	d226                	sw	s1,36(sp)
2300b8e2:	ce4e                	sw	s3,28(sp)
2300b8e4:	cc52                	sw	s4,24(sp)
2300b8e6:	ca56                	sw	s5,20(sp)
2300b8e8:	c85a                	sw	s6,16(sp)
2300b8ea:	c65e                	sw	s7,12(sp)
2300b8ec:	c462                	sw	s8,8(sp)
2300b8ee:	c266                	sw	s9,4(sp)
    if (data == 0x1b) {
2300b8f0:	47ed                	li	a5,27
        shell->stat = WAIT_SPEC_KEY;
2300b8f2:	00092403          	lw	s0,0(s2)
    if (data == 0x1b) {
2300b8f6:	10f50f63          	beq	a0,a5,2300ba14 <shell_handler+0x140>
        return;
    } else if (shell->stat == WAIT_SPEC_KEY) {
2300b8fa:	00044783          	lbu	a5,0(s0)
2300b8fe:	4705                	li	a4,1
2300b900:	84aa                	mv	s1,a0
2300b902:	0ee78a63          	beq	a5,a4,2300b9f6 <shell_handler+0x122>
            shell->stat = WAIT_FUNC_KEY;
            return;
        }

        shell->stat = WAIT_NORMAL;
    } else if (shell->stat == WAIT_FUNC_KEY) {
2300b906:	4709                	li	a4,2
2300b908:	10e78a63          	beq	a5,a4,2300ba1c <shell_handler+0x148>
            return;
        }
    }

    /* received null or error */
    if (data == '\0' || data == 0xFF) {
2300b90c:	fff48793          	addi	a5,s1,-1
2300b910:	0ff7f793          	zext.b	a5,a5
2300b914:	0fd00713          	li	a4,253
2300b918:	0cf76263          	bltu	a4,a5,2300b9dc <shell_handler+0x108>
        return;
    }
    /* handle tab key */
    else if (data == '\t') {
2300b91c:	47a5                	li	a5,9
2300b91e:	18f48a63          	beq	s1,a5,2300bab2 <shell_handler+0x1de>
        shell->line_curpos = shell->line_position = strlen(shell->line);

        return;
    }
    /* handle backspace key */
    else if (data == 0x7f || data == 0x08) {
2300b922:	07f00793          	li	a5,127
2300b926:	14f48563          	beq	s1,a5,2300ba70 <shell_handler+0x19c>
2300b92a:	47a1                	li	a5,8
2300b92c:	14f48263          	beq	s1,a5,2300ba70 <shell_handler+0x19c>

        return;
    }

    /* handle end of line, break */
    if (data == '\r' || data == '\n') {
2300b930:	4735                	li	a4,13
            if (shell->line_curpos < shell->line_position) {
2300b932:	13245783          	lhu	a5,306(s0)
    if (data == '\r' || data == '\n') {
2300b936:	32e48263          	beq	s1,a4,2300bc5a <shell_handler+0x386>
2300b93a:	4729                	li	a4,10
2300b93c:	30e48f63          	beq	s1,a4,2300bc5a <shell_handler+0x386>
        shell->line_curpos = shell->line_position = 0;
        return;
    }

    /* it's a large line, discard it */
    if (shell->line_position >= SHELL_CMD_SIZE) {
2300b940:	03100713          	li	a4,49
2300b944:	2ef76863          	bltu	a4,a5,2300bc34 <shell_handler+0x360>
        shell->line_position = 0;
    }

    /* normal character */
    if (shell->line_curpos < shell->line_position) {
2300b948:	13445603          	lhu	a2,308(s0)
        int i;

        memmove(&shell->line[shell->line_curpos + 1],
                &shell->line[shell->line_curpos],
                shell->line_position - shell->line_curpos);
2300b94c:	873e                	mv	a4,a5
    if (shell->line_curpos < shell->line_position) {
2300b94e:	2ef67663          	bgeu	a2,a5,2300bc3a <shell_handler+0x366>
                &shell->line[shell->line_curpos],
2300b952:	10060593          	addi	a1,a2,256
2300b956:	05c2                	slli	a1,a1,0x10
        memmove(&shell->line[shell->line_curpos + 1],
2300b958:	10160513          	addi	a0,a2,257
                &shell->line[shell->line_curpos],
2300b95c:	81c1                	srli	a1,a1,0x10
        memmove(&shell->line[shell->line_curpos + 1],
2300b95e:	40c78633          	sub	a2,a5,a2
2300b962:	95a2                	add	a1,a1,s0
2300b964:	9522                	add	a0,a0,s0
2300b966:	e32fe0ef          	jal	ra,23009f98 <memmove>
        shell->line[shell->line_curpos] = data;
2300b96a:	13445583          	lhu	a1,308(s0)

        SHELL_PRINTF("%s", &shell->line[shell->line_curpos]);
2300b96e:	2300d537          	lui	a0,0x2300d
2300b972:	1fc50513          	addi	a0,a0,508 # 2300d1fc <_ctype_+0x4f4>
        shell->line[shell->line_curpos] = data;
2300b976:	00b407b3          	add	a5,s0,a1
2300b97a:	10978023          	sb	s1,256(a5)
        SHELL_PRINTF("%s", &shell->line[shell->line_curpos]);
2300b97e:	13842783          	lw	a5,312(s0)
2300b982:	10058593          	addi	a1,a1,256
2300b986:	95a2                	add	a1,a1,s0
2300b988:	9782                	jalr	a5

        /* move the cursor to new position */
        for (i = shell->line_curpos; i < shell->line_position; i++) {
2300b98a:	00092783          	lw	a5,0(s2)
2300b98e:	1347d403          	lhu	s0,308(a5)
2300b992:	1327d703          	lhu	a4,306(a5)
2300b996:	86a2                	mv	a3,s0
2300b998:	02e45263          	bge	s0,a4,2300b9bc <shell_handler+0xe8>
2300b99c:	2300d9b7          	lui	s3,0x2300d
            SHELL_PRINTF("\b");
2300b9a0:	1387a783          	lw	a5,312(a5)
2300b9a4:	29498513          	addi	a0,s3,660 # 2300d294 <_ctype_+0x58c>
        for (i = shell->line_curpos; i < shell->line_position; i++) {
2300b9a8:	0405                	addi	s0,s0,1
            SHELL_PRINTF("\b");
2300b9aa:	9782                	jalr	a5
        for (i = shell->line_curpos; i < shell->line_position; i++) {
2300b9ac:	00092783          	lw	a5,0(s2)
2300b9b0:	1327d703          	lhu	a4,306(a5)
2300b9b4:	fee446e3          	blt	s0,a4,2300b9a0 <shell_handler+0xcc>
        SHELL_PRINTF("%c", data);
    }

    data = 0;
    shell->line_position++;
    shell->line_curpos++;
2300b9b8:	1347d683          	lhu	a3,308(a5)
    shell->line_position++;
2300b9bc:	0705                	addi	a4,a4,1
2300b9be:	0742                	slli	a4,a4,0x10
    shell->line_curpos++;
2300b9c0:	0685                	addi	a3,a3,1
    shell->line_position++;
2300b9c2:	8341                	srli	a4,a4,0x10
    shell->line_curpos++;
2300b9c4:	12d79a23          	sh	a3,308(a5)
    shell->line_position++;
2300b9c8:	12e79923          	sh	a4,306(a5)

    if (shell->line_position >= SHELL_CMD_SIZE) {
2300b9cc:	03100693          	li	a3,49
2300b9d0:	00e6f663          	bgeu	a3,a4,2300b9dc <shell_handler+0x108>
        /* clear command line */
        shell->line_position = 0;
2300b9d4:	12079923          	sh	zero,306(a5)
        shell->line_curpos = 0;
2300b9d8:	12079a23          	sh	zero,308(a5)
    }
}
2300b9dc:	50b2                	lw	ra,44(sp)
2300b9de:	5422                	lw	s0,40(sp)
2300b9e0:	5492                	lw	s1,36(sp)
2300b9e2:	5902                	lw	s2,32(sp)
2300b9e4:	49f2                	lw	s3,28(sp)
2300b9e6:	4a62                	lw	s4,24(sp)
2300b9e8:	4ad2                	lw	s5,20(sp)
2300b9ea:	4b42                	lw	s6,16(sp)
2300b9ec:	4bb2                	lw	s7,12(sp)
2300b9ee:	4c22                	lw	s8,8(sp)
2300b9f0:	4c92                	lw	s9,4(sp)
2300b9f2:	6145                	addi	sp,sp,48
2300b9f4:	8082                	ret
        if (data == 0x5b) {
2300b9f6:	05b00793          	li	a5,91
2300b9fa:	22f50963          	beq	a0,a5,2300bc2c <shell_handler+0x358>
    if (data == '\0' || data == 0xFF) {
2300b9fe:	fff48793          	addi	a5,s1,-1
        shell->stat = WAIT_NORMAL;
2300ba02:	00040023          	sb	zero,0(s0)
    if (data == '\0' || data == 0xFF) {
2300ba06:	0ff7f793          	zext.b	a5,a5
2300ba0a:	0fd00713          	li	a4,253
2300ba0e:	f0f777e3          	bgeu	a4,a5,2300b91c <shell_handler+0x48>
2300ba12:	b7e9                	j	2300b9dc <shell_handler+0x108>
        shell->stat = WAIT_SPEC_KEY;
2300ba14:	4785                	li	a5,1
2300ba16:	00f40023          	sb	a5,0(s0)
        return;
2300ba1a:	b7c9                	j	2300b9dc <shell_handler+0x108>
        shell->stat = WAIT_NORMAL;
2300ba1c:	00040023          	sb	zero,0(s0)
        if (data == 0x41) /* up key */
2300ba20:	04100793          	li	a5,65
2300ba24:	1af50663          	beq	a0,a5,2300bbd0 <shell_handler+0x2fc>
        } else if (data == 0x42) /* down key */
2300ba28:	04200793          	li	a5,66
2300ba2c:	2cf50963          	beq	a0,a5,2300bcfe <shell_handler+0x42a>
        } else if (data == 0x44) /* left key */
2300ba30:	04400793          	li	a5,68
2300ba34:	36f50663          	beq	a0,a5,2300bda0 <shell_handler+0x4cc>
        } else if (data == 0x43) /* right key */
2300ba38:	04300793          	li	a5,67
2300ba3c:	ecf518e3          	bne	a0,a5,2300b90c <shell_handler+0x38>
            if (shell->line_curpos < shell->line_position) {
2300ba40:	13445783          	lhu	a5,308(s0)
2300ba44:	13245703          	lhu	a4,306(s0)
2300ba48:	f8e7fae3          	bgeu	a5,a4,2300b9dc <shell_handler+0x108>
                SHELL_PRINTF("%c", shell->line[shell->line_curpos]);
2300ba4c:	97a2                	add	a5,a5,s0
2300ba4e:	13842703          	lw	a4,312(s0)
2300ba52:	1007c583          	lbu	a1,256(a5)
2300ba56:	2300d537          	lui	a0,0x2300d
2300ba5a:	29850513          	addi	a0,a0,664 # 2300d298 <_ctype_+0x590>
2300ba5e:	9702                	jalr	a4
                shell->line_curpos++;
2300ba60:	00092703          	lw	a4,0(s2)
2300ba64:	13475783          	lhu	a5,308(a4)
2300ba68:	0785                	addi	a5,a5,1
2300ba6a:	12f71a23          	sh	a5,308(a4)
2300ba6e:	b7bd                	j	2300b9dc <shell_handler+0x108>
        if (shell->line_curpos == 0) {
2300ba70:	13445583          	lhu	a1,308(s0)
2300ba74:	d5a5                	beqz	a1,2300b9dc <shell_handler+0x108>
        shell->line_position--;
2300ba76:	13245783          	lhu	a5,306(s0)
        shell->line_curpos--;
2300ba7a:	fff58613          	addi	a2,a1,-1
2300ba7e:	0642                	slli	a2,a2,0x10
        shell->line_position--;
2300ba80:	17fd                	addi	a5,a5,-1
2300ba82:	07c2                	slli	a5,a5,0x10
        shell->line_curpos--;
2300ba84:	8241                	srli	a2,a2,0x10
        shell->line_position--;
2300ba86:	83c1                	srli	a5,a5,0x10
2300ba88:	12f41923          	sh	a5,306(s0)
        shell->line_curpos--;
2300ba8c:	12c41a23          	sh	a2,308(s0)
        if (shell->line_position > shell->line_curpos) {
2300ba90:	2af66163          	bltu	a2,a5,2300bd32 <shell_handler+0x45e>
            SHELL_PRINTF("\b \b");
2300ba94:	13842783          	lw	a5,312(s0)
2300ba98:	2300d537          	lui	a0,0x2300d
2300ba9c:	2a450513          	addi	a0,a0,676 # 2300d2a4 <_ctype_+0x59c>
2300baa0:	9782                	jalr	a5
            shell->line[shell->line_position] = 0;
2300baa2:	00092783          	lw	a5,0(s2)
2300baa6:	1327d703          	lhu	a4,306(a5)
2300baaa:	97ba                	add	a5,a5,a4
2300baac:	10078023          	sb	zero,256(a5)
2300bab0:	b735                	j	2300b9dc <shell_handler+0x108>
        for (i = 0; i < shell->line_curpos; i++) {
2300bab2:	13445783          	lhu	a5,308(s0)
2300bab6:	c385                	beqz	a5,2300bad6 <shell_handler+0x202>
2300bab8:	4481                	li	s1,0
2300baba:	2300d9b7          	lui	s3,0x2300d
            SHELL_PRINTF("\b");
2300babe:	13842783          	lw	a5,312(s0)
2300bac2:	29498513          	addi	a0,s3,660 # 2300d294 <_ctype_+0x58c>
        for (i = 0; i < shell->line_curpos; i++) {
2300bac6:	0485                	addi	s1,s1,1
            SHELL_PRINTF("\b");
2300bac8:	9782                	jalr	a5
        for (i = 0; i < shell->line_curpos; i++) {
2300baca:	00092403          	lw	s0,0(s2)
2300bace:	13445783          	lhu	a5,308(s0)
2300bad2:	fef4c6e3          	blt	s1,a5,2300babe <shell_handler+0x1ea>
    SHELL_PRINTF("\r\n");
2300bad6:	13842783          	lw	a5,312(s0)
2300bada:	2300d537          	lui	a0,0x2300d
2300bade:	8b050513          	addi	a0,a0,-1872 # 2300c8b0 <af_pin_table+0x1e0>
2300bae2:	9782                	jalr	a5
    if (*prefix == '\0') {
2300bae4:	10044783          	lbu	a5,256(s0)
        shell_auto_complete(&shell->line[0]);
2300bae8:	10040413          	addi	s0,s0,256
    if (*prefix == '\0') {
2300baec:	2a078563          	beqz	a5,2300bd96 <shell_handler+0x4c2>
        for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300baf0:	14018a13          	addi	s4,gp,320 # 42016940 <_syscall_table_end>
2300baf4:	13c1a483          	lw	s1,316(gp) # 4201693c <_syscall_table_begin>
2300baf8:	000a2783          	lw	a5,0(s4)
2300bafc:	08f4f963          	bgeu	s1,a5,2300bb8e <shell_handler+0x2ba>
    name_ptr = NULL;
2300bb00:	4a81                	li	s5,0
    min_length = 0;
2300bb02:	4981                	li	s3,0
2300bb04:	2300db37          	lui	s6,0x2300d
                SHELL_CMD("%s\r\n", cmd_name);
2300bb08:	2300dbb7          	lui	s7,0x2300d
            if (strncmp(index->name, "__cmd_", 6) != 0) {
2300bb0c:	0004ac03          	lw	s8,0(s1)
2300bb10:	4619                	li	a2,6
2300bb12:	1d4b0593          	addi	a1,s6,468 # 2300d1d4 <_ctype_+0x4cc>
2300bb16:	8562                	mv	a0,s8
2300bb18:	2901                	jal	2300bf28 <strncmp>
2300bb1a:	ed39                	bnez	a0,2300bb78 <shell_handler+0x2a4>
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0) {
2300bb1c:	8522                	mv	a0,s0
2300bb1e:	f19fb0ef          	jal	ra,23007a36 <strlen>
            cmd_name = (const char *)&index->name[6];
2300bb22:	0c19                	addi	s8,s8,6
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0) {
2300bb24:	862a                	mv	a2,a0
2300bb26:	85e2                	mv	a1,s8
2300bb28:	8522                	mv	a0,s0
2300bb2a:	2efd                	jal	2300bf28 <strncmp>
2300bb2c:	8caa                	mv	s9,a0
2300bb2e:	e529                	bnez	a0,2300bb78 <shell_handler+0x2a4>
                if (min_length == 0) {
2300bb30:	00099763          	bnez	s3,2300bb3e <shell_handler+0x26a>
                    min_length = strlen(name_ptr);
2300bb34:	8562                	mv	a0,s8
2300bb36:	f01fb0ef          	jal	ra,23007a36 <strlen>
2300bb3a:	89aa                	mv	s3,a0
2300bb3c:	8ae2                	mv	s5,s8
    while ((*str != 0) && (*str2 != 0) && (*str == *str2)) {
2300bb3e:	000ac703          	lbu	a4,0(s5)
2300bb42:	87e2                	mv	a5,s8
2300bb44:	86d6                	mv	a3,s5
2300bb46:	eb01                	bnez	a4,2300bb56 <shell_handler+0x282>
2300bb48:	a829                	j	2300bb62 <shell_handler+0x28e>
2300bb4a:	00e61a63          	bne	a2,a4,2300bb5e <shell_handler+0x28a>
2300bb4e:	0016c703          	lbu	a4,1(a3)
        str++;
2300bb52:	0685                	addi	a3,a3,1
    while ((*str != 0) && (*str2 != 0) && (*str == *str2)) {
2300bb54:	c709                	beqz	a4,2300bb5e <shell_handler+0x28a>
2300bb56:	0007c603          	lbu	a2,0(a5)
        str2++;
2300bb5a:	0785                	addi	a5,a5,1
    while ((*str != 0) && (*str2 != 0) && (*str == *str2)) {
2300bb5c:	f67d                	bnez	a2,2300bb4a <shell_handler+0x276>
    return (str - str1);
2300bb5e:	41568cb3          	sub	s9,a3,s5
                if (length < min_length) {
2300bb62:	013cd363          	bge	s9,s3,2300bb68 <shell_handler+0x294>
2300bb66:	89e6                	mv	s3,s9
                SHELL_CMD("%s\r\n", cmd_name);
2300bb68:	00092783          	lw	a5,0(s2)
2300bb6c:	85e2                	mv	a1,s8
2300bb6e:	1dcb8513          	addi	a0,s7,476 # 2300d1dc <_ctype_+0x4d4>
2300bb72:	1387a783          	lw	a5,312(a5)
2300bb76:	9782                	jalr	a5
        for (index = _syscall_table_begin; index < _syscall_table_end; index++) {
2300bb78:	000a2783          	lw	a5,0(s4)
2300bb7c:	04a1                	addi	s1,s1,8
2300bb7e:	f8f4e7e3          	bltu	s1,a5,2300bb0c <shell_handler+0x238>
    if (name_ptr != NULL) {
2300bb82:	000a8663          	beqz	s5,2300bb8e <shell_handler+0x2ba>
        strncpy(prefix, name_ptr, min_length);
2300bb86:	864e                	mv	a2,s3
2300bb88:	85d6                	mv	a1,s5
2300bb8a:	8522                	mv	a0,s0
2300bb8c:	26e9                	jal	2300bf56 <strncpy>
    SHELL_PROMPT("%s", shell_get_prompt());
2300bb8e:	00092783          	lw	a5,0(s2)
2300bb92:	2300d4b7          	lui	s1,0x2300d
2300bb96:	1387a983          	lw	s3,312(a5)
2300bb9a:	965ff0ef          	jal	ra,2300b4fe <shell_get_prompt>
2300bb9e:	85aa                	mv	a1,a0
2300bba0:	1fc48513          	addi	a0,s1,508 # 2300d1fc <_ctype_+0x4f4>
2300bba4:	9982                	jalr	s3
    SHELL_PRINTF("%s", prefix);
2300bba6:	00092783          	lw	a5,0(s2)
2300bbaa:	85a2                	mv	a1,s0
2300bbac:	1fc48513          	addi	a0,s1,508
2300bbb0:	1387a783          	lw	a5,312(a5)
2300bbb4:	9782                	jalr	a5
        shell->line_curpos = shell->line_position = strlen(shell->line);
2300bbb6:	00092403          	lw	s0,0(s2)
2300bbba:	10040513          	addi	a0,s0,256
2300bbbe:	e79fb0ef          	jal	ra,23007a36 <strlen>
2300bbc2:	0542                	slli	a0,a0,0x10
2300bbc4:	8141                	srli	a0,a0,0x10
2300bbc6:	12a41923          	sh	a0,306(s0)
2300bbca:	12a41a23          	sh	a0,308(s0)
        return;
2300bbce:	b539                	j	2300b9dc <shell_handler+0x108>
            if (shell->current_history > 0) {
2300bbd0:	00245783          	lhu	a5,2(s0)
2300bbd4:	e00784e3          	beqz	a5,2300b9dc <shell_handler+0x108>
                shell->current_history--;
2300bbd8:	17fd                	addi	a5,a5,-1
2300bbda:	07c2                	slli	a5,a5,0x10
2300bbdc:	83c1                	srli	a5,a5,0x10
            memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
2300bbde:	03200593          	li	a1,50
2300bbe2:	02b785b3          	mul	a1,a5,a1
2300bbe6:	10040713          	addi	a4,s0,256
2300bbea:	03200613          	li	a2,50
                shell->current_history--;
2300bbee:	00f41123          	sh	a5,2(s0)
            memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
2300bbf2:	853a                	mv	a0,a4
2300bbf4:	0599                	addi	a1,a1,6
            memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
2300bbf6:	95a2                	add	a1,a1,s0
2300bbf8:	a56fb0ef          	jal	ra,23006e4e <memcpy>
            shell->line_curpos = shell->line_position = strlen(shell->line);
2300bbfc:	e3bfb0ef          	jal	ra,23007a36 <strlen>
2300bc00:	01051793          	slli	a5,a0,0x10
2300bc04:	83c1                	srli	a5,a5,0x10
2300bc06:	12f41923          	sh	a5,306(s0)
2300bc0a:	12f41a23          	sh	a5,308(s0)
            shell_handle_history(shell);
2300bc0e:	8522                	mv	a0,s0
}
2300bc10:	5422                	lw	s0,40(sp)
2300bc12:	50b2                	lw	ra,44(sp)
2300bc14:	5492                	lw	s1,36(sp)
2300bc16:	5902                	lw	s2,32(sp)
2300bc18:	49f2                	lw	s3,28(sp)
2300bc1a:	4a62                	lw	s4,24(sp)
2300bc1c:	4ad2                	lw	s5,20(sp)
2300bc1e:	4b42                	lw	s6,16(sp)
2300bc20:	4bb2                	lw	s7,12(sp)
2300bc22:	4c22                	lw	s8,8(sp)
2300bc24:	4c92                	lw	s9,4(sp)
2300bc26:	6145                	addi	sp,sp,48
            shell_handle_history(shell);
2300bc28:	93fff06f          	j	2300b566 <shell_handle_history>
            shell->stat = WAIT_FUNC_KEY;
2300bc2c:	4789                	li	a5,2
2300bc2e:	00f40023          	sb	a5,0(s0)
            return;
2300bc32:	b36d                	j	2300b9dc <shell_handler+0x108>
        shell->line_position = 0;
2300bc34:	12041923          	sh	zero,306(s0)
2300bc38:	4701                	li	a4,0
        shell->line[shell->line_position] = data;
2300bc3a:	9722                	add	a4,a4,s0
2300bc3c:	10970023          	sb	s1,256(a4)
        SHELL_PRINTF("%c", data);
2300bc40:	13842783          	lw	a5,312(s0)
2300bc44:	2300d537          	lui	a0,0x2300d
2300bc48:	85a6                	mv	a1,s1
2300bc4a:	29850513          	addi	a0,a0,664 # 2300d298 <_ctype_+0x590>
2300bc4e:	9782                	jalr	a5
    shell->line_position++;
2300bc50:	00092783          	lw	a5,0(s2)
2300bc54:	1327d703          	lhu	a4,306(a5)
2300bc58:	b385                	j	2300b9b8 <shell_handler+0xe4>
            if (shell->current_history < shell->history_count - 1) {
2300bc5a:	00445483          	lhu	s1,4(s0)
    if (shell->line_position != 0) {
2300bc5e:	cbb1                	beqz	a5,2300bcb2 <shell_handler+0x3de>
        if (shell->history_count >= SHELL_HISTORY_LINES) {
2300bc60:	4791                	li	a5,4
            memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
2300bc62:	10040a13          	addi	s4,s0,256
        if (shell->history_count >= SHELL_HISTORY_LINES) {
2300bc66:	1697f763          	bgeu	a5,s1,2300bdd4 <shell_handler+0x500>
            if (memcmp(&shell->cmd_history[SHELL_HISTORY_LINES - 1], shell->line,
2300bc6a:	0ce40993          	addi	s3,s0,206
2300bc6e:	03200613          	li	a2,50
2300bc72:	85d2                	mv	a1,s4
2300bc74:	854e                	mv	a0,s3
2300bc76:	2cad                	jal	2300bef0 <memcmp>
2300bc78:	cd0d                	beqz	a0,2300bcb2 <shell_handler+0x3de>
2300bc7a:	00640493          	addi	s1,s0,6
                    memcpy(&shell->cmd_history[index][0],
2300bc7e:	8526                	mv	a0,s1
2300bc80:	03248493          	addi	s1,s1,50
2300bc84:	03200613          	li	a2,50
2300bc88:	85a6                	mv	a1,s1
2300bc8a:	9c4fb0ef          	jal	ra,23006e4e <memcpy>
                for (index = 0; index < SHELL_HISTORY_LINES - 1; index++) {
2300bc8e:	fe9998e3          	bne	s3,s1,2300bc7e <shell_handler+0x3aa>
                memset(&shell->cmd_history[index][0], 0, SHELL_CMD_SIZE);
2300bc92:	03200613          	li	a2,50
2300bc96:	4581                	li	a1,0
2300bc98:	854e                	mv	a0,s3
2300bc9a:	deaf40ef          	jal	ra,23000284 <memset>
                memcpy(&shell->cmd_history[index][0], shell->line,
2300bc9e:	13245603          	lhu	a2,306(s0)
2300bca2:	85d2                	mv	a1,s4
2300bca4:	854e                	mv	a0,s3
2300bca6:	9a8fb0ef          	jal	ra,23006e4e <memcpy>
                shell->history_count = SHELL_HISTORY_LINES;
2300bcaa:	4795                	li	a5,5
2300bcac:	00f41223          	sh	a5,4(s0)
2300bcb0:	4495                	li	s1,5
        SHELL_PRINTF("\r\n");
2300bcb2:	13842783          	lw	a5,312(s0)
2300bcb6:	2300d537          	lui	a0,0x2300d
2300bcba:	8b050513          	addi	a0,a0,-1872 # 2300c8b0 <af_pin_table+0x1e0>
    shell->current_history = shell->history_count;
2300bcbe:	00941123          	sh	s1,2(s0)
        SHELL_PRINTF("\r\n");
2300bcc2:	9782                	jalr	a5
        shell_exec(shell->line, shell->line_position);
2300bcc4:	00092503          	lw	a0,0(s2)
2300bcc8:	13255583          	lhu	a1,306(a0)
2300bccc:	10050513          	addi	a0,a0,256
2300bcd0:	9d9ff0ef          	jal	ra,2300b6a8 <shell_exec>
        SHELL_PROMPT(shell_get_prompt());
2300bcd4:	00092783          	lw	a5,0(s2)
2300bcd8:	1387a403          	lw	s0,312(a5)
2300bcdc:	823ff0ef          	jal	ra,2300b4fe <shell_get_prompt>
2300bce0:	9402                	jalr	s0
        memset(shell->line, 0, sizeof(shell->line));
2300bce2:	00092403          	lw	s0,0(s2)
2300bce6:	03200613          	li	a2,50
2300bcea:	4581                	li	a1,0
2300bcec:	10040513          	addi	a0,s0,256
2300bcf0:	d94f40ef          	jal	ra,23000284 <memset>
        shell->line_curpos = shell->line_position = 0;
2300bcf4:	12041923          	sh	zero,306(s0)
2300bcf8:	12041a23          	sh	zero,308(s0)
        return;
2300bcfc:	b1c5                	j	2300b9dc <shell_handler+0x108>
            if (shell->current_history < shell->history_count - 1) {
2300bcfe:	00445683          	lhu	a3,4(s0)
2300bd02:	00245703          	lhu	a4,2(s0)
2300bd06:	fff68793          	addi	a5,a3,-1
2300bd0a:	0af74e63          	blt	a4,a5,2300bdc6 <shell_handler+0x4f2>
                if (shell->history_count != 0) {
2300bd0e:	cc0687e3          	beqz	a3,2300b9dc <shell_handler+0x108>
                    shell->current_history = shell->history_count - 1;
2300bd12:	07c2                	slli	a5,a5,0x10
2300bd14:	83c1                	srli	a5,a5,0x10
2300bd16:	00f41123          	sh	a5,2(s0)
            memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
2300bd1a:	03200593          	li	a1,50
2300bd1e:	02b787b3          	mul	a5,a5,a1
2300bd22:	10040713          	addi	a4,s0,256
2300bd26:	03200613          	li	a2,50
2300bd2a:	853a                	mv	a0,a4
2300bd2c:	00678593          	addi	a1,a5,6
2300bd30:	b5d9                	j	2300bbf6 <shell_handler+0x322>
            memmove(&shell->line[shell->line_curpos],
2300bd32:	10060513          	addi	a0,a2,256
                    &shell->line[shell->line_curpos + 1],
2300bd36:	10058593          	addi	a1,a1,256
            memmove(&shell->line[shell->line_curpos],
2300bd3a:	40c78633          	sub	a2,a5,a2
2300bd3e:	95a2                	add	a1,a1,s0
2300bd40:	9522                	add	a0,a0,s0
2300bd42:	a56fe0ef          	jal	ra,23009f98 <memmove>
            shell->line[shell->line_position] = 0;
2300bd46:	13245783          	lhu	a5,306(s0)
            SHELL_PRINTF("\b%s  \b", &shell->line[shell->line_curpos]);
2300bd4a:	2300d537          	lui	a0,0x2300d
2300bd4e:	29c50513          	addi	a0,a0,668 # 2300d29c <_ctype_+0x594>
            shell->line[shell->line_position] = 0;
2300bd52:	97a2                	add	a5,a5,s0
2300bd54:	10078023          	sb	zero,256(a5)
            SHELL_PRINTF("\b%s  \b", &shell->line[shell->line_curpos]);
2300bd58:	13445583          	lhu	a1,308(s0)
2300bd5c:	13842783          	lw	a5,312(s0)
2300bd60:	10058593          	addi	a1,a1,256
2300bd64:	95a2                	add	a1,a1,s0
2300bd66:	9782                	jalr	a5
            for (i = shell->line_curpos; i <= shell->line_position; i++) {
2300bd68:	00092783          	lw	a5,0(s2)
2300bd6c:	1347d403          	lhu	s0,308(a5)
2300bd70:	1327d703          	lhu	a4,306(a5)
2300bd74:	c68744e3          	blt	a4,s0,2300b9dc <shell_handler+0x108>
2300bd78:	2300d9b7          	lui	s3,0x2300d
                SHELL_PRINTF("\b");
2300bd7c:	1387a783          	lw	a5,312(a5)
2300bd80:	29498513          	addi	a0,s3,660 # 2300d294 <_ctype_+0x58c>
            for (i = shell->line_curpos; i <= shell->line_position; i++) {
2300bd84:	0405                	addi	s0,s0,1
                SHELL_PRINTF("\b");
2300bd86:	9782                	jalr	a5
            for (i = shell->line_curpos; i <= shell->line_position; i++) {
2300bd88:	00092783          	lw	a5,0(s2)
2300bd8c:	1327d703          	lhu	a4,306(a5)
2300bd90:	fe8756e3          	bge	a4,s0,2300bd7c <shell_handler+0x4a8>
2300bd94:	b1a1                	j	2300b9dc <shell_handler+0x108>
        shell_help(0, NULL);
2300bd96:	4581                	li	a1,0
2300bd98:	4501                	li	a0,0
2300bd9a:	ec4ff0ef          	jal	ra,2300b45e <shell_help>
        return;
2300bd9e:	bd21                	j	2300bbb6 <shell_handler+0x2e2>
            if (shell->line_curpos) {
2300bda0:	13445783          	lhu	a5,308(s0)
2300bda4:	c2078ce3          	beqz	a5,2300b9dc <shell_handler+0x108>
                SHELL_PRINTF("\b");
2300bda8:	13842783          	lw	a5,312(s0)
2300bdac:	2300d537          	lui	a0,0x2300d
2300bdb0:	29450513          	addi	a0,a0,660 # 2300d294 <_ctype_+0x58c>
2300bdb4:	9782                	jalr	a5
                shell->line_curpos--;
2300bdb6:	00092703          	lw	a4,0(s2)
2300bdba:	13475783          	lhu	a5,308(a4)
2300bdbe:	17fd                	addi	a5,a5,-1
2300bdc0:	12f71a23          	sh	a5,308(a4)
2300bdc4:	b921                	j	2300b9dc <shell_handler+0x108>
                shell->current_history++;
2300bdc6:	00170793          	addi	a5,a4,1
2300bdca:	07c2                	slli	a5,a5,0x10
2300bdcc:	83c1                	srli	a5,a5,0x10
2300bdce:	00f41123          	sh	a5,2(s0)
2300bdd2:	b7a1                	j	2300bd1a <shell_handler+0x446>
            if (shell->history_count == 0 ||
2300bdd4:	cc99                	beqz	s1,2300bdf2 <shell_handler+0x51e>
                memcmp(&shell->cmd_history[shell->history_count - 1], shell->line,
2300bdd6:	fff48513          	addi	a0,s1,-1
2300bdda:	03200793          	li	a5,50
2300bdde:	02f50533          	mul	a0,a0,a5
2300bde2:	03200613          	li	a2,50
2300bde6:	85d2                	mv	a1,s4
2300bde8:	0519                	addi	a0,a0,6
2300bdea:	9522                	add	a0,a0,s0
2300bdec:	2211                	jal	2300bef0 <memcmp>
            if (shell->history_count == 0 ||
2300bdee:	ec0502e3          	beqz	a0,2300bcb2 <shell_handler+0x3de>
                memset(&shell->cmd_history[shell->history_count][0], 0, SHELL_CMD_SIZE);
2300bdf2:	03200993          	li	s3,50
2300bdf6:	03348533          	mul	a0,s1,s3
2300bdfa:	03200613          	li	a2,50
2300bdfe:	4581                	li	a1,0
2300be00:	0519                	addi	a0,a0,6
2300be02:	9522                	add	a0,a0,s0
2300be04:	c80f40ef          	jal	ra,23000284 <memset>
                memcpy(&shell->cmd_history[shell->history_count][0], shell->line,
2300be08:	00445503          	lhu	a0,4(s0)
2300be0c:	13245603          	lhu	a2,306(s0)
2300be10:	85d2                	mv	a1,s4
2300be12:	03350533          	mul	a0,a0,s3
2300be16:	0519                	addi	a0,a0,6
2300be18:	9522                	add	a0,a0,s0
2300be1a:	834fb0ef          	jal	ra,23006e4e <memcpy>
                shell->history_count++;
2300be1e:	00445483          	lhu	s1,4(s0)
2300be22:	0485                	addi	s1,s1,1
2300be24:	04c2                	slli	s1,s1,0x10
2300be26:	80c1                	srli	s1,s1,0x10
2300be28:	00941223          	sh	s1,4(s0)
2300be2c:	b559                	j	2300bcb2 <shell_handler+0x3de>

2300be2e <shell_set_prompt>:
    _sysvar_table_begin = (struct shell_sysvar *)begin;
    _sysvar_table_end = (struct shell_sysvar *)end;
}

int shell_set_prompt(const char *prompt)
{
2300be2e:	1141                	addi	sp,sp,-16
2300be30:	c226                	sw	s1,4(sp)
    if (shell_prompt_custom) {
2300be32:	15018493          	addi	s1,gp,336 # 42016950 <shell_prompt_custom>
2300be36:	409c                	lw	a5,0(s1)
{
2300be38:	c422                	sw	s0,8(sp)
2300be3a:	c606                	sw	ra,12(sp)
2300be3c:	c04a                	sw	s2,0(sp)
2300be3e:	842a                	mv	s0,a0
    if (shell_prompt_custom) {
2300be40:	c791                	beqz	a5,2300be4c <shell_set_prompt+0x1e>
        SHELL_FREE(shell_prompt_custom);
2300be42:	853e                	mv	a0,a5
2300be44:	800fb0ef          	jal	ra,23006e44 <free>
        shell_prompt_custom = NULL;
2300be48:	0004a023          	sw	zero,0(s1)
    }

    /* strdup */
    if (prompt) {
2300be4c:	cc19                	beqz	s0,2300be6a <shell_set_prompt+0x3c>
        shell_prompt_custom = (char *)SHELL_MALLOC(strlen(prompt) + 1);
2300be4e:	8522                	mv	a0,s0
2300be50:	be7fb0ef          	jal	ra,23007a36 <strlen>
2300be54:	00150913          	addi	s2,a0,1
2300be58:	854a                	mv	a0,s2
2300be5a:	fe1fa0ef          	jal	ra,23006e3a <malloc>
2300be5e:	c088                	sw	a0,0(s1)
        if (shell_prompt_custom) {
2300be60:	c509                	beqz	a0,2300be6a <shell_set_prompt+0x3c>
            strcpy(shell_prompt_custom, prompt);
2300be62:	864a                	mv	a2,s2
2300be64:	85a2                	mv	a1,s0
2300be66:	fe9fa0ef          	jal	ra,23006e4e <memcpy>
        }
    }

    return 0;
}
2300be6a:	40b2                	lw	ra,12(sp)
2300be6c:	4422                	lw	s0,8(sp)
2300be6e:	4492                	lw	s1,4(sp)
2300be70:	4902                	lw	s2,0(sp)
2300be72:	4501                	li	a0,0
2300be74:	0141                	addi	sp,sp,16
2300be76:	8082                	ret

2300be78 <shell_set_print>:

int shell_set_print(void (*shell_printf)(char *fmt, ...))
{
2300be78:	87aa                	mv	a5,a0
    if (shell_printf) {
2300be7a:	c519                	beqz	a0,2300be88 <shell_set_print+0x10>
        shell->shell_printf = shell_printf;
2300be7c:	14c1a703          	lw	a4,332(gp) # 4201694c <shell>
        return 0;
2300be80:	4501                	li	a0,0
        shell->shell_printf = shell_printf;
2300be82:	12f72c23          	sw	a5,312(a4)
        return 0;
2300be86:	8082                	ret
    } else
        return -1;
2300be88:	557d                	li	a0,-1
}
2300be8a:	8082                	ret

2300be8c <shell_init>:
    _syscall_table_begin = (struct shell_syscall *)begin;
2300be8c:	230007b7          	lui	a5,0x23000
2300be90:	1c478793          	addi	a5,a5,452 # 230001c4 <__fsym___cmd_memtrace>
2300be94:	12f1ae23          	sw	a5,316(gp) # 4201693c <_syscall_table_begin>
    _syscall_table_end = (struct shell_syscall *)end;
2300be98:	230007b7          	lui	a5,0x23000
2300be9c:	1d478793          	addi	a5,a5,468 # 230001d4 <cdc_descriptor>
2300bea0:	14f1a023          	sw	a5,320(gp) # 42016940 <_syscall_table_end>
    _sysvar_table_begin = (struct shell_sysvar *)begin;
2300bea4:	230007b7          	lui	a5,0x23000
2300bea8:	1d478793          	addi	a5,a5,468 # 230001d4 <cdc_descriptor>
 * @ingroup shell
 *
 * This function will initialize shell
 */
void shell_init(void)
{
2300beac:	1141                	addi	sp,sp,-16
    _sysvar_table_begin = (struct shell_sysvar *)begin;
2300beae:	14f1a223          	sw	a5,324(gp) # 42016944 <_sysvar_table_begin>
    _sysvar_table_end = (struct shell_sysvar *)end;
2300beb2:	230007b7          	lui	a5,0x23000
{
2300beb6:	c422                	sw	s0,8(sp)
    _sysvar_table_end = (struct shell_sysvar *)end;
2300beb8:	1d478793          	addi	a5,a5,468 # 230001d4 <cdc_descriptor>
    extern const int __vsymtab_end;
    shell_function_init(&__fsymtab_start, &__fsymtab_end);
    shell_var_init(&__vsymtab_start, &__vsymtab_end);
#endif
    shell = &_shell;
    shell_set_prompt(SHELL_DEFAULT_NAME);
2300bebc:	2300d537          	lui	a0,0x2300d
    shell = &_shell;
2300bec0:	f5018413          	addi	s0,gp,-176 # 42016750 <_shell>
    _sysvar_table_end = (struct shell_sysvar *)end;
2300bec4:	14f1a423          	sw	a5,328(gp) # 42016948 <_sysvar_table_end>
    shell_set_prompt(SHELL_DEFAULT_NAME);
2300bec8:	1e450513          	addi	a0,a0,484 # 2300d1e4 <_ctype_+0x4dc>
{
2300becc:	c606                	sw	ra,12(sp)
    shell = &_shell;
2300bece:	1481a623          	sw	s0,332(gp) # 4201694c <shell>
    shell_set_prompt(SHELL_DEFAULT_NAME);
2300bed2:	f5dff0ef          	jal	ra,2300be2e <shell_set_prompt>
        shell->shell_printf = shell_printf;
2300bed6:	230037b7          	lui	a5,0x23003
2300beda:	00078793          	mv	a5,a5
    shell_set_print(bflb_platform_printf);
2300bede:	40b2                	lw	ra,12(sp)
        shell->shell_printf = shell_printf;
2300bee0:	12f42c23          	sw	a5,312(s0)
2300bee4:	4422                	lw	s0,8(sp)
2300bee6:	0141                	addi	sp,sp,16
2300bee8:	8082                	ret

2300beea <atoi>:
2300beea:	4629                	li	a2,10
2300beec:	4581                	li	a1,0
2300beee:	a671                	j	2300c27a <strtol>

2300bef0 <memcmp>:
2300bef0:	4701                	li	a4,0
2300bef2:	00e61463          	bne	a2,a4,2300befa <memcmp+0xa>
2300bef6:	4501                	li	a0,0
2300bef8:	8082                	ret
2300befa:	00e507b3          	add	a5,a0,a4
2300befe:	0705                	addi	a4,a4,1
2300bf00:	00e586b3          	add	a3,a1,a4
2300bf04:	0007c783          	lbu	a5,0(a5) # 23003000 <bflb_platform_printf>
2300bf08:	fff6c683          	lbu	a3,-1(a3)
2300bf0c:	fed783e3          	beq	a5,a3,2300bef2 <memcmp+0x2>
2300bf10:	40d78533          	sub	a0,a5,a3
2300bf14:	8082                	ret

2300bf16 <strcpy>:
2300bf16:	87aa                	mv	a5,a0
2300bf18:	0005c703          	lbu	a4,0(a1)
2300bf1c:	0785                	addi	a5,a5,1
2300bf1e:	0585                	addi	a1,a1,1
2300bf20:	fee78fa3          	sb	a4,-1(a5)
2300bf24:	fb75                	bnez	a4,2300bf18 <strcpy+0x2>
2300bf26:	8082                	ret

2300bf28 <strncmp>:
2300bf28:	c60d                	beqz	a2,2300bf52 <strncmp+0x2a>
2300bf2a:	167d                	addi	a2,a2,-1
2300bf2c:	4701                	li	a4,0
2300bf2e:	00e507b3          	add	a5,a0,a4
2300bf32:	00e586b3          	add	a3,a1,a4
2300bf36:	0007c783          	lbu	a5,0(a5)
2300bf3a:	0006c683          	lbu	a3,0(a3)
2300bf3e:	00d79463          	bne	a5,a3,2300bf46 <strncmp+0x1e>
2300bf42:	00c71563          	bne	a4,a2,2300bf4c <strncmp+0x24>
2300bf46:	40d78533          	sub	a0,a5,a3
2300bf4a:	8082                	ret
2300bf4c:	0705                	addi	a4,a4,1
2300bf4e:	f3e5                	bnez	a5,2300bf2e <strncmp+0x6>
2300bf50:	bfdd                	j	2300bf46 <strncmp+0x1e>
2300bf52:	4501                	li	a0,0
2300bf54:	8082                	ret

2300bf56 <strncpy>:
2300bf56:	87aa                	mv	a5,a0
2300bf58:	ca09                	beqz	a2,2300bf6a <strncpy+0x14>
2300bf5a:	0005c703          	lbu	a4,0(a1)
2300bf5e:	0585                	addi	a1,a1,1
2300bf60:	0785                	addi	a5,a5,1
2300bf62:	fee78fa3          	sb	a4,-1(a5)
2300bf66:	167d                	addi	a2,a2,-1
2300bf68:	fb65                	bnez	a4,2300bf58 <strncpy+0x2>
2300bf6a:	963e                	add	a2,a2,a5
2300bf6c:	00c79363          	bne	a5,a2,2300bf72 <strncpy+0x1c>
2300bf70:	8082                	ret
2300bf72:	0785                	addi	a5,a5,1
2300bf74:	fe078fa3          	sb	zero,-1(a5)
2300bf78:	bfd5                	j	2300bf6c <strncpy+0x16>

2300bf7a <_strtoll_l.constprop.0>:
2300bf7a:	7179                	addi	sp,sp,-48
2300bf7c:	d226                	sw	s1,36(sp)
2300bf7e:	d04a                	sw	s2,32(sp)
2300bf80:	cc52                	sw	s4,24(sp)
2300bf82:	ca56                	sw	s5,20(sp)
2300bf84:	c462                	sw	s8,8(sp)
2300bf86:	8936                	mv	s2,a3
2300bf88:	d606                	sw	ra,44(sp)
2300bf8a:	d422                	sw	s0,40(sp)
2300bf8c:	ce4e                	sw	s3,28(sp)
2300bf8e:	c85a                	sw	s6,16(sp)
2300bf90:	c65e                	sw	s7,12(sp)
2300bf92:	c266                	sw	s9,4(sp)
2300bf94:	c06a                	sw	s10,0(sp)
2300bf96:	8c2a                	mv	s8,a0
2300bf98:	8a2e                	mv	s4,a1
2300bf9a:	8ab2                	mv	s5,a2
2300bf9c:	84ae                	mv	s1,a1
2300bf9e:	00001697          	auipc	a3,0x1
2300bfa2:	d6b68693          	addi	a3,a3,-661 # 2300cd09 <_ctype_+0x1>
2300bfa6:	8726                	mv	a4,s1
2300bfa8:	0004c403          	lbu	s0,0(s1)
2300bfac:	0485                	addi	s1,s1,1
2300bfae:	00d407b3          	add	a5,s0,a3
2300bfb2:	0007c783          	lbu	a5,0(a5)
2300bfb6:	8ba1                	andi	a5,a5,8
2300bfb8:	f7fd                	bnez	a5,2300bfa6 <_strtoll_l.constprop.0+0x2c>
2300bfba:	02d00793          	li	a5,45
2300bfbe:	0cf41963          	bne	s0,a5,2300c090 <_strtoll_l.constprop.0+0x116>
2300bfc2:	0004c403          	lbu	s0,0(s1)
2300bfc6:	4b05                	li	s6,1
2300bfc8:	00270493          	addi	s1,a4,2
2300bfcc:	14090d63          	beqz	s2,2300c126 <_strtoll_l.constprop.0+0x1ac>
2300bfd0:	47c1                	li	a5,16
2300bfd2:	02f91263          	bne	s2,a5,2300bff6 <_strtoll_l.constprop.0+0x7c>
2300bfd6:	03000793          	li	a5,48
2300bfda:	00f41e63          	bne	s0,a5,2300bff6 <_strtoll_l.constprop.0+0x7c>
2300bfde:	0004c783          	lbu	a5,0(s1)
2300bfe2:	05800713          	li	a4,88
2300bfe6:	0df7f793          	andi	a5,a5,223
2300bfea:	12e79863          	bne	a5,a4,2300c11a <_strtoll_l.constprop.0+0x1a0>
2300bfee:	0014c403          	lbu	s0,1(s1)
2300bff2:	4941                	li	s2,16
2300bff4:	0489                	addi	s1,s1,2
2300bff6:	800009b7          	lui	s3,0x80000
2300bffa:	fff9c993          	not	s3,s3
2300bffe:	fffb0b93          	addi	s7,s6,-1
2300c002:	99da                	add	s3,s3,s6
2300c004:	41f95d13          	srai	s10,s2,0x1f
2300c008:	864a                	mv	a2,s2
2300c00a:	86ea                	mv	a3,s10
2300c00c:	855e                	mv	a0,s7
2300c00e:	85ce                	mv	a1,s3
2300c010:	beff60ef          	jal	ra,23002bfe <__umoddi3>
2300c014:	86ea                	mv	a3,s10
2300c016:	8caa                	mv	s9,a0
2300c018:	864a                	mv	a2,s2
2300c01a:	855e                	mv	a0,s7
2300c01c:	85ce                	mv	a1,s3
2300c01e:	b4af40ef          	jal	ra,23000368 <__udivdi3>
2300c022:	88aa                	mv	a7,a0
2300c024:	872e                	mv	a4,a1
2300c026:	4801                	li	a6,0
2300c028:	4501                	li	a0,0
2300c02a:	4581                	li	a1,0
2300c02c:	4325                	li	t1,9
2300c02e:	46e5                	li	a3,25
2300c030:	5e7d                	li	t3,-1
2300c032:	fd040793          	addi	a5,s0,-48
2300c036:	06f36763          	bltu	t1,a5,2300c0a4 <_strtoll_l.constprop.0+0x12a>
2300c03a:	843e                	mv	s0,a5
2300c03c:	09245463          	bge	s0,s2,2300c0c4 <_strtoll_l.constprop.0+0x14a>
2300c040:	05c80463          	beq	a6,t3,2300c088 <_strtoll_l.constprop.0+0x10e>
2300c044:	06b76e63          	bltu	a4,a1,2300c0c0 <_strtoll_l.constprop.0+0x146>
2300c048:	00e59463          	bne	a1,a4,2300c050 <_strtoll_l.constprop.0+0xd6>
2300c04c:	06a8ea63          	bltu	a7,a0,2300c0c0 <_strtoll_l.constprop.0+0x146>
2300c050:	00a89763          	bne	a7,a0,2300c05e <_strtoll_l.constprop.0+0xe4>
2300c054:	00b71563          	bne	a4,a1,2300c05e <_strtoll_l.constprop.0+0xe4>
2300c058:	587d                	li	a6,-1
2300c05a:	028cc763          	blt	s9,s0,2300c088 <_strtoll_l.constprop.0+0x10e>
2300c05e:	02ad0633          	mul	a2,s10,a0
2300c062:	032587b3          	mul	a5,a1,s2
2300c066:	02a90833          	mul	a6,s2,a0
2300c06a:	00f605b3          	add	a1,a2,a5
2300c06e:	02a937b3          	mulhu	a5,s2,a0
2300c072:	01040533          	add	a0,s0,a6
2300c076:	4805                	li	a6,1
2300c078:	95be                	add	a1,a1,a5
2300c07a:	41f45793          	srai	a5,s0,0x1f
2300c07e:	97ae                	add	a5,a5,a1
2300c080:	00853433          	sltu	s0,a0,s0
2300c084:	00f405b3          	add	a1,s0,a5
2300c088:	0485                	addi	s1,s1,1
2300c08a:	fff4c403          	lbu	s0,-1(s1)
2300c08e:	b755                	j	2300c032 <_strtoll_l.constprop.0+0xb8>
2300c090:	02b00793          	li	a5,43
2300c094:	4b01                	li	s6,0
2300c096:	f2f41be3          	bne	s0,a5,2300bfcc <_strtoll_l.constprop.0+0x52>
2300c09a:	0004c403          	lbu	s0,0(s1)
2300c09e:	00270493          	addi	s1,a4,2
2300c0a2:	b72d                	j	2300bfcc <_strtoll_l.constprop.0+0x52>
2300c0a4:	fbf40793          	addi	a5,s0,-65
2300c0a8:	00f6e563          	bltu	a3,a5,2300c0b2 <_strtoll_l.constprop.0+0x138>
2300c0ac:	fc940413          	addi	s0,s0,-55
2300c0b0:	b771                	j	2300c03c <_strtoll_l.constprop.0+0xc2>
2300c0b2:	f9f40793          	addi	a5,s0,-97
2300c0b6:	00f6e763          	bltu	a3,a5,2300c0c4 <_strtoll_l.constprop.0+0x14a>
2300c0ba:	fa940413          	addi	s0,s0,-87
2300c0be:	bfbd                	j	2300c03c <_strtoll_l.constprop.0+0xc2>
2300c0c0:	587d                	li	a6,-1
2300c0c2:	b7d9                	j	2300c088 <_strtoll_l.constprop.0+0x10e>
2300c0c4:	57fd                	li	a5,-1
2300c0c6:	02f81863          	bne	a6,a5,2300c0f6 <_strtoll_l.constprop.0+0x17c>
2300c0ca:	02200793          	li	a5,34
2300c0ce:	00fc2023          	sw	a5,0(s8)
2300c0d2:	855e                	mv	a0,s7
2300c0d4:	85ce                	mv	a1,s3
2300c0d6:	020a9d63          	bnez	s5,2300c110 <_strtoll_l.constprop.0+0x196>
2300c0da:	50b2                	lw	ra,44(sp)
2300c0dc:	5422                	lw	s0,40(sp)
2300c0de:	5492                	lw	s1,36(sp)
2300c0e0:	5902                	lw	s2,32(sp)
2300c0e2:	49f2                	lw	s3,28(sp)
2300c0e4:	4a62                	lw	s4,24(sp)
2300c0e6:	4ad2                	lw	s5,20(sp)
2300c0e8:	4b42                	lw	s6,16(sp)
2300c0ea:	4bb2                	lw	s7,12(sp)
2300c0ec:	4c22                	lw	s8,8(sp)
2300c0ee:	4c92                	lw	s9,4(sp)
2300c0f0:	4d02                	lw	s10,0(sp)
2300c0f2:	6145                	addi	sp,sp,48
2300c0f4:	8082                	ret
2300c0f6:	000b0963          	beqz	s6,2300c108 <_strtoll_l.constprop.0+0x18e>
2300c0fa:	00a037b3          	snez	a5,a0
2300c0fe:	40b005b3          	neg	a1,a1
2300c102:	8d9d                	sub	a1,a1,a5
2300c104:	40a00533          	neg	a0,a0
2300c108:	fc0a89e3          	beqz	s5,2300c0da <_strtoll_l.constprop.0+0x160>
2300c10c:	00080463          	beqz	a6,2300c114 <_strtoll_l.constprop.0+0x19a>
2300c110:	fff48a13          	addi	s4,s1,-1
2300c114:	014aa023          	sw	s4,0(s5)
2300c118:	b7c9                	j	2300c0da <_strtoll_l.constprop.0+0x160>
2300c11a:	03000413          	li	s0,48
2300c11e:	ec091ce3          	bnez	s2,2300bff6 <_strtoll_l.constprop.0+0x7c>
2300c122:	4921                	li	s2,8
2300c124:	bdc9                	j	2300bff6 <_strtoll_l.constprop.0+0x7c>
2300c126:	03000793          	li	a5,48
2300c12a:	eaf40ae3          	beq	s0,a5,2300bfde <_strtoll_l.constprop.0+0x64>
2300c12e:	4929                	li	s2,10
2300c130:	b5d9                	j	2300bff6 <_strtoll_l.constprop.0+0x7c>

2300c132 <strtoll>:
2300c132:	86b2                	mv	a3,a2
2300c134:	862e                	mv	a2,a1
2300c136:	85aa                	mv	a1,a0
2300c138:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
2300c13c:	e3fff06f          	j	2300bf7a <_strtoll_l.constprop.0>

2300c140 <_strtol_l.constprop.0>:
2300c140:	4785                	li	a5,1
2300c142:	00f68c63          	beq	a3,a5,2300c15a <_strtol_l.constprop.0+0x1a>
2300c146:	02400793          	li	a5,36
2300c14a:	8eaa                	mv	t4,a0
2300c14c:	872e                	mv	a4,a1
2300c14e:	00001897          	auipc	a7,0x1
2300c152:	bbb88893          	addi	a7,a7,-1093 # 2300cd09 <_ctype_+0x1>
2300c156:	00d7fc63          	bgeu	a5,a3,2300c16e <_strtol_l.constprop.0+0x2e>
2300c15a:	1141                	addi	sp,sp,-16
2300c15c:	c606                	sw	ra,12(sp)
2300c15e:	8ccf70ef          	jal	ra,2300322a <__errno>
2300c162:	40b2                	lw	ra,12(sp)
2300c164:	47d9                	li	a5,22
2300c166:	c11c                	sw	a5,0(a0)
2300c168:	4501                	li	a0,0
2300c16a:	0141                	addi	sp,sp,16
2300c16c:	8082                	ret
2300c16e:	883a                	mv	a6,a4
2300c170:	00074783          	lbu	a5,0(a4)
2300c174:	0705                	addi	a4,a4,1
2300c176:	01178533          	add	a0,a5,a7
2300c17a:	00054503          	lbu	a0,0(a0)
2300c17e:	8921                	andi	a0,a0,8
2300c180:	f57d                	bnez	a0,2300c16e <_strtol_l.constprop.0+0x2e>
2300c182:	02d00513          	li	a0,45
2300c186:	08a79063          	bne	a5,a0,2300c206 <_strtol_l.constprop.0+0xc6>
2300c18a:	00074783          	lbu	a5,0(a4)
2300c18e:	4e05                	li	t3,1
2300c190:	00280713          	addi	a4,a6,2
2300c194:	cee1                	beqz	a3,2300c26c <_strtol_l.constprop.0+0x12c>
2300c196:	4541                	li	a0,16
2300c198:	02a69263          	bne	a3,a0,2300c1bc <_strtol_l.constprop.0+0x7c>
2300c19c:	03000513          	li	a0,48
2300c1a0:	00a79e63          	bne	a5,a0,2300c1bc <_strtol_l.constprop.0+0x7c>
2300c1a4:	00074783          	lbu	a5,0(a4)
2300c1a8:	05800513          	li	a0,88
2300c1ac:	0df7f793          	andi	a5,a5,223
2300c1b0:	0aa79963          	bne	a5,a0,2300c262 <_strtol_l.constprop.0+0x122>
2300c1b4:	00174783          	lbu	a5,1(a4)
2300c1b8:	46c1                	li	a3,16
2300c1ba:	0709                	addi	a4,a4,2
2300c1bc:	800008b7          	lui	a7,0x80000
2300c1c0:	fff8c893          	not	a7,a7
2300c1c4:	98f2                	add	a7,a7,t3
2300c1c6:	02d8f2b3          	remu	t0,a7,a3
2300c1ca:	4301                	li	t1,0
2300c1cc:	4501                	li	a0,0
2300c1ce:	43a5                	li	t2,9
2300c1d0:	4fe5                	li	t6,25
2300c1d2:	02d8df33          	divu	t5,a7,a3
2300c1d6:	fd078813          	addi	a6,a5,-48
2300c1da:	0503e063          	bltu	t2,a6,2300c21a <_strtol_l.constprop.0+0xda>
2300c1de:	87c2                	mv	a5,a6
2300c1e0:	04d7dd63          	bge	a5,a3,2300c23a <_strtol_l.constprop.0+0xfa>
2300c1e4:	04034963          	bltz	t1,2300c236 <_strtol_l.constprop.0+0xf6>
2300c1e8:	537d                	li	t1,-1
2300c1ea:	00af6a63          	bltu	t5,a0,2300c1fe <_strtol_l.constprop.0+0xbe>
2300c1ee:	00af1463          	bne	t5,a0,2300c1f6 <_strtol_l.constprop.0+0xb6>
2300c1f2:	00f2c663          	blt	t0,a5,2300c1fe <_strtol_l.constprop.0+0xbe>
2300c1f6:	4305                	li	t1,1
2300c1f8:	02a68533          	mul	a0,a3,a0
2300c1fc:	953e                	add	a0,a0,a5
2300c1fe:	0705                	addi	a4,a4,1
2300c200:	fff74783          	lbu	a5,-1(a4)
2300c204:	bfc9                	j	2300c1d6 <_strtol_l.constprop.0+0x96>
2300c206:	02b00513          	li	a0,43
2300c20a:	4e01                	li	t3,0
2300c20c:	f8a794e3          	bne	a5,a0,2300c194 <_strtol_l.constprop.0+0x54>
2300c210:	00074783          	lbu	a5,0(a4)
2300c214:	00280713          	addi	a4,a6,2
2300c218:	bfb5                	j	2300c194 <_strtol_l.constprop.0+0x54>
2300c21a:	fbf78813          	addi	a6,a5,-65
2300c21e:	010fe563          	bltu	t6,a6,2300c228 <_strtol_l.constprop.0+0xe8>
2300c222:	fc978793          	addi	a5,a5,-55
2300c226:	bf6d                	j	2300c1e0 <_strtol_l.constprop.0+0xa0>
2300c228:	f9f78813          	addi	a6,a5,-97
2300c22c:	010fe763          	bltu	t6,a6,2300c23a <_strtol_l.constprop.0+0xfa>
2300c230:	fa978793          	addi	a5,a5,-87
2300c234:	b775                	j	2300c1e0 <_strtol_l.constprop.0+0xa0>
2300c236:	537d                	li	t1,-1
2300c238:	b7d9                	j	2300c1fe <_strtol_l.constprop.0+0xbe>
2300c23a:	00035963          	bgez	t1,2300c24c <_strtol_l.constprop.0+0x10c>
2300c23e:	02200793          	li	a5,34
2300c242:	00fea023          	sw	a5,0(t4)
2300c246:	8546                	mv	a0,a7
2300c248:	ea09                	bnez	a2,2300c25a <_strtol_l.constprop.0+0x11a>
2300c24a:	8082                	ret
2300c24c:	000e0463          	beqz	t3,2300c254 <_strtol_l.constprop.0+0x114>
2300c250:	40a00533          	neg	a0,a0
2300c254:	c215                	beqz	a2,2300c278 <_strtol_l.constprop.0+0x138>
2300c256:	00030463          	beqz	t1,2300c25e <_strtol_l.constprop.0+0x11e>
2300c25a:	fff70593          	addi	a1,a4,-1
2300c25e:	c20c                	sw	a1,0(a2)
2300c260:	8082                	ret
2300c262:	03000793          	li	a5,48
2300c266:	fab9                	bnez	a3,2300c1bc <_strtol_l.constprop.0+0x7c>
2300c268:	46a1                	li	a3,8
2300c26a:	bf89                	j	2300c1bc <_strtol_l.constprop.0+0x7c>
2300c26c:	03000513          	li	a0,48
2300c270:	f2a78ae3          	beq	a5,a0,2300c1a4 <_strtol_l.constprop.0+0x64>
2300c274:	46a9                	li	a3,10
2300c276:	b799                	j	2300c1bc <_strtol_l.constprop.0+0x7c>
2300c278:	8082                	ret

2300c27a <strtol>:
2300c27a:	86b2                	mv	a3,a2
2300c27c:	862e                	mv	a2,a1
2300c27e:	85aa                	mv	a1,a0
2300c280:	a8c1a503          	lw	a0,-1396(gp) # 4201628c <_impure_ptr>
2300c284:	ebdff06f          	j	2300c140 <_strtol_l.constprop.0>
2300c288:	6f4e                	flw	ft10,208(sp)
2300c28a:	61632077          	0x61632077
2300c28e:	206e                	fld	ft0,216(sp)
2300c290:	7375                	lui	t1,0xffffd
2300c292:	2065                	jal	2300c33a <strtol+0xc0>
2300c294:	534d                	li	t1,-13
2300c296:	78785f47          	fmsub.s	ft10,fa6,ft7,fa5,unknown
2300c29a:	2c78                	fld	fa4,216(s0)
2300c29c:	4c20                	lw	s0,88(s0)
2300c29e:	785f474f          	fnmadd.s	fa4,ft10,ft5,fa5,rmm
2300c2a2:	7878                	flw	fa4,116(s0)
2300c2a4:	6120                	flw	fs0,64(a0)
2300c2a6:	646e                	flw	fs0,216(sp)
2300c2a8:	6220                	flw	fs0,64(a2)
2300c2aa:	6c66                	flw	fs8,88(sp)
2300c2ac:	5f62                	lw	t5,56(sp)
2300c2ae:	6c70                	flw	fa2,92(s0)
2300c2b0:	7461                	lui	s0,0xffff8
2300c2b2:	6f66                	flw	ft10,88(sp)
2300c2b4:	6d72                	flw	fs10,28(sp)
2300c2b6:	705f 6972 746e      	0x746e6972705f
2300c2bc:	2066                	fld	ft0,88(sp)
2300c2be:	75206e6f          	jal	t3,23012a10 <__dtcm_load_addr+0x4a94>
2300c2c2:	7261                	lui	tp,0xffff8
2300c2c4:	2e74                	fld	fa3,216(a2)
2300c2c6:	0a0d                	addi	s4,s4,3
2300c2c8:	0000                	unimp
2300c2ca:	0000                	unimp
2300c2cc:	6f4e                	flw	ft10,208(sp)
2300c2ce:	61632077          	0x61632077
2300c2d2:	206e                	fld	ft0,216(sp)
2300c2d4:	7375                	lui	t1,0xffffd
2300c2d6:	2065                	jal	2300c37e <strtol+0x104>
2300c2d8:	7270                	flw	fa2,100(a2)
2300c2da:	6e69                	lui	t3,0x1a
2300c2dc:	6674                	flw	fa3,76(a2)
2300c2de:	202c                	fld	fa1,64(s0)
2300c2e0:	7570                	flw	fa2,108(a0)
2300c2e2:	7374                	flw	fa3,100(a4)
2300c2e4:	6f20                	flw	fs0,88(a4)
2300c2e6:	206e                	fld	ft0,216(sp)
2300c2e8:	7375                	lui	t1,0xffffd
2300c2ea:	5f62                	lw	t5,56(sp)
2300c2ec:	5f636463          	bltu	t1,s6,2300c8d4 <uartAddr>
2300c2f0:	6361                	lui	t1,0x18
2300c2f2:	2e6d                	jal	2300c6ac <strtol+0x432>
2300c2f4:	000d                	c.nop	3
2300c2f6:	0000                	unimp
2300c2f8:	696e695b          	0x696e695b
2300c2fc:	5d74                	lw	a3,124(a0)
2300c2fe:	6720                	flw	fs0,72(a4)
2300c300:	206f696f          	jal	s2,23102506 <__dtcm_load_addr+0xf458a>
2300c304:	20746573          	csrrsi	a0,0x207,8
2300c308:	6f6d                	lui	t5,0x1b
2300c30a:	6564                	flw	fs1,76(a0)
2300c30c:	6320                	flw	fs0,64(a4)
2300c30e:	6c706d6f          	jal	s10,230131d4 <__dtcm_load_addr+0x5258>
2300c312:	7465                	lui	s0,0xffff9
2300c314:	2e65                	jal	2300c6cc <strtol+0x452>
2300c316:	000d                	c.nop	3
2300c318:	69616d5b          	0x69616d5b
2300c31c:	5d6e                	lw	s10,248(sp)
2300c31e:	7320                	flw	fs0,96(a4)
2300c320:	6174                	flw	fa3,68(a0)
2300c322:	7472                	flw	fs0,60(sp)
2300c324:	6c20                	flw	fs0,88(s0)
2300c326:	0d706f6f          	jal	t5,23012bfc <__dtcm_load_addr+0x4c80>
2300c32a:	0000                	unimp
2300c32c:	6e69                	lui	t3,0x1a
2300c32e:	61657263          	bgeu	a0,s6,2300c932 <dma_channel_base+0x4e>
2300c332:	31206573          	csrrsi	a0,0x312,0
2300c336:	7320                	flw	fs0,96(a4)
2300c338:	656c206f          	j	230ce98e <__dtcm_load_addr+0xc0a12>
2300c33c:	5f64                	lw	s1,124(a4)
2300c33e:	74617473          	csrrci	s0,0x746,2
2300c342:	2065                	jal	2300c3ea <strtol+0x170>
2300c344:	7369                	lui	t1,0xffffa
2300c346:	2520                	fld	fs0,72(a0)
2300c348:	0d78                	addi	a4,sp,668
2300c34a:	000a                	c.slli	zero,0x2
2300c34c:	6772                	flw	fa4,28(sp)
2300c34e:	2862                	fld	fa6,24(sp)
2300c350:	7525                	lui	a0,0xfffe9
2300c352:	252c                	fld	fa1,72(a0)
2300c354:	2c75                	jal	2300c610 <strtol+0x396>
2300c356:	7525                	lui	a0,0xfffe9
2300c358:	0d29                	addi	s10,s10,10
2300c35a:	000a                	c.slli	zero,0x2
2300c35c:	6564                	flw	fs1,76(a0)
2300c35e:	7562                	flw	fa0,56(sp)
2300c360:	6f6c5f67          	0x6f6c5f67
2300c364:	00000067          	jr	zero # 0 <__metal_chicken_bit>
2300c368:	776f6873          	csrrsi	a6,0x776,30
2300c36c:	6620                	flw	fs0,72(a2)
2300c36e:	616c                	flw	fa1,68(a0)
2300c370:	63206873          	csrrsi	a6,0x632,0
2300c374:	6766                	flw	fa4,88(sp)
2300c376:	0d3a                	slli	s10,s10,0xe
2300c378:	000a                	c.slli	zero,0x2
2300c37a:	0000                	unimp
2300c37c:	656a                	flw	fa0,152(sp)
2300c37e:	6564                	flw	fs1,76(a0)
2300c380:	64692063          	0x64692063
2300c384:	2020                	fld	fs0,64(s0)
2300c386:	3020                	fld	fs0,96(s0)
2300c388:	2578                	fld	fa4,200(a0)
2300c38a:	3630                	fld	fa2,104(a2)
2300c38c:	0d58                	addi	a4,sp,660
2300c38e:	000a                	c.slli	zero,0x2
2300c390:	696d                	lui	s2,0x1b
2300c392:	2064                	fld	fs1,192(s0)
2300c394:	2020                	fld	fs0,64(s0)
2300c396:	2020                	fld	fs0,64(s0)
2300c398:	2020                	fld	fs0,64(s0)
2300c39a:	2020                	fld	fs0,64(s0)
2300c39c:	2020                	fld	fs0,64(s0)
2300c39e:	3020                	fld	fs0,96(s0)
2300c3a0:	2578                	fld	fa4,200(a0)
2300c3a2:	3230                	fld	fa2,96(a2)
2300c3a4:	0d58                	addi	a4,sp,660
2300c3a6:	000a                	c.slli	zero,0x2
2300c3a8:	6f69                	lui	t5,0x1a
2300c3aa:	6f6d                	lui	t5,0x1b
2300c3ac:	6564                	flw	fs1,76(a0)
2300c3ae:	2020                	fld	fs0,64(s0)
2300c3b0:	2020                	fld	fs0,64(s0)
2300c3b2:	2020                	fld	fs0,64(s0)
2300c3b4:	2020                	fld	fs0,64(s0)
2300c3b6:	3020                	fld	fs0,96(s0)
2300c3b8:	2578                	fld	fa4,200(a0)
2300c3ba:	3230                	fld	fa2,96(a2)
2300c3bc:	0d58                	addi	a4,sp,660
2300c3be:	000a                	c.slli	zero,0x2
2300c3c0:	206b6c63          	bltu	s6,t1,2300c5d8 <strtol+0x35e>
2300c3c4:	6564                	flw	fs1,76(a0)
2300c3c6:	616c                	flw	fa1,68(a0)
2300c3c8:	2079                	jal	2300c456 <strtol+0x1dc>
2300c3ca:	2020                	fld	fs0,64(s0)
2300c3cc:	2020                	fld	fs0,64(s0)
2300c3ce:	3020                	fld	fs0,96(s0)
2300c3d0:	2578                	fld	fa4,200(a0)
2300c3d2:	3230                	fld	fa2,96(a2)
2300c3d4:	0d58                	addi	a4,sp,660
2300c3d6:	000a                	c.slli	zero,0x2
2300c3d8:	206b6c63          	bltu	s6,t1,2300c5f0 <strtol+0x376>
2300c3dc:	6e69                	lui	t3,0x1a
2300c3de:	6576                	flw	fa0,92(sp)
2300c3e0:	7472                	flw	fs0,60(sp)
2300c3e2:	2020                	fld	fs0,64(s0)
2300c3e4:	2020                	fld	fs0,64(s0)
2300c3e6:	3020                	fld	fs0,96(s0)
2300c3e8:	2578                	fld	fa4,200(a0)
2300c3ea:	3230                	fld	fa2,96(a2)
2300c3ec:	0d58                	addi	a4,sp,660
2300c3ee:	000a                	c.slli	zero,0x2
2300c3f0:	6572                	flw	fa0,28(sp)
2300c3f2:	6461                	lui	s0,0x18
2300c3f4:	7220                	flw	fs0,96(a2)
2300c3f6:	6765                	lui	a4,0x19
2300c3f8:	6320                	flw	fs0,64(a4)
2300c3fa:	646d                	lui	s0,0x1b
2300c3fc:	2030                	fld	fa2,64(s0)
2300c3fe:	3020                	fld	fs0,96(s0)
2300c400:	2578                	fld	fa4,200(a0)
2300c402:	3230                	fld	fa2,96(a2)
2300c404:	0d58                	addi	a4,sp,660
2300c406:	000a                	c.slli	zero,0x2
2300c408:	6572                	flw	fa0,28(sp)
2300c40a:	6461                	lui	s0,0x18
2300c40c:	7220                	flw	fs0,96(a2)
2300c40e:	6765                	lui	a4,0x19
2300c410:	6320                	flw	fs0,64(a4)
2300c412:	646d                	lui	s0,0x1b
2300c414:	2031                	jal	2300c420 <strtol+0x1a6>
2300c416:	3020                	fld	fs0,96(s0)
2300c418:	2578                	fld	fa4,200(a0)
2300c41a:	3230                	fld	fa2,96(a2)
2300c41c:	0d58                	addi	a4,sp,660
2300c41e:	000a                	c.slli	zero,0x2
2300c420:	74697277          	0x74697277
2300c424:	2065                	jal	2300c4cc <strtol+0x252>
2300c426:	6572                	flw	fa0,28(sp)
2300c428:	6d632067          	0x6d632067
2300c42c:	3064                	fld	fs1,224(s0)
2300c42e:	3020                	fld	fs0,96(s0)
2300c430:	2578                	fld	fa4,200(a0)
2300c432:	3230                	fld	fa2,96(a2)
2300c434:	0d58                	addi	a4,sp,660
2300c436:	000a                	c.slli	zero,0x2
2300c438:	74697277          	0x74697277
2300c43c:	2065                	jal	2300c4e4 <strtol+0x26a>
2300c43e:	6572                	flw	fa0,28(sp)
2300c440:	6d632067          	0x6d632067
2300c444:	3164                	fld	fs1,224(a0)
2300c446:	3020                	fld	fs0,96(s0)
2300c448:	2578                	fld	fa4,200(a0)
2300c44a:	3230                	fld	fa2,96(a2)
2300c44c:	0d58                	addi	a4,sp,660
2300c44e:	000a                	c.slli	zero,0x2
2300c450:	6571                	lui	a0,0x1c
2300c452:	7720                	flw	fs0,104(a4)
2300c454:	6972                	flw	fs2,28(sp)
2300c456:	6574                	flw	fa3,76(a0)
2300c458:	6c20                	flw	fs0,88(s0)
2300c45a:	6e65                	lui	t3,0x19
2300c45c:	2020                	fld	fs0,64(s0)
2300c45e:	3020                	fld	fs0,96(s0)
2300c460:	2578                	fld	fa4,200(a0)
2300c462:	3230                	fld	fa2,96(a2)
2300c464:	0d58                	addi	a4,sp,660
2300c466:	000a                	c.slli	zero,0x2
2300c468:	61657263          	bgeu	a0,s6,2300ca6c <dma_channel_base+0x188>
2300c46c:	2064                	fld	fs1,192(s0)
2300c46e:	70707573          	csrrci	a0,0x707,0
2300c472:	2074726f          	jal	tp,23053e78 <__dtcm_load_addr+0x45efc>
2300c476:	3020                	fld	fs0,96(s0)
2300c478:	2578                	fld	fa4,200(a0)
2300c47a:	3230                	fld	fa2,96(a2)
2300c47c:	0d58                	addi	a4,sp,660
2300c47e:	000a                	c.slli	zero,0x2
2300c480:	61657263          	bgeu	a0,s6,2300ca84 <dma_channel_base+0x1a0>
2300c484:	2064                	fld	fs1,192(s0)
2300c486:	65646f63          	bltu	s0,s6,2300cae4 <__sf_fake_stdout+0x18>
2300c48a:	2020                	fld	fs0,64(s0)
2300c48c:	2020                	fld	fs0,64(s0)
2300c48e:	3020                	fld	fs0,96(s0)
2300c490:	2578                	fld	fa4,200(a0)
2300c492:	3230                	fld	fa2,96(a2)
2300c494:	0d58                	addi	a4,sp,660
2300c496:	000a                	c.slli	zero,0x2
2300c498:	7562                	flw	fa0,56(sp)
2300c49a:	7372                	flw	ft6,60(sp)
2300c49c:	2074                	fld	fa3,192(s0)
2300c49e:	70617277          	0x70617277
2300c4a2:	6320                	flw	fs0,64(a4)
2300c4a4:	646d                	lui	s0,0x1b
2300c4a6:	3020                	fld	fs0,96(s0)
2300c4a8:	2578                	fld	fa4,200(a0)
2300c4aa:	3230                	fld	fa2,96(a2)
2300c4ac:	0d58                	addi	a4,sp,660
2300c4ae:	000a                	c.slli	zero,0x2
2300c4b0:	2d2d                	jal	2300caea <__sf_fake_stdout+0x1e>
2300c4b2:	2d2d                	jal	2300caec <__sf_fake_stdout+0x20>
2300c4b4:	2d2d                	jal	2300caee <__sf_fake_stdout+0x22>
2300c4b6:	2d2d                	jal	2300caf0 <__sf_fake_stdout+0x24>
2300c4b8:	2d2d                	jal	2300caf2 <__sf_fake_stdout+0x26>
2300c4ba:	2d2d                	jal	2300caf4 <__sf_fake_stdout+0x28>
2300c4bc:	2d2d                	jal	2300caf6 <__sf_fake_stdout+0x2a>
2300c4be:	2d2d                	jal	2300caf8 <__sf_fake_stdout+0x2c>
2300c4c0:	2d2d                	jal	2300cafa <__sf_fake_stdout+0x2e>
2300c4c2:	0d2d                	addi	s10,s10,11
2300c4c4:	000a                	c.slli	zero,0x2
2300c4c6:	0000                	unimp
2300c4c8:	7964                	flw	fs1,116(a0)
2300c4ca:	616e                	flw	ft2,216(sp)
2300c4cc:	696d                	lui	s2,0x1b
2300c4ce:	656d2063          	0x656d2063
2300c4d2:	6f6d                	lui	t5,0x1b
2300c4d4:	7972                	flw	fs2,60(sp)
2300c4d6:	6920                	flw	fs0,80(a0)
2300c4d8:	696e                	flw	fs2,216(sp)
2300c4da:	2074                	fld	fa3,192(s0)
2300c4dc:	63637573          	csrrci	a0,0x636,6
2300c4e0:	7365                	lui	t1,0xffff9
2300c4e2:	65682c73          	csrrs	s8,0x656,a6
2300c4e6:	7061                	c.lui	zero,0xffff8
2300c4e8:	7320                	flw	fs0,96(a4)
2300c4ea:	7a69                	lui	s4,0xffffa
2300c4ec:	2065                	jal	2300c594 <strtol+0x31a>
2300c4ee:	203d                	jal	2300c51c <strtol+0x2a2>
2300c4f0:	6425                	lui	s0,0x9
2300c4f2:	4b20                	lw	s0,80(a4)
2300c4f4:	7962                	flw	fs2,56(sp)
2300c4f6:	6574                	flw	fa3,76(a0)
2300c4f8:	0d20                	addi	s0,sp,664
2300c4fa:	000a                	c.slli	zero,0x2
2300c4fc:	6c66                	flw	fs8,88(sp)
2300c4fe:	7361                	lui	t1,0xffff8
2300c500:	2068                	fld	fa0,192(s0)
2300c502:	6e69                	lui	t3,0x1a
2300c504:	7469                	lui	s0,0xffffa
2300c506:	6620                	flw	fs0,72(a2)
2300c508:	6961                	lui	s2,0x18
2300c50a:	216c                	fld	fa1,192(a0)
2300c50c:	2121                	jal	2300c914 <dma_channel_base+0x30>
2300c50e:	0a0d                	addi	s4,s4,3
2300c510:	0000                	unimp
2300c512:	0000                	unimp
2300c514:	7375                	lui	t1,0xffffd
2300c516:	0062                	c.slli	zero,0x18
2300c518:	2020                	fld	fs0,64(s0)
2300c51a:	5f5f 5f5f 2020      	0x20205f5f5f5f
2300c520:	2020                	fld	fs0,64(s0)
2300c522:	2020                	fld	fs0,64(s0)
2300c524:	2020                	fld	fs0,64(s0)
2300c526:	2020                	fld	fs0,64(s0)
2300c528:	2020                	fld	fs0,64(s0)
2300c52a:	2020                	fld	fs0,64(s0)
2300c52c:	5f20                	lw	s0,120(a4)
2300c52e:	205f 5f20 205f      	0x205f5f20205f
2300c534:	2020                	fld	fs0,64(s0)
2300c536:	2020                	fld	fs0,64(s0)
2300c538:	5f20                	lw	s0,120(a4)
2300c53a:	2020                	fld	fs0,64(s0)
2300c53c:	2020                	fld	fs0,64(s0)
2300c53e:	2020                	fld	fs0,64(s0)
2300c540:	5f20                	lw	s0,120(a4)
2300c542:	2020                	fld	fs0,64(s0)
2300c544:	2020                	fld	fs0,64(s0)
2300c546:	2020                	fld	fs0,64(s0)
2300c548:	5f20                	lw	s0,120(a4)
2300c54a:	2020                	fld	fs0,64(s0)
2300c54c:	2020                	fld	fs0,64(s0)
2300c54e:	0d20                	addi	s0,sp,664
2300c550:	000a                	c.slli	zero,0x2
2300c552:	0000                	unimp
2300c554:	7c20                	flw	fs0,120(s0)
2300c556:	2020                	fld	fs0,64(s0)
2300c558:	205f 205c 2020      	0x2020205c205f
2300c55e:	2020                	fld	fs0,64(s0)
2300c560:	2020                	fld	fs0,64(s0)
2300c562:	2020                	fld	fs0,64(s0)
2300c564:	2020                	fld	fs0,64(s0)
2300c566:	2020                	fld	fs0,64(s0)
2300c568:	7c5f202f          	0x7c5f202f
2300c56c:	7c5f202f          	0x7c5f202f
2300c570:	2020                	fld	fs0,64(s0)
2300c572:	2020                	fld	fs0,64(s0)
2300c574:	207c                	fld	fa5,192(s0)
2300c576:	207c                	fld	fa5,192(s0)
2300c578:	2020                	fld	fs0,64(s0)
2300c57a:	2020                	fld	fs0,64(s0)
2300c57c:	207c                	fld	fa5,192(s0)
2300c57e:	207c                	fld	fa5,192(s0)
2300c580:	2020                	fld	fs0,64(s0)
2300c582:	2020                	fld	fs0,64(s0)
2300c584:	207c                	fld	fa5,192(s0)
2300c586:	207c                	fld	fa5,192(s0)
2300c588:	2020                	fld	fs0,64(s0)
2300c58a:	0d20                	addi	s0,sp,664
2300c58c:	000a                	c.slli	zero,0x2
2300c58e:	0000                	unimp
2300c590:	7c20                	flw	fs0,120(s0)
2300c592:	7c20                	flw	fs0,120(s0)
2300c594:	295f 7c20 5f20      	0x5f207c20295f
2300c59a:	5f5f 2020 205f      	0x205f20205f5f
2300c5a0:	2020                	fld	fs0,64(s0)
2300c5a2:	7c5f 7c20 7c5f      	0x7c5f7c207c5f
2300c5a8:	7c20                	flw	fs0,120(s0)
2300c5aa:	205f 5f5f 5f20      	0x5f205f5f205f
2300c5b0:	207c                	fld	fa5,192(s0)
2300c5b2:	207c                	fld	fa5,192(s0)
2300c5b4:	5f5f 205f 207c      	0x207c205f5f5f
2300c5ba:	207c                	fld	fa5,192(s0)
2300c5bc:	5f5f 5f20 207c      	0x207c5f205f5f
2300c5c2:	5f7c                	lw	a5,124(a4)
2300c5c4:	205f 0d20 000a      	0xa0d20205f
2300c5ca:	0000                	unimp
2300c5cc:	7c20                	flw	fs0,120(s0)
2300c5ce:	2020                	fld	fs0,64(s0)
2300c5d0:	205f 203c 202f      	0x202f203c205f
2300c5d6:	205f 7c5c 7c20      	0x7c207c5c205f
2300c5dc:	7c20                	flw	fs0,120(s0)
2300c5de:	7c20                	flw	fs0,120(s0)
2300c5e0:	2020                	fld	fs0,64(s0)
2300c5e2:	7c5f 2020 2f5f      	0x2f5f20207c5f
2300c5e8:	5f20                	lw	s0,120(a4)
2300c5ea:	2060                	fld	fs0,192(s0)
2300c5ec:	207c                	fld	fa5,192(s0)
2300c5ee:	2f7c                	fld	fa5,216(a4)
2300c5f0:	5f20                	lw	s0,120(a4)
2300c5f2:	5c20                	lw	s0,120(s0)
2300c5f4:	207c                	fld	fa5,192(s0)
2300c5f6:	2f7c                	fld	fa5,216(a4)
2300c5f8:	5f20                	lw	s0,120(a4)
2300c5fa:	2060                	fld	fs0,192(s0)
2300c5fc:	207c                	fld	fa5,192(s0)
2300c5fe:	5c205f27          	vsoxseg3ei256.v	v30,(zero),v2,v0.t
2300c602:	0d20                	addi	s0,sp,664
2300c604:	000a                	c.slli	zero,0x2
2300c606:	0000                	unimp
2300c608:	7c20                	flw	fs0,120(s0)
2300c60a:	7c20                	flw	fs0,120(s0)
2300c60c:	295f 7c20 2820      	0x28207c20295f
2300c612:	295f 7c20 7c20      	0x7c207c20295f
2300c618:	7c5f 7c20 7c20      	0x7c207c207c5f
2300c61e:	7c20                	flw	fs0,120(s0)
2300c620:	7c20                	flw	fs0,120(s0)
2300c622:	207c                	fld	fa5,192(s0)
2300c624:	5f28                	lw	a0,120(a4)
2300c626:	207c                	fld	fa5,192(s0)
2300c628:	207c                	fld	fa5,192(s0)
2300c62a:	207c                	fld	fa5,192(s0)
2300c62c:	5f28                	lw	a0,120(a4)
2300c62e:	2029                	jal	2300c638 <strtol+0x3be>
2300c630:	207c                	fld	fa5,192(s0)
2300c632:	207c                	fld	fa5,192(s0)
2300c634:	5f28                	lw	a0,120(a4)
2300c636:	207c                	fld	fa5,192(s0)
2300c638:	207c                	fld	fa5,192(s0)
2300c63a:	5f7c                	lw	a5,124(a4)
2300c63c:	2029                	jal	2300c646 <strtol+0x3cc>
2300c63e:	0d7c                	addi	a5,sp,668
2300c640:	000a                	c.slli	zero,0x2
2300c642:	0000                	unimp
2300c644:	7c20                	flw	fs0,120(s0)
2300c646:	5f5f 5f5f 202f      	0x202f5f5f5f5f
2300c64c:	5f5c                	lw	a5,60(a4)
2300c64e:	5f5f 202f 5f5c      	0x5f5c202f5f5f
2300c654:	2c5f 7c5f 7c5f      	0x7c5f7c5f2c5f
2300c65a:	7c20                	flw	fs0,120(s0)
2300c65c:	7c5f 5c20 5f5f      	0x5f5f5c207c5f
2300c662:	5f2c                	lw	a1,120(a4)
2300c664:	5f7c                	lw	a5,124(a4)
2300c666:	5c7c                	lw	a5,124(s0)
2300c668:	5f5f 2f5f 5f7c      	0x5f7c2f5f5f5f
2300c66e:	5c7c                	lw	a5,124(s0)
2300c670:	5f5f 5f2c 5f7c      	0x5f7c5f2c5f5f
2300c676:	5f2e                	lw	t5,232(sp)
2300c678:	2f5f 0d20 000a      	0xa0d202f5f
2300c67e:	0000                	unimp
2300c680:	614d                	addi	sp,sp,176
2300c682:	2079                	jal	2300c710 <af_pin_table+0x40>
2300c684:	3232                	fld	ft4,296(sp)
2300c686:	3220                	fld	fs0,96(a2)
2300c688:	3230                	fld	fa2,96(a2)
2300c68a:	0035                	c.nop	13
2300c68c:	3831                	jal	2300bea8 <shell_init+0x1c>
2300c68e:	313a                	fld	ft2,424(sp)
2300c690:	3a31                	jal	2300bfac <_strtoll_l.constprop.0+0x32>
2300c692:	3431                	jal	2300c09e <_strtoll_l.constprop.0+0x124>
2300c694:	0000                	unimp
2300c696:	0000                	unimp
2300c698:	7542                	flw	fa0,48(sp)
2300c69a:	6c69                	lui	s8,0x1a
2300c69c:	3a64                	fld	fs1,240(a2)
2300c69e:	7325                	lui	t1,0xfffe9
2300c6a0:	252c                	fld	fa1,72(a0)
2300c6a2:	000a0d73          	0xa0d73
2300c6a6:	0000                	unimp
2300c6a8:	79706f43          	fmadd.s	ft10,ft0,fs7,fa5,unknown
2300c6ac:	6972                	flw	fs2,28(sp)
2300c6ae:	20746867          	0x20746867
2300c6b2:	6328                	flw	fa0,64(a4)
2300c6b4:	2029                	jal	2300c6be <strtol+0x444>
2300c6b6:	3032                	fld	ft0,296(sp)
2300c6b8:	3132                	fld	ft2,296(sp)
2300c6ba:	4220                	lw	s0,64(a2)
2300c6bc:	6666756f          	jal	a0,23073d22 <__dtcm_load_addr+0x65da6>
2300c6c0:	6c61                	lui	s8,0x18
2300c6c2:	62616c6f          	jal	s8,23022ce8 <__dtcm_load_addr+0x14d6c>
2300c6c6:	7420                	flw	fs0,104(s0)
2300c6c8:	6165                	addi	sp,sp,112
2300c6ca:	0d6d                	addi	s10,s10,27
2300c6cc:	000a                	c.slli	zero,0x2
	...

2300c6d0 <af_pin_table>:
2300c6d0:	0000 00ff 0001 00ff 0002 00ff 0007 00d0     ................
2300c6e0:	0008 00d0 0009 00ff 000e 00f2 000f 00f3     ................
2300c6f0:	0011 00ff 0017 00ff 0018 00ff 0019 00ff     ................
2300c700:	001a 00ff 001b 00ff 001c 00ff 7254 7061     ............Trap
2300c710:	485f 6e61 6c64 7265 0a0d 0000 636d 7561     _Handler....mcau
2300c720:	6573 253d 3830 0d78 000a 0000 656d 6370     se=%08x.....mepc
2300c730:	253a 3830 0d78 000a 746d 6176 3a6c 3025     :%08x...mtval:%0
2300c740:	7838 0a0d 0000 0000 6e49 7473 7572 7463     8x......Instruct
2300c750:	6f69 206e 6361 6563 7373 6620 7561 746c     ion access fault
2300c760:	0a0d 0000 6c49 656c 6167 206c 6e69 7473     ....Illegal inst
2300c770:	7572 7463 6f69 0d6e 000a 0000 7242 6165     ruction.....Brea
2300c780:	706b 696f 746e 0a0d 0000 0000 6f4c 6461     kpoint......Load
2300c790:	6120 6464 6572 7373 6d20 7369 6c61 6769      address misalig
2300c7a0:	656e 0d64 000a 0000 6f4c 6461 6120 6363     ned.....Load acc
2300c7b0:	7365 2073 6166 6c75 0d74 000a 7453 726f     ess fault...Stor
2300c7c0:	2f65 4d41 204f 6461 7264 7365 2073 696d     e/AMO address mi
2300c7d0:	6173 696c 6e67 6465 0a0d 0000 7453 726f     saligned....Stor
2300c7e0:	2f65 4d41 204f 6361 6563 7373 6620 7561     e/AMO access fau
2300c7f0:	746c 0a0d 0000 0000 6e45 6976 6f72 6d6e     lt......Environm
2300c800:	6e65 2074 6163 6c6c 6620 6f72 206d 2d55     ent call from U-
2300c810:	6f6d 6564 0a0d 0000 6e45 6976 6f72 6d6e     mode....Environm
2300c820:	6e65 2074 6163 6c6c 6620 6f72 206d 2d4d     ent call from M-
2300c830:	6f6d 6564 0a0d 0000 6143 7375 2065 756e     mode....Cause nu
2300c840:	3d6d 6425 0a0d 0000 7845 6563 7470 6f69     m=%d....Exceptio
2300c850:	206e 6873 756f 646c 6e20 746f 6220 2065     n should not be 
2300c860:	6568 6572 0a0d 0000 6e49 6574 7272 7075     here....Interrup
2300c870:	2074 756e 3a6d 6425 4920 5152 6148 646e     t num:%d IRQHand
2300c880:	656c 2072 6f6e 2074 6e69 7473 6c61 656c     ler not installe
2300c890:	0d64 000a 6550 6972 6870 7265 6c61 4920     d...Peripheral I
2300c8a0:	746e 7265 7572 7470 6e20 6d75 253a 2064     nterrupt num:%d 
2300c8b0:	0a0d 0000 6e55 7865 6570 7463 6465 6920     ....Unexpected i
2300c8c0:	746e 7265 7572 7470 6e20 6d75 253a 0d64     nterrupt num:%d.
2300c8d0:	000a 0000                                   ....

2300c8d4 <uartAddr>:
2300c8d4:	a000 4000 a100 4000                         ...@...@

2300c8dc <CSWTCH.19>:
2300c8dc:	0200 0301 0301 0001                         ........

2300c8e4 <dma_channel_base>:
2300c8e4:	c100 4000 c200 4000 c300 4000 c400 4000     ...@...@...@...@
2300c8f4:	c500 4000 c600 4000 c700 4000 c800 4000     ...@...@...@...@
2300c904:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
2300c914:	0030 0000 3130 3332 3534 3736 3938 4241     0...0123456789AB
2300c924:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
2300c934:	3938 6261 6463 6665 0000 0000 adbc ffff     89abcdef........
2300c944:	add2 ffff ad92 ffff ad92 ffff ad92 ffff     ................
2300c954:	ad92 ffff add2 ffff ad92 ffff ad92 ffff     ................
2300c964:	ad92 ffff ad92 ffff af2a ffff ae10 ffff     ........*.......
2300c974:	aefc ffff ad92 ffff ad92 ffff af5a ffff     ............Z...
2300c984:	ad92 ffff ae10 ffff ad92 ffff ad92 ffff     ................
2300c994:	af04 ffff 6e49 6966 696e 7974 0000 0000     ....Infinity....
2300c9a4:	614e 004e 4552 4e45 2054 616d 6c6c 636f     NaN.REENT malloc
2300c9b4:	7320 6375 6563 6465 6465 0000 732f 7263      succeeded../scr
2300c9c4:	7461 6863 6a2f 6e65 696b 736e 772f 726f     atch/jenkins/wor
2300c9d4:	736b 6170 6563 742f 7070 662d 6572 6465     kspace/tpp-freed
2300c9e4:	6d6f 742d 6f6f 736c 742f 7070 3330 2d2d     om-tools/tpp03--
2300c9f4:	7562 6c69 2d64 6962 616e 7972 702d 6361     build-binary-pac
2300ca04:	616b 6567 2d73 702d 7261 6d61 7465 7265     kages--parameter
2300ca14:	7a69 6465 6f2f 6a62 782f 3638 365f 2d34     ized/obj/x86_64-
2300ca24:	3677 2d34 696d 676e 3377 2f32 7562 6c69     w64-mingw32/buil
2300ca34:	2f64 6972 6373 3676 2d34 6e75 6e6b 776f     d/riscv64-unknow
2300ca44:	2d6e 6c65 2d66 6367 2f63 6972 6373 2d76     n-elf-gcc/riscv-
2300ca54:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
2300ca64:	6362 732f 6474 696c 2f62 7464 616f 632e     bc/stdlib/dtoa.c
2300ca74:	0000 0000 6142 6c6c 636f 7320 6375 6563     ....Balloc succe
2300ca84:	6465 6465 0000 0000                         eded....

2300ca8c <__sf_fake_stderr>:
	...

2300caac <__sf_fake_stdin>:
	...

2300cacc <__sf_fake_stdout>:
	...
2300caec:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
2300cafc:	732f 7263 7461 6863 6a2f 6e65 696b 736e     /scratch/jenkins
2300cb0c:	772f 726f 736b 6170 6563 742f 7070 662d     /workspace/tpp-f
2300cb1c:	6572 6465 6d6f 742d 6f6f 736c 742f 7070     reedom-tools/tpp
2300cb2c:	3330 2d2d 7562 6c69 2d64 6962 616e 7972     03--build-binary
2300cb3c:	702d 6361 616b 6567 2d73 702d 7261 6d61     -packages--param
2300cb4c:	7465 7265 7a69 6465 6f2f 6a62 782f 3638     eterized/obj/x86
2300cb5c:	365f 2d34 3677 2d34 696d 676e 3377 2f32     _64-w64-mingw32/
2300cb6c:	7562 6c69 2f64 6972 6373 3676 2d34 6e75     build/riscv64-un
2300cb7c:	6e6b 776f 2d6e 6c65 2d66 6367 2f63 6972     known-elf-gcc/ri
2300cb8c:	6373 2d76 656e 6c77 6269 6e2f 7765 696c     scv-newlib/newli
2300cb9c:	2f62 696c 6362 732f 6474 696c 2f62 706d     b/libc/stdlib/mp
2300cbac:	6572 2e63 0063 0000 0000 0000               rec.c.......

2300cbb8 <__mprec_bigtens>:
2300cbb8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
2300cbc8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
2300cbd8:	bf3c 7f73 4fdd 7515                         <.s..O.u

2300cbe0 <__mprec_tens>:
2300cbe0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
2300cbf0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
2300cc00:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
2300cc10:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
2300cc20:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
2300cc30:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
2300cc40:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
2300cc50:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
2300cc60:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
2300cc70:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
2300cc80:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
2300cc90:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
2300cca0:	9db4 79d9 7843 44ea                         ...yCx.D

2300cca8 <p05.0>:
2300cca8:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
2300ccb8:	0020 0000 6c68 004c 6665 4567 4746 0000      ...hlL.efgEFG..
2300ccc8:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
2300ccd8:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
2300cce8:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
2300ccf8:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...

2300cd08 <_ctype_>:
2300cd08:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
2300cd18:	2020 2020 2020 2020 2020 2020 2020 2020                     
2300cd28:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
2300cd38:	0410 0404 0404 0404 0404 1004 1010 1010     ................
2300cd48:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
2300cd58:	0101 0101 0101 0101 0101 0101 1010 1010     ................
2300cd68:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
2300cd78:	0202 0202 0202 0202 0202 0202 1010 1010     ................
2300cd88:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
2300ce0c:	6552 6461 4420 5441 2041 6150 6b63 7465     Read DATA Packet
2300ce1c:	6620 6961 656c 0d64 000a 0000 6d6d 6568      failed.....mmhe
2300ce2c:	7061 6d20 6c61 6f6c 2063 7265 6f72 3a72     ap malloc error:
2300ce3c:	7264 5f76 6d6d 6568 7061 252c 0d64 000a     drv_mmheap,%d...
2300ce4c:	6d6d 6568 7061 6d20 6c61 6f6c 2063 6166     mmheap malloc fa
2300ce5c:	6c69 643a 7672 6d5f 686d 6165 2c70 6425     il:drv_mmheap,%d
2300ce6c:	0a0d 0000 6e55 6168 646e 656c 2064 4443     ....Unhandled CD
2300ce7c:	2043 6c43 7361 2073 5262 7165 6575 7473     C Class bRequest
2300ce8c:	3020 2578 3230 0d78 000a 0000 5355 2042      0x%02x.....USB 
2300ce9c:	7277 7469 2065 6164 6174 6620 6961 656c     write data faile
2300ceac:	0d64 000a 5355 2042 7277 7469 2065 6c7a     d...USB write zl
2300cebc:	2070 6166 6c69 6465 0a0d 0000 6572 6461     p failed....read
2300cecc:	4d20 2053 534f 3220 302e 6420 7365 7263      MS OS 2.0 descr
2300cedc:	7069 6f74 2072 7473 6972 676e 0a0d 0000     iptor string....
2300ceec:	6572 6461 4220 534f 6420 7365 7263 7069     read BOS descrip
2300cefc:	6f74 2072 7473 6972 676e 0a0d 0000 0000     tor string......
2300cf0c:	6544 6976 6563 6e20 746f 6320 6e6f 6966     Device not confi
2300cf1c:	7567 6572 2064 202d 6e69 6176 696c 2064     gured - invalid 
2300cf2c:	6f63 666e 6769 7275 7461 6f69 0d6e 000a     configuration...
2300cf3c:	704f 6e65 6520 646e 6f70 6e69 3a74 7830     Open endpoint:0x
2300cf4c:	7825 7420 7079 3a65 7525 6d20 7370 253a     %x type:%u mps:%
2300cf5c:	0d75 000a 6c49 656c 6167 206c 6564 6976     u...Illegal devi
2300cf6c:	6563 7220 7165 3020 2578 3230 0d78 000a     ce req 0x%02x...
2300cf7c:	6c43 736f 2065 6e65 7064 696f 746e 303a     Close endpoint:0
2300cf8c:	2578 2078 7974 6570 253a 0d75 000a 0000     x%x type:%u.....
2300cf9c:	6c49 656c 6167 206c 6e69 6574 6672 6361     Illegal interfac
2300cfac:	2065 6572 2071 7830 3025 7832 0a0d 0000     e req 0x%02x....
2300cfbc:	7065 253a 2078 6c63 6165 2072 6168 746c     ep:%x clear halt
2300cfcc:	0a0d 0000 7065 253a 2078 6573 2074 6168     ....ep:%x set ha
2300cfdc:	746c 0a0d 0000 0000 6c49 656c 6167 206c     lt......Illegal 
2300cfec:	7065 7220 7165 3020 2578 3230 0d78 000a     ep req 0x%02x...
2300cffc:	6148 646e 656c 2072 7245 6f72 2072 6425     Handler Error %d
2300d00c:	0a0d 0000 6553 7574 3a70 6220 526d 7165     ....Setup: bmReq
2300d01c:	6575 7473 7954 6570 3020 2578 3230 2c78     uestType 0x%02x,
2300d02c:	6220 6552 7571 7365 2074 7830 3025 7832      bRequest 0x%02x
2300d03c:	202c 5677 6c61 6575 3020 2578 3430 2c78     , wValue 0x%04x,
2300d04c:	7720 6e49 6564 2078 7830 3025 7834 202c      wIndex 0x%04x, 
2300d05c:	4c77 6e65 7467 2068 7830 3025 7834 0a0d     wLength 0x%04x..
2300d06c:	0000 0000 6567 2074 6f43 706d 7461 4920     ....get Compat I
2300d07c:	0d44 000a 6567 2074 6f43 706d 7461 6920     D...get Compat i
2300d08c:	2064 7270 706f 7265 6974 7365 0a0d 0000     d properties....
2300d09c:	6e75 6e6b 776f 206e 6576 646e 726f 6320     unknown vendor c
2300d0ac:	646f 0d65 000a 0000 4547 2054 534d 4f20     ode.....GET MS O
2300d0bc:	2053 2e32 2030 6544 6373 6972 7470 726f     S 2.0 Descriptor
2300d0cc:	0a0d 0000 6564 6373 6972 7470 726f 3c20     ....descriptor <
2300d0dc:	7974 6570 253a 2c78 6e69 6564 3a78 7825     type:%x,index:%x
2300d0ec:	203e 6f6e 2074 6f66 6e75 2164 0a0d 0000     > not found!....
2300d0fc:	6552 6461 5320 7465 7075 5020 6361 656b     Read Setup Packe
2300d10c:	2074 6166 6c69 6465 0a0d 0000 6552 7571     t failed....Requ
2300d11c:	7365 2074 7562 6666 7265 7420 6f6f 7320     est buffer too s
2300d12c:	616d 6c6c 0a0d 0000 7375 6462 735f 7465     mall....usbd_set
2300d13c:	7075 725f 7165 6575 7473 685f 6e61 6c64     up_request_handl
2300d14c:	7265 6620 6961 656c 0d64 000a 7375 6462     er failed...usbd
2300d15c:	735f 7465 7075 725f 7165 6575 7473 685f     _setup_request_h
2300d16c:	6e61 6c64 7265 2031 6166 6c69 6465 0a0d     andler1 failed..
2300d17c:	0000 0000 7065 5f30 6164 6174 625f 6675     ....ep0_data_buf
2300d18c:	725f 7365 6469 6575 6920 2073 6f6e 2074     _residue is not 
2300d19c:	657a 6f72 0a0d 0000 5355 2042 6e75 6e6b     zero....USB unkn
2300d1ac:	776f 206e 7665 6e65 3a74 2520 0d64 000a     own event: %d...
2300d1bc:	6873 6c65 206c 6f63 6d6d 6e61 7364 6c20     shell commands l
2300d1cc:	7369 3a74 0a0d 0000 5f5f 6d63 5f64 0000     ist:....__cmd_..
2300d1dc:	7325 0a0d 0000 0000 6f62 6675 6166 6f6c     %s......bouffalo
2300d1ec:	616c 2062 0000 0000 5b1b 4b32 000d 0000     lab .....[2K....
2300d1fc:	7325 0000 7277 7469 2065 656d 6f6d 7972     %s..write memory
2300d20c:	203a 7830 3234 3030 3030 3030 3020 6178     : 0x42000000 0xa
2300d21c:	6362 2064 3031 0a0d 0000 0000 6572 6461     bcd 10......read
2300d22c:	6d20 6d65 726f 3a79 3020 3478 3032 3030      memory: 0x42000
2300d23c:	3030 2030 3031 0a0d 0000 0000 7830 3025     000 10......0x%0
2300d24c:	7838 0a0d 0000 0000 6f54 206f 616d 796e     8x......Too many
2300d25c:	6120 6772 2073 2021 6557 6f20 6c6e 2079      args ! We only 
2300d26c:	7355 3a65 0a0d 0000 7325 0020 7325 203a     Use:....%s .%s: 
2300d27c:	6f63 6d6d 6e61 2064 6f6e 2074 6f66 6e75     command not foun
2300d28c:	2e64 0a0d 0000 0000 0008 0000 6325 0000     d...........%c..
2300d29c:	2508 2073 0820 0000 2008 0008               .%s  .... ..

2300d2a8 <__fsym___cmd_help_name>:
2300d2a8:	5f5f 6d63 5f64 6568 706c 0000               __cmd_help..

2300d2b4 <__fsym___cmd_memtrace_name>:
2300d2b4:	5f5f 6d63 5f64 656d 746d 6172 6563 0000     __cmd_memtrace..

2300d2c4 <__clz_tab>:
2300d2c4:	0100 0202 0303 0303 0404 0404 0404 0404     ................
2300d2d4:	0505 0505 0505 0505 0505 0505 0505 0505     ................
2300d2e4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
2300d2f4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
2300d304:	0707 0707 0707 0707 0707 0707 0707 0707     ................
2300d314:	0707 0707 0707 0707 0707 0707 0707 0707     ................
2300d324:	0707 0707 0707 0707 0707 0707 0707 0707     ................
2300d334:	0707 0707 0707 0707 0707 0707 0707 0707     ................
2300d344:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d354:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d364:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d374:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d384:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d394:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d3a4:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d3b4:	0808 0808 0808 0808 0808 0808 0808 0808     ................
2300d3c4:	400c ffff 421e ffff 4008 ffff 421e ffff     .@...B...@...B..
2300d3d4:	420e ffff 421e ffff 4008 ffff 4010 ffff     .B...B...@...@..
2300d3e4:	4010 ffff 420e ffff 4008 ffff 3fec ffff     .@...B...@...?..
2300d3f4:	3fec ffff 3fec ffff 401a ffff 47b0 ffff     .?...?...@...G..
2300d404:	47b0 ffff 47c8 ffff 47aa ffff 47aa ffff     .G...G...G...G..
2300d414:	45c2 ffff 47c8 ffff 47aa ffff 45c2 ffff     .E...G...G...E..
2300d424:	47aa ffff 47c8 ffff 47a8 ffff 47a8 ffff     .G...G...G...G..
2300d434:	47a8 ffff 498a ffff                         .G...I..

2300d43c <CSWTCH.20>:
2300d43c:	0200 0001 ffff ffff ffff 7fef 0000 0000     ................
2300d44c:	0000 3ff8 4361 636f 87a7 3fd2 c8b3 8b60     ...?aCoc...?..`.
2300d45c:	8a28 3fc6 79fb 509f 4413 3fd3 0000 0000     (..?.y.P.D.?....
2300d46c:	0000 3ff0 0000 0000 0000 4024 0000 0000     ...?......$@....
2300d47c:	0000 401c 0000 0000 0000 4014 0000 0000     ...@.......@....
2300d48c:	0000 3fe0                                   ...?

2300d490 <_global_impure_ptr>:
2300d490:	60a0 4201                                   .`.B

Disassembly of section .itcm_region:

42014000 <cpu_global_irq_enable>:

volatile uint32_t nesting = 0;

void ATTR_TCM_SECTION cpu_global_irq_enable(void)
{
    nesting--;
42014000:	11418793          	addi	a5,gp,276 # 42016914 <nesting>
42014004:	4398                	lw	a4,0(a5)
42014006:	177d                	addi	a4,a4,-1
42014008:	c398                	sw	a4,0(a5)
    if (nesting == 0) {
4201400a:	439c                	lw	a5,0(a5)
4201400c:	e399                	bnez	a5,42014012 <cpu_global_irq_enable+0x12>
4201400e:	30046073          	csrsi	mstatus,8
        __enable_irq();
    }
}
42014012:	8082                	ret

42014014 <cpu_global_irq_disable>:
    __ASM volatile("csrc mstatus, 8");
42014014:	30047073          	csrci	mstatus,8

void ATTR_TCM_SECTION cpu_global_irq_disable(void)
{
    __disable_irq();
    nesting++;
42014018:	11418793          	addi	a5,gp,276 # 42016914 <nesting>
4201401c:	4398                	lw	a4,0(a5)
4201401e:	0705                	addi	a4,a4,1
42014020:	c398                	sw	a4,0(a5)
}
42014022:	8082                	ret

42014024 <flash_init>:
 * @brief multi flash adapter
 *
 * @return BL_Err_Type
 */
BL_Err_Type ATTR_TCM_SECTION flash_init(void)
{
42014024:	7179                	addi	sp,sp,-48
42014026:	d606                	sw	ra,44(sp)
42014028:	d422                	sw	s0,40(sp)
4201402a:	d226                	sw	s1,36(sp)
4201402c:	d04a                	sw	s2,32(sp)
4201402e:	ce4e                	sw	s3,28(sp)
    BL_Err_Type ret = ERROR;
    uint8_t clkDelay = 1;
    uint8_t clkInvert = 1;
    uint32_t jedec_id = 0;
42014030:	c202                	sw	zero,4(sp)

    cpu_global_irq_disable();
42014032:	37cd                	jal	42014014 <cpu_global_irq_disable>
    L1C_Cache_Flush_Ext();
42014034:	2909                	jal	42014446 <L1C_Cache_Flush_Ext>
    SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext(0, &g_flash_cfg);
42014036:	aac18593          	addi	a1,gp,-1364 # 420162ac <g_flash_cfg>
4201403a:	4501                	li	a0,0
4201403c:	29d9                	jal	42014512 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext>
    L1C_Cache_Flush_Ext();
4201403e:	2121                	jal	42014446 <L1C_Cache_Flush_Ext>
    cpu_global_irq_enable();
42014040:	37c1                	jal	42014000 <cpu_global_irq_enable>
    SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext(0, &g_flash_cfg);
42014042:	aac18493          	addi	s1,gp,-1364 # 420162ac <g_flash_cfg>
    if (g_flash_cfg.mid != 0xff) {
42014046:	00d4c703          	lbu	a4,13(s1)
4201404a:	0ff00793          	li	a5,255
4201404e:	4901                	li	s2,0
42014050:	00f70a63          	beq	a4,a5,42014064 <flash_init+0x40>
#endif
    g_flash_cfg.clkDelay = clkDelay;
    g_flash_cfg.clkInvert = clkInvert;

    return ret;
}
42014054:	50b2                	lw	ra,44(sp)
42014056:	5422                	lw	s0,40(sp)
42014058:	5492                	lw	s1,36(sp)
4201405a:	49f2                	lw	s3,28(sp)
4201405c:	854a                	mv	a0,s2
4201405e:	5902                	lw	s2,32(sp)
42014060:	6145                	addi	sp,sp,48
42014062:	8082                	ret
    g_flash_cfg.ioMode = g_flash_cfg.ioMode & 0x0f;
42014064:	0004c783          	lbu	a5,0(s1)
    clkDelay = g_flash_cfg.clkDelay;
42014068:	0024d983          	lhu	s3,2(s1)
    uint32_t jid = 0;
4201406c:	c402                	sw	zero,8(sp)
    g_flash_cfg.ioMode = g_flash_cfg.ioMode & 0x0f;
4201406e:	8bbd                	andi	a5,a5,15
42014070:	00f48023          	sb	a5,0(s1)
    uint32_t offset = 0;
42014074:	c602                	sw	zero,12(sp)
    cpu_global_irq_disable();
42014076:	3f79                	jal	42014014 <cpu_global_irq_disable>
    XIP_SFlash_Opt_Enter();
42014078:	2ba1                	jal	420145d0 <XIP_SFlash_Opt_Enter>
    XIP_SFlash_State_Save(p_flash_cfg, &offset);
4201407a:	006c                	addi	a1,sp,12
4201407c:	aac18513          	addi	a0,gp,-1364 # 420162ac <g_flash_cfg>
42014080:	2929                	jal	4201449a <XIP_SFlash_State_Save>
    SFlash_GetJedecId(p_flash_cfg, (uint8_t *)&jid);
42014082:	002c                	addi	a1,sp,8
42014084:	aac18513          	addi	a0,gp,-1364 # 420162ac <g_flash_cfg>
42014088:	292d                	jal	420144c2 <SFlash_GetJedecId>
    arch_memcpy(jedec_id, (uint8_t *)&jid, 3);
4201408a:	460d                	li	a2,3
4201408c:	002c                	addi	a1,sp,8
4201408e:	0048                	addi	a0,sp,4
42014090:	26cd                	jal	42014472 <arch_memcpy>
    jid &= 0xFFFFFF;
42014092:	4522                	lw	a0,8(sp)
    ret = SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext(jid, p_flash_cfg);
42014094:	aac18593          	addi	a1,gp,-1364 # 420162ac <g_flash_cfg>
    jid &= 0xFFFFFF;
42014098:	0522                	slli	a0,a0,0x8
4201409a:	8121                	srli	a0,a0,0x8
4201409c:	c42a                	sw	a0,8(sp)
    g_jedec_id = jid;
4201409e:	10a1ac23          	sw	a0,280(gp) # 42016918 <g_jedec_id>
    ret = SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext(jid, p_flash_cfg);
420140a2:	2985                	jal	42014512 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext>
420140a4:	892a                	mv	s2,a0
    if (ret == SUCCESS) {
420140a6:	c53d                	beqz	a0,42014114 <flash_init+0xf0>
    if ((p_flash_cfg->ioMode & 0x0f) == SF_CTRL_QO_MODE || (p_flash_cfg->ioMode & 0x0f) == SF_CTRL_QIO_MODE) {
420140a8:	0004c783          	lbu	a5,0(s1)
420140ac:	00f7f713          	andi	a4,a5,15
420140b0:	1779                	addi	a4,a4,-2
420140b2:	0fd77713          	andi	a4,a4,253
420140b6:	e711                	bnez	a4,420140c2 <flash_init+0x9e>
        SFlash_Qspi_Enable(p_flash_cfg);
420140b8:	aac18513          	addi	a0,gp,-1364 # 420162ac <g_flash_cfg>
420140bc:	2ef5                	jal	420144b8 <SFlash_Qspi_Enable>
    if (((p_flash_cfg->ioMode >> 4) & 0x01) == 1) {
420140be:	0004c783          	lbu	a5,0(s1)
420140c2:	8391                	srli	a5,a5,0x4
420140c4:	8b85                	andi	a5,a5,1
420140c6:	e3a9                	bnez	a5,42014108 <flash_init+0xe4>
        L1C_Set_Wrap(ENABLE);
420140c8:	4505                	li	a0,1
420140ca:	2919                	jal	420144e0 <L1C_Set_Wrap>
        if ((p_flash_cfg->ioMode & 0x0f) == SF_CTRL_QO_MODE || (p_flash_cfg->ioMode & 0x0f) == SF_CTRL_QIO_MODE) {
420140cc:	0004c583          	lbu	a1,0(s1)
420140d0:	89bd                	andi	a1,a1,15
420140d2:	ffe58793          	addi	a5,a1,-2
420140d6:	0fd7f793          	andi	a5,a5,253
420140da:	e799                	bnez	a5,420140e8 <flash_init+0xc4>
            SFlash_SetBurstWrap(p_flash_cfg);
420140dc:	aac18513          	addi	a0,gp,-1364 # 420162ac <g_flash_cfg>
420140e0:	26f5                	jal	420144cc <SFlash_SetBurstWrap>
    XIP_SFlash_State_Restore(p_flash_cfg, p_flash_cfg->ioMode & 0x0f, offset);
420140e2:	0004c583          	lbu	a1,0(s1)
420140e6:	89bd                	andi	a1,a1,15
420140e8:	4632                	lw	a2,12(sp)
420140ea:	aac18513          	addi	a0,gp,-1364 # 420162ac <g_flash_cfg>
420140ee:	2e5d                	jal	420144a4 <XIP_SFlash_State_Restore>
    XIP_SFlash_Opt_Exit();
420140f0:	29e5                	jal	420145e8 <XIP_SFlash_Opt_Exit>
    cpu_global_irq_enable();
420140f2:	3739                	jal	42014000 <cpu_global_irq_enable>
}
420140f4:	50b2                	lw	ra,44(sp)
420140f6:	5422                	lw	s0,40(sp)
    g_flash_cfg.clkDelay = clkDelay;
420140f8:	01349123          	sh	s3,2(s1)
}
420140fc:	854a                	mv	a0,s2
420140fe:	5492                	lw	s1,36(sp)
42014100:	5902                	lw	s2,32(sp)
42014102:	49f2                	lw	s3,28(sp)
42014104:	6145                	addi	sp,sp,48
42014106:	8082                	ret
        L1C_Set_Wrap(DISABLE);
42014108:	4501                	li	a0,0
4201410a:	2ed9                	jal	420144e0 <L1C_Set_Wrap>
    XIP_SFlash_State_Restore(p_flash_cfg, p_flash_cfg->ioMode & 0x0f, offset);
4201410c:	0004c583          	lbu	a1,0(s1)
42014110:	89bd                	andi	a1,a1,15
42014112:	bfd9                	j	420140e8 <flash_init+0xc4>
        p_flash_cfg->mid = (jid & 0xff);
42014114:	47a2                	lw	a5,8(sp)
42014116:	00f486a3          	sb	a5,13(s1)
4201411a:	b779                	j	420140a8 <flash_init+0x84>

4201411c <GLB_GPIO_Init>:
    uint8_t gpioPin = cfg->gpioPin;
4201411c:	00054703          	lbu	a4,0(a0) # 1c000 <StackSize+0x1b000>
    pOut = (uint32_t *)(GLB_BASE + GLB_GPIO_OUTPUT_EN_OFFSET + ((gpioPin >> 5) << 2));
42014120:	40000837          	lui	a6,0x40000
42014124:	19080693          	addi	a3,a6,400 # 40000190 <__dtcm_load_addr+0x1cff2214>
42014128:	00575793          	srli	a5,a4,0x5
4201412c:	078a                	slli	a5,a5,0x2
4201412e:	97b6                	add	a5,a5,a3
    tmpOut = *pOut;
42014130:	438c                	lw	a1,0(a5)
    tmpOut &= (~(1 << pos));
42014132:	4685                	li	a3,1
42014134:	00e69eb3          	sll	t4,a3,a4
42014138:	fffece13          	not	t3,t4
4201413c:	00be75b3          	and	a1,t3,a1
    if (gpioPin >= 23 && gpioPin <= 28) {
42014140:	fe970313          	addi	t1,a4,-23 # 18fe9 <StackSize+0x17fe9>
    *pOut = tmpOut;
42014144:	c38c                	sw	a1,0(a5)
    if (gpioPin >= 23 && gpioPin <= 28) {
42014146:	0ff37f13          	zext.b	t5,t1
4201414a:	4895                	li	a7,5
4201414c:	863a                	mv	a2,a4
4201414e:	01e8ea63          	bltu	a7,t5,42014162 <GLB_GPIO_Init+0x46>
        if ((BL_RD_REG(GLB_BASE, GLB_GPIO_USE_PSRAM__IO) & (1 << (gpioPin - 23))) > 0) {
42014152:	08882803          	lw	a6,136(a6)
42014156:	006696b3          	sll	a3,a3,t1
4201415a:	0106f6b3          	and	a3,a3,a6
4201415e:	12069063          	bnez	a3,4201427e <GLB_GPIO_Init+0x162>
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + realPin / 2 * 4);
42014162:	00165693          	srli	a3,a2,0x1
42014166:	00269813          	slli	a6,a3,0x2
4201416a:	400006b7          	lui	a3,0x40000
4201416e:	10068693          	addi	a3,a3,256 # 40000100 <__dtcm_load_addr+0x1cff2184>
42014172:	96c2                	add	a3,a3,a6
42014174:	0006a283          	lw	t0,0(a3)
    if (realPin % 2 == 0) {
42014178:	8a05                	andi	a2,a2,1
        if (cfg->gpioMode != GPIO_MODE_ANALOG) {
4201417a:	00254f83          	lbu	t6,2(a0)
    if (realPin % 2 == 0) {
4201417e:	10061563          	bnez	a2,42014288 <GLB_GPIO_Init+0x16c>
        if (cfg->gpioMode != GPIO_MODE_ANALOG) {
42014182:	460d                	li	a2,3
            tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_GPIO_0_PD);
42014184:	fce2f893          	andi	a7,t0,-50
        if (cfg->gpioMode != GPIO_MODE_ANALOG) {
42014188:	02cf8663          	beq	t6,a2,420141b4 <GLB_GPIO_Init+0x98>
            if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
4201418c:	4605                	li	a2,1
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_0_IE);
4201418e:	0012e893          	ori	a7,t0,1
            if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
42014192:	00cf9663          	bne	t6,a2,4201419e <GLB_GPIO_Init+0x82>
                tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_GPIO_0_IE);
42014196:	ffe2f893          	andi	a7,t0,-2
                tmpOut |= (1 << pos);
4201419a:	01d5e5b3          	or	a1,a1,t4
            if (cfg->pullType == GPIO_PULL_UP) {
4201419e:	00354603          	lbu	a2,3(a0)
            tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_GPIO_0_PD);
420141a2:	fcf8f893          	andi	a7,a7,-49
            if (cfg->pullType == GPIO_PULL_UP) {
420141a6:	16060963          	beqz	a2,42014318 <GLB_GPIO_Init+0x1fc>
            } else if (cfg->pullType == GPIO_PULL_DOWN) {
420141aa:	4805                	li	a6,1
420141ac:	01061463          	bne	a2,a6,420141b4 <GLB_GPIO_Init+0x98>
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_0_PD);
420141b0:	0208e893          	ori	a7,a7,32
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_DRV, cfg->drive);
420141b4:	00454283          	lbu	t0,4(a0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_SMT, cfg->smtCtrl);
420141b8:	00554803          	lbu	a6,5(a0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_DRV, cfg->drive);
420141bc:	ff18f893          	andi	a7,a7,-15
420141c0:	028a                	slli	t0,t0,0x2
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_SMT, cfg->smtCtrl);
420141c2:	0806                	slli	a6,a6,0x1
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_FUNC_SEL, cfg->gpioFun);
420141c4:	00154603          	lbu	a2,1(a0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_SMT, cfg->smtCtrl);
420141c8:	0058e8b3          	or	a7,a7,t0
420141cc:	011868b3          	or	a7,a6,a7
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_FUNC_SEL, cfg->gpioFun);
420141d0:	7879                	lui	a6,0xffffe
420141d2:	0ff80813          	addi	a6,a6,255 # ffffe0ff <__HeapLimit+0xbdfce0ff>
420141d6:	0108f8b3          	and	a7,a7,a6
420141da:	0622                	slli	a2,a2,0x8
420141dc:	01166633          	or	a2,a2,a7
    BL_WR_WORD(GLB_BASE + GLB_GPIO_OFFSET + realPin / 2 * 4, tmpVal);
420141e0:	c290                	sw	a2,0(a3)
    if (gpioPin >= 9 && gpioPin <= 13) {
420141e2:	ff770693          	addi	a3,a4,-9
    *pOut = tmpOut;
420141e6:	c38c                	sw	a1,0(a5)
    if (gpioPin >= 9 && gpioPin <= 13) {
420141e8:	4611                	li	a2,4
420141ea:	0ff6f593          	zext.b	a1,a3
420141ee:	02b66d63          	bltu	a2,a1,42014228 <GLB_GPIO_Init+0x10c>
        tmpVal = BL_RD_REG(HBN_BASE, HBN_IRQ_MODE);
420141f2:	4000f637          	lui	a2,0x4000f
420141f6:	4a4c                	lw	a1,20(a2)
                aonPadIeSmt &= ~(1 << (gpioPin - 9));
420141f8:	4885                	li	a7,1
        if (cfg->gpioMode != GPIO_MODE_ANALOG) {
420141fa:	460d                	li	a2,3
        uint32_t aonPadIeSmt = BL_GET_REG_BITS_VAL(tmpVal, HBN_REG_AON_PAD_IE_SMT);
420141fc:	0085d813          	srli	a6,a1,0x8
42014200:	01f87813          	andi	a6,a6,31
                aonPadIeSmt &= ~(1 << (gpioPin - 9));
42014204:	00d896b3          	sll	a3,a7,a3
        if (cfg->gpioMode != GPIO_MODE_ANALOG) {
42014208:	0ecf8e63          	beq	t6,a2,42014304 <GLB_GPIO_Init+0x1e8>
                aonPadIeSmt |= (1 << (gpioPin - 9));
4201420c:	0106e633          	or	a2,a3,a6
            if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
42014210:	0f1f8a63          	beq	t6,a7,42014304 <GLB_GPIO_Init+0x1e8>
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_REG_AON_PAD_IE_SMT, aonPadIeSmt);
42014214:	76f9                	lui	a3,0xffffe
42014216:	0ff68693          	addi	a3,a3,255 # ffffe0ff <__HeapLimit+0xbdfce0ff>
4201421a:	8df5                	and	a1,a1,a3
4201421c:	00861693          	slli	a3,a2,0x8
42014220:	8ecd                	or	a3,a3,a1
        BL_WR_REG(HBN_BASE, HBN_IRQ_MODE, tmpVal);
42014222:	4000f637          	lui	a2,0x4000f
42014226:	ca54                	sw	a3,20(a2)
    if (gpioPin >= 23 && gpioPin <= 28) {
42014228:	4695                	li	a3,5
4201422a:	05e6e863          	bltu	a3,t5,4201427a <GLB_GPIO_Init+0x15e>
        if ((BL_RD_REG(GLB_BASE, GLB_GPIO_USE_PSRAM__IO) & (1 << (gpioPin - 23))) > 0) {
4201422e:	40000637          	lui	a2,0x40000
42014232:	08862583          	lw	a1,136(a2) # 40000088 <__dtcm_load_addr+0x1cff210c>
42014236:	4685                	li	a3,1
42014238:	00669333          	sll	t1,a3,t1
4201423c:	00b37333          	and	t1,t1,a1
42014240:	02030d63          	beqz	t1,4201427a <GLB_GPIO_Init+0x15e>
            tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4);
42014244:	00175693          	srli	a3,a4,0x1
42014248:	10060613          	addi	a2,a2,256
4201424c:	068a                	slli	a3,a3,0x2
4201424e:	96b2                	add	a3,a3,a2
42014250:	428c                	lw	a1,0(a3)
            if (gpioPin % 2 == 0) {
42014252:	8b05                	andi	a4,a4,1
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_FUNC_SEL, cfg->gpioFun);
42014254:	00154603          	lbu	a2,1(a0)
            if (gpioPin % 2 == 0) {
42014258:	c379                	beqz	a4,4201431e <GLB_GPIO_Init+0x202>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_FUNC_SEL, cfg->gpioFun);
4201425a:	e1000737          	lui	a4,0xe1000
4201425e:	177d                	addi	a4,a4,-1
42014260:	8df9                	and	a1,a1,a4
42014262:	01861713          	slli	a4,a2,0x18
42014266:	8f4d                	or	a4,a4,a1
            BL_WR_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4, tmpVal);
42014268:	c298                	sw	a4,0(a3)
            tmpOut = *pOut;
4201426a:	4394                	lw	a3,0(a5)
                if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
4201426c:	4705                	li	a4,1
            tmpOut &= (~(1 << pos));
4201426e:	00de7e33          	and	t3,t3,a3
                if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
42014272:	0aef8e63          	beq	t6,a4,4201432e <GLB_GPIO_Init+0x212>
            *pOut = tmpOut;
42014276:	01c7a023          	sw	t3,0(a5)
}
4201427a:	4501                	li	a0,0
4201427c:	8082                	ret
            realPin += 9;
4201427e:	00970613          	addi	a2,a4,9 # e1000009 <__HeapLimit+0x9efd0009>
42014282:	0ff67613          	zext.b	a2,a2
42014286:	bdf1                	j	42014162 <GLB_GPIO_Init+0x46>
        if (cfg->gpioMode != GPIO_MODE_ANALOG) {
42014288:	460d                	li	a2,3
4201428a:	0acf8763          	beq	t6,a2,42014338 <GLB_GPIO_Init+0x21c>
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_1_IE);
4201428e:	6841                	lui	a6,0x10
            if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
42014290:	4605                	li	a2,1
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_1_IE);
42014292:	0102e833          	or	a6,t0,a6
            if (cfg->gpioMode == GPIO_MODE_OUTPUT) {
42014296:	00cf9863          	bne	t6,a2,420142a6 <GLB_GPIO_Init+0x18a>
                tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_GPIO_1_IE);
4201429a:	7841                	lui	a6,0xffff0
4201429c:	187d                	addi	a6,a6,-1
4201429e:	0102f833          	and	a6,t0,a6
                tmpOut |= (1 << pos);
420142a2:	01d5e5b3          	or	a1,a1,t4
            if (cfg->pullType == GPIO_PULL_UP) {
420142a6:	00354883          	lbu	a7,3(a0)
            tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_GPIO_1_PD);
420142aa:	ffd00637          	lui	a2,0xffd00
420142ae:	167d                	addi	a2,a2,-1
420142b0:	00c87833          	and	a6,a6,a2
            if (cfg->pullType == GPIO_PULL_UP) {
420142b4:	04088d63          	beqz	a7,4201430e <GLB_GPIO_Init+0x1f2>
            } else if (cfg->pullType == GPIO_PULL_DOWN) {
420142b8:	4605                	li	a2,1
420142ba:	00c89663          	bne	a7,a2,420142c6 <GLB_GPIO_Init+0x1aa>
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_1_PD);
420142be:	00200637          	lui	a2,0x200
420142c2:	00c86833          	or	a6,a6,a2
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_DRV, cfg->drive);
420142c6:	00454283          	lbu	t0,4(a0)
420142ca:	fff40637          	lui	a2,0xfff40
420142ce:	167d                	addi	a2,a2,-1
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_SMT, cfg->smtCtrl);
420142d0:	00554883          	lbu	a7,5(a0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_DRV, cfg->drive);
420142d4:	00c87833          	and	a6,a6,a2
420142d8:	02ca                	slli	t0,t0,0x12
420142da:	0102e833          	or	a6,t0,a6
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_SMT, cfg->smtCtrl);
420142de:	7281                	lui	t0,0xfffe0
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_FUNC_SEL, cfg->gpioFun);
420142e0:	00154603          	lbu	a2,1(a0)
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_SMT, cfg->smtCtrl);
420142e4:	12fd                	addi	t0,t0,-1
420142e6:	005872b3          	and	t0,a6,t0
420142ea:	01189813          	slli	a6,a7,0x11
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_FUNC_SEL, cfg->gpioFun);
420142ee:	e10008b7          	lui	a7,0xe1000
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_SMT, cfg->smtCtrl);
420142f2:	00586833          	or	a6,a6,t0
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_1_FUNC_SEL, cfg->gpioFun);
420142f6:	18fd                	addi	a7,a7,-1
420142f8:	01187833          	and	a6,a6,a7
420142fc:	0662                	slli	a2,a2,0x18
420142fe:	01066633          	or	a2,a2,a6
42014302:	bdf9                	j	420141e0 <GLB_GPIO_Init+0xc4>
            aonPadIeSmt &= ~(1 << (gpioPin - 9));
42014304:	fff6c693          	not	a3,a3
42014308:	0106f633          	and	a2,a3,a6
4201430c:	b721                	j	42014214 <GLB_GPIO_Init+0xf8>
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_1_PU);
4201430e:	00100637          	lui	a2,0x100
42014312:	00c86833          	or	a6,a6,a2
42014316:	bf45                	j	420142c6 <GLB_GPIO_Init+0x1aa>
                tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_GPIO_0_PU);
42014318:	0108e893          	ori	a7,a7,16
4201431c:	bd61                	j	420141b4 <GLB_GPIO_Init+0x98>
                tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_GPIO_0_FUNC_SEL, cfg->gpioFun);
4201431e:	7779                	lui	a4,0xffffe
42014320:	0ff70713          	addi	a4,a4,255 # ffffe0ff <__HeapLimit+0xbdfce0ff>
42014324:	8df9                	and	a1,a1,a4
42014326:	00861713          	slli	a4,a2,0x8
4201432a:	8f4d                	or	a4,a4,a1
4201432c:	bf35                	j	42014268 <GLB_GPIO_Init+0x14c>
                    tmpOut |= (1 << pos);
4201432e:	01de6e33          	or	t3,t3,t4
            *pOut = tmpOut;
42014332:	01c7a023          	sw	t3,0(a5)
42014336:	b791                	j	4201427a <GLB_GPIO_Init+0x15e>
            tmpVal = BL_CLR_REG_BIT(tmpVal, GLB_REG_GPIO_1_PD);
42014338:	ffcf0837          	lui	a6,0xffcf0
4201433c:	187d                	addi	a6,a6,-1
4201433e:	0102f833          	and	a6,t0,a6
42014342:	b751                	j	420142c6 <GLB_GPIO_Init+0x1aa>

42014344 <GLB_GPIO_Set_HZ>:
    if (gpioPin >= 9 && gpioPin <= 13) {
42014344:	ff750693          	addi	a3,a0,-9
42014348:	0ff6f713          	zext.b	a4,a3
4201434c:	4791                	li	a5,4
4201434e:	08e7ec63          	bltu	a5,a4,420143e6 <GLB_GPIO_Set_HZ+0xa2>
        tmpVal = BL_RD_REG(HBN_BASE, HBN_IRQ_MODE);
42014352:	4000f637          	lui	a2,0x4000f
42014356:	4a58                	lw	a4,20(a2)
        aonPadIeSmt &= ~(1 << (gpioPin - 9));
42014358:	4785                	li	a5,1
4201435a:	00d797b3          	sll	a5,a5,a3
4201435e:	fff7c793          	not	a5,a5
        aonPadIeSmt = BL_GET_REG_BITS_VAL(tmpVal, HBN_REG_AON_PAD_IE_SMT);
42014362:	00875693          	srli	a3,a4,0x8
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_REG_AON_PAD_IE_SMT, aonPadIeSmt);
42014366:	8ff5                	and	a5,a5,a3
42014368:	76f9                	lui	a3,0xffffe
4201436a:	0ff68693          	addi	a3,a3,255 # ffffe0ff <__HeapLimit+0xbdfce0ff>
4201436e:	8f75                	and	a4,a4,a3
42014370:	6689                	lui	a3,0x2
42014372:	07a2                	slli	a5,a5,0x8
42014374:	f0068693          	addi	a3,a3,-256 # 1f00 <StackSize+0xf00>
42014378:	8ff5                	and	a5,a5,a3
4201437a:	8fd9                	or	a5,a5,a4
        BL_WR_REG(HBN_BASE, HBN_IRQ_MODE, tmpVal);
4201437c:	ca5c                	sw	a5,20(a2)
4201437e:	872a                	mv	a4,a0
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + realPin / 2 * 4);
42014380:	00175793          	srli	a5,a4,0x1
42014384:	400006b7          	lui	a3,0x40000
42014388:	10068693          	addi	a3,a3,256 # 40000100 <__dtcm_load_addr+0x1cff2184>
4201438c:	078a                	slli	a5,a5,0x2
4201438e:	97b6                	add	a5,a5,a3
42014390:	4394                	lw	a3,0(a5)
    if (realPin % 2 == 0) {
42014392:	8b05                	andi	a4,a4,1
42014394:	eb49                	bnez	a4,42014426 <GLB_GPIO_Set_HZ+0xe2>
        tmpVal = (tmpVal & 0xffffff00);
42014396:	f006f693          	andi	a3,a3,-256
    pOut = (uint32_t *)(GLB_BASE + GLB_GPIO_OUTPUT_EN_OFFSET + ((gpioPin >> 5) << 2));
4201439a:	40000637          	lui	a2,0x40000
4201439e:	00555713          	srli	a4,a0,0x5
420143a2:	19060593          	addi	a1,a2,400 # 40000190 <__dtcm_load_addr+0x1cff2214>
420143a6:	070a                	slli	a4,a4,0x2
    BL_WR_WORD(GLB_BASE + GLB_GPIO_OFFSET + realPin / 2 * 4, tmpVal);
420143a8:	c394                	sw	a3,0(a5)
    pOut = (uint32_t *)(GLB_BASE + GLB_GPIO_OUTPUT_EN_OFFSET + ((gpioPin >> 5) << 2));
420143aa:	972e                	add	a4,a4,a1
    tmpOut = *pOut;
420143ac:	430c                	lw	a1,0(a4)
    tmpOut &= (~(1 << pos));
420143ae:	4785                	li	a5,1
420143b0:	00a797b3          	sll	a5,a5,a0
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4);
420143b4:	00155693          	srli	a3,a0,0x1
    tmpOut &= (~(1 << pos));
420143b8:	fff7c793          	not	a5,a5
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4);
420143bc:	10060613          	addi	a2,a2,256
    tmpOut &= (~(1 << pos));
420143c0:	8fed                	and	a5,a5,a1
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4);
420143c2:	068a                	slli	a3,a3,0x2
    *pOut = tmpOut;
420143c4:	c31c                	sw	a5,0(a4)
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4);
420143c6:	96b2                	add	a3,a3,a2
420143c8:	4290                	lw	a2,0(a3)
    if (gpioPin % 2 == 0) {
420143ca:	8905                	andi	a0,a0,1
420143cc:	e135                	bnez	a0,42014430 <GLB_GPIO_Set_HZ+0xec>
        tmpVal = (tmpVal & 0xffff00ff);
420143ce:	75c1                	lui	a1,0xffff0
420143d0:	0ff58593          	addi	a1,a1,255 # ffff00ff <__HeapLimit+0xbdfc00ff>
420143d4:	8e6d                	and	a2,a2,a1
        tmpVal |= 0x0B00;
420143d6:	6585                	lui	a1,0x1
420143d8:	b0058593          	addi	a1,a1,-1280 # b00 <__heap_min_size+0x700>
420143dc:	8e4d                	or	a2,a2,a1
    BL_WR_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4, tmpVal);
420143de:	c290                	sw	a2,0(a3)
    *pOut = tmpOut;
420143e0:	c31c                	sw	a5,0(a4)
}
420143e2:	4501                	li	a0,0
420143e4:	8082                	ret
    if (gpioPin >= 23 && gpioPin <= 28) {
420143e6:	fe950713          	addi	a4,a0,-23
420143ea:	0ff77693          	zext.b	a3,a4
420143ee:	4795                	li	a5,5
420143f0:	04d7e963          	bltu	a5,a3,42014442 <GLB_GPIO_Set_HZ+0xfe>
        if ((BL_RD_REG(GLB_BASE, GLB_GPIO_USE_PSRAM__IO) & (1 << (gpioPin - 23))) > 0) {
420143f4:	400007b7          	lui	a5,0x40000
420143f8:	0887a683          	lw	a3,136(a5) # 40000088 <__dtcm_load_addr+0x1cff210c>
420143fc:	4785                	li	a5,1
420143fe:	00e797b3          	sll	a5,a5,a4
42014402:	8ff5                	and	a5,a5,a3
42014404:	872a                	mv	a4,a0
42014406:	dfad                	beqz	a5,42014380 <GLB_GPIO_Set_HZ+0x3c>
            realPin += 9;
42014408:	00950713          	addi	a4,a0,9
4201440c:	0ff77713          	zext.b	a4,a4
    tmpVal = BL_RD_WORD(GLB_BASE + GLB_GPIO_OFFSET + realPin / 2 * 4);
42014410:	00175793          	srli	a5,a4,0x1
42014414:	400006b7          	lui	a3,0x40000
42014418:	10068693          	addi	a3,a3,256 # 40000100 <__dtcm_load_addr+0x1cff2184>
4201441c:	078a                	slli	a5,a5,0x2
4201441e:	97b6                	add	a5,a5,a3
42014420:	4394                	lw	a3,0(a5)
    if (realPin % 2 == 0) {
42014422:	8b05                	andi	a4,a4,1
42014424:	db2d                	beqz	a4,42014396 <GLB_GPIO_Set_HZ+0x52>
        tmpVal = (tmpVal & 0xff00ffff);
42014426:	ff010737          	lui	a4,0xff010
4201442a:	177d                	addi	a4,a4,-1
4201442c:	8ef9                	and	a3,a3,a4
4201442e:	b7b5                	j	4201439a <GLB_GPIO_Set_HZ+0x56>
        tmpVal = (tmpVal & 0x00ffffff);
42014430:	0622                	slli	a2,a2,0x8
        tmpVal |= (0x0B00 << 16);
42014432:	0b0005b7          	lui	a1,0xb000
        tmpVal = (tmpVal & 0x00ffffff);
42014436:	8221                	srli	a2,a2,0x8
        tmpVal |= (0x0B00 << 16);
42014438:	8e4d                	or	a2,a2,a1
    BL_WR_WORD(GLB_BASE + GLB_GPIO_OFFSET + gpioPin / 2 * 4, tmpVal);
4201443a:	c290                	sw	a2,0(a3)
    *pOut = tmpOut;
4201443c:	c31c                	sw	a5,0(a4)
}
4201443e:	4501                	li	a0,0
42014440:	8082                	ret
42014442:	872a                	mv	a4,a0
42014444:	bf35                	j	42014380 <GLB_GPIO_Set_HZ+0x3c>

42014446 <L1C_Cache_Flush_Ext>:
BL_Err_Type ATTR_TCM_SECTION L1C_Cache_Flush_Ext(void)
{
    uint32_t tmpVal;

    /* Disable early respone */
    tmpVal = BL_RD_REG(L1C_BASE, L1C_CONFIG);
42014446:	400097b7          	lui	a5,0x40009
4201444a:	4388                	lw	a0,0(a5)
{
4201444c:	1141                	addi	sp,sp,-16
4201444e:	c606                	sw	ra,12(sp)
    L1C_Cache_Flush((tmpVal >> L1C_WAY_DIS_POS) & 0xf);
42014450:	8121                	srli	a0,a0,0x8
42014452:	893d                	andi	a0,a0,15
42014454:	2049                	jal	420144d6 <L1C_Cache_Flush>
    __NOP();
42014456:	0001                	nop
    __NOP();
42014458:	0001                	nop
    __NOP();
4201445a:	0001                	nop
    __NOP();
4201445c:	0001                	nop
    __NOP();
4201445e:	0001                	nop

    return SUCCESS;
}
42014460:	40b2                	lw	ra,12(sp)
42014462:	4501                	li	a0,0
42014464:	0141                	addi	sp,sp,16
42014466:	8082                	ret

42014468 <BL702_Delay_MS>:
    RomDriver_BL702_Delay_US(cnt);
}

__ALWAYS_INLINE ATTR_TCM_SECTION void BL702_Delay_MS(uint32_t cnt)
{
    RomDriver_BL702_Delay_MS(cnt);
42014468:	210197b7          	lui	a5,0x21019
4201446c:	82c7a783          	lw	a5,-2004(a5) # 2101882c <StackSize+0x2101782c>
42014470:	8782                	jr	a5

42014472 <arch_memcpy>:
}

__ALWAYS_INLINE ATTR_TCM_SECTION void *BL702_MemCpy(void *dst, const void *src, uint32_t n)
{
    return RomDriver_BL702_MemCpy(dst, src, n);
42014472:	210197b7          	lui	a5,0x21019
42014476:	8307a783          	lw	a5,-2000(a5) # 21018830 <StackSize+0x21017830>
4201447a:	8782                	jr	a5

4201447c <arch_memcpy_fast>:
//     return RomDriver_BL702_MemCpy_Fast(pdst, psrc, n);
// }

__ALWAYS_INLINE ATTR_TCM_SECTION void *ARCH_MemCpy_Fast(void *pdst, const void *psrc, uint32_t n)
{
    return RomDriver_ARCH_MemCpy_Fast(pdst, psrc, n);
4201447c:	210197b7          	lui	a5,0x21019
42014480:	83c7a783          	lw	a5,-1988(a5) # 2101883c <StackSize+0x2101783c>
42014484:	8782                	jr	a5

42014486 <arch_memcmp>:
    return RomDriver_BL702_MemSet4(dst, val, n);
}

__ALWAYS_INLINE ATTR_TCM_SECTION int BL702_MemCmp(const void *s1, const void *s2, uint32_t n)
{
    return RomDriver_BL702_MemCmp(s1, s2, n);
42014486:	210197b7          	lui	a5,0x21019
4201448a:	8487a783          	lw	a5,-1976(a5) # 21018848 <StackSize+0x21017848>
4201448e:	8782                	jr	a5

42014490 <BFLB_Soft_CRC32>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    uint32_t
    BFLB_Soft_CRC32(void *dataIn, uint32_t len)
{
    return RomDriver_BFLB_Soft_CRC32(dataIn, len);
42014490:	210197b7          	lui	a5,0x21019
42014494:	84c7a783          	lw	a5,-1972(a5) # 2101884c <StackSize+0x2101784c>
42014498:	8782                	jr	a5

4201449a <XIP_SFlash_State_Save>:
/******************************************************************************/
__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    XIP_SFlash_State_Save(SPI_Flash_Cfg_Type *pFlashCfg, uint32_t *offset)
{
    return RomDriver_XIP_SFlash_State_Save(pFlashCfg, offset);
4201449a:	210197b7          	lui	a5,0x21019
4201449e:	9307a783          	lw	a5,-1744(a5) # 21018930 <StackSize+0x21017930>
420144a2:	8782                	jr	a5

420144a4 <XIP_SFlash_State_Restore>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    XIP_SFlash_State_Restore(SPI_Flash_Cfg_Type *pFlashCfg, SF_Ctrl_IO_Type ioMode, uint32_t offset)
{
    return RomDriver_XIP_SFlash_State_Restore(pFlashCfg, ioMode, offset);
420144a4:	210197b7          	lui	a5,0x21019
420144a8:	9347a783          	lw	a5,-1740(a5) # 21018934 <StackSize+0x21017934>
420144ac:	8782                	jr	a5

420144ae <XIP_SFlash_Read_Via_Cache_Need_Lock>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    XIP_SFlash_Read_Via_Cache_Need_Lock(uint32_t addr, uint8_t *data, uint32_t len)
{
    return RomDriver_XIP_SFlash_Read_Via_Cache_Need_Lock(addr, data, len);
420144ae:	210197b7          	lui	a5,0x21019
420144b2:	9507a783          	lw	a5,-1712(a5) # 21018950 <StackSize+0x21017950>
420144b6:	8782                	jr	a5

420144b8 <SFlash_Qspi_Enable>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    SFlash_Qspi_Enable(SPI_Flash_Cfg_Type *flashCfg)
{
    return RomDriver_SFlash_Qspi_Enable(flashCfg);
420144b8:	210197b7          	lui	a5,0x21019
420144bc:	9807a783          	lw	a5,-1664(a5) # 21018980 <StackSize+0x21017980>
420144c0:	8782                	jr	a5

420144c2 <SFlash_GetJedecId>:
    RomDriver_SFlash_GetUniqueId(data, idLen);
}

__ALWAYS_INLINE ATTR_TCM_SECTION void SFlash_GetJedecId(SPI_Flash_Cfg_Type *flashCfg, uint8_t *data)
{
    RomDriver_SFlash_GetJedecId(flashCfg, data);
420144c2:	210197b7          	lui	a5,0x21019
420144c6:	9a47a783          	lw	a5,-1628(a5) # 210189a4 <StackSize+0x210179a4>
420144ca:	8782                	jr	a5

420144cc <SFlash_SetBurstWrap>:
    return RomDriver_SFlash_Restore_From_Powerdown(pFlashCfg, flashContRead);
}

__ALWAYS_INLINE ATTR_TCM_SECTION void SFlash_SetBurstWrap(SPI_Flash_Cfg_Type *flashCfg)
{
    RomDriver_SFlash_SetBurstWrap(flashCfg);
420144cc:	210197b7          	lui	a5,0x21019
420144d0:	9b87a783          	lw	a5,-1608(a5) # 210189b8 <StackSize+0x210179b8>
420144d4:	8782                	jr	a5

420144d6 <L1C_Cache_Flush>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    L1C_Cache_Flush(uint8_t wayDisable)
{
    return RomDriver_L1C_Cache_Flush(wayDisable);
420144d6:	210197b7          	lui	a5,0x21019
420144da:	9e47a783          	lw	a5,-1564(a5) # 210189e4 <StackSize+0x210179e4>
420144de:	8782                	jr	a5

420144e0 <L1C_Set_Wrap>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    L1C_Set_Wrap(BL_Fun_Type wrap)
{
    return RomDriver_L1C_Set_Wrap(wrap);
420144e0:	210197b7          	lui	a5,0x21019
420144e4:	9f47a783          	lw	a5,-1548(a5) # 210189f4 <StackSize+0x210179f4>
420144e8:	8782                	jr	a5

420144ea <SF_Ctrl_AES_Enable>:
    RomDriver_SF_Ctrl_AES_Set_IV_BE(region, iv, addrOffset);
}

__ALWAYS_INLINE ATTR_TCM_SECTION void SF_Ctrl_AES_Enable(void)
{
    RomDriver_SF_Ctrl_AES_Enable();
420144ea:	210197b7          	lui	a5,0x21019
420144ee:	a407a783          	lw	a5,-1472(a5) # 21018a40 <StackSize+0x21017a40>
420144f2:	8782                	jr	a5

420144f4 <SF_Ctrl_AES_Disable>:
}

__ALWAYS_INLINE ATTR_TCM_SECTION void SF_Ctrl_AES_Disable(void)
{
    RomDriver_SF_Ctrl_AES_Disable();
420144f4:	210197b7          	lui	a5,0x21019
420144f8:	a447a783          	lw	a5,-1468(a5) # 21018a44 <StackSize+0x21017a44>
420144fc:	8782                	jr	a5

420144fe <SF_Ctrl_Is_AES_Enable>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    uint8_t
    SF_Ctrl_Is_AES_Enable(void)
{
    return RomDriver_SF_Ctrl_Is_AES_Enable();
420144fe:	210197b7          	lui	a5,0x21019
42014502:	a487a783          	lw	a5,-1464(a5) # 21018a48 <StackSize+0x21017a48>
42014506:	8782                	jr	a5

42014508 <SF_Cfg_Get_Flash_Cfg_Need_Lock>:

__ALWAYS_INLINE ATTR_TCM_SECTION
    BL_Err_Type
    SF_Cfg_Get_Flash_Cfg_Need_Lock(uint32_t flashID, SPI_Flash_Cfg_Type *pFlashCfg)
{
    return RomDriver_SF_Cfg_Get_Flash_Cfg_Need_Lock(flashID, pFlashCfg);
42014508:	210197b7          	lui	a5,0x21019
4201450c:	a747a783          	lw	a5,-1420(a5) # 21018a74 <StackSize+0x21017a74>
42014510:	8782                	jr	a5

42014512 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext>:
BL_Err_Type ATTR_TCM_SECTION SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext(uint32_t flashID, SPI_Flash_Cfg_Type *pFlashCfg)
{
    uint32_t i;
    uint8_t buf[sizeof(SPI_Flash_Cfg_Type) + 8];
    uint32_t crc, *pCrc;
    char flashCfgMagic[] = "FCFG";
42014512:	474647b7          	lui	a5,0x47464
{
42014516:	7119                	addi	sp,sp,-128
    char flashCfgMagic[] = "FCFG";
42014518:	34678793          	addi	a5,a5,838 # 47464346 <__HeapLimit+0x5434346>
{
4201451c:	daa6                	sw	s1,116(sp)
4201451e:	de86                	sw	ra,124(sp)
42014520:	dca2                	sw	s0,120(sp)
    char flashCfgMagic[] = "FCFG";
42014522:	c63e                	sw	a5,12(sp)
42014524:	00010823          	sb	zero,16(sp)
{
42014528:	84ae                	mv	s1,a1

    if (flashID == 0) {
4201452a:	e11d                	bnez	a0,42014550 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x3e>
        XIP_SFlash_Read_Via_Cache_Need_Lock(8 + BL702_FLASH_XIP_BASE, buf, sizeof(SPI_Flash_Cfg_Type) + 8);
4201452c:	23000537          	lui	a0,0x23000
42014530:	05c00613          	li	a2,92
42014534:	084c                	addi	a1,sp,20
42014536:	0521                	addi	a0,a0,8
42014538:	3f9d                	jal	420144ae <XIP_SFlash_Read_Via_Cache_Need_Lock>

        if (BL702_MemCmp(buf, flashCfgMagic, 4) == 0) {
4201453a:	4611                	li	a2,4
4201453c:	006c                	addi	a1,sp,12
4201453e:	0848                	addi	a0,sp,20
42014540:	3799                	jal	42014486 <arch_memcmp>
42014542:	c92d                	beqz	a0,420145b4 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0xa2>
                return SUCCESS;
            }
        }
    }

    return ERROR;
42014544:	4505                	li	a0,1
}
42014546:	50f6                	lw	ra,124(sp)
42014548:	5466                	lw	s0,120(sp)
4201454a:	54d6                	lw	s1,116(sp)
4201454c:	6109                	addi	sp,sp,128
4201454e:	8082                	ret
42014550:	842a                	mv	s0,a0
        if (SF_Cfg_Get_Flash_Cfg_Need_Lock(flashID, pFlashCfg) == SUCCESS) {
42014552:	3f5d                	jal	42014508 <SF_Cfg_Get_Flash_Cfg_Need_Lock>
42014554:	e911                	bnez	a0,42014568 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x56>
            if ((flashID&0xFFFFFF) != 0x134051) {
42014556:	00841713          	slli	a4,s0,0x8
4201455a:	001347b7          	lui	a5,0x134
4201455e:	8321                	srli	a4,a4,0x8
42014560:	05178793          	addi	a5,a5,81 # 134051 <StackSize+0x133051>
42014564:	fef711e3          	bne	a4,a5,42014546 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x34>
42014568:	42014837          	lui	a6,0x42014
{
4201456c:	001346b7          	lui	a3,0x134
42014570:	6f080813          	addi	a6,a6,1776 # 420146f0 <flashInfos>
42014574:	05168693          	addi	a3,a3,81 # 134051 <StackSize+0x133051>
42014578:	00c80713          	addi	a4,a6,12
4201457c:	4781                	li	a5,0
        for (i = 0; i < sizeof(flashInfos) / sizeof(flashInfos[0]); i++) {
4201457e:	4649                	li	a2,18
            if (flashInfos[i].jedecID == flashID) {
42014580:	00d40963          	beq	s0,a3,42014592 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x80>
        for (i = 0; i < sizeof(flashInfos) / sizeof(flashInfos[0]); i++) {
42014584:	0785                	addi	a5,a5,1
42014586:	fac78fe3          	beq	a5,a2,42014544 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x32>
            if (flashInfos[i].jedecID == flashID) {
4201458a:	4314                	lw	a3,0(a4)
4201458c:	0731                	addi	a4,a4,12
4201458e:	fed41be3          	bne	s0,a3,42014584 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x72>
                BL702_MemCpy_Fast(pFlashCfg, flashInfos[i].cfg, sizeof(SPI_Flash_Cfg_Type));
42014592:	00179713          	slli	a4,a5,0x1
42014596:	97ba                	add	a5,a5,a4
42014598:	078a                	slli	a5,a5,0x2
4201459a:	983e                	add	a6,a6,a5
4201459c:	00882583          	lw	a1,8(a6)
420145a0:	8526                	mv	a0,s1
420145a2:	05400613          	li	a2,84
420145a6:	3dd9                	jal	4201447c <arch_memcpy_fast>
}
420145a8:	50f6                	lw	ra,124(sp)
420145aa:	5466                	lw	s0,120(sp)
420145ac:	54d6                	lw	s1,116(sp)
                return SUCCESS;
420145ae:	4501                	li	a0,0
}
420145b0:	6109                	addi	sp,sp,128
420145b2:	8082                	ret
            crc = BFLB_Soft_CRC32((uint8_t *)buf + 4, sizeof(SPI_Flash_Cfg_Type));
420145b4:	05400593          	li	a1,84
420145b8:	0828                	addi	a0,sp,24
420145ba:	3dd9                	jal	42014490 <BFLB_Soft_CRC32>
            if (*pCrc == crc) {
420145bc:	57b6                	lw	a5,108(sp)
420145be:	f8a793e3          	bne	a5,a0,42014544 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x32>
                BL702_MemCpy_Fast(pFlashCfg, (uint8_t *)buf + 4, sizeof(SPI_Flash_Cfg_Type));
420145c2:	05400613          	li	a2,84
420145c6:	082c                	addi	a1,sp,24
420145c8:	8526                	mv	a0,s1
420145ca:	3d4d                	jal	4201447c <arch_memcpy_fast>
                return SUCCESS;
420145cc:	4501                	li	a0,0
420145ce:	bfa5                	j	42014546 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x34>

420145d0 <XIP_SFlash_Opt_Enter>:
 *
 * @return None
 *
*******************************************************************************/
void ATTR_TCM_SECTION XIP_SFlash_Opt_Enter(void)
{
420145d0:	1141                	addi	sp,sp,-16
420145d2:	c606                	sw	ra,12(sp)
    aesEnable = SF_Ctrl_Is_AES_Enable();
420145d4:	372d                	jal	420144fe <SF_Ctrl_Is_AES_Enable>
420145d6:	10a18e23          	sb	a0,284(gp) # 4201691c <aesEnable>

    if (aesEnable) {
420145da:	e501                	bnez	a0,420145e2 <XIP_SFlash_Opt_Enter+0x12>
        SF_Ctrl_AES_Disable();
    }
}
420145dc:	40b2                	lw	ra,12(sp)
420145de:	0141                	addi	sp,sp,16
420145e0:	8082                	ret
420145e2:	40b2                	lw	ra,12(sp)
420145e4:	0141                	addi	sp,sp,16
        SF_Ctrl_AES_Disable();
420145e6:	b739                	j	420144f4 <SF_Ctrl_AES_Disable>

420145e8 <XIP_SFlash_Opt_Exit>:
 * @return None
 *
*******************************************************************************/
void ATTR_TCM_SECTION XIP_SFlash_Opt_Exit(void)
{
    if (aesEnable) {
420145e8:	11c1c783          	lbu	a5,284(gp) # 4201691c <aesEnable>
420145ec:	e391                	bnez	a5,420145f0 <XIP_SFlash_Opt_Exit+0x8>
        SF_Ctrl_AES_Enable();
    }
}
420145ee:	8082                	ret
        SF_Ctrl_AES_Enable();
420145f0:	bded                	j	420144ea <SF_Ctrl_AES_Enable>
	...

420145f4 <flashCfg_MX_KH25>:
420145f4:	0011 0101 9966 03ff 009f 009f c204 0100     ....f...........
42014604:	20c7 d852 0206 0032 010b 010b 013b 00bb     . R...2.....;...
42014614:	016b 02eb 02eb 5002 0100 0100 0001 0100     k......P........
42014624:	0101 01ab 0005 0000 0001 0000 ff38 ff20     ............8. .
42014634:	0377 4002 0377 f002 012c 04b0 04b0 0005     w..@w...,.......
42014644:	80e8 0014                                   ....

42014648 <flashCfg_FM_Q80>:
42014648:	0104 0101 9966 03ff 009f 009f c804 0100     ....f...........
42014658:	20c7 d852 0206 0032 010b 010b 013b 00bb     . R...2.....;...
42014668:	016b 02eb 02eb 5002 0100 0100 0001 0100     k......P........
42014678:	0102 01ab 3505 0000 0101 0000 ff38 ffa0     .....5......8...
42014688:	0377 4002 0377 f002 012c 04b0 04b0 0005     w..@w...,.......
42014698:	80e8 0014                                   ....

4201469c <flashCfg_Winb_16JV>:
4201469c:	0104 0101 9966 03ff 009f 009f ef04 0100     ....f...........
420146ac:	20c7 d852 0206 0032 010b 010b 013b 00bb     . R...2.....;...
420146bc:	016b 02eb 02eb 5002 0100 0100 0001 0100     k......P........
420146cc:	0101 01ab 3505 0000 3101 0000 ff38 ff20     .....5...1..8. .
420146dc:	0377 4002 0377 f002 0190 0640 07d0 0005     w..@w.....@.....
420146ec:	80e8 0003                                   ....

420146f0 <flashInfos>:
420146f0:	4051 0013 49c0 4201 47c8 4201 20c2 0013     Q@...I.B.G.B. ..
42014700:	49d0 4201 45f4 4201 20c2 0014 49e0 4201     .I.B.E.B. ...I.B
42014710:	45f4 4201 20c2 0015 49f0 4201 45f4 4201     .E.B. ...I.B.E.B
42014720:	40a1 0014 4a00 4201 4648 4201 70ef 0015     .@...J.BHF.B.p..
42014730:	4a10 4201 469c 4201 70ef 0018 4a20 4201     .J.B.F.B.p.. J.B
42014740:	469c 4201 605e 0015 4a34 4201 469c 4201     .F.B^`..4J.B.F.B
42014750:	4020 0014 4a44 4201 469c 4201 4020 0015      @..DJ.B.F.B @..
42014760:	4a54 4201 469c 4201 4020 0016 4a64 4201     TJ.B.F.B @..dJ.B
42014770:	469c 4201 4020 0017 4a74 4201 469c 4201     .F.B @..tJ.B.F.B
42014780:	325e 0013 4a84 4201 45f4 4201 325e 0014     ^2...J.B.E.B^2..
42014790:	4a94 4201 45f4 4201 405e 0015 4aa4 4201     .J.B.E.B^@...J.B
420147a0:	469c 4201 405e 0016 4ab4 4201 469c 4201     .F.B^@...J.B.F.B
420147b0:	60eb 0015 4ac4 4201 4648 4201 345e 0015     .`...J.BHF.B^4..
420147c0:	4ad8 4201 469c 4201                         .J.B.F.B

420147c8 <flashCfg_Gd_Md_40D>:
420147c8:	0011 3f01 9966 03ff 009f 009f 5104 0100     ...?f........Q..
420147d8:	20c7 d852 0206 0032 010b 010b 013b 00bb     . R...2.....;...
420147e8:	016b 02eb 02eb 5002 0100 0100 0001 0100     k......P........
420147f8:	0102 01ab 3505 0000 0101 0000 ff38 ffa0     .....5......8...
42014808:	0377 4002 0377 f002 012c 04b0 04b0 0005     w..@w...,.......
42014818:	4e20 0014                                    N..

4201481c <GLB_Set_System_CLK_Div>:
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
4201481c:	400007b7          	lui	a5,0x40000
42014820:	4398                	lw	a4,0(a5)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_HCLK_DIV, hclkDiv);
42014822:	76c1                	lui	a3,0xffff0
42014824:	0ff68693          	addi	a3,a3,255 # ffff00ff <__HeapLimit+0xbdfc00ff>
42014828:	8f75                	and	a4,a4,a3
4201482a:	0522                	slli	a0,a0,0x8
4201482c:	8d59                	or	a0,a0,a4
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, GLB_REG_BCLK_DIV, bclkDiv);
4201482e:	ff010737          	lui	a4,0xff010
42014832:	177d                	addi	a4,a4,-1
42014834:	8d79                	and	a0,a0,a4
42014836:	05c2                	slli	a1,a1,0x10
42014838:	8d4d                	or	a0,a0,a1
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG0, tmpVal);
4201483a:	c388                	sw	a0,0(a5)
    GLB_REG_BCLK_DIS_TRUE;
4201483c:	40001737          	lui	a4,0x40001
42014840:	4685                	li	a3,1
42014842:	fed72e23          	sw	a3,-4(a4) # 40000ffc <__dtcm_load_addr+0x1cff3080>
    GLB_REG_BCLK_DIS_FALSE;
42014846:	fe072e23          	sw	zero,-4(a4)
    GLB_CLK_SET_DUMMY_WAIT;
4201484a:	0001                	nop
4201484c:	0001                	nop
4201484e:	0001                	nop
42014850:	0001                	nop
42014852:	0001                	nop
42014854:	0001                	nop
42014856:	0001                	nop
42014858:	0001                	nop
    tmpVal = BL_RD_REG(GLB_BASE, GLB_CLK_CFG0);
4201485a:	4398                	lw	a4,0(a5)
    tmpVal = BL_SET_REG_BIT(tmpVal, GLB_REG_BCLK_EN);
4201485c:	00c76713          	ori	a4,a4,12
    BL_WR_REG(GLB_BASE, GLB_CLK_CFG0, tmpVal);
42014860:	c398                	sw	a4,0(a5)
    GLB_CLK_SET_DUMMY_WAIT;
42014862:	0001                	nop
42014864:	0001                	nop
42014866:	0001                	nop
42014868:	0001                	nop
4201486a:	0001                	nop
4201486c:	0001                	nop
4201486e:	0001                	nop
42014870:	0001                	nop
}
42014872:	4501                	li	a0,0
42014874:	8082                	ret

42014876 <HBN_32K_Sel>:
{
42014876:	1141                	addi	sp,sp,-16
42014878:	c422                	sw	s0,8(sp)
4201487a:	c606                	sw	ra,12(sp)
4201487c:	842a                	mv	s0,a0
    HBN_Trim_RC32K();
4201487e:	220d                	jal	420149a0 <HBN_Trim_RC32K>
    tmpVal = BL_RD_REG(HBN_BASE, HBN_GLB);
42014880:	4000f6b7          	lui	a3,0x4000f
42014884:	5a98                	lw	a4,48(a3)
}
42014886:	40b2                	lw	ra,12(sp)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_F32K_SEL, clkType);
42014888:	00341793          	slli	a5,s0,0x3
4201488c:	9b1d                	andi	a4,a4,-25
}
4201488e:	4422                	lw	s0,8(sp)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, HBN_F32K_SEL, clkType);
42014890:	8fd9                	or	a5,a5,a4
    BL_WR_REG(HBN_BASE, HBN_GLB, tmpVal);
42014892:	da9c                	sw	a5,48(a3)
}
42014894:	4501                	li	a0,0
42014896:	0141                	addi	sp,sp,16
42014898:	8082                	ret

4201489a <HBN_Power_Off_Xtal_32K>:
    tmpVal = BL_RD_REG(HBN_BASE, HBN_XTAL32K);
4201489a:	4000f6b7          	lui	a3,0x4000f
4201489e:	2046a783          	lw	a5,516(a3) # 4000f204 <__dtcm_load_addr+0x1d001288>
    tmpVal = BL_CLR_REG_BIT(tmpVal, HBN_PU_XTAL32K_BUF);
420148a2:	fff40737          	lui	a4,0xfff40
420148a6:	177d                	addi	a4,a4,-1
420148a8:	8ff9                	and	a5,a5,a4
    BL_WR_REG(HBN_BASE, HBN_XTAL32K, tmpVal);
420148aa:	20f6a223          	sw	a5,516(a3)
}
420148ae:	4501                	li	a0,0
420148b0:	8082                	ret

420148b2 <PDS_Set_Audio_PLL_Freq>:
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_REFDIV_RATIO, 0x2);
    BL_WR_REG(PDS_BASE, PDS_CLKPLL_TOP_CTRL, tmpVal);

    /*set clkpll_sdmin as sdmin*/
    tmpVal = BL_RD_REG(PDS_BASE, PDS_CLKPLL_SDM);
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_SDMIN, (uint32_t)sdmin_table[audioPLLFreq % (sizeof(sdmin_table) / sizeof(sdmin_table[0]))]);
420148b2:	4795                	li	a5,5
420148b4:	02f577b3          	remu	a5,a0,a5
    uint32_t sdmin_table[] = { 0x374BC6, 0x32CCED, 0x32CCED, 0x6E978D, 0x6C0000 };
420148b8:	42015737          	lui	a4,0x42015
{
420148bc:	7179                	addi	sp,sp,-48
    uint32_t sdmin_table[] = { 0x374BC6, 0x32CCED, 0x32CCED, 0x6E978D, 0x6C0000 };
420148be:	9ac70713          	addi	a4,a4,-1620 # 420149ac <HBN_Trim_RC32K+0xc>
{
420148c2:	d04a                	sw	s2,32(sp)
    uint32_t sdmin_table[] = { 0x374BC6, 0x32CCED, 0x32CCED, 0x6E978D, 0x6C0000 };
420148c4:	434c                	lw	a1,4(a4)
420148c6:	4710                	lw	a2,8(a4)
420148c8:	4754                	lw	a3,12(a4)
{
420148ca:	892a                	mv	s2,a0
    uint32_t sdmin_table[] = { 0x374BC6, 0x32CCED, 0x32CCED, 0x6E978D, 0x6C0000 };
420148cc:	4308                	lw	a0,0(a4)
420148ce:	4b18                	lw	a4,16(a4)
420148d0:	c82e                	sw	a1,16(sp)
420148d2:	c62a                	sw	a0,12(sp)
420148d4:	ca32                	sw	a2,20(sp)
420148d6:	cc36                	sw	a3,24(sp)
420148d8:	ce3a                	sw	a4,28(sp)
{
420148da:	d422                	sw	s0,40(sp)
    tmpVal = BL_RD_REG(PDS_BASE, PDS_CLKPLL_TOP_CTRL);
420148dc:	4000e437          	lui	s0,0x4000e
420148e0:	40442703          	lw	a4,1028(s0) # 4000e404 <__dtcm_load_addr+0x1d000488>
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_REFDIV_RATIO, 0x2);
420148e4:	76fd                	lui	a3,0xfffff
420148e6:	0ff68693          	addi	a3,a3,255 # fffff0ff <__HeapLimit+0xbdfcf0ff>
420148ea:	8f75                	and	a4,a4,a3
{
420148ec:	d606                	sw	ra,44(sp)
420148ee:	d226                	sw	s1,36(sp)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_REFDIV_RATIO, 0x2);
420148f0:	20076713          	ori	a4,a4,512
    BL_WR_REG(PDS_BASE, PDS_CLKPLL_TOP_CTRL, tmpVal);
420148f4:	40e42223          	sw	a4,1028(s0)
    tmpVal = BL_RD_REG(PDS_BASE, PDS_CLKPLL_SDM);
420148f8:	41842703          	lw	a4,1048(s0)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_SDMIN, (uint32_t)sdmin_table[audioPLLFreq % (sizeof(sdmin_table) / sizeof(sdmin_table[0]))]);
420148fc:	ff0006b7          	lui	a3,0xff000
    tmpVal = BL_RD_REG(PDS_BASE, PDS_PU_RST_CLKPLL);

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_PU_CLKPLL_SFREG, 1);
    BL_WR_REG(PDS_BASE, PDS_PU_RST_CLKPLL, tmpVal);

    BL702_Delay_MS(10);
42014900:	4529                	li	a0,10
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_SDMIN, (uint32_t)sdmin_table[audioPLLFreq % (sizeof(sdmin_table) / sizeof(sdmin_table[0]))]);
42014902:	8f75                	and	a4,a4,a3
42014904:	1014                	addi	a3,sp,32
42014906:	078a                	slli	a5,a5,0x2
42014908:	97b6                	add	a5,a5,a3
4201490a:	fec7a783          	lw	a5,-20(a5) # 3fffffec <__dtcm_load_addr+0x1cff2070>
4201490e:	8fd9                	or	a5,a5,a4
    BL_WR_REG(PDS_BASE, PDS_CLKPLL_SDM, tmpVal);
42014910:	40f42c23          	sw	a5,1048(s0)
    tmpVal = BL_RD_REG(PDS_BASE, PDS_PU_RST_CLKPLL);
42014914:	40042483          	lw	s1,1024(s0)
    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_PU_CLKPLL_SFREG, 1);
42014918:	2004e793          	ori	a5,s1,512
    BL_WR_REG(PDS_BASE, PDS_PU_RST_CLKPLL, tmpVal);
4201491c:	40f42023          	sw	a5,1024(s0)
    BL702_Delay_MS(10);
42014920:	36a1                	jal	42014468 <BL702_Delay_MS>

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_PU_CLKPLL, 1);
42014922:	6004e793          	ori	a5,s1,1536
    BL_WR_REG(PDS_BASE, PDS_PU_RST_CLKPLL, tmpVal);
42014926:	40f42023          	sw	a5,1024(s0)

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_RESET_FBDV, 1);
4201492a:	6044e793          	ori	a5,s1,1540
    BL_WR_REG(PDS_BASE, PDS_PU_RST_CLKPLL, tmpVal);
4201492e:	98ed                	andi	s1,s1,-5
42014930:	40f42023          	sw	a5,1024(s0)

    BL702_Delay_MS(10);
42014934:	4529                	li	a0,10

    tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_RESET_FBDV, 0);
42014936:	6004e493          	ori	s1,s1,1536
    BL702_Delay_MS(10);
4201493a:	363d                	jal	42014468 <BL702_Delay_MS>
    BL_WR_REG(PDS_BASE, PDS_PU_RST_CLKPLL, tmpVal);
4201493c:	40942023          	sw	s1,1024(s0)

    /*set div for audio pll */
    tmpVal = BL_RD_REG(PDS_BASE, PDS_CLKPLL_TOP_CTRL);
42014940:	40442783          	lw	a5,1028(s0)

    if (audioPLLFreq != AUDIO_PLL_5644800_HZ) {
42014944:	4709                	li	a4,2
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_POSTDIV, 36);
42014946:	f807f793          	andi	a5,a5,-128
    if (audioPLLFreq != AUDIO_PLL_5644800_HZ) {
4201494a:	00e90f63          	beq	s2,a4,42014968 <PDS_Set_Audio_PLL_Freq+0xb6>
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_POSTDIV, 36);
4201494e:	0247e793          	ori	a5,a5,36
    }

    BL_WR_REG(PDS_BASE, PDS_CLKPLL_TOP_CTRL, tmpVal);

    return SUCCESS;
}
42014952:	50b2                	lw	ra,44(sp)
42014954:	5422                	lw	s0,40(sp)
    BL_WR_REG(PDS_BASE, PDS_CLKPLL_TOP_CTRL, tmpVal);
42014956:	4000e737          	lui	a4,0x4000e
4201495a:	40f72223          	sw	a5,1028(a4) # 4000e404 <__dtcm_load_addr+0x1d000488>
}
4201495e:	5492                	lw	s1,36(sp)
42014960:	5902                	lw	s2,32(sp)
42014962:	4501                	li	a0,0
42014964:	6145                	addi	sp,sp,48
42014966:	8082                	ret
        tmpVal = BL_SET_REG_BITS_VAL(tmpVal, PDS_CLKPLL_POSTDIV, 72);
42014968:	0487e793          	ori	a5,a5,72
4201496c:	b7dd                	j	42014952 <PDS_Set_Audio_PLL_Freq+0xa0>

4201496e <GLB_Get_Root_CLK_Sel>:
    return RomDriver_GLB_Get_Root_CLK_Sel();
4201496e:	210197b7          	lui	a5,0x21019
42014972:	8507a783          	lw	a5,-1968(a5) # 21018850 <StackSize+0x21017850>
42014976:	8782                	jr	a5

42014978 <GLB_Get_BCLK_Div>:
    return RomDriver_GLB_Get_BCLK_Div();
42014978:	210197b7          	lui	a5,0x21019
4201497c:	8587a783          	lw	a5,-1960(a5) # 21018858 <StackSize+0x21017858>
42014980:	8782                	jr	a5

42014982 <GLB_Get_HCLK_Div>:
    return RomDriver_GLB_Get_HCLK_Div();
42014982:	210197b7          	lui	a5,0x21019
42014986:	85c7a783          	lw	a5,-1956(a5) # 2101885c <StackSize+0x2101785c>
4201498a:	8782                	jr	a5

4201498c <GLB_Set_System_CLK>:
    return RomDriver_GLB_Set_System_CLK(xtalType, clkFreq);
4201498c:	210197b7          	lui	a5,0x21019
42014990:	8647a783          	lw	a5,-1948(a5) # 21018864 <StackSize+0x21017864>
42014994:	8782                	jr	a5

42014996 <PDS_Trim_RC32M>:
    return RomDriver_PDS_Trim_RC32M();
42014996:	210197b7          	lui	a5,0x21019
4201499a:	8e07a783          	lw	a5,-1824(a5) # 210188e0 <StackSize+0x210178e0>
4201499e:	8782                	jr	a5

420149a0 <HBN_Trim_RC32K>:
    return RomDriver_HBN_Trim_RC32K();
420149a0:	210197b7          	lui	a5,0x21019
420149a4:	9287a783          	lw	a5,-1752(a5) # 21018928 <StackSize+0x21017928>
420149a8:	8782                	jr	a5
420149aa:	0000                	unimp
420149ac:	4bc6                	lw	s7,80(sp)
420149ae:	cced0037          	lui	zero,0xcced0
420149b2:	0032                	c.slli	zero,0xc
420149b4:	cced                	beqz	s1,42014aae <HBN_Trim_RC32K+0x10e>
420149b6:	0032                	c.slli	zero,0xc
420149b8:	978d                	srai	a5,a5,0x23
420149ba:	006e                	c.slli	zero,0x1b
420149bc:	0000                	unimp
420149be:	006c                	addi	a1,sp,12
420149c0:	4d5f4447          	fmsub.h	fs0,ft10,fs5,fs1,rmm
420149c4:	3044                	fld	fs1,160(s0)
420149c6:	4434                	lw	a3,72(s0)
420149c8:	305f 5f34 3333      	0x33335f34305f
420149ce:	0000                	unimp
420149d0:	584d                	li	a6,-13
420149d2:	4b5f 3448 5f30      	0x5f3034484b5f
420149d8:	3430                	fld	fa2,104(s0)
420149da:	335f 0033 0000      	0x33335f
420149e0:	584d                	li	a6,-13
420149e2:	4b5f 3848 5f30      	0x5f3038484b5f
420149e8:	3830                	fld	fa2,112(s0)
420149ea:	335f 0033 0000      	0x33335f
420149f0:	584d                	li	a6,-13
420149f2:	4b5f 3148 5f36      	0x5f3631484b5f
420149f8:	3631                	jal	42014504 <SF_Ctrl_Is_AES_Enable+0x6>
420149fa:	335f 0033 0000      	0x33335f
42014a00:	4d46                	lw	s10,80(sp)
42014a02:	325f 5135 3038      	0x30385135325f
42014a08:	385f 5f30 3333      	0x33335f30385f
42014a0e:	0000                	unimp
42014a10:	626e6957          	0x626e6957
42014a14:	315f 4a36 5f56      	0x5f564a36315f
42014a1a:	3631                	jal	42014526 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x14>
42014a1c:	335f 0033 6957      	0x69570033335f
42014a22:	626e                	flw	ft4,216(sp)
42014a24:	315f 3832 564a      	0x564a3832315f
42014a2a:	315f 3832 335f      	0x335f3832315f
42014a30:	00000033          	add	zero,zero,zero
42014a34:	425a                	lw	tp,148(sp)
42014a36:	565f 3151 5f36      	0x5f363151565f
42014a3c:	3631                	jal	42014548 <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x36>
42014a3e:	335f 0033 0000      	0x33335f
42014a44:	4d58                	lw	a4,28(a0)
42014a46:	325f 5135 3848      	0x38485135325f
42014a4c:	5f30                	lw	a2,120(a4)
42014a4e:	3038                	fld	fa4,96(s0)
42014a50:	335f 0033 4d58      	0x4d580033335f
42014a56:	325f 5135 3148      	0x31485135325f
42014a5c:	5f36                	lw	t5,108(sp)
42014a5e:	3631                	jal	4201456a <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0x58>
42014a60:	335f 0033 4d58      	0x4d580033335f
42014a66:	325f 5135 3348      	0x33485135325f
42014a6c:	5f32                	lw	t5,44(sp)
42014a6e:	335f3233          	0x335f3233
42014a72:	4d580033          	0x4d580033
42014a76:	325f 5135 3648      	0x36485135325f
42014a7c:	5f34                	lw	a3,120(a4)
42014a7e:	3436                	fld	fs0,360(sp)
42014a80:	335f 0033 425a      	0x425a0033335f
42014a86:	445f 3034 5f42      	0x5f423034445f
42014a8c:	3038                	fld	fa4,96(s0)
42014a8e:	335f 0033 0000      	0x33335f
42014a94:	425a                	lw	tp,148(sp)
42014a96:	445f 3038 5f42      	0x5f423038445f
42014a9c:	3038                	fld	fa4,96(s0)
42014a9e:	335f 0033 0000      	0x33335f
42014aa4:	425a                	lw	tp,148(sp)
42014aa6:	325f 5135 3631      	0x36315135325f
42014aac:	5f42                	lw	t5,48(sp)
42014aae:	3531                	jal	420148ba <PDS_Set_Audio_PLL_Freq+0x8>
42014ab0:	335f 0033 425a      	0x425a0033335f
42014ab6:	325f 5135 3233      	0x32335135325f
42014abc:	5f42                	lw	t5,48(sp)
42014abe:	3631                	jal	420145ca <SF_Cfg_Get_Flash_Cfg_Need_Lock_Ext+0xb8>
42014ac0:	335f 0033 4854      	0x48540033335f
42014ac6:	325f 5135 3631      	0x36315135325f
42014acc:	4248                	lw	a0,4(a2)
42014ace:	315f 5f36 3333      	0x33335f36315f
42014ad4:	0000                	unimp
42014ad6:	0000                	unimp
42014ad8:	425a                	lw	tp,148(sp)
42014ada:	325f 5135 3631      	0x36315135325f
42014ae0:	5f41                	li	t5,-16
42014ae2:	3531                	jal	420148ee <PDS_Set_Audio_PLL_Freq+0x3c>
42014ae4:	335f 0033       	0x33335f
